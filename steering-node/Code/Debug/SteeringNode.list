
SteeringNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800e700  0800e700  0001e700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec84  0800ec84  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec84  0800ec84  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec84  0800ec84  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec84  0800ec84  0001ec84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec88  0800ec88  0001ec88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800ec8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032b0  2000009c  0800ed28  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000334c  0800ed28  0002334c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025e41  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055ab  00000000  00000000  00045f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc0  00000000  00000000  0004b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001712  00000000  00000000  0004d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000070a0  00000000  00000000  0004e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027391  00000000  00000000  00055a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f852  00000000  00000000  0007cdfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a28  00000000  00000000  0011c650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00125078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000009c 	.word	0x2000009c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e6e8 	.word	0x0800e6e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a0 	.word	0x200000a0
 800014c:	0800e6e8 	.word	0x0800e6e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2iz>:
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30f      	bcc.n	8000fbe <__aeabi_f2iz+0x2a>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d90d      	bls.n	8000fc4 <__aeabi_f2iz+0x30>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	bf18      	it	ne
 8000fba:	4240      	negne	r0, r0
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2iz+0x3a>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d105      	bne.n	8000fda <__aeabi_f2iz+0x46>
 8000fce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd2:	bf08      	it	eq
 8000fd4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f000 ff94 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f822 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f000 f978 	bl	80012e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff0:	f000 f91c 	bl	800122c <MX_DMA_Init>
  MX_CAN_Init();
 8000ff4:	f000 f862 	bl	80010bc <MX_CAN_Init>
  MX_I2C1_Init();
 8000ff8:	f000 f896 	bl	8001128 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ffc:	f000 f8c2 	bl	8001184 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001000:	f000 f8ea 	bl	80011d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001004:	f006 fa28 	bl	8007458 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <main+0x44>)
 800100a:	2100      	movs	r1, #0
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <main+0x48>)
 800100e:	f006 fa89 	bl	8007524 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <main+0x4c>)
 8001016:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	SyncPrintf_Init();
 8001018:	f00b fd2a 	bl	800ca70 <SyncPrintf_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800101c:	f006 fa4e 	bl	80074bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8001020:	e7fe      	b.n	8001020 <main+0x40>
 8001022:	bf00      	nop
 8001024:	0800e810 	.word	0x0800e810
 8001028:	080015c1 	.word	0x080015c1
 800102c:	20000354 	.word	0x20000354

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b090      	sub	sp, #64	; 0x40
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	2228      	movs	r2, #40	; 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f00c fb04 	bl	800d64c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800106e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0318 	add.w	r3, r7, #24
 8001078:	4618      	mov	r0, r3
 800107a:	f004 f9c1 	bl	8005400 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001084:	f000 fb0c 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2102      	movs	r1, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f004 fc2e 	bl	8005904 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ae:	f000 faf7 	bl	80016a0 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3740      	adds	r7, #64	; 0x40
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_CAN_Init+0x64>)
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <MX_CAN_Init+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_CAN_Init+0x64>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_CAN_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_CAN_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_CAN_Init+0x64>)
 80010da:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80010de:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_CAN_Init+0x64>)
 80010e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80010e6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <MX_CAN_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_CAN_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <MX_CAN_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_CAN_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <MX_CAN_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_CAN_Init+0x64>)
 8001108:	2201      	movs	r2, #1
 800110a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_CAN_Init+0x64>)
 800110e:	f000 ff31 	bl	8001f74 <HAL_CAN_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001118:	f000 fac2 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200000b8 	.word	0x200000b8
 8001124:	40006400 	.word	0x40006400

08001128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_I2C1_Init+0x50>)
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <MX_I2C1_Init+0x54>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_I2C1_Init+0x50>)
 8001134:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_I2C1_Init+0x58>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_I2C1_Init+0x50>)
 8001146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_I2C1_Init+0x50>)
 8001166:	f002 fb47 	bl	80037f8 <HAL_I2C_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001170:	f000 fa96 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000011c 	.word	0x2000011c
 800117c:	40005400 	.word	0x40005400
 8001180:	00061a80 	.word	0x00061a80

08001184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_USART1_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011bc:	f004 ffaa 	bl	8006114 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 fa6b 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000170 	.word	0x20000170
 80011d4:	40013800 	.word	0x40013800

080011d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f004 ff80 	bl	8006114 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 fa41 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200001b8 	.word	0x200001b8
 8001228:	40004400 	.word	0x40004400

0800122c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6153      	str	r3, [r2, #20]
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <MX_DMA_Init+0xa8>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_DMA_Init+0xac>)
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <MX_DMA_Init+0xb0>)
 800124e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <MX_DMA_Init+0xac>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_DMA_Init+0xac>)
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_DMA_Init+0xac>)
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_DMA_Init+0xac>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_DMA_Init+0xac>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_DMA_Init+0xac>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_DMA_Init+0xac>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 800127c:	4816      	ldr	r0, [pc, #88]	; (80012d8 <MX_DMA_Init+0xac>)
 800127e:	f001 fe4b 	bl	8002f18 <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_DMA_Init+0x60>
  {
    Error_Handler( );
 8001288:	f000 fa0a 	bl	80016a0 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2105      	movs	r1, #5
 8001290:	200e      	movs	r0, #14
 8001292:	f001 fe16 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001296:	200e      	movs	r0, #14
 8001298:	f001 fe2f 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2105      	movs	r1, #5
 80012a0:	200f      	movs	r0, #15
 80012a2:	f001 fe0e 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012a6:	200f      	movs	r0, #15
 80012a8:	f001 fe27 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2105      	movs	r1, #5
 80012b0:	2010      	movs	r0, #16
 80012b2:	f001 fe06 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012b6:	2010      	movs	r0, #16
 80012b8:	f001 fe1f 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2105      	movs	r1, #5
 80012c0:	2011      	movs	r0, #17
 80012c2:	f001 fdfe 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012c6:	2011      	movs	r0, #17
 80012c8:	f001 fe17 	bl	8002efa <HAL_NVIC_EnableIRQ>

}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	20000310 	.word	0x20000310
 80012dc:	40020008 	.word	0x40020008

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <MX_GPIO_Init+0x100>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a39      	ldr	r2, [pc, #228]	; (80013e0 <MX_GPIO_Init+0x100>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <MX_GPIO_Init+0x100>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <MX_GPIO_Init+0x100>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <MX_GPIO_Init+0x100>)
 8001312:	f043 0320 	orr.w	r3, r3, #32
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <MX_GPIO_Init+0x100>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0320 	and.w	r3, r3, #32
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <MX_GPIO_Init+0x100>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <MX_GPIO_Init+0x100>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <MX_GPIO_Init+0x100>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <MX_GPIO_Init+0x100>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <MX_GPIO_Init+0x100>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MX_GPIO_Init+0x100>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blinker_GPIO_Port, Blinker_Pin, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	4822      	ldr	r0, [pc, #136]	; (80013e4 <MX_GPIO_Init+0x104>)
 800135c:	f002 fa1a 	bl	8003794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f640 4102 	movw	r1, #3074	; 0xc02
 8001366:	4820      	ldr	r0, [pc, #128]	; (80013e8 <MX_GPIO_Init+0x108>)
 8001368:	f002 fa14 	bl	8003794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blinker_Pin */
  GPIO_InitStruct.Pin = Blinker_Pin;
 800136c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blinker_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	4817      	ldr	r0, [pc, #92]	; (80013e4 <MX_GPIO_Init+0x104>)
 8001386:	f002 f881 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_2_Pin;
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_2_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_GPIO_Init+0x10c>)
 800139e:	f002 f875 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_GPIO_Init+0x108>)
 80013b6:	f002 f869 	bl	800348c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 80013ba:	f640 4302 	movw	r3, #3074	; 0xc02
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_GPIO_Init+0x108>)
 80013d4:	f002 f85a 	bl	800348c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40010800 	.word	0x40010800

080013f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	if (Ezi_UART.huart == huart) {
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_UART_RxCpltCallback+0x20>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d102      	bne.n	8001408 <HAL_UART_RxCpltCallback+0x18>
		UART_OS_RxCplt_CB(&Ezi_UART);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <HAL_UART_RxCpltCallback+0x20>)
 8001404:	f00b fc6b 	bl	800ccde <UART_OS_RxCplt_CB>
	}
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000358 	.word	0x20000358

08001414 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if (Ezi_UART.huart == huart) {
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_UART_TxCpltCallback+0x20>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d102      	bne.n	800142c <HAL_UART_TxCpltCallback+0x18>
		UART_OS_TxCplt_CB(&Ezi_UART);
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <HAL_UART_TxCpltCallback+0x20>)
 8001428:	f00b fc67 	bl	800ccfa <UART_OS_TxCplt_CB>
	}
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000358 	.word	0x20000358

08001438 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
	if (Ezi_UART.huart == huart) {
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_UARTEx_RxEventCallback+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	429a      	cmp	r2, r3
 800144c:	d104      	bne.n	8001458 <HAL_UARTEx_RxEventCallback+0x20>
		UART_OS_RcvToIdle_CB(&Ezi_UART, Size);
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	4619      	mov	r1, r3
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <HAL_UARTEx_RxEventCallback+0x28>)
 8001454:	f00b fc30 	bl	800ccb8 <UART_OS_RcvToIdle_CB>
	}
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000358 	.word	0x20000358

08001464 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_I2C_MemRxCpltCallback+0x20>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	d102      	bne.n	800147c <HAL_I2C_MemRxCpltCallback+0x18>
		I2C_OS_MEM_RxCpltCB(&mainI2C);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001478:	f00b fade 	bl	800ca38 <I2C_OS_MEM_RxCpltCB>
	}
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000036c 	.word	0x2000036c

08001488 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_I2C_MemTxCpltCallback+0x20>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	429a      	cmp	r2, r3
 8001498:	d102      	bne.n	80014a0 <HAL_I2C_MemTxCpltCallback+0x18>
		I2C_OS_MEM_TxCpltCB(&mainI2C);
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <HAL_I2C_MemTxCpltCallback+0x20>)
 800149c:	f00b fada 	bl	800ca54 <I2C_OS_MEM_TxCpltCB>
	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000036c 	.word	0x2000036c

080014ac <CAN_TxCallback>:

void CAN_TxCallback(CAN_HandleTypeDef *hcan) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <CAN_TxCallback+0x20>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d102      	bne.n	80014c4 <CAN_TxCallback+0x18>
		CAN_OS_TxCplt_CB(&CANmain);
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <CAN_TxCallback+0x20>)
 80014c0:	f00b fa2e 	bl	800c920 <CAN_OS_TxCplt_CB>
	}
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000390 	.word	0x20000390

080014d0 <CAN_RxFifo0Callback>:

void CAN_RxFifo0Callback(CAN_HandleTypeDef *hcan) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <CAN_RxFifo0Callback+0x20>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d102      	bne.n	80014e8 <CAN_RxFifo0Callback+0x18>
		CAN_OS_RxFifo0Cplt_CB(&CANmain);
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <CAN_RxFifo0Callback+0x20>)
 80014e4:	f00b fa04 	bl	800c8f0 <CAN_OS_RxFifo0Cplt_CB>
	}
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000390 	.word	0x20000390

080014f4 <CANFrame_RcvDoneHandler>:

void CANFrame_RcvDoneHandler(CANFrame_RxHeaderTypedef *CANFrame_RxHeader,
		uint8_t *str) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	uint8_t strLen = CANFrame_RxHeader->DataLen;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t ID;
	char Data[50];
	float Angle;
	int res = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	653b      	str	r3, [r7, #80]	; 0x50
	char strAngle[10];
	if (str[0] != '#' || str[strLen - 1] != '\n') {
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b23      	cmp	r3, #35	; 0x23
 8001510:	d145      	bne.n	800159e <CANFrame_RcvDoneHandler+0xaa>
 8001512:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001516:	3b01      	subs	r3, #1
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b0a      	cmp	r3, #10
 8001520:	d13d      	bne.n	800159e <CANFrame_RcvDoneHandler+0xaa>
		return;
	}

	if (DataPack_Split((char*) str, &ID, Data) != 0) {
 8001522:	f107 021c 	add.w	r2, r7, #28
 8001526:	f107 034f 	add.w	r3, r7, #79	; 0x4f
 800152a:	4619      	mov	r1, r3
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f00b fc2d 	bl	800cd8c <DataPack_Split>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d134      	bne.n	80015a2 <CANFrame_RcvDoneHandler+0xae>
		return;
	}

	switch (ID) {
 8001538:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800153c:	2b04      	cmp	r3, #4
 800153e:	d132      	bne.n	80015a6 <CANFrame_RcvDoneHandler+0xb2>
	case 4:
		res = DataPack_GetSteerAngle(Data, &Angle);
 8001540:	f107 0218 	add.w	r2, r7, #24
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f00b fc5a 	bl	800ce04 <DataPack_GetSteerAngle>
 8001550:	6538      	str	r0, [r7, #80]	; 0x50
		if (res != 0)
 8001552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001554:	2b00      	cmp	r3, #0
 8001556:	d128      	bne.n	80015aa <CANFrame_RcvDoneHandler+0xb6>
			return;
		FloatToStr(Angle, strAngle, 3);
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	f107 010c 	add.w	r1, r7, #12
 800155e:	2203      	movs	r2, #3
 8001560:	4618      	mov	r0, r3
 8001562:	f00b fce5 	bl	800cf30 <FloatToStr>
		SyncPrintf("Ang %s \r\n", strAngle);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <CANFrame_RcvDoneHandler+0xc0>)
 800156e:	f00b fa8d 	bl	800ca8c <SyncPrintf>
		Wheel_SetAngle_ABS(&Steering,-1.0 *Angle);
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff57 	bl	8000428 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff f9e3 	bl	800094c <__aeabi_d2f>
 8001586:	4603      	mov	r3, r0
 8001588:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800158c:	4619      	mov	r1, r3
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <CANFrame_RcvDoneHandler+0xc4>)
 8001590:	f00a fa26 	bl	800b9e0 <Wheel_SetAngle_ABS>
		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8001594:	2102      	movs	r1, #2
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <CANFrame_RcvDoneHandler+0xc8>)
 8001598:	f002 f914 	bl	80037c4 <HAL_GPIO_TogglePin>
		break;
 800159c:	e006      	b.n	80015ac <CANFrame_RcvDoneHandler+0xb8>
		return;
 800159e:	bf00      	nop
 80015a0:	e004      	b.n	80015ac <CANFrame_RcvDoneHandler+0xb8>
		return;
 80015a2:	bf00      	nop
 80015a4:	e002      	b.n	80015ac <CANFrame_RcvDoneHandler+0xb8>
	default:
		break;
 80015a6:	bf00      	nop
 80015a8:	e000      	b.n	80015ac <CANFrame_RcvDoneHandler+0xb8>
			return;
 80015aa:	bf00      	nop
	}
}
 80015ac:	3758      	adds	r7, #88	; 0x58
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800e718 	.word	0x0800e718
 80015b8:	20000378 	.word	0x20000378
 80015bc:	40010c00 	.word	0x40010c00

080015c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	UART_OS_Init(&Ezi_UART, &huart2);
 80015c8:	491e      	ldr	r1, [pc, #120]	; (8001644 <StartDefaultTask+0x84>)
 80015ca:	481f      	ldr	r0, [pc, #124]	; (8001648 <StartDefaultTask+0x88>)
 80015cc:	f00b faa2 	bl	800cb14 <UART_OS_Init>
	I2C_OS_Init(&mainI2C, &hi2c1);
 80015d0:	491e      	ldr	r1, [pc, #120]	; (800164c <StartDefaultTask+0x8c>)
 80015d2:	481f      	ldr	r0, [pc, #124]	; (8001650 <StartDefaultTask+0x90>)
 80015d4:	f00b fa15 	bl	800ca02 <I2C_OS_Init>
	CAN_OS_Init(&CANmain, &hcan);
 80015d8:	491e      	ldr	r1, [pc, #120]	; (8001654 <StartDefaultTask+0x94>)
 80015da:	481f      	ldr	r0, [pc, #124]	; (8001658 <StartDefaultTask+0x98>)
 80015dc:	f00b f8ca 	bl	800c774 <CAN_OS_Init>
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateTxCB_ID, CAN_TxCallback);
 80015e0:	4a1e      	ldr	r2, [pc, #120]	; (800165c <StartDefaultTask+0x9c>)
 80015e2:	2100      	movs	r1, #0
 80015e4:	481c      	ldr	r0, [pc, #112]	; (8001658 <StartDefaultTask+0x98>)
 80015e6:	f00b f9a8 	bl	800c93a <CAN_OS_RegisterCB>
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateRxFifo0_ID, CAN_RxFifo0Callback);
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <StartDefaultTask+0xa0>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	481a      	ldr	r0, [pc, #104]	; (8001658 <StartDefaultTask+0x98>)
 80015f0:	f00b f9a3 	bl	800c93a <CAN_OS_RegisterCB>

	CANFrame_Init(&CANFrame_Handler, &CANmain, CANFRAME_STEERING_ID,
 80015f4:	2300      	movs	r3, #0
 80015f6:	2204      	movs	r2, #4
 80015f8:	4917      	ldr	r1, [pc, #92]	; (8001658 <StartDefaultTask+0x98>)
 80015fa:	481a      	ldr	r0, [pc, #104]	; (8001664 <StartDefaultTask+0xa4>)
 80015fc:	f00b f82e 	bl	800c65c <CANFrame_Init>
			CAN_RX_FIFO0);
	CANFrame_RegCB(&CANFrame_Handler, CANFRAME_RCVCPLT_CB_ID,
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <StartDefaultTask+0xa8>)
 8001602:	2101      	movs	r1, #1
 8001604:	4817      	ldr	r0, [pc, #92]	; (8001664 <StartDefaultTask+0xa4>)
 8001606:	f00b f867 	bl	800c6d8 <CANFrame_RegCB>
				CANFrame_RcvDoneHandler);
	CAN_OS_Start(&CANmain);
 800160a:	4813      	ldr	r0, [pc, #76]	; (8001658 <StartDefaultTask+0x98>)
 800160c:	f00b f8f0 	bl	800c7f0 <CAN_OS_Start>
//	PowerPublisher_Init(&EZIPowerPub, &INA219_EZI, &CANFrame_Handler, 50);

//	PowerPublisher_SetName(&EZIPowerPub, "MOTORPWR");
//	PowerPublisher_SetName(&mainPowerPub, "MAINPWR");

	Wheel_Init(&Steering, &Ezi_UART);
 8001610:	490d      	ldr	r1, [pc, #52]	; (8001648 <StartDefaultTask+0x88>)
 8001612:	4816      	ldr	r0, [pc, #88]	; (800166c <StartDefaultTask+0xac>)
 8001614:	f00a f9b4 	bl	800b980 <Wheel_Init>
	Wheel_setLimit(&Steering, 25, 25);
 8001618:	4a15      	ldr	r2, [pc, #84]	; (8001670 <StartDefaultTask+0xb0>)
 800161a:	4915      	ldr	r1, [pc, #84]	; (8001670 <StartDefaultTask+0xb0>)
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <StartDefaultTask+0xac>)
 800161e:	f00a f9cb 	bl	800b9b8 <Wheel_setLimit>

//	PowerPublisher_Start(&EZIPowerPub, 1);
//	PowerPublisher_Start(&mainPowerPub, 1);

//	TestTask = osThreadNew(testTask, 0, &tesTask_attributes);
	osThreadSetPriority(defaultTaskHandle, osPriorityBelowNormal);
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <StartDefaultTask+0xb4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2110      	movs	r1, #16
 8001628:	4618      	mov	r0, r3
 800162a:	f006 f825 	bl	8007678 <osThreadSetPriority>
//		Wheel_SetAngle_ABS(&Steering, 20);
//		osDelay(5000);
//		Wheel_SetAngle_ABS(&Steering, 0);
//				osDelay(5000);
//		Wheel_SetAngle_ABS(&Steering, -20);
		GPIO_TogglePin(Blinker);
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <StartDefaultTask+0xb8>)
 8001630:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001634:	f00b f9d5 	bl	800c9e2 <GPIO_TogglePin>
		osDelay(1000);
 8001638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800163c:	f006 f858 	bl	80076f0 <osDelay>
		GPIO_TogglePin(Blinker);
 8001640:	e7f5      	b.n	800162e <StartDefaultTask+0x6e>
 8001642:	bf00      	nop
 8001644:	200001b8 	.word	0x200001b8
 8001648:	20000358 	.word	0x20000358
 800164c:	2000011c 	.word	0x2000011c
 8001650:	2000036c 	.word	0x2000036c
 8001654:	200000b8 	.word	0x200000b8
 8001658:	20000390 	.word	0x20000390
 800165c:	080014ad 	.word	0x080014ad
 8001660:	080014d1 	.word	0x080014d1
 8001664:	200003a0 	.word	0x200003a0
 8001668:	080014f5 	.word	0x080014f5
 800166c:	20000378 	.word	0x20000378
 8001670:	41c80000 	.word	0x41c80000
 8001674:	20000354 	.word	0x20000354
 8001678:	20000000 	.word	0x20000000

0800167c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168e:	f000 fc55 	bl	8001f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40000800 	.word	0x40000800

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_MspInit+0x68>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_MspInit+0x68>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_MspInit+0x68>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_MspInit+0x68>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a11      	ldr	r2, [pc, #68]	; (8001714 <HAL_MspInit+0x68>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_MspInit+0x68>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	210f      	movs	r1, #15
 80016e6:	f06f 0001 	mvn.w	r0, #1
 80016ea:	f001 fbea 	bl	8002ec2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_MspInit+0x6c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_MspInit+0x6c>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000

0800171c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <HAL_CAN_MspInit+0xcc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d151      	bne.n	80017e0 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_CAN_MspInit+0xd0>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	4a2a      	ldr	r2, [pc, #168]	; (80017ec <HAL_CAN_MspInit+0xd0>)
 8001742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001746:	61d3      	str	r3, [r2, #28]
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_CAN_MspInit+0xd0>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_CAN_MspInit+0xd0>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_CAN_MspInit+0xd0>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_CAN_MspInit+0xd0>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800176c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4619      	mov	r1, r3
 8001780:	481b      	ldr	r0, [pc, #108]	; (80017f0 <HAL_CAN_MspInit+0xd4>)
 8001782:	f001 fe83 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4815      	ldr	r0, [pc, #84]	; (80017f0 <HAL_CAN_MspInit+0xd4>)
 800179c:	f001 fe76 	bl	800348c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	2013      	movs	r0, #19
 80017a6:	f001 fb8c 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80017aa:	2013      	movs	r0, #19
 80017ac:	f001 fba5 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2105      	movs	r1, #5
 80017b4:	2014      	movs	r0, #20
 80017b6:	f001 fb84 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80017ba:	2014      	movs	r0, #20
 80017bc:	f001 fb9d 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2105      	movs	r1, #5
 80017c4:	2015      	movs	r0, #21
 80017c6:	f001 fb7c 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80017ca:	2015      	movs	r0, #21
 80017cc:	f001 fb95 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	2016      	movs	r0, #22
 80017d6:	f001 fb74 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80017da:	2016      	movs	r0, #22
 80017dc:	f001 fb8d 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40006400 	.word	0x40006400
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800

080017f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_I2C_MspInit+0x90>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d133      	bne.n	800187c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_I2C_MspInit+0x94>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001830:	2312      	movs	r3, #18
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	4619      	mov	r1, r3
 800183e:	4813      	ldr	r0, [pc, #76]	; (800188c <HAL_I2C_MspInit+0x98>)
 8001840:	f001 fe24 	bl	800348c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_I2C_MspInit+0x94>)
 800184a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184e:	61d3      	str	r3, [r2, #28]
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_I2C_MspInit+0x94>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2105      	movs	r1, #5
 8001860:	201f      	movs	r0, #31
 8001862:	f001 fb2e 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001866:	201f      	movs	r0, #31
 8001868:	f001 fb47 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2105      	movs	r1, #5
 8001870:	2020      	movs	r0, #32
 8001872:	f001 fb26 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001876:	2020      	movs	r0, #32
 8001878:	f001 fb3f 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40005400 	.word	0x40005400
 8001888:	40021000 	.word	0x40021000
 800188c:	40010c00 	.word	0x40010c00

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a8c      	ldr	r2, [pc, #560]	; (8001adc <HAL_UART_MspInit+0x24c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f040 8087 	bne.w	80019c0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b2:	4b8b      	ldr	r3, [pc, #556]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	4a8a      	ldr	r2, [pc, #552]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6193      	str	r3, [r2, #24]
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	4a84      	ldr	r2, [pc, #528]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6193      	str	r3, [r2, #24]
 80018d6:	4b82      	ldr	r3, [pc, #520]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	4619      	mov	r1, r3
 80018f6:	487b      	ldr	r0, [pc, #492]	; (8001ae4 <HAL_UART_MspInit+0x254>)
 80018f8:	f001 fdc8 	bl	800348c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0318 	add.w	r3, r7, #24
 800190e:	4619      	mov	r1, r3
 8001910:	4874      	ldr	r0, [pc, #464]	; (8001ae4 <HAL_UART_MspInit+0x254>)
 8001912:	f001 fdbb 	bl	800348c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001916:	4b74      	ldr	r3, [pc, #464]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 8001918:	4a74      	ldr	r2, [pc, #464]	; (8001aec <HAL_UART_MspInit+0x25c>)
 800191a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191c:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001922:	4b71      	ldr	r3, [pc, #452]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192e:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001934:	4b6c      	ldr	r3, [pc, #432]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800193a:	4b6b      	ldr	r3, [pc, #428]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001940:	4b69      	ldr	r3, [pc, #420]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001946:	4868      	ldr	r0, [pc, #416]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 8001948:	f001 fae6 	bl	8002f18 <HAL_DMA_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001952:	f7ff fea5 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 800195a:	63da      	str	r2, [r3, #60]	; 0x3c
 800195c:	4a62      	ldr	r2, [pc, #392]	; (8001ae8 <HAL_UART_MspInit+0x258>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <HAL_UART_MspInit+0x260>)
 8001964:	4a63      	ldr	r2, [pc, #396]	; (8001af4 <HAL_UART_MspInit+0x264>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001968:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_UART_MspInit+0x260>)
 800196a:	2210      	movs	r2, #16
 800196c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800196e:	4b60      	ldr	r3, [pc, #384]	; (8001af0 <HAL_UART_MspInit+0x260>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_UART_MspInit+0x260>)
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197a:	4b5d      	ldr	r3, [pc, #372]	; (8001af0 <HAL_UART_MspInit+0x260>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HAL_UART_MspInit+0x260>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <HAL_UART_MspInit+0x260>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HAL_UART_MspInit+0x260>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001992:	4857      	ldr	r0, [pc, #348]	; (8001af0 <HAL_UART_MspInit+0x260>)
 8001994:	f001 fac0 	bl	8002f18 <HAL_DMA_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800199e:	f7ff fe7f 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_UART_MspInit+0x260>)
 80019a6:	639a      	str	r2, [r3, #56]	; 0x38
 80019a8:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_UART_MspInit+0x260>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	2025      	movs	r0, #37	; 0x25
 80019b4:	f001 fa85 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019b8:	2025      	movs	r0, #37	; 0x25
 80019ba:	f001 fa9e 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019be:	e089      	b.n	8001ad4 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_UART_MspInit+0x268>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	f040 8084 	bne.w	8001ad4 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019cc:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	4a43      	ldr	r2, [pc, #268]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d6:	61d3      	str	r3, [r2, #28]
 80019d8:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_UART_MspInit+0x250>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fc:	2304      	movs	r3, #4
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0318 	add.w	r3, r7, #24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4835      	ldr	r0, [pc, #212]	; (8001ae4 <HAL_UART_MspInit+0x254>)
 8001a10:	f001 fd3c 	bl	800348c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a14:	2308      	movs	r3, #8
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0318 	add.w	r3, r7, #24
 8001a24:	4619      	mov	r1, r3
 8001a26:	482f      	ldr	r0, [pc, #188]	; (8001ae4 <HAL_UART_MspInit+0x254>)
 8001a28:	f001 fd30 	bl	800348c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a2e:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <HAL_UART_MspInit+0x270>)
 8001a30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a32:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a38:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4a:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a5c:	4827      	ldr	r0, [pc, #156]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a5e:	f001 fa5b 	bl	8002f18 <HAL_DMA_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001a68:	f7ff fe1a 	bl	80016a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a23      	ldr	r2, [pc, #140]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <HAL_UART_MspInit+0x26c>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001a7a:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_UART_MspInit+0x278>)
 8001a7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001a80:	2210      	movs	r2, #16
 8001a82:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001aa8:	4816      	ldr	r0, [pc, #88]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001aaa:	f001 fa35 	bl	8002f18 <HAL_DMA_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001ab4:	f7ff fdf4 	bl	80016a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
 8001abe:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <HAL_UART_MspInit+0x274>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2105      	movs	r1, #5
 8001ac8:	2026      	movs	r0, #38	; 0x26
 8001aca:	f001 f9fa 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ace:	2026      	movs	r0, #38	; 0x26
 8001ad0:	f001 fa13 	bl	8002efa <HAL_NVIC_EnableIRQ>
}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	20000200 	.word	0x20000200
 8001aec:	40020058 	.word	0x40020058
 8001af0:	20000244 	.word	0x20000244
 8001af4:	40020044 	.word	0x40020044
 8001af8:	40004400 	.word	0x40004400
 8001afc:	20000288 	.word	0x20000288
 8001b00:	4002006c 	.word	0x4002006c
 8001b04:	200002cc 	.word	0x200002cc
 8001b08:	40020080 	.word	0x40020080

08001b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	; 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_InitTick+0xe8>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a33      	ldr	r2, [pc, #204]	; (8001bf4 <HAL_InitTick+0xe8>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_InitTick+0xe8>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b3a:	f107 0210 	add.w	r2, r7, #16
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f004 f84d 	bl	8005be4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d103      	bne.n	8001b5c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b54:	f004 f81e 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 8001b58:	6378      	str	r0, [r7, #52]	; 0x34
 8001b5a:	e004      	b.n	8001b66 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b5c:	f004 f81a 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 8001b60:	4603      	mov	r3, r0
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_InitTick+0xec>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9b      	lsrs	r3, r3, #18
 8001b70:	3b01      	subs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_InitTick+0xf0>)
 8001b76:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <HAL_InitTick+0xf4>)
 8001b78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_InitTick+0xf0>)
 8001b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b80:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001b82:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <HAL_InitTick+0xf0>)
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_InitTick+0xf0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_InitTick+0xf0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_InitTick+0xf0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001b9a:	4818      	ldr	r0, [pc, #96]	; (8001bfc <HAL_InitTick+0xf0>)
 8001b9c:	f004 f870 	bl	8005c80 <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d11b      	bne.n	8001be6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001bae:	4813      	ldr	r0, [pc, #76]	; (8001bfc <HAL_InitTick+0xf0>)
 8001bb0:	f004 f8be 	bl	8005d30 <HAL_TIM_Base_Start_IT>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d111      	bne.n	8001be6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bc2:	201e      	movs	r0, #30
 8001bc4:	f001 f999 	bl	8002efa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b0f      	cmp	r3, #15
 8001bcc:	d808      	bhi.n	8001be0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	201e      	movs	r0, #30
 8001bd4:	f001 f975 	bl	8002ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <HAL_InitTick+0xf8>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e002      	b.n	8001be6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3738      	adds	r7, #56	; 0x38
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	431bde83 	.word	0x431bde83
 8001bfc:	200006c8 	.word	0x200006c8
 8001c00:	40000800 	.word	0x40000800
 8001c04:	2000000c 	.word	0x2000000c

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
	...

08001c34 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <DMA1_Channel4_IRQHandler+0x10>)
 8001c3a:	f001 fadb 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000244 	.word	0x20000244

08001c48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <DMA1_Channel5_IRQHandler+0x10>)
 8001c4e:	f001 fad1 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000200 	.word	0x20000200

08001c5c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <DMA1_Channel6_IRQHandler+0x10>)
 8001c62:	f001 fac7 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000288 	.word	0x20000288

08001c70 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <DMA1_Channel7_IRQHandler+0x10>)
 8001c76:	f001 fabd 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200002cc 	.word	0x200002cc

08001c84 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001c8a:	f000 fe2a 	bl	80028e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200000b8 	.word	0x200000b8

08001c98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001c9e:	f000 fe20 	bl	80028e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000b8 	.word	0x200000b8

08001cac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <CAN1_RX1_IRQHandler+0x10>)
 8001cb2:	f000 fe16 	bl	80028e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200000b8 	.word	0x200000b8

08001cc0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <CAN1_SCE_IRQHandler+0x10>)
 8001cc6:	f000 fe0c 	bl	80028e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200000b8 	.word	0x200000b8

08001cd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM4_IRQHandler+0x10>)
 8001cda:	f004 f87b 	bl	8005dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200006c8 	.word	0x200006c8

08001ce8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <I2C1_EV_IRQHandler+0x10>)
 8001cee:	f001 fedb 	bl	8003aa8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000011c 	.word	0x2000011c

08001cfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <I2C1_ER_IRQHandler+0x10>)
 8001d02:	f002 f824 	bl	8003d4e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000011c 	.word	0x2000011c

08001d10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <USART1_IRQHandler+0x10>)
 8001d16:	f004 fc41 	bl	800659c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000170 	.word	0x20000170

08001d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <USART2_IRQHandler+0x10>)
 8001d2a:	f004 fc37 	bl	800659c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200001b8 	.word	0x200001b8

08001d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return 1;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <_kill>:

int _kill(int pid, int sig)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d50:	f00b fd8c 	bl	800d86c <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2216      	movs	r2, #22
 8001d58:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_exit>:

void _exit (int status)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffe7 	bl	8001d46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d78:	e7fe      	b.n	8001d78 <_exit+0x12>

08001d7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e00a      	b.n	8001da2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d8c:	f3af 8000 	nop.w
 8001d90:	4601      	mov	r1, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	60ba      	str	r2, [r7, #8]
 8001d98:	b2ca      	uxtb	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dbf0      	blt.n	8001d8c <_read+0x12>
  }

  return len;
 8001daa:	687b      	ldr	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e009      	b.n	8001dda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	dbf1      	blt.n	8001dc6 <_write+0x12>
  }
  return len;
 8001de2:	687b      	ldr	r3, [r7, #4]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_close>:

int _close(int file)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e12:	605a      	str	r2, [r3, #4]
  return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <_isatty>:

int _isatty(int file)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <_sbrk+0x5c>)
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <_sbrk+0x60>)
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <_sbrk+0x64>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <_sbrk+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d207      	bcs.n	8001e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e7c:	f00b fcf6 	bl	800d86c <__errno>
 8001e80:	4603      	mov	r3, r0
 8001e82:	220c      	movs	r2, #12
 8001e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	e009      	b.n	8001ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <_sbrk+0x64>)
 8001e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20005000 	.word	0x20005000
 8001eac:	00000400 	.word	0x00000400
 8001eb0:	20000710 	.word	0x20000710
 8001eb4:	20003350 	.word	0x20003350

08001eb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec4:	f7ff fff8 	bl	8001eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ee0:	4c09      	ldr	r4, [pc, #36]	; (8001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eee:	f00b fcc3 	bl	800d878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ef2:	f7ff f875 	bl	8000fe0 <main>
  bx lr
 8001ef6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001f00:	0800ec8c 	.word	0x0800ec8c
  ldr r2, =_sbss
 8001f04:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001f08:	2000334c 	.word	0x2000334c

08001f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_2_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_Init+0x28>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x28>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 ffc3 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	200f      	movs	r0, #15
 8001f28:	f7ff fdf0 	bl	8001b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fbbe 	bl	80016ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x1c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_IncTick+0x20>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_IncTick+0x20>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	20000714 	.word	0x20000714

08001f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <HAL_GetTick+0x10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000714 	.word	0x20000714

08001f74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e11c      	b.n	80021c0 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d131      	bne.n	8001ff6 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a8c      	ldr	r2, [pc, #560]	; (80021c8 <HAL_CAN_Init+0x254>)
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a8c      	ldr	r2, [pc, #560]	; (80021cc <HAL_CAN_Init+0x258>)
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a8b      	ldr	r2, [pc, #556]	; (80021d0 <HAL_CAN_Init+0x25c>)
 8001fa2:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a8b      	ldr	r2, [pc, #556]	; (80021d4 <HAL_CAN_Init+0x260>)
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a8a      	ldr	r2, [pc, #552]	; (80021d8 <HAL_CAN_Init+0x264>)
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a8a      	ldr	r2, [pc, #552]	; (80021dc <HAL_CAN_Init+0x268>)
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a89      	ldr	r2, [pc, #548]	; (80021e0 <HAL_CAN_Init+0x26c>)
 8001fba:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a89      	ldr	r2, [pc, #548]	; (80021e4 <HAL_CAN_Init+0x270>)
 8001fc0:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a88      	ldr	r2, [pc, #544]	; (80021e8 <HAL_CAN_Init+0x274>)
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a88      	ldr	r2, [pc, #544]	; (80021ec <HAL_CAN_Init+0x278>)
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a87      	ldr	r2, [pc, #540]	; (80021f0 <HAL_CAN_Init+0x27c>)
 8001fd2:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a87      	ldr	r2, [pc, #540]	; (80021f4 <HAL_CAN_Init+0x280>)
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a86      	ldr	r2, [pc, #536]	; (80021f8 <HAL_CAN_Init+0x284>)
 8001fde:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a84      	ldr	r2, [pc, #528]	; (80021fc <HAL_CAN_Init+0x288>)
 8001fec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0201 	orr.w	r2, r2, #1
 8002004:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002006:	f7ff ffab 	bl	8001f60 <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800200c:	e012      	b.n	8002034 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800200e:	f7ff ffa7 	bl	8001f60 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b0a      	cmp	r3, #10
 800201a:	d90b      	bls.n	8002034 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2205      	movs	r2, #5
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0c5      	b.n	80021c0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0e5      	beq.n	800200e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0202 	bic.w	r2, r2, #2
 8002050:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002052:	f7ff ff85 	bl	8001f60 <HAL_GetTick>
 8002056:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002058:	e012      	b.n	8002080 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800205a:	f7ff ff81 	bl	8001f60 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b0a      	cmp	r3, #10
 8002066:	d90b      	bls.n	8002080 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2205      	movs	r2, #5
 8002078:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e09f      	b.n	80021c0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1e5      	bne.n	800205a <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7e1b      	ldrb	r3, [r3, #24]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d108      	bne.n	80020a8 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e007      	b.n	80020b8 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7e5b      	ldrb	r3, [r3, #25]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d108      	bne.n	80020d2 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e007      	b.n	80020e2 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7e9b      	ldrb	r3, [r3, #26]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d108      	bne.n	80020fc <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0220 	orr.w	r2, r2, #32
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e007      	b.n	800210c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0220 	bic.w	r2, r2, #32
 800210a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7edb      	ldrb	r3, [r3, #27]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0210 	bic.w	r2, r2, #16
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0210 	orr.w	r2, r2, #16
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7f1b      	ldrb	r3, [r3, #28]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d108      	bne.n	8002150 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0208 	orr.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e007      	b.n	8002160 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7f5b      	ldrb	r3, [r3, #29]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0204 	orr.w	r2, r2, #4
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e007      	b.n	800218a <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0204 	bic.w	r2, r2, #4
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	ea42 0103 	orr.w	r1, r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	08002cd9 	.word	0x08002cd9
 80021cc:	08002ceb 	.word	0x08002ceb
 80021d0:	08002cfd 	.word	0x08002cfd
 80021d4:	08002d0f 	.word	0x08002d0f
 80021d8:	08002c6d 	.word	0x08002c6d
 80021dc:	08002c7f 	.word	0x08002c7f
 80021e0:	08002c91 	.word	0x08002c91
 80021e4:	08002ca3 	.word	0x08002ca3
 80021e8:	08002cb5 	.word	0x08002cb5
 80021ec:	08002cc7 	.word	0x08002cc7
 80021f0:	08002d21 	.word	0x08002d21
 80021f4:	08002d33 	.word	0x08002d33
 80021f8:	08002d45 	.word	0x08002d45
 80021fc:	0800171d 	.word	0x0800171d

08002200 <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	460b      	mov	r3, r1
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e094      	b.n	8002352 <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d168      	bne.n	8002306 <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	2b0e      	cmp	r3, #14
 8002238:	d85c      	bhi.n	80022f4 <HAL_CAN_RegisterCallback+0xf4>
 800223a:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_CAN_RegisterCallback+0x40>)
 800223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002240:	0800227d 	.word	0x0800227d
 8002244:	08002285 	.word	0x08002285
 8002248:	0800228d 	.word	0x0800228d
 800224c:	08002295 	.word	0x08002295
 8002250:	0800229d 	.word	0x0800229d
 8002254:	080022a5 	.word	0x080022a5
 8002258:	080022ad 	.word	0x080022ad
 800225c:	080022b5 	.word	0x080022b5
 8002260:	080022bd 	.word	0x080022bd
 8002264:	080022c5 	.word	0x080022c5
 8002268:	080022cd 	.word	0x080022cd
 800226c:	080022d5 	.word	0x080022d5
 8002270:	080022dd 	.word	0x080022dd
 8002274:	080022e5 	.word	0x080022e5
 8002278:	080022ed 	.word	0x080022ed
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8002282:	e065      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800228a:	e061      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8002292:	e05d      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 800229a:	e059      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80022a2:	e055      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 80022aa:	e051      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80022b2:	e04d      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80022ba:	e049      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80022c2:	e045      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80022ca:	e041      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80022d2:	e03d      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80022da:	e039      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80022e2:	e035      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80022ea:	e031      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80022f2:	e02d      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
        break;
 8002304:	e024      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	2b0d      	cmp	r3, #13
 8002316:	d002      	beq.n	800231e <HAL_CAN_RegisterCallback+0x11e>
 8002318:	2b0e      	cmp	r3, #14
 800231a:	d004      	beq.n	8002326 <HAL_CAN_RegisterCallback+0x126>
 800231c:	e007      	b.n	800232e <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002324:	e014      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800232c:	e010      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
        break;
 800233e:	e007      	b.n	8002350 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002350:	7dfb      	ldrb	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002372:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d003      	beq.n	8002382 <HAL_CAN_ConfigFilter+0x26>
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b02      	cmp	r3, #2
 800237e:	f040 80aa 	bne.w	80024d6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	2201      	movs	r2, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	401a      	ands	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d123      	bne.n	8002404 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3248      	adds	r2, #72	; 0x48
 80023e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023fa:	6979      	ldr	r1, [r7, #20]
 80023fc:	3348      	adds	r3, #72	; 0x48
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d122      	bne.n	8002452 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	431a      	orrs	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800242c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3248      	adds	r2, #72	; 0x48
 8002432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002448:	6979      	ldr	r1, [r7, #20]
 800244a:	3348      	adds	r3, #72	; 0x48
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	401a      	ands	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800246c:	e007      	b.n	800247e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	431a      	orrs	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	401a      	ands	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002498:	e007      	b.n	80024aa <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024c8:	f023 0201 	bic.w	r2, r3, #1
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e006      	b.n	80024e4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
  }
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d12e      	bne.n	8002560 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800251a:	f7ff fd21 	bl	8001f60 <HAL_GetTick>
 800251e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002520:	e012      	b.n	8002548 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002522:	f7ff fd1d 	bl	8001f60 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b0a      	cmp	r3, #10
 800252e:	d90b      	bls.n	8002548 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2205      	movs	r2, #5
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e012      	b.n	800256e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e5      	bne.n	8002522 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e006      	b.n	800256e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d133      	bne.n	80025f2 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800259a:	f7ff fce1 	bl	8001f60 <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025a0:	e012      	b.n	80025c8 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025a2:	f7ff fcdd 	bl	8001f60 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b0a      	cmp	r3, #10
 80025ae:	d90b      	bls.n	80025c8 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2205      	movs	r2, #5
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e01b      	b.n	8002600 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0e5      	beq.n	80025a2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0202 	bic.w	r2, r2, #2
 80025e4:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e006      	b.n	8002600 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d003      	beq.n	800262c <HAL_CAN_GetRxMessage+0x24>
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b02      	cmp	r3, #2
 8002628:	f040 8103 	bne.w	8002832 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10e      	bne.n	8002650 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0f7      	b.n	8002840 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d107      	bne.n	800266e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0e8      	b.n	8002840 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	331b      	adds	r3, #27
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0204 	and.w	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10c      	bne.n	80026a6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	331b      	adds	r3, #27
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	4413      	add	r3, r2
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0d5b      	lsrs	r3, r3, #21
 800269c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e00b      	b.n	80026be <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	331b      	adds	r3, #27
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	4413      	add	r3, r2
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	08db      	lsrs	r3, r3, #3
 80026b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	331b      	adds	r3, #27
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0202 	and.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	331b      	adds	r3, #27
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2208      	movs	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	e00b      	b.n	800270c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	331b      	adds	r3, #27
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	3304      	adds	r3, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 020f 	and.w	r2, r3, #15
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	331b      	adds	r3, #27
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	4413      	add	r3, r2
 8002718:	3304      	adds	r3, #4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b2da      	uxtb	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	331b      	adds	r3, #27
 800272c:	011b      	lsls	r3, r3, #4
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b29a      	uxth	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4413      	add	r3, r2
 8002746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	4413      	add	r3, r2
 800275c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0a1a      	lsrs	r2, r3, #8
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	4413      	add	r3, r2
 8002776:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0c1a      	lsrs	r2, r3, #16
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	3302      	adds	r3, #2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4413      	add	r3, r2
 8002790:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e1a      	lsrs	r2, r3, #24
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3303      	adds	r3, #3
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3304      	adds	r3, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0a1a      	lsrs	r2, r3, #8
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3305      	adds	r3, #5
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	4413      	add	r3, r2
 80027dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0c1a      	lsrs	r2, r3, #16
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3306      	adds	r3, #6
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0e1a      	lsrs	r2, r3, #24
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3307      	adds	r3, #7
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d108      	bne.n	800281e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	e007      	b.n	800282e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0220 	orr.w	r2, r2, #32
 800282c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e006      	b.n	8002840 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
  }
}
 8002840:	4618      	mov	r0, r3
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d002      	beq.n	800286c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002866:	7afb      	ldrb	r3, [r7, #11]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d10f      	bne.n	800288c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e005      	b.n	800288c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800288c:	68fb      	ldr	r3, [r7, #12]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d002      	beq.n	80028b6 <HAL_CAN_ActivateNotification+0x1e>
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d109      	bne.n	80028ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e006      	b.n	80028d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b08a      	sub	sp, #40	; 0x28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8083 	beq.w	8002a30 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d025      	beq.n	8002980 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
 800294e:	e017      	b.n	8002980 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	e00d      	b.n	8002980 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	e003      	b.n	8002980 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d026      	beq.n	80029d8 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002992:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
 80029a6:	e017      	b.n	80029d8 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	e00d      	b.n	80029d8 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e003      	b.n	80029d8 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d026      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
 80029fe:	e017      	b.n	8002a30 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	e00d      	b.n	8002a30 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	e003      	b.n	8002a30 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2210      	movs	r2, #16
 8002a52:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00c      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2210      	movs	r2, #16
 8002b1a:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00c      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d07b      	beq.n	8002c4a <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d072      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d043      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d03e      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bca:	2b60      	cmp	r3, #96	; 0x60
 8002bcc:	d02b      	beq.n	8002c26 <HAL_CAN_IRQHandler+0x344>
 8002bce:	2b60      	cmp	r3, #96	; 0x60
 8002bd0:	d82e      	bhi.n	8002c30 <HAL_CAN_IRQHandler+0x34e>
 8002bd2:	2b50      	cmp	r3, #80	; 0x50
 8002bd4:	d022      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x33a>
 8002bd6:	2b50      	cmp	r3, #80	; 0x50
 8002bd8:	d82a      	bhi.n	8002c30 <HAL_CAN_IRQHandler+0x34e>
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d019      	beq.n	8002c12 <HAL_CAN_IRQHandler+0x330>
 8002bde:	2b40      	cmp	r3, #64	; 0x40
 8002be0:	d826      	bhi.n	8002c30 <HAL_CAN_IRQHandler+0x34e>
 8002be2:	2b30      	cmp	r3, #48	; 0x30
 8002be4:	d010      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x326>
 8002be6:	2b30      	cmp	r3, #48	; 0x30
 8002be8:	d822      	bhi.n	8002c30 <HAL_CAN_IRQHandler+0x34e>
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d002      	beq.n	8002bf4 <HAL_CAN_IRQHandler+0x312>
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d005      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bf2:	e01d      	b.n	8002c30 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bfc:	e019      	b.n	8002c32 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	f043 0310 	orr.w	r3, r3, #16
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c06:	e014      	b.n	8002c32 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	f043 0320 	orr.w	r3, r3, #32
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c10:	e00f      	b.n	8002c32 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c1a:	e00a      	b.n	8002c32 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c24:	e005      	b.n	8002c32 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002c2e:	e000      	b.n	8002c32 <HAL_CAN_IRQHandler+0x350>
            break;
 8002c30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2204      	movs	r2, #4
 8002c48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c64:	bf00      	nop
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
	...

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4906      	ldr	r1, [pc, #24]	; (8002df0 <__NVIC_EnableIRQ+0x34>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db0a      	blt.n	8002e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	490c      	ldr	r1, [pc, #48]	; (8002e40 <__NVIC_SetPriority+0x4c>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e1c:	e00a      	b.n	8002e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4908      	ldr	r1, [pc, #32]	; (8002e44 <__NVIC_SetPriority+0x50>)
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	440b      	add	r3, r1
 8002e32:	761a      	strb	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf28      	it	cs
 8002e66:	2304      	movcs	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <NVIC_EncodePriority+0x30>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b03      	subs	r3, #3
 8002e76:	e000      	b.n	8002e7a <NVIC_EncodePriority+0x32>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	4313      	orrs	r3, r2
         );
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	; 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff4f 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff64 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ffb2 	bl	8002e48 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff81 	bl	8002df4 <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff57 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e043      	b.n	8002fb6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_DMA_Init+0xa8>)
 8002f36:	4413      	add	r3, r2
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <HAL_DMA_Init+0xac>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_DMA_Init+0xb0>)
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	bffdfff8 	.word	0xbffdfff8
 8002fc4:	cccccccd 	.word	0xcccccccd
 8002fc8:	40020000 	.word	0x40020000

08002fcc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Start_IT+0x20>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e04b      	b.n	8003084 <HAL_DMA_Start_IT+0xb8>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d13a      	bne.n	8003076 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fa03 	bl	8003430 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 020e 	orr.w	r2, r2, #14
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e00f      	b.n	8003064 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 020a 	orr.w	r2, r2, #10
 8003062:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e005      	b.n	8003082 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d008      	beq.n	80030b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2204      	movs	r2, #4
 80030a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e020      	b.n	80030f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 020e 	bic.w	r2, r2, #14
 80030c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
	...

08003104 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d005      	beq.n	8003128 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2204      	movs	r2, #4
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e051      	b.n	80031cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 020e 	bic.w	r2, r2, #14
 8003136:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <HAL_DMA_Abort_IT+0xd4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d029      	beq.n	80031a6 <HAL_DMA_Abort_IT+0xa2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a21      	ldr	r2, [pc, #132]	; (80031dc <HAL_DMA_Abort_IT+0xd8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d022      	beq.n	80031a2 <HAL_DMA_Abort_IT+0x9e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_DMA_Abort_IT+0xdc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01a      	beq.n	800319c <HAL_DMA_Abort_IT+0x98>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_DMA_Abort_IT+0xe0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d012      	beq.n	8003196 <HAL_DMA_Abort_IT+0x92>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <HAL_DMA_Abort_IT+0xe4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00a      	beq.n	8003190 <HAL_DMA_Abort_IT+0x8c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1b      	ldr	r2, [pc, #108]	; (80031ec <HAL_DMA_Abort_IT+0xe8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d102      	bne.n	800318a <HAL_DMA_Abort_IT+0x86>
 8003184:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003188:	e00e      	b.n	80031a8 <HAL_DMA_Abort_IT+0xa4>
 800318a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800318e:	e00b      	b.n	80031a8 <HAL_DMA_Abort_IT+0xa4>
 8003190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003194:	e008      	b.n	80031a8 <HAL_DMA_Abort_IT+0xa4>
 8003196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800319a:	e005      	b.n	80031a8 <HAL_DMA_Abort_IT+0xa4>
 800319c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a0:	e002      	b.n	80031a8 <HAL_DMA_Abort_IT+0xa4>
 80031a2:	2310      	movs	r3, #16
 80031a4:	e000      	b.n	80031a8 <HAL_DMA_Abort_IT+0xa4>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <HAL_DMA_Abort_IT+0xec>)
 80031aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
    } 
  }
  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40020008 	.word	0x40020008
 80031dc:	4002001c 	.word	0x4002001c
 80031e0:	40020030 	.word	0x40020030
 80031e4:	40020044 	.word	0x40020044
 80031e8:	40020058 	.word	0x40020058
 80031ec:	4002006c 	.word	0x4002006c
 80031f0:	40020000 	.word	0x40020000

080031f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2204      	movs	r2, #4
 8003212:	409a      	lsls	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d04f      	beq.n	80032bc <HAL_DMA_IRQHandler+0xc8>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b00      	cmp	r3, #0
 8003224:	d04a      	beq.n	80032bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d029      	beq.n	80032a2 <HAL_DMA_IRQHandler+0xae>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a65      	ldr	r2, [pc, #404]	; (80033e8 <HAL_DMA_IRQHandler+0x1f4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_IRQHandler+0xaa>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a63      	ldr	r2, [pc, #396]	; (80033ec <HAL_DMA_IRQHandler+0x1f8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01a      	beq.n	8003298 <HAL_DMA_IRQHandler+0xa4>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a62      	ldr	r2, [pc, #392]	; (80033f0 <HAL_DMA_IRQHandler+0x1fc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d012      	beq.n	8003292 <HAL_DMA_IRQHandler+0x9e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_DMA_IRQHandler+0x200>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00a      	beq.n	800328c <HAL_DMA_IRQHandler+0x98>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a5f      	ldr	r2, [pc, #380]	; (80033f8 <HAL_DMA_IRQHandler+0x204>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d102      	bne.n	8003286 <HAL_DMA_IRQHandler+0x92>
 8003280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003284:	e00e      	b.n	80032a4 <HAL_DMA_IRQHandler+0xb0>
 8003286:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800328a:	e00b      	b.n	80032a4 <HAL_DMA_IRQHandler+0xb0>
 800328c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003290:	e008      	b.n	80032a4 <HAL_DMA_IRQHandler+0xb0>
 8003292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003296:	e005      	b.n	80032a4 <HAL_DMA_IRQHandler+0xb0>
 8003298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329c:	e002      	b.n	80032a4 <HAL_DMA_IRQHandler+0xb0>
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	e000      	b.n	80032a4 <HAL_DMA_IRQHandler+0xb0>
 80032a2:	2304      	movs	r3, #4
 80032a4:	4a55      	ldr	r2, [pc, #340]	; (80033fc <HAL_DMA_IRQHandler+0x208>)
 80032a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8094 	beq.w	80033da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80032ba:	e08e      	b.n	80033da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	2202      	movs	r2, #2
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d056      	beq.n	800337a <HAL_DMA_IRQHandler+0x186>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d051      	beq.n	800337a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 020a 	bic.w	r2, r2, #10
 80032f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a38      	ldr	r2, [pc, #224]	; (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d029      	beq.n	800335a <HAL_DMA_IRQHandler+0x166>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a37      	ldr	r2, [pc, #220]	; (80033e8 <HAL_DMA_IRQHandler+0x1f4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d022      	beq.n	8003356 <HAL_DMA_IRQHandler+0x162>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a35      	ldr	r2, [pc, #212]	; (80033ec <HAL_DMA_IRQHandler+0x1f8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01a      	beq.n	8003350 <HAL_DMA_IRQHandler+0x15c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <HAL_DMA_IRQHandler+0x1fc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d012      	beq.n	800334a <HAL_DMA_IRQHandler+0x156>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a32      	ldr	r2, [pc, #200]	; (80033f4 <HAL_DMA_IRQHandler+0x200>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00a      	beq.n	8003344 <HAL_DMA_IRQHandler+0x150>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <HAL_DMA_IRQHandler+0x204>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d102      	bne.n	800333e <HAL_DMA_IRQHandler+0x14a>
 8003338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800333c:	e00e      	b.n	800335c <HAL_DMA_IRQHandler+0x168>
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	e00b      	b.n	800335c <HAL_DMA_IRQHandler+0x168>
 8003344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003348:	e008      	b.n	800335c <HAL_DMA_IRQHandler+0x168>
 800334a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800334e:	e005      	b.n	800335c <HAL_DMA_IRQHandler+0x168>
 8003350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003354:	e002      	b.n	800335c <HAL_DMA_IRQHandler+0x168>
 8003356:	2320      	movs	r3, #32
 8003358:	e000      	b.n	800335c <HAL_DMA_IRQHandler+0x168>
 800335a:	2302      	movs	r3, #2
 800335c:	4a27      	ldr	r2, [pc, #156]	; (80033fc <HAL_DMA_IRQHandler+0x208>)
 800335e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d034      	beq.n	80033da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003378:	e02f      	b.n	80033da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	2208      	movs	r2, #8
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d028      	beq.n	80033dc <HAL_DMA_IRQHandler+0x1e8>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d023      	beq.n	80033dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 020e 	bic.w	r2, r2, #14
 80033a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
    }
  }
  return;
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
}
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40020008 	.word	0x40020008
 80033e8:	4002001c 	.word	0x4002001c
 80033ec:	40020030 	.word	0x40020030
 80033f0:	40020044 	.word	0x40020044
 80033f4:	40020058 	.word	0x40020058
 80033f8:	4002006c 	.word	0x4002006c
 80033fc:	40020000 	.word	0x40020000

08003400 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800340e:	b2db      	uxtb	r3, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b10      	cmp	r3, #16
 800345c:	d108      	bne.n	8003470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800346e:	e007      	b.n	8003480 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
	...

0800348c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	b480      	push	{r7}
 800348e:	b08b      	sub	sp, #44	; 0x2c
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800349a:	2300      	movs	r3, #0
 800349c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800349e:	e169      	b.n	8003774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034a0:	2201      	movs	r2, #1
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	f040 8158 	bne.w	800376e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	4a9a      	ldr	r2, [pc, #616]	; (800372c <HAL_GPIO_Init+0x2a0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d05e      	beq.n	8003586 <HAL_GPIO_Init+0xfa>
 80034c8:	4a98      	ldr	r2, [pc, #608]	; (800372c <HAL_GPIO_Init+0x2a0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d875      	bhi.n	80035ba <HAL_GPIO_Init+0x12e>
 80034ce:	4a98      	ldr	r2, [pc, #608]	; (8003730 <HAL_GPIO_Init+0x2a4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d058      	beq.n	8003586 <HAL_GPIO_Init+0xfa>
 80034d4:	4a96      	ldr	r2, [pc, #600]	; (8003730 <HAL_GPIO_Init+0x2a4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d86f      	bhi.n	80035ba <HAL_GPIO_Init+0x12e>
 80034da:	4a96      	ldr	r2, [pc, #600]	; (8003734 <HAL_GPIO_Init+0x2a8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d052      	beq.n	8003586 <HAL_GPIO_Init+0xfa>
 80034e0:	4a94      	ldr	r2, [pc, #592]	; (8003734 <HAL_GPIO_Init+0x2a8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d869      	bhi.n	80035ba <HAL_GPIO_Init+0x12e>
 80034e6:	4a94      	ldr	r2, [pc, #592]	; (8003738 <HAL_GPIO_Init+0x2ac>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04c      	beq.n	8003586 <HAL_GPIO_Init+0xfa>
 80034ec:	4a92      	ldr	r2, [pc, #584]	; (8003738 <HAL_GPIO_Init+0x2ac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d863      	bhi.n	80035ba <HAL_GPIO_Init+0x12e>
 80034f2:	4a92      	ldr	r2, [pc, #584]	; (800373c <HAL_GPIO_Init+0x2b0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d046      	beq.n	8003586 <HAL_GPIO_Init+0xfa>
 80034f8:	4a90      	ldr	r2, [pc, #576]	; (800373c <HAL_GPIO_Init+0x2b0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d85d      	bhi.n	80035ba <HAL_GPIO_Init+0x12e>
 80034fe:	2b12      	cmp	r3, #18
 8003500:	d82a      	bhi.n	8003558 <HAL_GPIO_Init+0xcc>
 8003502:	2b12      	cmp	r3, #18
 8003504:	d859      	bhi.n	80035ba <HAL_GPIO_Init+0x12e>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <HAL_GPIO_Init+0x80>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	08003587 	.word	0x08003587
 8003510:	08003561 	.word	0x08003561
 8003514:	08003573 	.word	0x08003573
 8003518:	080035b5 	.word	0x080035b5
 800351c:	080035bb 	.word	0x080035bb
 8003520:	080035bb 	.word	0x080035bb
 8003524:	080035bb 	.word	0x080035bb
 8003528:	080035bb 	.word	0x080035bb
 800352c:	080035bb 	.word	0x080035bb
 8003530:	080035bb 	.word	0x080035bb
 8003534:	080035bb 	.word	0x080035bb
 8003538:	080035bb 	.word	0x080035bb
 800353c:	080035bb 	.word	0x080035bb
 8003540:	080035bb 	.word	0x080035bb
 8003544:	080035bb 	.word	0x080035bb
 8003548:	080035bb 	.word	0x080035bb
 800354c:	080035bb 	.word	0x080035bb
 8003550:	08003569 	.word	0x08003569
 8003554:	0800357d 	.word	0x0800357d
 8003558:	4a79      	ldr	r2, [pc, #484]	; (8003740 <HAL_GPIO_Init+0x2b4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800355e:	e02c      	b.n	80035ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	623b      	str	r3, [r7, #32]
          break;
 8003566:	e029      	b.n	80035bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	3304      	adds	r3, #4
 800356e:	623b      	str	r3, [r7, #32]
          break;
 8003570:	e024      	b.n	80035bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	3308      	adds	r3, #8
 8003578:	623b      	str	r3, [r7, #32]
          break;
 800357a:	e01f      	b.n	80035bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	330c      	adds	r3, #12
 8003582:	623b      	str	r3, [r7, #32]
          break;
 8003584:	e01a      	b.n	80035bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800358e:	2304      	movs	r3, #4
 8003590:	623b      	str	r3, [r7, #32]
          break;
 8003592:	e013      	b.n	80035bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800359c:	2308      	movs	r3, #8
 800359e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	611a      	str	r2, [r3, #16]
          break;
 80035a6:	e009      	b.n	80035bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035a8:	2308      	movs	r3, #8
 80035aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	615a      	str	r2, [r3, #20]
          break;
 80035b2:	e003      	b.n	80035bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035b4:	2300      	movs	r3, #0
 80035b6:	623b      	str	r3, [r7, #32]
          break;
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x130>
          break;
 80035ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2bff      	cmp	r3, #255	; 0xff
 80035c0:	d801      	bhi.n	80035c6 <HAL_GPIO_Init+0x13a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	e001      	b.n	80035ca <HAL_GPIO_Init+0x13e>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2bff      	cmp	r3, #255	; 0xff
 80035d0:	d802      	bhi.n	80035d8 <HAL_GPIO_Init+0x14c>
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	e002      	b.n	80035de <HAL_GPIO_Init+0x152>
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	3b08      	subs	r3, #8
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	210f      	movs	r1, #15
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	401a      	ands	r2, r3
 80035f0:	6a39      	ldr	r1, [r7, #32]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80b1 	beq.w	800376e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800360c:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <HAL_GPIO_Init+0x2b8>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	4a4c      	ldr	r2, [pc, #304]	; (8003744 <HAL_GPIO_Init+0x2b8>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6193      	str	r3, [r2, #24]
 8003618:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <HAL_GPIO_Init+0x2b8>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003624:	4a48      	ldr	r2, [pc, #288]	; (8003748 <HAL_GPIO_Init+0x2bc>)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003630:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a40      	ldr	r2, [pc, #256]	; (800374c <HAL_GPIO_Init+0x2c0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_GPIO_Init+0x1ec>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <HAL_GPIO_Init+0x2c4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00d      	beq.n	8003674 <HAL_GPIO_Init+0x1e8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3e      	ldr	r2, [pc, #248]	; (8003754 <HAL_GPIO_Init+0x2c8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <HAL_GPIO_Init+0x1e4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <HAL_GPIO_Init+0x2cc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_GPIO_Init+0x1e0>
 8003668:	2303      	movs	r3, #3
 800366a:	e006      	b.n	800367a <HAL_GPIO_Init+0x1ee>
 800366c:	2304      	movs	r3, #4
 800366e:	e004      	b.n	800367a <HAL_GPIO_Init+0x1ee>
 8003670:	2302      	movs	r3, #2
 8003672:	e002      	b.n	800367a <HAL_GPIO_Init+0x1ee>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <HAL_GPIO_Init+0x1ee>
 8003678:	2300      	movs	r3, #0
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	f002 0203 	and.w	r2, r2, #3
 8003680:	0092      	lsls	r2, r2, #2
 8003682:	4093      	lsls	r3, r2
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800368a:	492f      	ldr	r1, [pc, #188]	; (8003748 <HAL_GPIO_Init+0x2bc>)
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d006      	beq.n	80036b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036a4:	4b2d      	ldr	r3, [pc, #180]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	492c      	ldr	r1, [pc, #176]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]
 80036b0:	e006      	b.n	80036c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036b2:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	4928      	ldr	r1, [pc, #160]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036bc:	4013      	ands	r3, r2
 80036be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d006      	beq.n	80036da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	4922      	ldr	r1, [pc, #136]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
 80036d8:	e006      	b.n	80036e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	491e      	ldr	r1, [pc, #120]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	4918      	ldr	r1, [pc, #96]	; (800375c <HAL_GPIO_Init+0x2d0>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
 8003700:	e006      	b.n	8003710 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_GPIO_Init+0x2d0>)
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	43db      	mvns	r3, r3
 800370a:	4914      	ldr	r1, [pc, #80]	; (800375c <HAL_GPIO_Init+0x2d0>)
 800370c:	4013      	ands	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d021      	beq.n	8003760 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_GPIO_Init+0x2d0>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	490e      	ldr	r1, [pc, #56]	; (800375c <HAL_GPIO_Init+0x2d0>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]
 8003728:	e021      	b.n	800376e <HAL_GPIO_Init+0x2e2>
 800372a:	bf00      	nop
 800372c:	10320000 	.word	0x10320000
 8003730:	10310000 	.word	0x10310000
 8003734:	10220000 	.word	0x10220000
 8003738:	10210000 	.word	0x10210000
 800373c:	10120000 	.word	0x10120000
 8003740:	10110000 	.word	0x10110000
 8003744:	40021000 	.word	0x40021000
 8003748:	40010000 	.word	0x40010000
 800374c:	40010800 	.word	0x40010800
 8003750:	40010c00 	.word	0x40010c00
 8003754:	40011000 	.word	0x40011000
 8003758:	40011400 	.word	0x40011400
 800375c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_GPIO_Init+0x304>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	43db      	mvns	r3, r3
 8003768:	4909      	ldr	r1, [pc, #36]	; (8003790 <HAL_GPIO_Init+0x304>)
 800376a:	4013      	ands	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	3301      	adds	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	f47f ae8e 	bne.w	80034a0 <HAL_GPIO_Init+0x14>
  }
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	372c      	adds	r7, #44	; 0x2c
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	40010400 	.word	0x40010400

08003794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	807b      	strh	r3, [r7, #2]
 80037a0:	4613      	mov	r3, r2
 80037a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a4:	787b      	ldrb	r3, [r7, #1]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037b0:	e003      	b.n	80037ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	041a      	lsls	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	611a      	str	r2, [r3, #16]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037d6:	887a      	ldrh	r2, [r7, #2]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4013      	ands	r3, r2
 80037dc:	041a      	lsls	r2, r3, #16
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	43d9      	mvns	r1, r3
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	400b      	ands	r3, r1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	611a      	str	r2, [r3, #16]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e12b      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd ffe8 	bl	80017f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800384a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800385c:	f002 f99a 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a81      	ldr	r2, [pc, #516]	; (8003a6c <HAL_I2C_Init+0x274>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d807      	bhi.n	800387c <HAL_I2C_Init+0x84>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a80      	ldr	r2, [pc, #512]	; (8003a70 <HAL_I2C_Init+0x278>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e006      	b.n	800388a <HAL_I2C_Init+0x92>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a7d      	ldr	r2, [pc, #500]	; (8003a74 <HAL_I2C_Init+0x27c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e0e7      	b.n	8003a62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a78      	ldr	r2, [pc, #480]	; (8003a78 <HAL_I2C_Init+0x280>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9b      	lsrs	r3, r3, #18
 800389c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a6a      	ldr	r2, [pc, #424]	; (8003a6c <HAL_I2C_Init+0x274>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d802      	bhi.n	80038cc <HAL_I2C_Init+0xd4>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	e009      	b.n	80038e0 <HAL_I2C_Init+0xe8>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	4a69      	ldr	r2, [pc, #420]	; (8003a7c <HAL_I2C_Init+0x284>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	3301      	adds	r3, #1
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	495c      	ldr	r1, [pc, #368]	; (8003a6c <HAL_I2C_Init+0x274>)
 80038fc:	428b      	cmp	r3, r1
 80038fe:	d819      	bhi.n	8003934 <HAL_I2C_Init+0x13c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e59      	subs	r1, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fbb1 f3f3 	udiv	r3, r1, r3
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003914:	400b      	ands	r3, r1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_I2C_Init+0x138>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e59      	subs	r1, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fbb1 f3f3 	udiv	r3, r1, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	e051      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003930:	2304      	movs	r3, #4
 8003932:	e04f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <HAL_I2C_Init+0x168>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1e58      	subs	r0, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6859      	ldr	r1, [r3, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e012      	b.n	8003986 <HAL_I2C_Init+0x18e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e58      	subs	r0, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	0099      	lsls	r1, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	fbb0 f3f3 	udiv	r3, r0, r3
 8003976:	3301      	adds	r3, #1
 8003978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Init+0x196>
 800398a:	2301      	movs	r3, #1
 800398c:	e022      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10e      	bne.n	80039b4 <HAL_I2C_Init+0x1bc>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1e58      	subs	r0, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	440b      	add	r3, r1
 80039a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b2:	e00f      	b.n	80039d4 <HAL_I2C_Init+0x1dc>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	6809      	ldr	r1, [r1, #0]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6911      	ldr	r1, [r2, #16]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68d2      	ldr	r2, [r2, #12]
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	000186a0 	.word	0x000186a0
 8003a70:	001e847f 	.word	0x001e847f
 8003a74:	003d08ff 	.word	0x003d08ff
 8003a78:	431bde83 	.word	0x431bde83
 8003a7c:	10624dd3 	.word	0x10624dd3

08003a80 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d103      	bne.n	8003a9e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d003      	beq.n	8003ae0 <HAL_I2C_EV_IRQHandler+0x38>
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	f040 80b1 	bne.w	8003c42 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_I2C_EV_IRQHandler+0x6e>
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b00:	d003      	beq.n	8003b0a <HAL_I2C_EV_IRQHandler+0x62>
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_EV_IRQHandler+0x66>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_I2C_EV_IRQHandler+0x68>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f000 8114 	beq.w	8003d3e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_I2C_EV_IRQHandler+0x90>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d006      	beq.n	8003b38 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 fc4e 	bl	80053cc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fd4e 	bl	80045d2 <I2C_Master_SB>
 8003b36:	e083      	b.n	8003c40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_I2C_EV_IRQHandler+0xac>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fdc5 	bl	80046dc <I2C_Master_ADD10>
 8003b52:	e075      	b.n	8003c40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <HAL_I2C_EV_IRQHandler+0xc8>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fde0 	bl	800472e <I2C_Master_ADDR>
 8003b6e:	e067      	b.n	8003c40 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d036      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b88:	f000 80db 	beq.w	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_I2C_EV_IRQHandler+0x10a>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9c2 	bl	8003f34 <I2C_MasterTransmit_TXE>
 8003bb0:	e046      	b.n	8003c40 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80c2 	beq.w	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80bc 	beq.w	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003bca:	7bbb      	ldrb	r3, [r7, #14]
 8003bcc:	2b21      	cmp	r3, #33	; 0x21
 8003bce:	d103      	bne.n	8003bd8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa4b 	bl	800406c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bd6:	e0b4      	b.n	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	f040 80b1 	bne.w	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fab9 	bl	8004158 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be6:	e0ac      	b.n	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf6:	f000 80a4 	beq.w	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <HAL_I2C_EV_IRQHandler+0x178>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d008      	beq.n	8003c20 <HAL_I2C_EV_IRQHandler+0x178>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d103      	bne.n	8003c20 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fb35 	bl	8004288 <I2C_MasterReceive_RXNE>
 8003c1e:	e00f      	b.n	8003c40 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 808b 	beq.w	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8085 	beq.w	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fbe0 	bl	80043fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3e:	e080      	b.n	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
 8003c40:	e07f      	b.n	8003d42 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	e007      	b.n	8003c64 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d011      	beq.n	8003c92 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00c      	beq.n	8003c92 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c88:	69b9      	ldr	r1, [r7, #24]
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 ffa6 	bl	8004bdc <I2C_Slave_ADDR>
 8003c90:	e05a      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_I2C_EV_IRQHandler+0x206>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 ffe0 	bl	8004c6c <I2C_Slave_STOPF>
 8003cac:	e04c      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	2b21      	cmp	r3, #33	; 0x21
 8003cb2:	d002      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0x212>
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	2b29      	cmp	r3, #41	; 0x29
 8003cb8:	d120      	bne.n	8003cfc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x238>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x238>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fec3 	bl	8004a64 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cde:	e032      	b.n	8003d46 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02d      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x29e>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d028      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fef2 	bl	8004ade <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cfa:	e024      	b.n	8003d46 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <HAL_I2C_EV_IRQHandler+0x27a>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_I2C_EV_IRQHandler+0x27a>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 feff 	bl	8004b1e <I2C_SlaveReceive_RXNE>
 8003d20:	e012      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00d      	beq.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 ff2f 	bl	8004b9a <I2C_SlaveReceive_BTF>
 8003d3c:	e004      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d46:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b08a      	sub	sp, #40	; 0x28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d70:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d015      	beq.n	8003da8 <HAL_I2C_ER_IRQHandler+0x5a>
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d010      	beq.n	8003da8 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d96:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <HAL_I2C_ER_IRQHandler+0x80>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003dcc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d03e      	beq.n	8003e56 <HAL_I2C_ER_IRQHandler+0x108>
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d039      	beq.n	8003e56 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003de2:	7efb      	ldrb	r3, [r7, #27]
 8003de4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003dfc:	7ebb      	ldrb	r3, [r7, #26]
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d112      	bne.n	8003e28 <HAL_I2C_ER_IRQHandler+0xda>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10f      	bne.n	8003e28 <HAL_I2C_ER_IRQHandler+0xda>
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b21      	cmp	r3, #33	; 0x21
 8003e0c:	d008      	beq.n	8003e20 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	2b29      	cmp	r3, #41	; 0x29
 8003e12:	d005      	beq.n	8003e20 <HAL_I2C_ER_IRQHandler+0xd2>
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	2b28      	cmp	r3, #40	; 0x28
 8003e18:	d106      	bne.n	8003e28 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b21      	cmp	r3, #33	; 0x21
 8003e1e:	d103      	bne.n	8003e28 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f001 f853 	bl	8004ecc <I2C_Slave_AF>
 8003e26:	e016      	b.n	8003e56 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e3a:	7efb      	ldrb	r3, [r7, #27]
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d002      	beq.n	8003e46 <HAL_I2C_ER_IRQHandler+0xf8>
 8003e40:	7efb      	ldrb	r3, [r7, #27]
 8003e42:	2b40      	cmp	r3, #64	; 0x40
 8003e44:	d107      	bne.n	8003e56 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_I2C_ER_IRQHandler+0x12e>
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	f043 0308 	orr.w	r3, r3, #8
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003e7a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f001 f890 	bl	8004fb4 <I2C_ITError>
  }
}
 8003e94:	bf00      	nop
 8003e96:	3728      	adds	r7, #40	; 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d150      	bne.n	8003ffc <I2C_MasterTransmit_TXE+0xc8>
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b21      	cmp	r3, #33	; 0x21
 8003f5e:	d14d      	bne.n	8003ffc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d01d      	beq.n	8003fa2 <I2C_MasterTransmit_TXE+0x6e>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d01a      	beq.n	8003fa2 <I2C_MasterTransmit_TXE+0x6e>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f72:	d016      	beq.n	8003fa2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2211      	movs	r2, #17
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff ff7e 	bl	8003e9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fa0:	e060      	b.n	8004064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fb0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d107      	bne.n	8003fec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fd fa4f 	bl	8001488 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fea:	e03b      	b.n	8004064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff51 	bl	8003e9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ffa:	e033      	b.n	8004064 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b21      	cmp	r3, #33	; 0x21
 8004000:	d005      	beq.n	800400e <I2C_MasterTransmit_TXE+0xda>
 8004002:	7bbb      	ldrb	r3, [r7, #14]
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d12d      	bne.n	8004064 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b22      	cmp	r3, #34	; 0x22
 800400c:	d12a      	bne.n	8004064 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004028:	e01c      	b.n	8004064 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b40      	cmp	r3, #64	; 0x40
 8004034:	d103      	bne.n	800403e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f88e 	bl	8004158 <I2C_MemoryTransmit_TXE_BTF>
}
 800403c:	e012      	b.n	8004064 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004062:	e7ff      	b.n	8004064 <I2C_MasterTransmit_TXE+0x130>
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b21      	cmp	r3, #33	; 0x21
 8004084:	d164      	bne.n	8004150 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80040b4:	e04c      	b.n	8004150 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d01d      	beq.n	80040f8 <I2C_MasterTransmit_BTF+0x8c>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d01a      	beq.n	80040f8 <I2C_MasterTransmit_BTF+0x8c>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c8:	d016      	beq.n	80040f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2211      	movs	r2, #17
 80040de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fed3 	bl	8003e9c <HAL_I2C_MasterTxCpltCallback>
}
 80040f6:	e02b      	b.n	8004150 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004106:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d107      	bne.n	8004142 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd f9a4 	bl	8001488 <HAL_I2C_MemTxCpltCallback>
}
 8004140:	e006      	b.n	8004150 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fea6 	bl	8003e9c <HAL_I2C_MasterTxCpltCallback>
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10b      	bne.n	8004190 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417c:	b2da      	uxtb	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800418e:	e077      	b.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	b29b      	uxth	r3, r3
 8004196:	121b      	asrs	r3, r3, #8
 8004198:	b2da      	uxtb	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041aa:	e069      	b.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d10b      	bne.n	80041cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041ca:	e059      	b.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d152      	bne.n	800427a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b22      	cmp	r3, #34	; 0x22
 80041d8:	d10d      	bne.n	80041f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80041f4:	e044      	b.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b21      	cmp	r3, #33	; 0x21
 8004204:	d112      	bne.n	800422c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800422a:	e029      	b.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d124      	bne.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b21      	cmp	r3, #33	; 0x21
 800423a:	d121      	bne.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800424a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd f908 	bl	8001488 <HAL_I2C_MemTxCpltCallback>
}
 8004278:	e002      	b.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff fc00 	bl	8003a80 <I2C_Flush_DR>
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b22      	cmp	r3, #34	; 0x22
 800429a:	f040 80ac 	bne.w	80043f6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d921      	bls.n	80042f0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b03      	cmp	r3, #3
 80042da:	f040 808c 	bne.w	80043f6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80042ee:	e082      	b.n	80043f6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d075      	beq.n	80043e4 <I2C_MasterReceive_RXNE+0x15c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d002      	beq.n	8004304 <I2C_MasterReceive_RXNE+0x7c>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d16f      	bne.n	80043e4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f001 f82f 	bl	8005368 <I2C_WaitOnSTOPRequestThroughIT>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d142      	bne.n	8004396 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800432e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d10a      	bne.n	8004380 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fd f873 	bl	8001464 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800437e:	e03a      	b.n	80043f6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2212      	movs	r2, #18
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff fd8d 	bl	8003eae <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004394:	e02f      	b.n	80043f6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fd97 	bl	8003f10 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043e2:	e008      	b.n	80043f6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f2:	605a      	str	r2, [r3, #4]
}
 80043f4:	e7ff      	b.n	80043f6 <I2C_MasterReceive_RXNE+0x16e>
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b04      	cmp	r3, #4
 8004414:	d11b      	bne.n	800444e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004424:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800444c:	e0bd      	b.n	80045ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b03      	cmp	r3, #3
 8004456:	d129      	bne.n	80044ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004466:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b04      	cmp	r3, #4
 800446c:	d00a      	beq.n	8004484 <I2C_MasterReceive_BTF+0x86>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d007      	beq.n	8004484 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044aa:	e08e      	b.n	80045ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d176      	bne.n	80045a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d002      	beq.n	80044c2 <I2C_MasterReceive_BTF+0xc4>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b10      	cmp	r3, #16
 80044c0:	d108      	bne.n	80044d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e019      	b.n	8004508 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d002      	beq.n	80044e0 <I2C_MasterReceive_BTF+0xe2>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d108      	bne.n	80044f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e00a      	b.n	8004508 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b10      	cmp	r3, #16
 80044f6:	d007      	beq.n	8004508 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004506:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004562:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d10a      	bne.n	800458e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fc ff6c 	bl	8001464 <HAL_I2C_MemRxCpltCallback>
}
 800458c:	e01d      	b.n	80045ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2212      	movs	r2, #18
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fc86 	bl	8003eae <HAL_I2C_MasterRxCpltCallback>
}
 80045a2:	e012      	b.n	80045ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d117      	bne.n	8004616 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004600:	e067      	b.n	80046d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	b2da      	uxtb	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]
}
 8004614:	e05d      	b.n	80046d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800461e:	d133      	bne.n	8004688 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b21      	cmp	r3, #33	; 0x21
 800462a:	d109      	bne.n	8004640 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800463c:	611a      	str	r2, [r3, #16]
 800463e:	e008      	b.n	8004652 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	b2da      	uxtb	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <I2C_Master_SB+0x92>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d108      	bne.n	8004676 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	2b00      	cmp	r3, #0
 800466a:	d032      	beq.n	80046d2 <I2C_Master_SB+0x100>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d02d      	beq.n	80046d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004684:	605a      	str	r2, [r3, #4]
}
 8004686:	e024      	b.n	80046d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10e      	bne.n	80046ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	b29b      	uxth	r3, r3
 8004696:	11db      	asrs	r3, r3, #7
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f003 0306 	and.w	r3, r3, #6
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f063 030f 	orn	r3, r3, #15
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	611a      	str	r2, [r3, #16]
}
 80046ac:	e011      	b.n	80046d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d10d      	bne.n	80046d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	11db      	asrs	r3, r3, #7
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 0306 	and.w	r3, r3, #6
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f063 030e 	orn	r3, r3, #14
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	611a      	str	r2, [r3, #16]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <I2C_Master_ADD10+0x26>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <I2C_Master_ADD10+0x48>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004722:	605a      	str	r2, [r3, #4]
  }
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr

0800472e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800472e:	b480      	push	{r7}
 8004730:	b091      	sub	sp, #68	; 0x44
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b22      	cmp	r3, #34	; 0x22
 8004756:	f040 8174 	bne.w	8004a42 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <I2C_Master_ADDR+0x54>
 8004762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d10b      	bne.n	8004782 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	2300      	movs	r3, #0
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	633b      	str	r3, [r7, #48]	; 0x30
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	e16b      	b.n	8004a5a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <I2C_Master_ADDR+0x98>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004792:	d118      	bne.n	80047c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50
 80047c4:	e149      	b.n	8004a5a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d113      	bne.n	80047f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d0:	2300      	movs	r3, #0
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e120      	b.n	8004a3a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	f040 808a 	bne.w	8004918 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800480a:	d137      	bne.n	800487c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d113      	bne.n	8004854 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483c:	2300      	movs	r3, #0
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	e0f2      	b.n	8004a3a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004854:	2300      	movs	r3, #0
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e0de      	b.n	8004a3a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	2b08      	cmp	r3, #8
 8004880:	d02e      	beq.n	80048e0 <I2C_Master_ADDR+0x1b2>
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	2b20      	cmp	r3, #32
 8004886:	d02b      	beq.n	80048e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	2b12      	cmp	r3, #18
 800488c:	d102      	bne.n	8004894 <I2C_Master_ADDR+0x166>
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	2b01      	cmp	r3, #1
 8004892:	d125      	bne.n	80048e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	2b04      	cmp	r3, #4
 8004898:	d00e      	beq.n	80048b8 <I2C_Master_ADDR+0x18a>
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	2b02      	cmp	r3, #2
 800489e:	d00b      	beq.n	80048b8 <I2C_Master_ADDR+0x18a>
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d008      	beq.n	80048b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e007      	b.n	80048c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	e0ac      	b.n	8004a3a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	61bb      	str	r3, [r7, #24]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	61bb      	str	r3, [r7, #24]
 8004904:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e090      	b.n	8004a3a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d158      	bne.n	80049d4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b04      	cmp	r3, #4
 8004926:	d021      	beq.n	800496c <I2C_Master_ADDR+0x23e>
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	2b02      	cmp	r3, #2
 800492c:	d01e      	beq.n	800496c <I2C_Master_ADDR+0x23e>
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	2b10      	cmp	r3, #16
 8004932:	d01b      	beq.n	800496c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004942:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e012      	b.n	8004992 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800497a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a0:	d14b      	bne.n	8004a3a <I2C_Master_ADDR+0x30c>
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a8:	d00b      	beq.n	80049c2 <I2C_Master_ADDR+0x294>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d008      	beq.n	80049c2 <I2C_Master_ADDR+0x294>
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d005      	beq.n	80049c2 <I2C_Master_ADDR+0x294>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d002      	beq.n	80049c2 <I2C_Master_ADDR+0x294>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d13b      	bne.n	8004a3a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	e032      	b.n	8004a3a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f2:	d117      	bne.n	8004a24 <I2C_Master_ADDR+0x2f6>
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049fa:	d00b      	beq.n	8004a14 <I2C_Master_ADDR+0x2e6>
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d008      	beq.n	8004a14 <I2C_Master_ADDR+0x2e6>
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d005      	beq.n	8004a14 <I2C_Master_ADDR+0x2e6>
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d002      	beq.n	8004a14 <I2C_Master_ADDR+0x2e6>
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d107      	bne.n	8004a24 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a40:	e00b      	b.n	8004a5a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
}
 8004a58:	e7ff      	b.n	8004a5a <I2C_Master_ADDR+0x32c>
 8004a5a:	bf00      	nop
 8004a5c:	3744      	adds	r7, #68	; 0x44
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d02b      	beq.n	8004ad6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d114      	bne.n	8004ad6 <I2C_SlaveTransmit_TXE+0x72>
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b29      	cmp	r3, #41	; 0x29
 8004ab0:	d111      	bne.n	8004ad6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2221      	movs	r2, #33	; 0x21
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2228      	movs	r2, #40	; 0x28
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff f9f5 	bl	8003ec0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d011      	beq.n	8004b14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d02c      	beq.n	8004b92 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d114      	bne.n	8004b92 <I2C_SlaveReceive_RXNE+0x74>
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6c:	d111      	bne.n	8004b92 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2222      	movs	r2, #34	; 0x22
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2228      	movs	r2, #40	; 0x28
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff f9a0 	bl	8003ed2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d012      	beq.n	8004bd2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bf6:	2b28      	cmp	r3, #40	; 0x28
 8004bf8:	d125      	bne.n	8004c46 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c08:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	81bb      	strh	r3, [r7, #12]
 8004c28:	e002      	b.n	8004c30 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c38:	89ba      	ldrh	r2, [r7, #12]
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff f950 	bl	8003ee4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c44:	e00e      	b.n	8004c64 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc8:	d172      	bne.n	8004db0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b22      	cmp	r3, #34	; 0x22
 8004cce:	d002      	beq.n	8004cd6 <I2C_Slave_STOPF+0x6a>
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8004cd4:	d135      	bne.n	8004d42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0204 	orr.w	r2, r3, #4
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fb76 	bl	8003400 <HAL_DMA_GetState>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d049      	beq.n	8004dae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	4a69      	ldr	r2, [pc, #420]	; (8004ec4 <I2C_Slave_STOPF+0x258>)
 8004d20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe f9ec 	bl	8003104 <HAL_DMA_Abort_IT>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03d      	beq.n	8004dae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d40:	e035      	b.n	8004dae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 0204 	orr.w	r2, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fb40 	bl	8003400 <HAL_DMA_GetState>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d014      	beq.n	8004db0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	4a4e      	ldr	r2, [pc, #312]	; (8004ec4 <I2C_Slave_STOPF+0x258>)
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe f9b6 	bl	8003104 <HAL_DMA_Abort_IT>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004da8:	4610      	mov	r0, r2
 8004daa:	4798      	blx	r3
 8004dac:	e000      	b.n	8004db0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d03e      	beq.n	8004e38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d112      	bne.n	8004dee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d112      	bne.n	8004e22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0204 	orr.w	r2, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f8b7 	bl	8004fb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e46:	e039      	b.n	8004ebc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e4c:	d109      	bne.n	8004e62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2228      	movs	r2, #40	; 0x28
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff f838 	bl	8003ed2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b28      	cmp	r3, #40	; 0x28
 8004e6c:	d111      	bne.n	8004e92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a15      	ldr	r2, [pc, #84]	; (8004ec8 <I2C_Slave_STOPF+0x25c>)
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff f837 	bl	8003efe <HAL_I2C_ListenCpltCallback>
}
 8004e90:	e014      	b.n	8004ebc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	2b22      	cmp	r3, #34	; 0x22
 8004e98:	d002      	beq.n	8004ea0 <I2C_Slave_STOPF+0x234>
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b22      	cmp	r3, #34	; 0x22
 8004e9e:	d10d      	bne.n	8004ebc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff f80b 	bl	8003ed2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	08005219 	.word	0x08005219
 8004ec8:	ffff0000 	.word	0xffff0000

08004ecc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d002      	beq.n	8004eee <I2C_Slave_AF+0x22>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d129      	bne.n	8004f42 <I2C_Slave_AF+0x76>
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b28      	cmp	r3, #40	; 0x28
 8004ef2:	d126      	bne.n	8004f42 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a2e      	ldr	r2, [pc, #184]	; (8004fb0 <I2C_Slave_AF+0xe4>)
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f08:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f12:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fe ffdf 	bl	8003efe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004f40:	e031      	b.n	8004fa6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b21      	cmp	r3, #33	; 0x21
 8004f46:	d129      	bne.n	8004f9c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <I2C_Slave_AF+0xe4>)
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2221      	movs	r2, #33	; 0x21
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f72:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f7c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fe fd76 	bl	8003a80 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fe ff93 	bl	8003ec0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f9a:	e004      	b.n	8004fa6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa4:	615a      	str	r2, [r3, #20]
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	ffff0000 	.word	0xffff0000

08004fb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d002      	beq.n	8004fd8 <I2C_ITError+0x24>
 8004fd2:	7bbb      	ldrb	r3, [r7, #14]
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d10a      	bne.n	8004fee <I2C_ITError+0x3a>
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b22      	cmp	r3, #34	; 0x22
 8004fdc:	d107      	bne.n	8004fee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ff4:	2b28      	cmp	r3, #40	; 0x28
 8004ff6:	d107      	bne.n	8005008 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2228      	movs	r2, #40	; 0x28
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005006:	e015      	b.n	8005034 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d00a      	beq.n	800502e <I2C_ITError+0x7a>
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b60      	cmp	r3, #96	; 0x60
 800501c:	d007      	beq.n	800502e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005042:	d162      	bne.n	800510a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005052:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005058:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d020      	beq.n	80050a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	4a6a      	ldr	r2, [pc, #424]	; (8005210 <I2C_ITError+0x25c>)
 8005068:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	4618      	mov	r0, r3
 8005070:	f7fe f848 	bl	8003104 <HAL_DMA_Abort_IT>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 8089 	beq.w	800518e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800509e:	4610      	mov	r0, r2
 80050a0:	4798      	blx	r3
 80050a2:	e074      	b.n	800518e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	4a59      	ldr	r2, [pc, #356]	; (8005210 <I2C_ITError+0x25c>)
 80050aa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe f827 	bl	8003104 <HAL_DMA_Abort_IT>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d068      	beq.n	800518e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d10b      	bne.n	80050e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005104:	4610      	mov	r0, r2
 8005106:	4798      	blx	r3
 8005108:	e041      	b.n	800518e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b60      	cmp	r3, #96	; 0x60
 8005114:	d125      	bne.n	8005162 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d10b      	bne.n	800514a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fe fee1 	bl	8003f22 <HAL_I2C_AbortCpltCallback>
 8005160:	e015      	b.n	800518e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b40      	cmp	r3, #64	; 0x40
 800516e:	d10b      	bne.n	8005188 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7fe fec1 	bl	8003f10 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10e      	bne.n	80051bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d113      	bne.n	8005208 <I2C_ITError+0x254>
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b28      	cmp	r3, #40	; 0x28
 80051e4:	d110      	bne.n	8005208 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <I2C_ITError+0x260>)
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fe fe7b 	bl	8003efe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	08005219 	.word	0x08005219
 8005214:	ffff0000 	.word	0xffff0000

08005218 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005230:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005232:	4b4b      	ldr	r3, [pc, #300]	; (8005360 <I2C_DMAAbort+0x148>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	08db      	lsrs	r3, r3, #3
 8005238:	4a4a      	ldr	r2, [pc, #296]	; (8005364 <I2C_DMAAbort+0x14c>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	0a1a      	lsrs	r2, r3, #8
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	00da      	lsls	r2, r3, #3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f043 0220 	orr.w	r2, r3, #32
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800525e:	e00a      	b.n	8005276 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3b01      	subs	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005274:	d0ea      	beq.n	800524c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	2200      	movs	r2, #0
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	2200      	movs	r2, #0
 80052ba:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	2200      	movs	r2, #0
 80052ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b60      	cmp	r3, #96	; 0x60
 80052e6:	d10e      	bne.n	8005306 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f7fe fe0f 	bl	8003f22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005304:	e027      	b.n	8005356 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005306:	7cfb      	ldrb	r3, [r7, #19]
 8005308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800530c:	2b28      	cmp	r3, #40	; 0x28
 800530e:	d117      	bne.n	8005340 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800532e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2228      	movs	r2, #40	; 0x28
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800533e:	e007      	b.n	8005350 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005350:	6978      	ldr	r0, [r7, #20]
 8005352:	f7fe fddd 	bl	8003f10 <HAL_I2C_ErrorCallback>
}
 8005356:	bf00      	nop
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000008 	.word	0x20000008
 8005364:	14f8b589 	.word	0x14f8b589

08005368 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005374:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	08db      	lsrs	r3, r3, #3
 800537a:	4a13      	ldr	r2, [pc, #76]	; (80053c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	0a1a      	lsrs	r2, r3, #8
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3b01      	subs	r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e008      	b.n	80053b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b4:	d0e9      	beq.n	800538a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000008 	.word	0x20000008
 80053c8:	14f8b589 	.word	0x14f8b589

080053cc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053dc:	d103      	bne.n	80053e6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053e4:	e007      	b.n	80053f6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053ee:	d102      	bne.n	80053f6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2208      	movs	r2, #8
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e272      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8087 	beq.w	800552e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005420:	4b92      	ldr	r3, [pc, #584]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b04      	cmp	r3, #4
 800542a:	d00c      	beq.n	8005446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800542c:	4b8f      	ldr	r3, [pc, #572]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f003 030c 	and.w	r3, r3, #12
 8005434:	2b08      	cmp	r3, #8
 8005436:	d112      	bne.n	800545e <HAL_RCC_OscConfig+0x5e>
 8005438:	4b8c      	ldr	r3, [pc, #560]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d10b      	bne.n	800545e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005446:	4b89      	ldr	r3, [pc, #548]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d06c      	beq.n	800552c <HAL_RCC_OscConfig+0x12c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d168      	bne.n	800552c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e24c      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005466:	d106      	bne.n	8005476 <HAL_RCC_OscConfig+0x76>
 8005468:	4b80      	ldr	r3, [pc, #512]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a7f      	ldr	r2, [pc, #508]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 800546e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e02e      	b.n	80054d4 <HAL_RCC_OscConfig+0xd4>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10c      	bne.n	8005498 <HAL_RCC_OscConfig+0x98>
 800547e:	4b7b      	ldr	r3, [pc, #492]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a7a      	ldr	r2, [pc, #488]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	4b78      	ldr	r3, [pc, #480]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a77      	ldr	r2, [pc, #476]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xd4>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0xbc>
 80054a2:	4b72      	ldr	r3, [pc, #456]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a71      	ldr	r2, [pc, #452]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b6f      	ldr	r3, [pc, #444]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a6e      	ldr	r2, [pc, #440]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xd4>
 80054bc:	4b6b      	ldr	r3, [pc, #428]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a6a      	ldr	r2, [pc, #424]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b68      	ldr	r3, [pc, #416]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a67      	ldr	r2, [pc, #412]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fc fd40 	bl	8001f60 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fc fd3c 	bl	8001f60 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e200      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b5d      	ldr	r3, [pc, #372]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xe4>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fc fd2c 	bl	8001f60 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800550c:	f7fc fd28 	bl	8001f60 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1ec      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	4b53      	ldr	r3, [pc, #332]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x10c>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d063      	beq.n	8005602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800553a:	4b4c      	ldr	r3, [pc, #304]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005546:	4b49      	ldr	r3, [pc, #292]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b08      	cmp	r3, #8
 8005550:	d11c      	bne.n	800558c <HAL_RCC_OscConfig+0x18c>
 8005552:	4b46      	ldr	r3, [pc, #280]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555e:	4b43      	ldr	r3, [pc, #268]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_RCC_OscConfig+0x176>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e1c0      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005576:	4b3d      	ldr	r3, [pc, #244]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4939      	ldr	r1, [pc, #228]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558a:	e03a      	b.n	8005602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d020      	beq.n	80055d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005594:	4b36      	ldr	r3, [pc, #216]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800559a:	f7fc fce1 	bl	8001f60 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a2:	f7fc fcdd 	bl	8001f60 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e1a1      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055b4:	4b2d      	ldr	r3, [pc, #180]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c0:	4b2a      	ldr	r3, [pc, #168]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4927      	ldr	r1, [pc, #156]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	600b      	str	r3, [r1, #0]
 80055d4:	e015      	b.n	8005602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d6:	4b26      	ldr	r3, [pc, #152]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fc fcc0 	bl	8001f60 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055e4:	f7fc fcbc 	bl	8001f60 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e180      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f6:	4b1d      	ldr	r3, [pc, #116]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d03a      	beq.n	8005684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d019      	beq.n	800564a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005616:	4b17      	ldr	r3, [pc, #92]	; (8005674 <HAL_RCC_OscConfig+0x274>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561c:	f7fc fca0 	bl	8001f60 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005624:	f7fc fc9c 	bl	8001f60 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e160      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <HAL_RCC_OscConfig+0x26c>)
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005642:	2001      	movs	r0, #1
 8005644:	f000 fafe 	bl	8005c44 <RCC_Delay>
 8005648:	e01c      	b.n	8005684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <HAL_RCC_OscConfig+0x274>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005650:	f7fc fc86 	bl	8001f60 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005656:	e00f      	b.n	8005678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005658:	f7fc fc82 	bl	8001f60 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d908      	bls.n	8005678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e146      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	42420000 	.word	0x42420000
 8005674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005678:	4b92      	ldr	r3, [pc, #584]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e9      	bne.n	8005658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80a6 	beq.w	80057de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005696:	4b8b      	ldr	r3, [pc, #556]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10d      	bne.n	80056be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a2:	4b88      	ldr	r3, [pc, #544]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4a87      	ldr	r2, [pc, #540]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80056a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ac:	61d3      	str	r3, [r2, #28]
 80056ae:	4b85      	ldr	r3, [pc, #532]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	60bb      	str	r3, [r7, #8]
 80056b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056be:	4b82      	ldr	r3, [pc, #520]	; (80058c8 <HAL_RCC_OscConfig+0x4c8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d118      	bne.n	80056fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ca:	4b7f      	ldr	r3, [pc, #508]	; (80058c8 <HAL_RCC_OscConfig+0x4c8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a7e      	ldr	r2, [pc, #504]	; (80058c8 <HAL_RCC_OscConfig+0x4c8>)
 80056d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d6:	f7fc fc43 	bl	8001f60 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056de:	f7fc fc3f 	bl	8001f60 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b64      	cmp	r3, #100	; 0x64
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e103      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	4b75      	ldr	r3, [pc, #468]	; (80058c8 <HAL_RCC_OscConfig+0x4c8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0f0      	beq.n	80056de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d106      	bne.n	8005712 <HAL_RCC_OscConfig+0x312>
 8005704:	4b6f      	ldr	r3, [pc, #444]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4a6e      	ldr	r2, [pc, #440]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	6213      	str	r3, [r2, #32]
 8005710:	e02d      	b.n	800576e <HAL_RCC_OscConfig+0x36e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x334>
 800571a:	4b6a      	ldr	r3, [pc, #424]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	4a69      	ldr	r2, [pc, #420]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	6213      	str	r3, [r2, #32]
 8005726:	4b67      	ldr	r3, [pc, #412]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	4a66      	ldr	r2, [pc, #408]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800572c:	f023 0304 	bic.w	r3, r3, #4
 8005730:	6213      	str	r3, [r2, #32]
 8005732:	e01c      	b.n	800576e <HAL_RCC_OscConfig+0x36e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b05      	cmp	r3, #5
 800573a:	d10c      	bne.n	8005756 <HAL_RCC_OscConfig+0x356>
 800573c:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	4a60      	ldr	r2, [pc, #384]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005742:	f043 0304 	orr.w	r3, r3, #4
 8005746:	6213      	str	r3, [r2, #32]
 8005748:	4b5e      	ldr	r3, [pc, #376]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	4a5d      	ldr	r2, [pc, #372]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800574e:	f043 0301 	orr.w	r3, r3, #1
 8005752:	6213      	str	r3, [r2, #32]
 8005754:	e00b      	b.n	800576e <HAL_RCC_OscConfig+0x36e>
 8005756:	4b5b      	ldr	r3, [pc, #364]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4a5a      	ldr	r2, [pc, #360]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	6213      	str	r3, [r2, #32]
 8005762:	4b58      	ldr	r3, [pc, #352]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	4a57      	ldr	r2, [pc, #348]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005768:	f023 0304 	bic.w	r3, r3, #4
 800576c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d015      	beq.n	80057a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005776:	f7fc fbf3 	bl	8001f60 <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fc fbef 	bl	8001f60 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	; 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e0b1      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005794:	4b4b      	ldr	r3, [pc, #300]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ee      	beq.n	800577e <HAL_RCC_OscConfig+0x37e>
 80057a0:	e014      	b.n	80057cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a2:	f7fc fbdd 	bl	8001f60 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fc fbd9 	bl	8001f60 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e09b      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c0:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ee      	bne.n	80057aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d105      	bne.n	80057de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d2:	4b3c      	ldr	r3, [pc, #240]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4a3b      	ldr	r2, [pc, #236]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8087 	beq.w	80058f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e8:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 030c 	and.w	r3, r3, #12
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d061      	beq.n	80058b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d146      	bne.n	800588a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fc:	4b33      	ldr	r3, [pc, #204]	; (80058cc <HAL_RCC_OscConfig+0x4cc>)
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005802:	f7fc fbad 	bl	8001f60 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580a:	f7fc fba9 	bl	8001f60 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e06d      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f0      	bne.n	800580a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d108      	bne.n	8005844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005832:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	4921      	ldr	r1, [pc, #132]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005844:	4b1f      	ldr	r3, [pc, #124]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a19      	ldr	r1, [r3, #32]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005854:	430b      	orrs	r3, r1
 8005856:	491b      	ldr	r1, [pc, #108]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 8005858:	4313      	orrs	r3, r2
 800585a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800585c:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005862:	f7fc fb7d 	bl	8001f60 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586a:	f7fc fb79 	bl	8001f60 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e03d      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x46a>
 8005888:	e035      	b.n	80058f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <HAL_RCC_OscConfig+0x4cc>)
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fc fb66 	bl	8001f60 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fc fb62 	bl	8001f60 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e026      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058aa:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x498>
 80058b6:	e01e      	b.n	80058f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e019      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40007000 	.word	0x40007000
 80058cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <HAL_RCC_OscConfig+0x500>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d001      	beq.n	80058f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000

08005904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0d0      	b.n	8005aba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005918:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d910      	bls.n	8005948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005926:	4b67      	ldr	r3, [pc, #412]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 0207 	bic.w	r2, r3, #7
 800592e:	4965      	ldr	r1, [pc, #404]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b63      	ldr	r3, [pc, #396]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0b8      	b.n	8005aba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d020      	beq.n	8005996 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005960:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4a58      	ldr	r2, [pc, #352]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800596a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005978:	4b53      	ldr	r3, [pc, #332]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4a52      	ldr	r2, [pc, #328]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 800597e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005982:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005984:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	494d      	ldr	r1, [pc, #308]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d040      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	4b47      	ldr	r3, [pc, #284]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d115      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e07f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c2:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e073      	b.n	8005aba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d2:	4b3d      	ldr	r3, [pc, #244]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e06b      	b.n	8005aba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e2:	4b39      	ldr	r3, [pc, #228]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4936      	ldr	r1, [pc, #216]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f4:	f7fc fab4 	bl	8001f60 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fc fab0 	bl	8001f60 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e053      	b.n	8005aba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f003 020c 	and.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d1eb      	bne.n	80059fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a24:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d210      	bcs.n	8005a54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f023 0207 	bic.w	r2, r3, #7
 8005a3a:	4922      	ldr	r1, [pc, #136]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e032      	b.n	8005aba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4916      	ldr	r1, [pc, #88]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	490e      	ldr	r1, [pc, #56]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a92:	f000 f821 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8005a96:	4602      	mov	r2, r0
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	490a      	ldr	r1, [pc, #40]	; (8005acc <HAL_RCC_ClockConfig+0x1c8>)
 8005aa4:	5ccb      	ldrb	r3, [r1, r3]
 8005aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_RCC_ClockConfig+0x1cc>)
 8005aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCC_ClockConfig+0x1d0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fc f82a 	bl	8001b0c <HAL_InitTick>

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40022000 	.word	0x40022000
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	0800e834 	.word	0x0800e834
 8005ad0:	20000008 	.word	0x20000008
 8005ad4:	2000000c 	.word	0x2000000c

08005ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	2300      	movs	r3, #0
 8005aec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005af2:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 030c 	and.w	r3, r3, #12
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d002      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0x30>
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d003      	beq.n	8005b0e <HAL_RCC_GetSysClockFreq+0x36>
 8005b06:	e027      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b0a:	613b      	str	r3, [r7, #16]
      break;
 8005b0c:	e027      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	0c9b      	lsrs	r3, r3, #18
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b18:	5cd3      	ldrb	r3, [r2, r3]
 8005b1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d010      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <HAL_RCC_GetSysClockFreq+0x94>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	0c5b      	lsrs	r3, r3, #17
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b3a:	fb03 f202 	mul.w	r2, r3, r2
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e004      	b.n	8005b52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b4c:	fb02 f303 	mul.w	r3, r2, r3
 8005b50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	613b      	str	r3, [r7, #16]
      break;
 8005b56:	e002      	b.n	8005b5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b5a:	613b      	str	r3, [r7, #16]
      break;
 8005b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b5e:	693b      	ldr	r3, [r7, #16]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	371c      	adds	r7, #28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	007a1200 	.word	0x007a1200
 8005b74:	0800e84c 	.word	0x0800e84c
 8005b78:	0800e85c 	.word	0x0800e85c
 8005b7c:	003d0900 	.word	0x003d0900

08005b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b84:	4b02      	ldr	r3, [pc, #8]	; (8005b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b86:	681b      	ldr	r3, [r3, #0]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr
 8005b90:	20000008 	.word	0x20000008

08005b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b98:	f7ff fff2 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	4903      	ldr	r1, [pc, #12]	; (8005bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005baa:	5ccb      	ldrb	r3, [r1, r3]
 8005bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	0800e844 	.word	0x0800e844

08005bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005bc0:	f7ff ffde 	bl	8005b80 <HAL_RCC_GetHCLKFreq>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	0adb      	lsrs	r3, r3, #11
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	4903      	ldr	r1, [pc, #12]	; (8005be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd2:	5ccb      	ldrb	r3, [r1, r3]
 8005bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	0800e844 	.word	0x0800e844

08005be4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	220f      	movs	r2, #15
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <HAL_RCC_GetClockConfig+0x58>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f003 0203 	and.w	r2, r3, #3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c00:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <HAL_RCC_GetClockConfig+0x58>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_RCC_GetClockConfig+0x58>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005c18:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <HAL_RCC_GetClockConfig+0x58>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	08db      	lsrs	r3, r3, #3
 8005c1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <HAL_RCC_GetClockConfig+0x5c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0207 	and.w	r2, r3, #7
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	40022000 	.word	0x40022000

08005c44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <RCC_Delay+0x34>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0a      	ldr	r2, [pc, #40]	; (8005c7c <RCC_Delay+0x38>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	0a5b      	lsrs	r3, r3, #9
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c60:	bf00      	nop
  }
  while (Delay --);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1e5a      	subs	r2, r3, #1
 8005c66:	60fa      	str	r2, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f9      	bne.n	8005c60 <RCC_Delay+0x1c>
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr
 8005c78:	20000008 	.word	0x20000008
 8005c7c:	10624dd3 	.word	0x10624dd3

08005c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e041      	b.n	8005d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f839 	bl	8005d1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 f9b4 	bl	800602c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d001      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e03a      	b.n	8005dbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_TIM_Base_Start_IT+0x98>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00e      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x58>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d72:	d009      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x58>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <HAL_TIM_Base_Start_IT+0x9c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <HAL_TIM_Base_Start_IT+0x58>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d111      	bne.n	8005dac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d010      	beq.n	8005dbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005daa:	e007      	b.n	8005dbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800

08005dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d122      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d11b      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0202 	mvn.w	r2, #2
 8005e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8ed 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8e0 	bl	8005fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8ef 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0304 	and.w	r3, r3, #4
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d122      	bne.n	8005e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0204 	mvn.w	r2, #4
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2202      	movs	r2, #2
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f8c3 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f8b6 	bl	8005fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8c5 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d122      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d11b      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0208 	mvn.w	r2, #8
 8005ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2204      	movs	r2, #4
 8005eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f899 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f88c 	bl	8005fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f89b 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b10      	cmp	r3, #16
 8005ee4:	d122      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0210 	mvn.w	r2, #16
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2208      	movs	r2, #8
 8005f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f86f 	bl	8005ff6 <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f862 	bl	8005fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f871 	bl	8006008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d10e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d107      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0201 	mvn.w	r2, #1
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fb fb92 	bl	800167c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d10e      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f8bf 	bl	8006102 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b40      	cmp	r3, #64	; 0x40
 8005f90:	d10e      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d107      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f835 	bl	800601a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d10e      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d107      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0220 	mvn.w	r2, #32
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f88a 	bl	80060f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr

0800602c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <TIM_Base_SetConfig+0xb8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_Base_SetConfig+0x30>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d007      	beq.n	800605c <TIM_Base_SetConfig+0x30>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a26      	ldr	r2, [pc, #152]	; (80060e8 <TIM_Base_SetConfig+0xbc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_Base_SetConfig+0x30>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a25      	ldr	r2, [pc, #148]	; (80060ec <TIM_Base_SetConfig+0xc0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d108      	bne.n	800606e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1c      	ldr	r2, [pc, #112]	; (80060e4 <TIM_Base_SetConfig+0xb8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_Base_SetConfig+0x62>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d007      	beq.n	800608e <TIM_Base_SetConfig+0x62>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <TIM_Base_SetConfig+0xbc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_Base_SetConfig+0x62>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a18      	ldr	r2, [pc, #96]	; (80060ec <TIM_Base_SetConfig+0xc0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d108      	bne.n	80060a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <TIM_Base_SetConfig+0xb8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d103      	bne.n	80060d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	615a      	str	r2, [r3, #20]
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800

080060f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr

08006102 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e042      	b.n	80061ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb fba8 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	; 0x24
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f8ef 	bl	800733c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800616c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800617c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800618c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d16d      	bne.n	80062b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_Transmit+0x2c>
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e066      	b.n	80062b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2221      	movs	r2, #33	; 0x21
 80061ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061f2:	f7fb feb5 	bl	8001f60 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	88fa      	ldrh	r2, [r7, #6]
 80061fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	88fa      	ldrh	r2, [r7, #6]
 8006202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620c:	d108      	bne.n	8006220 <HAL_UART_Transmit+0x6c>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e003      	b.n	8006228 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006228:	e02a      	b.n	8006280 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	2180      	movs	r1, #128	; 0x80
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fdb7 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e036      	b.n	80062b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006258:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3302      	adds	r3, #2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e007      	b.n	8006272 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1cf      	bne.n	800622a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	2140      	movs	r1, #64	; 0x40
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fd87 	bl	8006da8 <UART_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e006      	b.n	80062b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e000      	b.n	80062b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80062b0:	2302      	movs	r3, #2
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08c      	sub	sp, #48	; 0x30
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b20      	cmp	r3, #32
 80062d4:	d156      	bne.n	8006384 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_UART_Transmit_DMA+0x26>
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e04f      	b.n	8006386 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2221      	movs	r2, #33	; 0x21
 8006302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	4a21      	ldr	r2, [pc, #132]	; (8006390 <HAL_UART_Transmit_DMA+0xd4>)
 800630c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006312:	4a20      	ldr	r2, [pc, #128]	; (8006394 <HAL_UART_Transmit_DMA+0xd8>)
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <HAL_UART_Transmit_DMA+0xdc>)
 800631c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	2200      	movs	r2, #0
 8006324:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3304      	adds	r3, #4
 800633a:	461a      	mov	r2, r3
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	f7fc fe45 	bl	8002fcc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800634a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	617b      	str	r3, [r7, #20]
   return(result);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	627a      	str	r2, [r7, #36]	; 0x24
 800636e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6a39      	ldr	r1, [r7, #32]
 8006372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	61fb      	str	r3, [r7, #28]
   return(result);
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3730      	adds	r7, #48	; 0x30
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	08006af7 	.word	0x08006af7
 8006394:	08006b91 	.word	0x08006b91
 8006398:	08006d15 	.word	0x08006d15

0800639c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d14a      	bne.n	800644c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e043      	b.n	800644e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fd53 	bl	8006e84 <UART_Start_Receive_DMA>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80063e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d12c      	bne.n	8006446 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d125      	bne.n	8006440 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	330c      	adds	r3, #12
 8006410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	617b      	str	r3, [r7, #20]
   return(result);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f043 0310 	orr.w	r3, r3, #16
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642a:	627a      	str	r2, [r7, #36]	; 0x24
 800642c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6a39      	ldr	r1, [r7, #32]
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	61fb      	str	r3, [r7, #28]
   return(result);
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e5      	bne.n	800640a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800643e:	e002      	b.n	8006446 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800644a:	e000      	b.n	800644e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800644c:	2302      	movs	r3, #2
  }
}
 800644e:	4618      	mov	r0, r3
 8006450:	3730      	adds	r7, #48	; 0x30
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b09a      	sub	sp, #104	; 0x68
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800646e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006474:	667b      	str	r3, [r7, #100]	; 0x64
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800647e:	657a      	str	r2, [r7, #84]	; 0x54
 8006480:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006484:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3314      	adds	r3, #20
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	e853 3f00 	ldrex	r3, [r3]
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f023 0301 	bic.w	r3, r3, #1
 80064a8:	663b      	str	r3, [r7, #96]	; 0x60
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3314      	adds	r3, #20
 80064b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064b2:	643a      	str	r2, [r7, #64]	; 0x40
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e5      	bne.n	8006492 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d119      	bne.n	8006502 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	f023 0310 	bic.w	r3, r3, #16
 80064e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	330c      	adds	r3, #12
 80064ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1e5      	bne.n	80064ce <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d036      	beq.n	800657e <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3314      	adds	r3, #20
 8006516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006526:	65bb      	str	r3, [r7, #88]	; 0x58
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3314      	adds	r3, #20
 800652e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006530:	61ba      	str	r2, [r7, #24]
 8006532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6979      	ldr	r1, [r7, #20]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	613b      	str	r3, [r7, #16]
   return(result);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d018      	beq.n	800657e <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	2200      	movs	r2, #0
 8006552:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	4618      	mov	r0, r3
 800655a:	f7fc fd97 	bl	800308c <HAL_DMA_Abort>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00c      	beq.n	800657e <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006568:	4618      	mov	r0, r3
 800656a:	f7fc ff56 	bl	800341a <HAL_DMA_GetError>
 800656e:	4603      	mov	r3, r0
 8006570:	2b20      	cmp	r3, #32
 8006572:	d104      	bne.n	800657e <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2210      	movs	r2, #16
 8006578:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e00a      	b.n	8006594 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3768      	adds	r7, #104	; 0x68
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b0ba      	sub	sp, #232	; 0xe8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10f      	bne.n	8006602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <HAL_UART_IRQHandler+0x66>
 80065ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fde0 	bl	80071c0 <UART_Receive_IT>
      return;
 8006600:	e25b      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80de 	beq.w	80067c8 <HAL_UART_IRQHandler+0x22c>
 800660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 80d1 	beq.w	80067c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00b      	beq.n	800664a <HAL_UART_IRQHandler+0xae>
 8006632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	f043 0201 	orr.w	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800664a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <HAL_UART_IRQHandler+0xd2>
 8006656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	f043 0202 	orr.w	r2, r3, #2
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_UART_IRQHandler+0xf6>
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	f043 0204 	orr.w	r2, r3, #4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d011      	beq.n	80066c2 <HAL_UART_IRQHandler+0x126>
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ba:	f043 0208 	orr.w	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 81f2 	beq.w	8006ab0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d008      	beq.n	80066ea <HAL_UART_IRQHandler+0x14e>
 80066d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fd6b 	bl	80071c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bf14      	ite	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	2300      	moveq	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <HAL_UART_IRQHandler+0x17a>
 800670e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006712:	2b00      	cmp	r3, #0
 8006714:	d04f      	beq.n	80067b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fc75 	bl	8007006 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d041      	beq.n	80067ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3314      	adds	r3, #20
 8006752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800675a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800676e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1d9      	bne.n	800672a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	2b00      	cmp	r3, #0
 800677c:	d013      	beq.n	80067a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006782:	4a7e      	ldr	r2, [pc, #504]	; (800697c <HAL_UART_IRQHandler+0x3e0>)
 8006784:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678a:	4618      	mov	r0, r3
 800678c:	f7fc fcba 	bl	8003104 <HAL_DMA_Abort_IT>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067a0:	4610      	mov	r0, r2
 80067a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e00e      	b.n	80067c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f99c 	bl	8006ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e00a      	b.n	80067c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f998 	bl	8006ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	e006      	b.n	80067c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f994 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80067c2:	e175      	b.n	8006ab0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	bf00      	nop
    return;
 80067c6:	e173      	b.n	8006ab0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	f040 814f 	bne.w	8006a70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8148 	beq.w	8006a70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8141 	beq.w	8006a70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80b6 	beq.w	8006980 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8145 	beq.w	8006ab4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800682e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006832:	429a      	cmp	r2, r3
 8006834:	f080 813e 	bcs.w	8006ab4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800683e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b20      	cmp	r3, #32
 8006848:	f000 8088 	beq.w	800695c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800686a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006878:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800687c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006884:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1d9      	bne.n	800684c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3314      	adds	r3, #20
 800689e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3314      	adds	r3, #20
 80068b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e1      	bne.n	8006898 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3314      	adds	r3, #20
 80068da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3314      	adds	r3, #20
 80068f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e3      	bne.n	80068d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	330c      	adds	r3, #12
 8006920:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800692a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692c:	f023 0310 	bic.w	r3, r3, #16
 8006930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800693e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006940:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800694c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e3      	bne.n	800691a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	4618      	mov	r0, r3
 8006958:	f7fc fb98 	bl	800308c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800696a:	b29b      	uxth	r3, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	b29b      	uxth	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa fd60 	bl	8001438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006978:	e09c      	b.n	8006ab4 <HAL_UART_IRQHandler+0x518>
 800697a:	bf00      	nop
 800697c:	080070cb 	.word	0x080070cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006988:	b29b      	uxth	r3, r3
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 808e 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800699c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8089 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	330c      	adds	r3, #12
 80069ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069ca:	647a      	str	r2, [r7, #68]	; 0x44
 80069cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e3      	bne.n	80069a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3314      	adds	r3, #20
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	623b      	str	r3, [r7, #32]
   return(result);
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	3314      	adds	r3, #20
 80069fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a02:	633a      	str	r2, [r7, #48]	; 0x30
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e3      	bne.n	80069de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0310 	bic.w	r3, r3, #16
 8006a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	330c      	adds	r3, #12
 8006a44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a48:	61fa      	str	r2, [r7, #28]
 8006a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	69b9      	ldr	r1, [r7, #24]
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	617b      	str	r3, [r7, #20]
   return(result);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e3      	bne.n	8006a24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fa fce5 	bl	8001438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a6e:	e023      	b.n	8006ab8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <HAL_UART_IRQHandler+0x4f4>
 8006a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fb32 	bl	80070f2 <UART_Transmit_IT>
    return;
 8006a8e:	e014      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00e      	beq.n	8006aba <HAL_UART_IRQHandler+0x51e>
 8006a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d008      	beq.n	8006aba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fb71 	bl	8007190 <UART_EndTransmit_IT>
    return;
 8006aae:	e004      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
    return;
 8006ab0:	bf00      	nop
 8006ab2:	e002      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
      return;
 8006ab4:	bf00      	nop
 8006ab6:	e000      	b.n	8006aba <HAL_UART_IRQHandler+0x51e>
      return;
 8006ab8:	bf00      	nop
  }
}
 8006aba:	37e8      	adds	r7, #232	; 0xe8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b090      	sub	sp, #64	; 0x40
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d137      	bne.n	8006b82 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b14:	2200      	movs	r2, #0
 8006b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	623b      	str	r3, [r7, #32]
   return(result);
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3314      	adds	r3, #20
 8006b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b38:	633a      	str	r2, [r7, #48]	; 0x30
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e5      	bne.n	8006b18 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
 8006b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b6c:	61fa      	str	r2, [r7, #28]
 8006b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	69b9      	ldr	r1, [r7, #24]
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	617b      	str	r3, [r7, #20]
   return(result);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e5      	bne.n	8006b4c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b80:	e002      	b.n	8006b88 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b84:	f7fa fc46 	bl	8001414 <HAL_UART_TxCpltCallback>
}
 8006b88:	bf00      	nop
 8006b8a:	3740      	adds	r7, #64	; 0x40
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff ff8e 	bl	8006ac0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b09c      	sub	sp, #112	; 0x70
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d172      	bne.n	8006cae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bca:	2200      	movs	r2, #0
 8006bcc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bee:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bf0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3314      	adds	r3, #20
 8006c08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	667b      	str	r3, [r7, #100]	; 0x64
 8006c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c22:	647a      	str	r2, [r7, #68]	; 0x44
 8006c24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	623b      	str	r3, [r7, #32]
   return(result);
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3314      	adds	r3, #20
 8006c54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c56:	633a      	str	r2, [r7, #48]	; 0x30
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e5      	bne.n	8006c36 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d119      	bne.n	8006cae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f023 0310 	bic.w	r3, r3, #16
 8006c90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c9a:	61fa      	str	r2, [r7, #28]
 8006c9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	69b9      	ldr	r1, [r7, #24]
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e5      	bne.n	8006c7a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d106      	bne.n	8006cca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cc4:	f7fa fbb8 	bl	8001438 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cc8:	e002      	b.n	8006cd0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006cca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ccc:	f7fa fb90 	bl	80013f0 <HAL_UART_RxCpltCallback>
}
 8006cd0:	bf00      	nop
 8006cd2:	3770      	adds	r7, #112	; 0x70
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d108      	bne.n	8006d06 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7fa fb9a 	bl	8001438 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d04:	e002      	b.n	8006d0c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fee3 	bl	8006ad2 <HAL_UART_RxHalfCpltCallback>
}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bf14      	ite	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	2300      	moveq	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b21      	cmp	r3, #33	; 0x21
 8006d46:	d108      	bne.n	8006d5a <UART_DMAError+0x46>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2200      	movs	r2, #0
 8006d52:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d54:	68b8      	ldr	r0, [r7, #8]
 8006d56:	f000 f92f 	bl	8006fb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf14      	ite	ne
 8006d68:	2301      	movne	r3, #1
 8006d6a:	2300      	moveq	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b22      	cmp	r3, #34	; 0x22
 8006d7a:	d108      	bne.n	8006d8e <UART_DMAError+0x7a>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d88:	68b8      	ldr	r0, [r7, #8]
 8006d8a:	f000 f93c 	bl	8007006 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d92:	f043 0210 	orr.w	r2, r3, #16
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9a:	68b8      	ldr	r0, [r7, #8]
 8006d9c:	f7ff fea2 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b090      	sub	sp, #64	; 0x40
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db8:	e050      	b.n	8006e5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d04c      	beq.n	8006e5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dc8:	f7fb f8ca 	bl	8001f60 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d241      	bcs.n	8006e5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006df8:	637a      	str	r2, [r7, #52]	; 0x34
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e5      	bne.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3314      	adds	r3, #20
 8006e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3314      	adds	r3, #20
 8006e2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e2c:	623a      	str	r2, [r7, #32]
 8006e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	69f9      	ldr	r1, [r7, #28]
 8006e32:	6a3a      	ldr	r2, [r7, #32]
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e00f      	b.n	8006e7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4013      	ands	r3, r2
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d09f      	beq.n	8006dba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3740      	adds	r7, #64	; 0x40
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b098      	sub	sp, #96	; 0x60
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	88fa      	ldrh	r2, [r7, #6]
 8006e9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2222      	movs	r2, #34	; 0x22
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb0:	4a3e      	ldr	r2, [pc, #248]	; (8006fac <UART_Start_Receive_DMA+0x128>)
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb8:	4a3d      	ldr	r2, [pc, #244]	; (8006fb0 <UART_Start_Receive_DMA+0x12c>)
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec0:	4a3c      	ldr	r2, [pc, #240]	; (8006fb4 <UART_Start_Receive_DMA+0x130>)
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	2200      	movs	r2, #0
 8006eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ecc:	f107 0308 	add.w	r3, r7, #8
 8006ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4619      	mov	r1, r3
 8006ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	f7fc f872 	bl	8002fcc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d019      	beq.n	8006f3a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006f28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	657b      	str	r3, [r7, #84]	; 0x54
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3314      	adds	r3, #20
 8006f58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f62:	e841 2300 	strex	r3, r2, [r1]
 8006f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1e5      	bne.n	8006f3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3314      	adds	r3, #20
 8006f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f84:	653b      	str	r3, [r7, #80]	; 0x50
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3314      	adds	r3, #20
 8006f8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f8e:	627a      	str	r2, [r7, #36]	; 0x24
 8006f90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6a39      	ldr	r1, [r7, #32]
 8006f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3760      	adds	r7, #96	; 0x60
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	08006bad 	.word	0x08006bad
 8006fb0:	08006cd9 	.word	0x08006cd9
 8006fb4:	08006d15 	.word	0x08006d15

08006fb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b089      	sub	sp, #36	; 0x24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	e853 3f00 	ldrex	r3, [r3]
 8006fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	61ba      	str	r2, [r7, #24]
 8006fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6979      	ldr	r1, [r7, #20]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	613b      	str	r3, [r7, #16]
   return(result);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e5      	bne.n	8006fc0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006ffc:	bf00      	nop
 8006ffe:	3724      	adds	r7, #36	; 0x24
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr

08007006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007006:	b480      	push	{r7}
 8007008:	b095      	sub	sp, #84	; 0x54
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	330c      	adds	r3, #12
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007024:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	330c      	adds	r3, #12
 800702c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800702e:	643a      	str	r2, [r7, #64]	; 0x40
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007034:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3314      	adds	r3, #20
 8007048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	61fb      	str	r3, [r7, #28]
   return(result);
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	64bb      	str	r3, [r7, #72]	; 0x48
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3314      	adds	r3, #20
 8007060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007062:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007064:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e5      	bne.n	8007042 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707a:	2b01      	cmp	r3, #1
 800707c:	d119      	bne.n	80070b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	60bb      	str	r3, [r7, #8]
   return(result);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f023 0310 	bic.w	r3, r3, #16
 8007094:	647b      	str	r3, [r7, #68]	; 0x44
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800709e:	61ba      	str	r2, [r7, #24]
 80070a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6979      	ldr	r1, [r7, #20]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	613b      	str	r3, [r7, #16]
   return(result);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070c0:	bf00      	nop
 80070c2:	3754      	adds	r7, #84	; 0x54
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fcfd 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b21      	cmp	r3, #33	; 0x21
 8007104:	d13e      	bne.n	8007184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710e:	d114      	bne.n	800713a <UART_Transmit_IT+0x48>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d110      	bne.n	800713a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800712c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	1c9a      	adds	r2, r3, #2
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	621a      	str	r2, [r3, #32]
 8007138:	e008      	b.n	800714c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	1c59      	adds	r1, r3, #1
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6211      	str	r1, [r2, #32]
 8007144:	781a      	ldrb	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29b      	uxth	r3, r3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	4619      	mov	r1, r3
 800715a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10f      	bne.n	8007180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68da      	ldr	r2, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800716e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800717e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e000      	b.n	8007186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007184:	2302      	movs	r3, #2
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fa f92f 	bl	8001414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08c      	sub	sp, #48	; 0x30
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b22      	cmp	r3, #34	; 0x22
 80071d2:	f040 80ae 	bne.w	8007332 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d117      	bne.n	8007210 <UART_Receive_IT+0x50>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d113      	bne.n	8007210 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fe:	b29a      	uxth	r2, r3
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	1c9a      	adds	r2, r3, #2
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	629a      	str	r2, [r3, #40]	; 0x28
 800720e:	e026      	b.n	800725e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d007      	beq.n	8007234 <UART_Receive_IT+0x74>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <UART_Receive_IT+0x82>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e008      	b.n	8007254 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29b      	uxth	r3, r3
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4619      	mov	r1, r3
 800726c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800726e:	2b00      	cmp	r3, #0
 8007270:	d15d      	bne.n	800732e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0220 	bic.w	r2, r2, #32
 8007280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007290:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d135      	bne.n	8007324 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	613b      	str	r3, [r7, #16]
   return(result);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f023 0310 	bic.w	r3, r3, #16
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	330c      	adds	r3, #12
 80072dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072de:	623a      	str	r2, [r7, #32]
 80072e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	69f9      	ldr	r1, [r7, #28]
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e5      	bne.n	80072be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0310 	and.w	r3, r3, #16
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d10a      	bne.n	8007316 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7fa f88b 	bl	8001438 <HAL_UARTEx_RxEventCallback>
 8007322:	e002      	b.n	800732a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7fa f863 	bl	80013f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	e002      	b.n	8007334 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	e000      	b.n	8007334 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007332:	2302      	movs	r3, #2
  }
}
 8007334:	4618      	mov	r0, r3
 8007336:	3730      	adds	r7, #48	; 0x30
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007376:	f023 030c 	bic.w	r3, r3, #12
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6812      	ldr	r2, [r2, #0]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	430b      	orrs	r3, r1
 8007382:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2c      	ldr	r2, [pc, #176]	; (8007450 <UART_SetConfig+0x114>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d103      	bne.n	80073ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80073a4:	f7fe fc0a 	bl	8005bbc <HAL_RCC_GetPCLK2Freq>
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	e002      	b.n	80073b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80073ac:	f7fe fbf2 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 80073b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009a      	lsls	r2, r3, #2
 80073bc:	441a      	add	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	4a22      	ldr	r2, [pc, #136]	; (8007454 <UART_SetConfig+0x118>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	0119      	lsls	r1, r3, #4
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009a      	lsls	r2, r3, #2
 80073dc:	441a      	add	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073e8:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <UART_SetConfig+0x118>)
 80073ea:	fba3 0302 	umull	r0, r3, r3, r2
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	2064      	movs	r0, #100	; 0x64
 80073f2:	fb00 f303 	mul.w	r3, r0, r3
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	3332      	adds	r3, #50	; 0x32
 80073fc:	4a15      	ldr	r2, [pc, #84]	; (8007454 <UART_SetConfig+0x118>)
 80073fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007408:	4419      	add	r1, r3
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009a      	lsls	r2, r3, #2
 8007414:	441a      	add	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <UART_SetConfig+0x118>)
 8007422:	fba3 0302 	umull	r0, r3, r3, r2
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	2064      	movs	r0, #100	; 0x64
 800742a:	fb00 f303 	mul.w	r3, r0, r3
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	3332      	adds	r3, #50	; 0x32
 8007434:	4a07      	ldr	r2, [pc, #28]	; (8007454 <UART_SetConfig+0x118>)
 8007436:	fba2 2303 	umull	r2, r3, r2, r3
 800743a:	095b      	lsrs	r3, r3, #5
 800743c:	f003 020f 	and.w	r2, r3, #15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	440a      	add	r2, r1
 8007446:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40013800 	.word	0x40013800
 8007454:	51eb851f 	.word	0x51eb851f

08007458 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745e:	f3ef 8305 	mrs	r3, IPSR
 8007462:	60bb      	str	r3, [r7, #8]
  return(result);
 8007464:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10f      	bne.n	800748a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746a:	f3ef 8310 	mrs	r3, PRIMASK
 800746e:	607b      	str	r3, [r7, #4]
  return(result);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <osKernelInitialize+0x32>
 8007476:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <osKernelInitialize+0x60>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d109      	bne.n	8007492 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800747e:	f3ef 8311 	mrs	r3, BASEPRI
 8007482:	603b      	str	r3, [r7, #0]
  return(result);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800748a:	f06f 0305 	mvn.w	r3, #5
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	e00c      	b.n	80074ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007492:	4b09      	ldr	r3, [pc, #36]	; (80074b8 <osKernelInitialize+0x60>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d105      	bne.n	80074a6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800749a:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <osKernelInitialize+0x60>)
 800749c:	2201      	movs	r2, #1
 800749e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e002      	b.n	80074ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074ac:	68fb      	ldr	r3, [r7, #12]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr
 80074b8:	20000718 	.word	0x20000718

080074bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074c2:	f3ef 8305 	mrs	r3, IPSR
 80074c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80074c8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10f      	bne.n	80074ee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ce:	f3ef 8310 	mrs	r3, PRIMASK
 80074d2:	607b      	str	r3, [r7, #4]
  return(result);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <osKernelStart+0x32>
 80074da:	4b11      	ldr	r3, [pc, #68]	; (8007520 <osKernelStart+0x64>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d109      	bne.n	80074f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074e2:	f3ef 8311 	mrs	r3, BASEPRI
 80074e6:	603b      	str	r3, [r7, #0]
  return(result);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80074ee:	f06f 0305 	mvn.w	r3, #5
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e00e      	b.n	8007514 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80074f6:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <osKernelStart+0x64>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d107      	bne.n	800750e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <osKernelStart+0x64>)
 8007500:	2202      	movs	r2, #2
 8007502:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007504:	f002 fbba 	bl	8009c7c <vTaskStartScheduler>
      stat = osOK;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e002      	b.n	8007514 <osKernelStart+0x58>
    } else {
      stat = osError;
 800750e:	f04f 33ff 	mov.w	r3, #4294967295
 8007512:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007514:	68fb      	ldr	r3, [r7, #12]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000718 	.word	0x20000718

08007524 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007524:	b580      	push	{r7, lr}
 8007526:	b092      	sub	sp, #72	; 0x48
 8007528:	af04      	add	r7, sp, #16
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007534:	f3ef 8305 	mrs	r3, IPSR
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 8094 	bne.w	800766a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007542:	f3ef 8310 	mrs	r3, PRIMASK
 8007546:	623b      	str	r3, [r7, #32]
  return(result);
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f040 808d 	bne.w	800766a <osThreadNew+0x146>
 8007550:	4b48      	ldr	r3, [pc, #288]	; (8007674 <osThreadNew+0x150>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d106      	bne.n	8007566 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007558:	f3ef 8311 	mrs	r3, BASEPRI
 800755c:	61fb      	str	r3, [r7, #28]
  return(result);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f040 8082 	bne.w	800766a <osThreadNew+0x146>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d07e      	beq.n	800766a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800756c:	2340      	movs	r3, #64	; 0x40
 800756e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007570:	2318      	movs	r3, #24
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007574:	2300      	movs	r3, #0
 8007576:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007578:	f107 031b 	add.w	r3, r7, #27
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800757e:	f04f 33ff 	mov.w	r3, #4294967295
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d045      	beq.n	8007616 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <osThreadNew+0x74>
        name = attr->name;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <osThreadNew+0x9a>
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	2b38      	cmp	r3, #56	; 0x38
 80075b0:	d805      	bhi.n	80075be <osThreadNew+0x9a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <osThreadNew+0x9e>
        return (NULL);
 80075be:	2300      	movs	r3, #0
 80075c0:	e054      	b.n	800766c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	089b      	lsrs	r3, r3, #2
 80075d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00e      	beq.n	80075f8 <osThreadNew+0xd4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	2ba7      	cmp	r3, #167	; 0xa7
 80075e0:	d90a      	bls.n	80075f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d006      	beq.n	80075f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <osThreadNew+0xd4>
        mem = 1;
 80075f2:	2301      	movs	r3, #1
 80075f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f6:	e010      	b.n	800761a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10c      	bne.n	800761a <osThreadNew+0xf6>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d108      	bne.n	800761a <osThreadNew+0xf6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <osThreadNew+0xf6>
          mem = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28
 8007614:	e001      	b.n	800761a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	2b01      	cmp	r3, #1
 800761e:	d110      	bne.n	8007642 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007628:	9202      	str	r2, [sp, #8]
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007634:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f002 f89a 	bl	8009770 <xTaskCreateStatic>
 800763c:	4603      	mov	r3, r0
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	e013      	b.n	800766a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d110      	bne.n	800766a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	b29a      	uxth	r2, r3
 800764c:	f107 0314 	add.w	r3, r7, #20
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f002 f8e4 	bl	8009828 <xTaskCreate>
 8007660:	4603      	mov	r3, r0
 8007662:	2b01      	cmp	r3, #1
 8007664:	d001      	beq.n	800766a <osThreadNew+0x146>
          hTask = NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800766a:	697b      	ldr	r3, [r7, #20]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3738      	adds	r7, #56	; 0x38
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000718 	.word	0x20000718

08007678 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007686:	f3ef 8305 	mrs	r3, IPSR
 800768a:	617b      	str	r3, [r7, #20]
  return(result);
 800768c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10f      	bne.n	80076b2 <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007692:	f3ef 8310 	mrs	r3, PRIMASK
 8007696:	613b      	str	r3, [r7, #16]
  return(result);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <osThreadSetPriority+0x3a>
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <osThreadSetPriority+0x74>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d109      	bne.n	80076ba <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076a6:	f3ef 8311 	mrs	r3, BASEPRI
 80076aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <osThreadSetPriority+0x42>
    stat = osErrorISR;
 80076b2:	f06f 0305 	mvn.w	r3, #5
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e013      	b.n	80076e2 <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <osThreadSetPriority+0x54>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd02      	ble.n	80076cc <osThreadSetPriority+0x54>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b38      	cmp	r3, #56	; 0x38
 80076ca:	dd03      	ble.n	80076d4 <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 80076cc:	f06f 0303 	mvn.w	r3, #3
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	e006      	b.n	80076e2 <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	69b8      	ldr	r0, [r7, #24]
 80076de:	f002 fa2b 	bl	8009b38 <vTaskPrioritySet>
  }

  return (stat);
 80076e2:	69fb      	ldr	r3, [r7, #28]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000718 	.word	0x20000718

080076f0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f8:	f3ef 8305 	mrs	r3, IPSR
 80076fc:	613b      	str	r3, [r7, #16]
  return(result);
 80076fe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10f      	bne.n	8007724 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007704:	f3ef 8310 	mrs	r3, PRIMASK
 8007708:	60fb      	str	r3, [r7, #12]
  return(result);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d109      	bne.n	8007724 <osDelay+0x34>
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <osDelay+0x58>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d109      	bne.n	800772c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007718:	f3ef 8311 	mrs	r3, BASEPRI
 800771c:	60bb      	str	r3, [r7, #8]
  return(result);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <osDelay+0x3c>
    stat = osErrorISR;
 8007724:	f06f 0305 	mvn.w	r3, #5
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	e007      	b.n	800773c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f002 f9ca 	bl	8009ad0 <vTaskDelay>
    }
  }

  return (stat);
 800773c:	697b      	ldr	r3, [r7, #20]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000718 	.word	0x20000718

0800774c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007758:	f3ef 8305 	mrs	r3, IPSR
 800775c:	617b      	str	r3, [r7, #20]
  return(result);
 800775e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8007760:	2b00      	cmp	r3, #0
 8007762:	d13d      	bne.n	80077e0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007764:	f3ef 8310 	mrs	r3, PRIMASK
 8007768:	613b      	str	r3, [r7, #16]
  return(result);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d137      	bne.n	80077e0 <osEventFlagsNew+0x94>
 8007770:	4b1e      	ldr	r3, [pc, #120]	; (80077ec <osEventFlagsNew+0xa0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d105      	bne.n	8007784 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007778:	f3ef 8311 	mrs	r3, BASEPRI
 800777c:	60fb      	str	r3, [r7, #12]
  return(result);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d12d      	bne.n	80077e0 <osEventFlagsNew+0x94>
    mem = -1;
 8007784:	f04f 33ff 	mov.w	r3, #4294967295
 8007788:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d015      	beq.n	80077bc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d006      	beq.n	80077a6 <osEventFlagsNew+0x5a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	2b1f      	cmp	r3, #31
 800779e:	d902      	bls.n	80077a6 <osEventFlagsNew+0x5a>
        mem = 1;
 80077a0:	2301      	movs	r3, #1
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	e00c      	b.n	80077c0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <osEventFlagsNew+0x74>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <osEventFlagsNew+0x74>
          mem = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	e001      	b.n	80077c0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d106      	bne.n	80077d4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 fbf4 	bl	8007fb8 <xEventGroupCreateStatic>
 80077d0:	61f8      	str	r0, [r7, #28]
 80077d2:	e005      	b.n	80077e0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 80077da:	f000 fc24 	bl	8008026 <xEventGroupCreate>
 80077de:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80077e0:	69fb      	ldr	r3, [r7, #28]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000718 	.word	0x20000718

080077f0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b088      	sub	sp, #32
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <osEventFlagsSet+0x1e>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800780e:	f06f 0303 	mvn.w	r3, #3
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	e03a      	b.n	800788c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007816:	f3ef 8305 	mrs	r3, IPSR
 800781a:	617b      	str	r3, [r7, #20]
  return(result);
 800781c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10f      	bne.n	8007842 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007822:	f3ef 8310 	mrs	r3, PRIMASK
 8007826:	613b      	str	r3, [r7, #16]
  return(result);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d109      	bne.n	8007842 <osEventFlagsSet+0x52>
 800782e:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <osEventFlagsSet+0xa8>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d123      	bne.n	800787e <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007836:	f3ef 8311 	mrs	r3, BASEPRI
 800783a:	60fb      	str	r3, [r7, #12]
  return(result);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01d      	beq.n	800787e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8007842:	2300      	movs	r3, #0
 8007844:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	461a      	mov	r2, r3
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	69b8      	ldr	r0, [r7, #24]
 8007850:	f000 fe08 	bl	8008464 <xEventGroupSetBitsFromISR>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 800785a:	f06f 0302 	mvn.w	r3, #2
 800785e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8007860:	e013      	b.n	800788a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00e      	beq.n	800788a <osEventFlagsSet+0x9a>
 800786c:	4b0b      	ldr	r3, [pc, #44]	; (800789c <osEventFlagsSet+0xac>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800787c:	e005      	b.n	800788a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	69b8      	ldr	r0, [r7, #24]
 8007882:	f000 fd28 	bl	80082d6 <xEventGroupSetBits>
 8007886:	61f8      	str	r0, [r7, #28]
 8007888:	e000      	b.n	800788c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800788a:	bf00      	nop
  }

  return (rflags);
 800788c:	69fb      	ldr	r3, [r7, #28]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3720      	adds	r7, #32
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20000718 	.word	0x20000718
 800789c:	e000ed04 	.word	0xe000ed04

080078a0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <osEventFlagsClear+0x1e>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80078be:	f06f 0303 	mvn.w	r3, #3
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	e029      	b.n	800791a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c6:	f3ef 8305 	mrs	r3, IPSR
 80078ca:	617b      	str	r3, [r7, #20]
  return(result);
 80078cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10f      	bne.n	80078f2 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d2:	f3ef 8310 	mrs	r3, PRIMASK
 80078d6:	613b      	str	r3, [r7, #16]
  return(result);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <osEventFlagsClear+0x52>
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <osEventFlagsClear+0x84>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d114      	bne.n	8007910 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078e6:	f3ef 8311 	mrs	r3, BASEPRI
 80078ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80078f2:	69b8      	ldr	r0, [r7, #24]
 80078f4:	f000 fccc 	bl	8008290 <xEventGroupGetBitsFromISR>
 80078f8:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	69b8      	ldr	r0, [r7, #24]
 80078fe:	f000 fcb3 	bl	8008268 <xEventGroupClearBitsFromISR>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d108      	bne.n	800791a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8007908:	f06f 0302 	mvn.w	r3, #2
 800790c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800790e:	e004      	b.n	800791a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	69b8      	ldr	r0, [r7, #24]
 8007914:	f000 fc70 	bl	80081f8 <xEventGroupClearBits>
 8007918:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800791a:	69fb      	ldr	r3, [r7, #28]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000718 	.word	0x20000718

08007928 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007928:	b580      	push	{r7, lr}
 800792a:	b08e      	sub	sp, #56	; 0x38
 800792c:	af02      	add	r7, sp, #8
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <osEventFlagsWait+0x22>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800794a:	f06f 0303 	mvn.w	r3, #3
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
 8007950:	e059      	b.n	8007a06 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007952:	f3ef 8305 	mrs	r3, IPSR
 8007956:	61fb      	str	r3, [r7, #28]
  return(result);
 8007958:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10f      	bne.n	800797e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800795e:	f3ef 8310 	mrs	r3, PRIMASK
 8007962:	61bb      	str	r3, [r7, #24]
  return(result);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d109      	bne.n	800797e <osEventFlagsWait+0x56>
 800796a:	4b29      	ldr	r3, [pc, #164]	; (8007a10 <osEventFlagsWait+0xe8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d109      	bne.n	8007986 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007972:	f3ef 8311 	mrs	r3, BASEPRI
 8007976:	617b      	str	r3, [r7, #20]
  return(result);
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800797e:	f06f 0305 	mvn.w	r3, #5
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
 8007984:	e03f      	b.n	8007a06 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8007990:	2301      	movs	r3, #1
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007994:	e001      	b.n	800799a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8007996:	2300      	movs	r3, #0
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079a8:	e001      	b.n	80079ae <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	6a38      	ldr	r0, [r7, #32]
 80079ba:	f000 fb4f 	bl	800805c <xEventGroupWaitBits>
 80079be:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00e      	beq.n	80079e8 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d019      	beq.n	8007a06 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80079d8:	f06f 0301 	mvn.w	r3, #1
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
 80079de:	e012      	b.n	8007a06 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80079e0:	f06f 0302 	mvn.w	r3, #2
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
 80079e6:	e00e      	b.n	8007a06 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d109      	bne.n	8007a06 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80079f8:	f06f 0301 	mvn.w	r3, #1
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
 80079fe:	e002      	b.n	8007a06 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007a00:	f06f 0302 	mvn.w	r3, #2
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3730      	adds	r7, #48	; 0x30
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000718 	.word	0x20000718

08007a14 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	; 0x28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a20:	f3ef 8305 	mrs	r3, IPSR
 8007a24:	613b      	str	r3, [r7, #16]
  return(result);
 8007a26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f040 8085 	bne.w	8007b38 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d17e      	bne.n	8007b38 <osMutexNew+0x124>
 8007a3a:	4b42      	ldr	r3, [pc, #264]	; (8007b44 <osMutexNew+0x130>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d105      	bne.n	8007a4e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a42:	f3ef 8311 	mrs	r3, BASEPRI
 8007a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d174      	bne.n	8007b38 <osMutexNew+0x124>
    if (attr != NULL) {
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <osMutexNew+0x48>
      type = attr->attr_bits;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	623b      	str	r3, [r7, #32]
 8007a5a:	e001      	b.n	8007a60 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <osMutexNew+0x5c>
      rmtx = 1U;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
 8007a6e:	e001      	b.n	8007a74 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d15c      	bne.n	8007b38 <osMutexNew+0x124>
      mem = -1;
 8007a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a82:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d015      	beq.n	8007ab6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d006      	beq.n	8007aa0 <osMutexNew+0x8c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	2b4f      	cmp	r3, #79	; 0x4f
 8007a98:	d902      	bls.n	8007aa0 <osMutexNew+0x8c>
          mem = 1;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	61bb      	str	r3, [r7, #24]
 8007a9e:	e00c      	b.n	8007aba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d108      	bne.n	8007aba <osMutexNew+0xa6>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <osMutexNew+0xa6>
            mem = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61bb      	str	r3, [r7, #24]
 8007ab4:	e001      	b.n	8007aba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d112      	bne.n	8007ae6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	4619      	mov	r1, r3
 8007acc:	2004      	movs	r0, #4
 8007ace:	f000 feff 	bl	80088d0 <xQueueCreateMutexStatic>
 8007ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ad4:	e016      	b.n	8007b04 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	4619      	mov	r1, r3
 8007adc:	2001      	movs	r0, #1
 8007ade:	f000 fef7 	bl	80088d0 <xQueueCreateMutexStatic>
 8007ae2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ae4:	e00e      	b.n	8007b04 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007af2:	2004      	movs	r0, #4
 8007af4:	f000 fed4 	bl	80088a0 <xQueueCreateMutex>
 8007af8:	6278      	str	r0, [r7, #36]	; 0x24
 8007afa:	e003      	b.n	8007b04 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007afc:	2001      	movs	r0, #1
 8007afe:	f000 fecf 	bl	80088a0 <xQueueCreateMutex>
 8007b02:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00c      	beq.n	8007b24 <osMutexNew+0x110>
        if (attr != NULL) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <osMutexNew+0x104>
          name = attr->name;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	e001      	b.n	8007b1c <osMutexNew+0x108>
        } else {
          name = NULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007b1c:	6979      	ldr	r1, [r7, #20]
 8007b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b20:	f001 fda0 	bl	8009664 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d006      	beq.n	8007b38 <osMutexNew+0x124>
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	f043 0301 	orr.w	r3, r3, #1
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3728      	adds	r7, #40	; 0x28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000718 	.word	0x20000718

08007b48 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b66:	f3ef 8305 	mrs	r3, IPSR
 8007b6a:	613b      	str	r3, [r7, #16]
  return(result);
 8007b6c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10f      	bne.n	8007b92 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b72:	f3ef 8310 	mrs	r3, PRIMASK
 8007b76:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d109      	bne.n	8007b92 <osMutexAcquire+0x4a>
 8007b7e:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <osMutexAcquire+0xb8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d109      	bne.n	8007b9a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b86:	f3ef 8311 	mrs	r3, BASEPRI
 8007b8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007b92:	f06f 0305 	mvn.w	r3, #5
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	e02c      	b.n	8007bf4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007ba0:	f06f 0303 	mvn.w	r3, #3
 8007ba4:	61fb      	str	r3, [r7, #28]
 8007ba6:	e025      	b.n	8007bf4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d011      	beq.n	8007bd2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	69b8      	ldr	r0, [r7, #24]
 8007bb2:	f000 fedc 	bl	800896e <xQueueTakeMutexRecursive>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d01b      	beq.n	8007bf4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007bc2:	f06f 0301 	mvn.w	r3, #1
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e014      	b.n	8007bf4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007bca:	f06f 0302 	mvn.w	r3, #2
 8007bce:	61fb      	str	r3, [r7, #28]
 8007bd0:	e010      	b.n	8007bf4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	69b8      	ldr	r0, [r7, #24]
 8007bd6:	f001 fa6f 	bl	80090b8 <xQueueSemaphoreTake>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d009      	beq.n	8007bf4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007be6:	f06f 0301 	mvn.w	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
 8007bec:	e002      	b.n	8007bf4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007bee:	f06f 0302 	mvn.w	r3, #2
 8007bf2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007bf4:	69fb      	ldr	r3, [r7, #28]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000718 	.word	0x20000718

08007c04 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
 8007c12:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c20:	f3ef 8305 	mrs	r3, IPSR
 8007c24:	613b      	str	r3, [r7, #16]
  return(result);
 8007c26:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10f      	bne.n	8007c4c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <osMutexRelease+0x48>
 8007c38:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <osMutexRelease+0x9c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d109      	bne.n	8007c54 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c40:	f3ef 8311 	mrs	r3, BASEPRI
 8007c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007c4c:	f06f 0305 	mvn.w	r3, #5
 8007c50:	61fb      	str	r3, [r7, #28]
 8007c52:	e01f      	b.n	8007c94 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007c5a:	f06f 0303 	mvn.w	r3, #3
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	e018      	b.n	8007c94 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d009      	beq.n	8007c7c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007c68:	69b8      	ldr	r0, [r7, #24]
 8007c6a:	f000 fe4c 	bl	8008906 <xQueueGiveMutexRecursive>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d00f      	beq.n	8007c94 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007c74:	f06f 0302 	mvn.w	r3, #2
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e00b      	b.n	8007c94 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2100      	movs	r1, #0
 8007c82:	69b8      	ldr	r0, [r7, #24]
 8007c84:	f000 ff14 	bl	8008ab0 <xQueueGenericSend>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d002      	beq.n	8007c94 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007c8e:	f06f 0302 	mvn.w	r3, #2
 8007c92:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007c94:	69fb      	ldr	r3, [r7, #28]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3720      	adds	r7, #32
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000718 	.word	0x20000718

08007ca4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08c      	sub	sp, #48	; 0x30
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb4:	f3ef 8305 	mrs	r3, IPSR
 8007cb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 8086 	bne.w	8007dce <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cc6:	617b      	str	r3, [r7, #20]
  return(result);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d17f      	bne.n	8007dce <osSemaphoreNew+0x12a>
 8007cce:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <osSemaphoreNew+0x134>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d105      	bne.n	8007ce2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cda:	613b      	str	r3, [r7, #16]
  return(result);
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d175      	bne.n	8007dce <osSemaphoreNew+0x12a>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d072      	beq.n	8007dce <osSemaphoreNew+0x12a>
 8007ce8:	68ba      	ldr	r2, [r7, #8]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d86e      	bhi.n	8007dce <osSemaphoreNew+0x12a>
    mem = -1;
 8007cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d015      	beq.n	8007d28 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <osSemaphoreNew+0x6e>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	2b4f      	cmp	r3, #79	; 0x4f
 8007d0a:	d902      	bls.n	8007d12 <osSemaphoreNew+0x6e>
        mem = 1;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	623b      	str	r3, [r7, #32]
 8007d10:	e00c      	b.n	8007d2c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d108      	bne.n	8007d2c <osSemaphoreNew+0x88>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d104      	bne.n	8007d2c <osSemaphoreNew+0x88>
          mem = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	623b      	str	r3, [r7, #32]
 8007d26:	e001      	b.n	8007d2c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d04c      	beq.n	8007dce <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d128      	bne.n	8007d8c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10a      	bne.n	8007d56 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	2203      	movs	r2, #3
 8007d46:	9200      	str	r2, [sp, #0]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	f000 fcb5 	bl	80086bc <xQueueGenericCreateStatic>
 8007d52:	6278      	str	r0, [r7, #36]	; 0x24
 8007d54:	e005      	b.n	8007d62 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007d56:	2203      	movs	r2, #3
 8007d58:	2100      	movs	r1, #0
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f000 fd25 	bl	80087aa <xQueueGenericCreate>
 8007d60:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d022      	beq.n	8007dae <osSemaphoreNew+0x10a>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01f      	beq.n	8007dae <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d76:	f000 fe9b 	bl	8008ab0 <xQueueGenericSend>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d016      	beq.n	8007dae <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d82:	f001 fb25 	bl	80093d0 <vQueueDelete>
            hSemaphore = NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8a:	e010      	b.n	8007dae <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d108      	bne.n	8007da4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	461a      	mov	r2, r3
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 fe1d 	bl	80089da <xQueueCreateCountingSemaphoreStatic>
 8007da0:	6278      	str	r0, [r7, #36]	; 0x24
 8007da2:	e004      	b.n	8007dae <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fe4e 	bl	8008a48 <xQueueCreateCountingSemaphore>
 8007dac:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00c      	beq.n	8007dce <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	61fb      	str	r3, [r7, #28]
 8007dc0:	e001      	b.n	8007dc6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007dc6:	69f9      	ldr	r1, [r7, #28]
 8007dc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dca:	f001 fc4b 	bl	8009664 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3728      	adds	r7, #40	; 0x28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000718 	.word	0x20000718

08007ddc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007df4:	f06f 0303 	mvn.w	r3, #3
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	e04b      	b.n	8007e94 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dfc:	f3ef 8305 	mrs	r3, IPSR
 8007e00:	617b      	str	r3, [r7, #20]
  return(result);
 8007e02:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10f      	bne.n	8007e28 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e08:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <osSemaphoreAcquire+0x4c>
 8007e14:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <osSemaphoreAcquire+0xc4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d128      	bne.n	8007e6e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8007e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d022      	beq.n	8007e6e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007e2e:	f06f 0303 	mvn.w	r3, #3
 8007e32:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007e34:	e02d      	b.n	8007e92 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007e3a:	f107 0308 	add.w	r3, r7, #8
 8007e3e:	461a      	mov	r2, r3
 8007e40:	2100      	movs	r1, #0
 8007e42:	69b8      	ldr	r0, [r7, #24]
 8007e44:	f001 fa44 	bl	80092d0 <xQueueReceiveFromISR>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d003      	beq.n	8007e56 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007e4e:	f06f 0302 	mvn.w	r3, #2
 8007e52:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007e54:	e01d      	b.n	8007e92 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01a      	beq.n	8007e92 <osSemaphoreAcquire+0xb6>
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <osSemaphoreAcquire+0xc8>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007e6c:	e011      	b.n	8007e92 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	69b8      	ldr	r0, [r7, #24]
 8007e72:	f001 f921 	bl	80090b8 <xQueueSemaphoreTake>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d00b      	beq.n	8007e94 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007e82:	f06f 0301 	mvn.w	r3, #1
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e004      	b.n	8007e94 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007e8a:	f06f 0302 	mvn.w	r3, #2
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e000      	b.n	8007e94 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007e92:	bf00      	nop
      }
    }
  }

  return (stat);
 8007e94:	69fb      	ldr	r3, [r7, #28]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000718 	.word	0x20000718
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b088      	sub	sp, #32
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d103      	bne.n	8007ec6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007ebe:	f06f 0303 	mvn.w	r3, #3
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e03e      	b.n	8007f44 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ec6:	f3ef 8305 	mrs	r3, IPSR
 8007eca:	617b      	str	r3, [r7, #20]
  return(result);
 8007ecc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10f      	bne.n	8007ef2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed6:	613b      	str	r3, [r7, #16]
  return(result);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <osSemaphoreRelease+0x4a>
 8007ede:	4b1c      	ldr	r3, [pc, #112]	; (8007f50 <osSemaphoreRelease+0xa8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d120      	bne.n	8007f28 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8007eea:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01a      	beq.n	8007f28 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007ef6:	f107 0308 	add.w	r3, r7, #8
 8007efa:	4619      	mov	r1, r3
 8007efc:	69b8      	ldr	r0, [r7, #24]
 8007efe:	f000 ff6d 	bl	8008ddc <xQueueGiveFromISR>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d003      	beq.n	8007f10 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007f08:	f06f 0302 	mvn.w	r3, #2
 8007f0c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007f0e:	e018      	b.n	8007f42 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d015      	beq.n	8007f42 <osSemaphoreRelease+0x9a>
 8007f16:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <osSemaphoreRelease+0xac>)
 8007f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007f26:	e00c      	b.n	8007f42 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007f28:	2300      	movs	r3, #0
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	69b8      	ldr	r0, [r7, #24]
 8007f30:	f000 fdbe 	bl	8008ab0 <xQueueGenericSend>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d004      	beq.n	8007f44 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007f3a:	f06f 0302 	mvn.w	r3, #2
 8007f3e:	61fb      	str	r3, [r7, #28]
 8007f40:	e000      	b.n	8007f44 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007f42:	bf00      	nop
    }
  }

  return (stat);
 8007f44:	69fb      	ldr	r3, [r7, #28]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000718 	.word	0x20000718
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a06      	ldr	r2, [pc, #24]	; (8007f80 <vApplicationGetIdleTaskMemory+0x28>)
 8007f68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4a05      	ldr	r2, [pc, #20]	; (8007f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2240      	movs	r2, #64	; 0x40
 8007f74:	601a      	str	r2, [r3, #0]
}
 8007f76:	bf00      	nop
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr
 8007f80:	2000071c 	.word	0x2000071c
 8007f84:	200007c4 	.word	0x200007c4

08007f88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a06      	ldr	r2, [pc, #24]	; (8007fb0 <vApplicationGetTimerTaskMemory+0x28>)
 8007f98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4a05      	ldr	r2, [pc, #20]	; (8007fb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2280      	movs	r2, #128	; 0x80
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr
 8007fb0:	200008c4 	.word	0x200008c4
 8007fb4:	2000096c 	.word	0x2000096c

08007fb8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007fdc:	2320      	movs	r3, #32
 8007fde:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d00a      	beq.n	8007ffc <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	60fb      	str	r3, [r7, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	3304      	adds	r3, #4
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fa3b 	bl	800848c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2201      	movs	r2, #1
 800801a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800801c:	697b      	ldr	r3, [r7, #20]
	}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800802c:	2020      	movs	r0, #32
 800802e:	f003 fa55 	bl	800b4dc <pvPortMalloc>
 8008032:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fa21 	bl	800848c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008050:	687b      	ldr	r3, [r7, #4]
	}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b090      	sub	sp, #64	; 0x40
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008072:	2300      	movs	r3, #0
 8008074:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xEventGroupWaitBits+0x36>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	623b      	str	r3, [r7, #32]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	61fb      	str	r3, [r7, #28]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <xEventGroupWaitBits+0x72>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	61bb      	str	r3, [r7, #24]
}
 80080ca:	bf00      	nop
 80080cc:	e7fe      	b.n	80080cc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ce:	f002 fae3 	bl	800a698 <xTaskGetSchedulerState>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d102      	bne.n	80080de <xEventGroupWaitBits+0x82>
 80080d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <xEventGroupWaitBits+0x86>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <xEventGroupWaitBits+0x88>
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <xEventGroupWaitBits+0xa2>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	617b      	str	r3, [r7, #20]
}
 80080fa:	bf00      	nop
 80080fc:	e7fe      	b.n	80080fc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80080fe:	f001 fe2d 	bl	8009d5c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	68b9      	ldr	r1, [r7, #8]
 800810c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800810e:	f000 f987 	bl	8008420 <prvTestWaitCondition>
 8008112:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00e      	beq.n	8008138 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800811e:	2300      	movs	r3, #0
 8008120:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d028      	beq.n	800817a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	43db      	mvns	r3, r3
 8008130:	401a      	ands	r2, r3
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	e020      	b.n	800817a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	633b      	str	r3, [r7, #48]	; 0x30
 8008146:	e018      	b.n	800817a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008154:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008162:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008166:	1d18      	adds	r0, r3, #4
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	4313      	orrs	r3, r2
 800816e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008170:	4619      	mov	r1, r3
 8008172:	f001 fff3 	bl	800a15c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800817a:	f001 fdfd 	bl	8009d78 <xTaskResumeAll>
 800817e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008182:	2b00      	cmp	r3, #0
 8008184:	d031      	beq.n	80081ea <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800818c:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <xEventGroupWaitBits+0x198>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800819c:	f002 fbfc 	bl	800a998 <uxTaskResetEventItemValue>
 80081a0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80081a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d11a      	bne.n	80081e2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80081ac:	f003 f896 	bl	800b2dc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80081b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80081bc:	f000 f930 	bl	8008420 <prvTestWaitCondition>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	43db      	mvns	r3, r3
 80081d4:	401a      	ands	r2, r3
 80081d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80081da:	2301      	movs	r3, #1
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80081de:	f003 f8ad 	bl	800b33c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80081e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3740      	adds	r7, #64	; 0x40
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	e000ed04 	.word	0xe000ed04

080081f8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xEventGroupClearBits+0x2a>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <xEventGroupClearBits+0x4a>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	60bb      	str	r3, [r7, #8]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8008242:	f003 f84b 	bl	800b2dc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	43db      	mvns	r3, r3
 8008254:	401a      	ands	r2, r3
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800825a:	f003 f86f 	bl	800b33c <vPortExitCritical>

	return uxReturn;
 800825e:	693b      	ldr	r3, [r7, #16]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8008272:	2300      	movs	r3, #0
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4804      	ldr	r0, [pc, #16]	; (800828c <xEventGroupClearBitsFromISR+0x24>)
 800827a:	f002 ff1f 	bl	800b0bc <xTimerPendFunctionCallFromISR>
 800827e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008280:	68fb      	ldr	r3, [r7, #12]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	08008407 	.word	0x08008407

08008290 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	; 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800829c:	f3ef 8211 	mrs	r2, BASEPRI
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	60fa      	str	r2, [r7, #12]
 80082b2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082b4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082b6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	617b      	str	r3, [r7, #20]
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082c8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80082ca:	697b      	ldr	r3, [r7, #20]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3724      	adds	r7, #36	; 0x24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr

080082d6 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b08e      	sub	sp, #56	; 0x38
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80082e0:	2300      	movs	r3, #0
 80082e2:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <xEventGroupSetBits+0x32>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	613b      	str	r3, [r7, #16]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <xEventGroupSetBits+0x52>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60fb      	str	r3, [r7, #12]
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	3304      	adds	r3, #4
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	3308      	adds	r3, #8
 8008332:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008334:	f001 fd12 	bl	8009d5c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	431a      	orrs	r2, r3
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800834a:	e03c      	b.n	80083c6 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8008358:	2300      	movs	r3, #0
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008362:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800836a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d108      	bne.n	8008388 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	4013      	ands	r3, r2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008386:	e008      	b.n	800839a <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	4013      	ands	r3, r2
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	429a      	cmp	r2, r3
 8008394:	d101      	bne.n	800839a <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008396:	2301      	movs	r3, #1
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d010      	beq.n	80083c2 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80083aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083ba:	4619      	mov	r1, r3
 80083bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80083be:	f001 ff99 	bl	800a2f4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80083c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d1be      	bne.n	800834c <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	43db      	mvns	r3, r3
 80083d6:	401a      	ands	r2, r3
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80083dc:	f001 fccc 	bl	8009d78 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	681b      	ldr	r3, [r3, #0]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3738      	adds	r7, #56	; 0x38
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff6c 	bl	80082d6 <xEventGroupSetBits>
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff fef0 	bl	80081f8 <xEventGroupClearBits>
}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d107      	bne.n	8008446 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	4013      	ands	r3, r2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	e007      	b.n	8008456 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	4013      	ands	r3, r2
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	429a      	cmp	r2, r3
 8008450:	d101      	bne.n	8008456 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008452:	2301      	movs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	371c      	adds	r7, #28
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
	...

08008464 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	68f9      	ldr	r1, [r7, #12]
 8008476:	4804      	ldr	r0, [pc, #16]	; (8008488 <xEventGroupSetBitsFromISR+0x24>)
 8008478:	f002 fe20 	bl	800b0bc <xTimerPendFunctionCallFromISR>
 800847c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800847e:	697b      	ldr	r3, [r7, #20]
	}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	080083ed 	.word	0x080083ed

0800848c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f103 0208 	add.w	r2, r3, #8
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f04f 32ff 	mov.w	r2, #4294967295
 80084a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f103 0208 	add.w	r2, r3, #8
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f103 0208 	add.w	r2, r3, #8
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr

080084ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	bc80      	pop	{r7}
 80084e0:	4770      	bx	lr

080084e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853e:	d103      	bne.n	8008548 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	60fb      	str	r3, [r7, #12]
 8008546:	e00c      	b.n	8008562 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3308      	adds	r3, #8
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e002      	b.n	8008556 <vListInsert+0x2e>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	429a      	cmp	r2, r3
 8008560:	d2f6      	bcs.n	8008550 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	601a      	str	r2, [r3, #0]
}
 800858e:	bf00      	nop
 8008590:	3714      	adds	r7, #20
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6892      	ldr	r2, [r2, #8]
 80085ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6852      	ldr	r2, [r2, #4]
 80085b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d103      	bne.n	80085cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689a      	ldr	r2, [r3, #8]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	1e5a      	subs	r2, r3, #1
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr
	...

080085ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xQueueGenericReset+0x2a>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	60bb      	str	r3, [r7, #8]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008616:	f002 fe61 	bl	800b2dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	68f9      	ldr	r1, [r7, #12]
 8008624:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008626:	fb01 f303 	mul.w	r3, r1, r3
 800862a:	441a      	add	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008646:	3b01      	subs	r3, #1
 8008648:	68f9      	ldr	r1, [r7, #12]
 800864a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800864c:	fb01 f303 	mul.w	r3, r1, r3
 8008650:	441a      	add	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	22ff      	movs	r2, #255	; 0xff
 800865a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d114      	bne.n	8008696 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d01a      	beq.n	80086aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3310      	adds	r3, #16
 8008678:	4618      	mov	r0, r3
 800867a:	f001 fdd7 	bl	800a22c <xTaskRemoveFromEventList>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d012      	beq.n	80086aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008684:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <xQueueGenericReset+0xcc>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	e009      	b.n	80086aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3310      	adds	r3, #16
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff fef6 	bl	800848c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3324      	adds	r3, #36	; 0x24
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7ff fef1 	bl	800848c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086aa:	f002 fe47 	bl	800b33c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086ae:	2301      	movs	r3, #1
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	e000ed04 	.word	0xe000ed04

080086bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08e      	sub	sp, #56	; 0x38
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10a      	bne.n	80086e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086e2:	bf00      	nop
 80086e4:	e7fe      	b.n	80086e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10a      	bne.n	8008702 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <xQueueGenericCreateStatic+0x52>
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <xQueueGenericCreateStatic+0x56>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <xQueueGenericCreateStatic+0x58>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	623b      	str	r3, [r7, #32]
}
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <xQueueGenericCreateStatic+0x7e>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <xQueueGenericCreateStatic+0x82>
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <xQueueGenericCreateStatic+0x84>
 800873e:	2300      	movs	r3, #0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	61fb      	str	r3, [r7, #28]
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800875a:	2350      	movs	r3, #80	; 0x50
 800875c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b50      	cmp	r3, #80	; 0x50
 8008762:	d00a      	beq.n	800877a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	61bb      	str	r3, [r7, #24]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00d      	beq.n	80087a0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800878c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	4613      	mov	r3, r2
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f843 	bl	8008826 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3730      	adds	r7, #48	; 0x30
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b08a      	sub	sp, #40	; 0x28
 80087ae:	af02      	add	r7, sp, #8
 80087b0:	60f8      	str	r0, [r7, #12]
 80087b2:	60b9      	str	r1, [r7, #8]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	613b      	str	r3, [r7, #16]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	61fb      	str	r3, [r7, #28]
 80087de:	e004      	b.n	80087ea <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	fb02 f303 	mul.w	r3, r2, r3
 80087e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	3350      	adds	r3, #80	; 0x50
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 fe74 	bl	800b4dc <pvPortMalloc>
 80087f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00f      	beq.n	800881c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	3350      	adds	r3, #80	; 0x50
 8008800:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800880a:	79fa      	ldrb	r2, [r7, #7]
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	4613      	mov	r3, r2
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 f805 	bl	8008826 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800881c:	69bb      	ldr	r3, [r7, #24]
	}
 800881e:	4618      	mov	r0, r3
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	60f8      	str	r0, [r7, #12]
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e002      	b.n	8008848 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008854:	2101      	movs	r1, #1
 8008856:	69b8      	ldr	r0, [r7, #24]
 8008858:	f7ff fec8 	bl	80085ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008864:	bf00      	nop
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00e      	beq.n	8008898 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800888c:	2300      	movs	r3, #0
 800888e:	2200      	movs	r2, #0
 8008890:	2100      	movs	r1, #0
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f90c 	bl	8008ab0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008898:	bf00      	nop
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088aa:	2301      	movs	r3, #1
 80088ac:	617b      	str	r3, [r7, #20]
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	461a      	mov	r2, r3
 80088b6:	6939      	ldr	r1, [r7, #16]
 80088b8:	6978      	ldr	r0, [r7, #20]
 80088ba:	f7ff ff76 	bl	80087aa <xQueueGenericCreate>
 80088be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f7ff ffd3 	bl	800886c <prvInitialiseMutex>

		return pxNewQueue;
 80088c6:	68fb      	ldr	r3, [r7, #12]
	}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	4603      	mov	r3, r0
 80088d8:	6039      	str	r1, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	6939      	ldr	r1, [r7, #16]
 80088ee:	6978      	ldr	r0, [r7, #20]
 80088f0:	f7ff fee4 	bl	80086bc <xQueueGenericCreateStatic>
 80088f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff ffb8 	bl	800886c <prvInitialiseMutex>

		return pxNewQueue;
 80088fc:	68fb      	ldr	r3, [r7, #12]
	}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008906:	b590      	push	{r4, r7, lr}
 8008908:	b087      	sub	sp, #28
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10a      	bne.n	800892e <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	60fb      	str	r3, [r7, #12]
}
 800892a:	bf00      	nop
 800892c:	e7fe      	b.n	800892c <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	685c      	ldr	r4, [r3, #4]
 8008932:	f001 fea3 	bl	800a67c <xTaskGetCurrentTaskHandle>
 8008936:	4603      	mov	r3, r0
 8008938:	429c      	cmp	r4, r3
 800893a:	d111      	bne.n	8008960 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	1e5a      	subs	r2, r3, #1
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d105      	bne.n	800895a <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800894e:	2300      	movs	r3, #0
 8008950:	2200      	movs	r2, #0
 8008952:	2100      	movs	r1, #0
 8008954:	6938      	ldr	r0, [r7, #16]
 8008956:	f000 f8ab 	bl	8008ab0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800895a:	2301      	movs	r3, #1
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	e001      	b.n	8008964 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008960:	2300      	movs	r3, #0
 8008962:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008964:	697b      	ldr	r3, [r7, #20]
	}
 8008966:	4618      	mov	r0, r3
 8008968:	371c      	adds	r7, #28
 800896a:	46bd      	mov	sp, r7
 800896c:	bd90      	pop	{r4, r7, pc}

0800896e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800896e:	b590      	push	{r4, r7, lr}
 8008970:	b087      	sub	sp, #28
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60fb      	str	r3, [r7, #12]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	685c      	ldr	r4, [r3, #4]
 800899c:	f001 fe6e 	bl	800a67c <xTaskGetCurrentTaskHandle>
 80089a0:	4603      	mov	r3, r0
 80089a2:	429c      	cmp	r4, r3
 80089a4:	d107      	bne.n	80089b6 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80089b0:	2301      	movs	r3, #1
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	e00c      	b.n	80089d0 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6938      	ldr	r0, [r7, #16]
 80089ba:	f000 fb7d 	bl	80090b8 <xQueueSemaphoreTake>
 80089be:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80089d0:	697b      	ldr	r3, [r7, #20]
	}
 80089d2:	4618      	mov	r0, r3
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd90      	pop	{r4, r7, pc}

080089da <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b08a      	sub	sp, #40	; 0x28
 80089de:	af02      	add	r7, sp, #8
 80089e0:	60f8      	str	r0, [r7, #12]
 80089e2:	60b9      	str	r1, [r7, #8]
 80089e4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	61bb      	str	r3, [r7, #24]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d90a      	bls.n	8008a20 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	617b      	str	r3, [r7, #20]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a20:	2302      	movs	r3, #2
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2100      	movs	r1, #0
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f7ff fe46 	bl	80086bc <xQueueGenericCreateStatic>
 8008a30:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008a3e:	69fb      	ldr	r3, [r7, #28]
	}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	613b      	str	r3, [r7, #16]
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d90a      	bls.n	8008a8c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	60fb      	str	r3, [r7, #12]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	2100      	movs	r1, #0
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff fe8a 	bl	80087aa <xQueueGenericCreate>
 8008a96:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008aa4:	697b      	ldr	r3, [r7, #20]
	}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08e      	sub	sp, #56	; 0x38
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <xQueueGenericSend+0x40>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <xQueueGenericSend+0x44>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <xQueueGenericSend+0x46>
 8008af4:	2300      	movs	r3, #0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10a      	bne.n	8008b10 <xQueueGenericSend+0x60>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b0c:	bf00      	nop
 8008b0e:	e7fe      	b.n	8008b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d103      	bne.n	8008b1e <xQueueGenericSend+0x6e>
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d101      	bne.n	8008b22 <xQueueGenericSend+0x72>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <xQueueGenericSend+0x74>
 8008b22:	2300      	movs	r3, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	623b      	str	r3, [r7, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b3e:	f001 fdab 	bl	800a698 <xTaskGetSchedulerState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xQueueGenericSend+0x9e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueueGenericSend+0xa2>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueueGenericSend+0xa4>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	61fb      	str	r3, [r7, #28]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b6e:	f002 fbb5 	bl	800b2dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <xQueueGenericSend+0xd4>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d129      	bne.n	8008bd8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b8a:	f000 fc5b 	bl	8009444 <prvCopyDataToQueue>
 8008b8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d010      	beq.n	8008bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	3324      	adds	r3, #36	; 0x24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f001 fb45 	bl	800a22c <xTaskRemoveFromEventList>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d013      	beq.n	8008bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ba8:	4b3f      	ldr	r3, [pc, #252]	; (8008ca8 <xQueueGenericSend+0x1f8>)
 8008baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bae:	601a      	str	r2, [r3, #0]
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	e00a      	b.n	8008bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bc0:	4b39      	ldr	r3, [pc, #228]	; (8008ca8 <xQueueGenericSend+0x1f8>)
 8008bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bd0:	f002 fbb4 	bl	800b33c <vPortExitCritical>
				return pdPASS;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e063      	b.n	8008ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d103      	bne.n	8008be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bde:	f002 fbad 	bl	800b33c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e05c      	b.n	8008ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bec:	f107 0314 	add.w	r3, r7, #20
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f001 fbe1 	bl	800a3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bfa:	f002 fb9f 	bl	800b33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bfe:	f001 f8ad 	bl	8009d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c02:	f002 fb6b 	bl	800b2dc <vPortEnterCritical>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c0c:	b25b      	sxtb	r3, r3
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d103      	bne.n	8008c1c <xQueueGenericSend+0x16c>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d103      	bne.n	8008c32 <xQueueGenericSend+0x182>
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c32:	f002 fb83 	bl	800b33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c36:	1d3a      	adds	r2, r7, #4
 8008c38:	f107 0314 	add.w	r3, r7, #20
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fbd0 	bl	800a3e4 <xTaskCheckForTimeOut>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d124      	bne.n	8008c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c4c:	f000 fcf2 	bl	8009634 <prvIsQueueFull>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d018      	beq.n	8008c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	3310      	adds	r3, #16
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 fa58 	bl	800a114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c66:	f000 fc7d 	bl	8009564 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c6a:	f001 f885 	bl	8009d78 <xTaskResumeAll>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f af7c 	bne.w	8008b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <xQueueGenericSend+0x1f8>)
 8008c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	e772      	b.n	8008b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c8a:	f000 fc6b 	bl	8009564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c8e:	f001 f873 	bl	8009d78 <xTaskResumeAll>
 8008c92:	e76c      	b.n	8008b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c96:	f000 fc65 	bl	8009564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c9a:	f001 f86d 	bl	8009d78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c9e:	2300      	movs	r3, #0
		}
	}
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3738      	adds	r7, #56	; 0x38
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	e000ed04 	.word	0xe000ed04

08008cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08e      	sub	sp, #56	; 0x38
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <xQueueGenericSendFromISR+0x3c>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <xQueueGenericSendFromISR+0x40>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <xQueueGenericSendFromISR+0x42>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	623b      	str	r3, [r7, #32]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d103      	bne.n	8008d16 <xQueueGenericSendFromISR+0x6a>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <xQueueGenericSendFromISR+0x6e>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <xQueueGenericSendFromISR+0x70>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	61fb      	str	r3, [r7, #28]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d36:	f002 fb93 	bl	800b460 <vPortValidateInterruptPriority>
	__asm volatile
 8008d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8008d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d42:	f383 8811 	msr	BASEPRI, r3
 8008d46:	f3bf 8f6f 	isb	sy
 8008d4a:	f3bf 8f4f 	dsb	sy
 8008d4e:	61ba      	str	r2, [r7, #24]
 8008d50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d302      	bcc.n	8008d68 <xQueueGenericSendFromISR+0xbc>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d12c      	bne.n	8008dc2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d78:	f000 fb64 	bl	8009444 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d84:	d112      	bne.n	8008dac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d016      	beq.n	8008dbc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	3324      	adds	r3, #36	; 0x24
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fa4a 	bl	800a22c <xTaskRemoveFromEventList>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00e      	beq.n	8008dbc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00b      	beq.n	8008dbc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	e007      	b.n	8008dbc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008db0:	3301      	adds	r3, #1
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	b25a      	sxtb	r2, r3
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008dc0:	e001      	b.n	8008dc6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f383 8811 	msr	BASEPRI, r3
}
 8008dd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3738      	adds	r7, #56	; 0x38
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08e      	sub	sp, #56	; 0x38
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	623b      	str	r3, [r7, #32]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	61fb      	str	r3, [r7, #28]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d103      	bne.n	8008e34 <xQueueGiveFromISR+0x58>
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <xQueueGiveFromISR+0x5c>
 8008e34:	2301      	movs	r3, #1
 8008e36:	e000      	b.n	8008e3a <xQueueGiveFromISR+0x5e>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	61bb      	str	r3, [r7, #24]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e54:	f002 fb04 	bl	800b460 <vPortValidateInterruptPriority>
	__asm volatile
 8008e58:	f3ef 8211 	mrs	r2, BASEPRI
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	617a      	str	r2, [r7, #20]
 8008e6e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008e70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d22b      	bcs.n	8008edc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9e:	d112      	bne.n	8008ec6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d016      	beq.n	8008ed6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	3324      	adds	r3, #36	; 0x24
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 f9bd 	bl	800a22c <xTaskRemoveFromEventList>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00e      	beq.n	8008ed6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e007      	b.n	8008ed6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eca:	3301      	adds	r3, #1
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	b25a      	sxtb	r2, r3
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eda:	e001      	b.n	8008ee0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f383 8811 	msr	BASEPRI, r3
}
 8008eea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3738      	adds	r7, #56	; 0x38
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08c      	sub	sp, #48	; 0x30
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <xQueueReceive+0x30>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	623b      	str	r3, [r7, #32]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <xQueueReceive+0x3e>
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <xQueueReceive+0x42>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <xQueueReceive+0x44>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10a      	bne.n	8008f56 <xQueueReceive+0x5e>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	61fb      	str	r3, [r7, #28]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f56:	f001 fb9f 	bl	800a698 <xTaskGetSchedulerState>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d102      	bne.n	8008f66 <xQueueReceive+0x6e>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <xQueueReceive+0x72>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <xQueueReceive+0x74>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <xQueueReceive+0x8e>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	61bb      	str	r3, [r7, #24]
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f86:	f002 f9a9 	bl	800b2dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d01f      	beq.n	8008fd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f9a:	f000 fabd 	bl	8009518 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	1e5a      	subs	r2, r3, #1
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00f      	beq.n	8008fce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	3310      	adds	r3, #16
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f93a 	bl	800a22c <xTaskRemoveFromEventList>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d007      	beq.n	8008fce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fbe:	4b3d      	ldr	r3, [pc, #244]	; (80090b4 <xQueueReceive+0x1bc>)
 8008fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fce:	f002 f9b5 	bl	800b33c <vPortExitCritical>
				return pdPASS;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e069      	b.n	80090aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d103      	bne.n	8008fe4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fdc:	f002 f9ae 	bl	800b33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e062      	b.n	80090aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d106      	bne.n	8008ff8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fea:	f107 0310 	add.w	r3, r7, #16
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 f9e2 	bl	800a3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ff8:	f002 f9a0 	bl	800b33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ffc:	f000 feae 	bl	8009d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009000:	f002 f96c 	bl	800b2dc <vPortEnterCritical>
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800900a:	b25b      	sxtb	r3, r3
 800900c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009010:	d103      	bne.n	800901a <xQueueReceive+0x122>
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009020:	b25b      	sxtb	r3, r3
 8009022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009026:	d103      	bne.n	8009030 <xQueueReceive+0x138>
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009030:	f002 f984 	bl	800b33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009034:	1d3a      	adds	r2, r7, #4
 8009036:	f107 0310 	add.w	r3, r7, #16
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f001 f9d1 	bl	800a3e4 <xTaskCheckForTimeOut>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d123      	bne.n	8009090 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800904a:	f000 fadd 	bl	8009608 <prvIsQueueEmpty>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d017      	beq.n	8009084 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	3324      	adds	r3, #36	; 0x24
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f001 f859 	bl	800a114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009064:	f000 fa7e 	bl	8009564 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009068:	f000 fe86 	bl	8009d78 <xTaskResumeAll>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d189      	bne.n	8008f86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009072:	4b10      	ldr	r3, [pc, #64]	; (80090b4 <xQueueReceive+0x1bc>)
 8009074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	e780      	b.n	8008f86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009086:	f000 fa6d 	bl	8009564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800908a:	f000 fe75 	bl	8009d78 <xTaskResumeAll>
 800908e:	e77a      	b.n	8008f86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009092:	f000 fa67 	bl	8009564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009096:	f000 fe6f 	bl	8009d78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800909a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909c:	f000 fab4 	bl	8009608 <prvIsQueueEmpty>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f43f af6f 	beq.w	8008f86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3730      	adds	r7, #48	; 0x30
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	e000ed04 	.word	0xe000ed04

080090b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	; 0x38
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	623b      	str	r3, [r7, #32]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	61fb      	str	r3, [r7, #28]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009108:	f001 fac6 	bl	800a698 <xTaskGetSchedulerState>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <xQueueSemaphoreTake+0x60>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <xQueueSemaphoreTake+0x64>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <xQueueSemaphoreTake+0x66>
 800911c:	2300      	movs	r3, #0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	61bb      	str	r3, [r7, #24]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009138:	f002 f8d0 	bl	800b2dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009140:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	2b00      	cmp	r3, #0
 8009146:	d024      	beq.n	8009192 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009158:	f001 fc36 	bl	800a9c8 <pvTaskIncrementMutexHeldCount>
 800915c:	4602      	mov	r2, r0
 800915e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009160:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00f      	beq.n	800918a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	3310      	adds	r3, #16
 800916e:	4618      	mov	r0, r3
 8009170:	f001 f85c 	bl	800a22c <xTaskRemoveFromEventList>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800917a:	4b54      	ldr	r3, [pc, #336]	; (80092cc <xQueueSemaphoreTake+0x214>)
 800917c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800918a:	f002 f8d7 	bl	800b33c <vPortExitCritical>
				return pdPASS;
 800918e:	2301      	movs	r3, #1
 8009190:	e097      	b.n	80092c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d111      	bne.n	80091bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	617b      	str	r3, [r7, #20]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80091b4:	f002 f8c2 	bl	800b33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e082      	b.n	80092c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091c2:	f107 030c 	add.w	r3, r7, #12
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 f8f6 	bl	800a3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091d0:	f002 f8b4 	bl	800b33c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091d4:	f000 fdc2 	bl	8009d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091d8:	f002 f880 	bl	800b2dc <vPortEnterCritical>
 80091dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091e2:	b25b      	sxtb	r3, r3
 80091e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e8:	d103      	bne.n	80091f2 <xQueueSemaphoreTake+0x13a>
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f8:	b25b      	sxtb	r3, r3
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fe:	d103      	bne.n	8009208 <xQueueSemaphoreTake+0x150>
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009208:	f002 f898 	bl	800b33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800920c:	463a      	mov	r2, r7
 800920e:	f107 030c 	add.w	r3, r7, #12
 8009212:	4611      	mov	r1, r2
 8009214:	4618      	mov	r0, r3
 8009216:	f001 f8e5 	bl	800a3e4 <xTaskCheckForTimeOut>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d132      	bne.n	8009286 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009222:	f000 f9f1 	bl	8009608 <prvIsQueueEmpty>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d026      	beq.n	800927a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009234:	f002 f852 	bl	800b2dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	f001 fa49 	bl	800a6d4 <xTaskPriorityInherit>
 8009242:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009244:	f002 f87a 	bl	800b33c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	3324      	adds	r3, #36	; 0x24
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f000 ff5f 	bl	800a114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009258:	f000 f984 	bl	8009564 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800925c:	f000 fd8c 	bl	8009d78 <xTaskResumeAll>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	f47f af68 	bne.w	8009138 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009268:	4b18      	ldr	r3, [pc, #96]	; (80092cc <xQueueSemaphoreTake+0x214>)
 800926a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	e75e      	b.n	8009138 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800927a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800927c:	f000 f972 	bl	8009564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009280:	f000 fd7a 	bl	8009d78 <xTaskResumeAll>
 8009284:	e758      	b.n	8009138 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009288:	f000 f96c 	bl	8009564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800928c:	f000 fd74 	bl	8009d78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009292:	f000 f9b9 	bl	8009608 <prvIsQueueEmpty>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	f43f af4d 	beq.w	8009138 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00d      	beq.n	80092c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80092a4:	f002 f81a 	bl	800b2dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80092a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092aa:	f000 f8b4 	bl	8009416 <prvGetDisinheritPriorityAfterTimeout>
 80092ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 fae8 	bl	800a88c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80092bc:	f002 f83e 	bl	800b33c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3738      	adds	r7, #56	; 0x38
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	e000ed04 	.word	0xe000ed04

080092d0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08e      	sub	sp, #56	; 0x38
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	623b      	str	r3, [r7, #32]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d103      	bne.n	800930a <xQueueReceiveFromISR+0x3a>
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <xQueueReceiveFromISR+0x3e>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <xQueueReceiveFromISR+0x40>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10a      	bne.n	800932a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	61fb      	str	r3, [r7, #28]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800932a:	f002 f899 	bl	800b460 <vPortValidateInterruptPriority>
	__asm volatile
 800932e:	f3ef 8211 	mrs	r2, BASEPRI
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	61ba      	str	r2, [r7, #24]
 8009344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	2b00      	cmp	r3, #0
 8009354:	d02f      	beq.n	80093b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800935c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009364:	f000 f8d8 	bl	8009518 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	1e5a      	subs	r2, r3, #1
 800936c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d112      	bne.n	80093a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d016      	beq.n	80093b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	3310      	adds	r3, #16
 8009386:	4618      	mov	r0, r3
 8009388:	f000 ff50 	bl	800a22c <xTaskRemoveFromEventList>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00e      	beq.n	80093b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	e007      	b.n	80093b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80093a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a4:	3301      	adds	r3, #1
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	b25a      	sxtb	r2, r3
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80093b0:	2301      	movs	r3, #1
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34
 80093b4:	e001      	b.n	80093ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	637b      	str	r3, [r7, #52]	; 0x34
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f383 8811 	msr	BASEPRI, r3
}
 80093c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3738      	adds	r7, #56	; 0x38
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <vQueueDelete+0x28>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	60bb      	str	r3, [r7, #8]
}
 80093f4:	bf00      	nop
 80093f6:	e7fe      	b.n	80093f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f95b 	bl	80096b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f002 f92b 	bl	800b664 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009416:	b480      	push	{r7}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	2b00      	cmp	r3, #0
 8009424:	d006      	beq.n	8009434 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	e001      	b.n	8009438 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009438:	68fb      	ldr	r3, [r7, #12]
	}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr

08009444 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009450:	2300      	movs	r3, #0
 8009452:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10d      	bne.n	800947e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d14d      	bne.n	8009506 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	f001 f99e 	bl	800a7b0 <xTaskPriorityDisinherit>
 8009474:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	605a      	str	r2, [r3, #4]
 800947c:	e043      	b.n	8009506 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d119      	bne.n	80094b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6898      	ldr	r0, [r3, #8]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	461a      	mov	r2, r3
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	f004 fa21 	bl	800d8d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949c:	441a      	add	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	689a      	ldr	r2, [r3, #8]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d32b      	bcc.n	8009506 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	609a      	str	r2, [r3, #8]
 80094b6:	e026      	b.n	8009506 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68d8      	ldr	r0, [r3, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c0:	461a      	mov	r2, r3
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	f004 fa07 	bl	800d8d6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68da      	ldr	r2, [r3, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d0:	425b      	negs	r3, r3
 80094d2:	441a      	add	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68da      	ldr	r2, [r3, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d207      	bcs.n	80094f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	425b      	negs	r3, r3
 80094ee:	441a      	add	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d105      	bne.n	8009506 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	3b01      	subs	r3, #1
 8009504:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800950e:	697b      	ldr	r3, [r7, #20]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009526:	2b00      	cmp	r3, #0
 8009528:	d018      	beq.n	800955c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	441a      	add	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d303      	bcc.n	800954c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68d9      	ldr	r1, [r3, #12]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	461a      	mov	r2, r3
 8009556:	6838      	ldr	r0, [r7, #0]
 8009558:	f004 f9bd 	bl	800d8d6 <memcpy>
	}
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800956c:	f001 feb6 	bl	800b2dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009576:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009578:	e011      	b.n	800959e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	2b00      	cmp	r3, #0
 8009580:	d012      	beq.n	80095a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3324      	adds	r3, #36	; 0x24
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fe50 	bl	800a22c <xTaskRemoveFromEventList>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009592:	f000 ff89 	bl	800a4a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	3b01      	subs	r3, #1
 800959a:	b2db      	uxtb	r3, r3
 800959c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800959e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	dce9      	bgt.n	800957a <prvUnlockQueue+0x16>
 80095a6:	e000      	b.n	80095aa <prvUnlockQueue+0x46>
					break;
 80095a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	22ff      	movs	r2, #255	; 0xff
 80095ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095b2:	f001 fec3 	bl	800b33c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095b6:	f001 fe91 	bl	800b2dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095c2:	e011      	b.n	80095e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d012      	beq.n	80095f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3310      	adds	r3, #16
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 fe2b 	bl	800a22c <xTaskRemoveFromEventList>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80095dc:	f000 ff64 	bl	800a4a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dce9      	bgt.n	80095c4 <prvUnlockQueue+0x60>
 80095f0:	e000      	b.n	80095f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80095f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	22ff      	movs	r2, #255	; 0xff
 80095f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80095fc:	f001 fe9e 	bl	800b33c <vPortExitCritical>
}
 8009600:	bf00      	nop
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009610:	f001 fe64 	bl	800b2dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e001      	b.n	8009626 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009626:	f001 fe89 	bl	800b33c <vPortExitCritical>

	return xReturn;
 800962a:	68fb      	ldr	r3, [r7, #12]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800963c:	f001 fe4e 	bl	800b2dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009648:	429a      	cmp	r2, r3
 800964a:	d102      	bne.n	8009652 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800964c:	2301      	movs	r3, #1
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	e001      	b.n	8009656 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009656:	f001 fe71 	bl	800b33c <vPortExitCritical>

	return xReturn;
 800965a:	68fb      	ldr	r3, [r7, #12]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	e014      	b.n	800969e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009674:	4a0e      	ldr	r2, [pc, #56]	; (80096b0 <vQueueAddToRegistry+0x4c>)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10b      	bne.n	8009698 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009680:	490b      	ldr	r1, [pc, #44]	; (80096b0 <vQueueAddToRegistry+0x4c>)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800968a:	4a09      	ldr	r2, [pc, #36]	; (80096b0 <vQueueAddToRegistry+0x4c>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	00db      	lsls	r3, r3, #3
 8009690:	4413      	add	r3, r2
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009696:	e006      	b.n	80096a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b07      	cmp	r3, #7
 80096a2:	d9e7      	bls.n	8009674 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bc80      	pop	{r7}
 80096ae:	4770      	bx	lr
 80096b0:	20000b6c 	.word	0x20000b6c

080096b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e016      	b.n	80096f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80096c2:	4a10      	ldr	r2, [pc, #64]	; (8009704 <vQueueUnregisterQueue+0x50>)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	4413      	add	r3, r2
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d10b      	bne.n	80096ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80096d2:	4a0c      	ldr	r2, [pc, #48]	; (8009704 <vQueueUnregisterQueue+0x50>)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2100      	movs	r1, #0
 80096d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80096dc:	4a09      	ldr	r2, [pc, #36]	; (8009704 <vQueueUnregisterQueue+0x50>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	4413      	add	r3, r2
 80096e4:	2200      	movs	r2, #0
 80096e6:	605a      	str	r2, [r3, #4]
				break;
 80096e8:	e006      	b.n	80096f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3301      	adds	r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b07      	cmp	r3, #7
 80096f4:	d9e5      	bls.n	80096c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20000b6c 	.word	0x20000b6c

08009708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009708:	b580      	push	{r7, lr}
 800970a:	b086      	sub	sp, #24
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009718:	f001 fde0 	bl	800b2dc <vPortEnterCritical>
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009722:	b25b      	sxtb	r3, r3
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d103      	bne.n	8009732 <vQueueWaitForMessageRestricted+0x2a>
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009738:	b25b      	sxtb	r3, r3
 800973a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973e:	d103      	bne.n	8009748 <vQueueWaitForMessageRestricted+0x40>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009748:	f001 fdf8 	bl	800b33c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	3324      	adds	r3, #36	; 0x24
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	68b9      	ldr	r1, [r7, #8]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 fd39 	bl	800a1d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	f7ff fefe 	bl	8009564 <prvUnlockQueue>
	}
 8009768:	bf00      	nop
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08e      	sub	sp, #56	; 0x38
 8009774:	af04      	add	r7, sp, #16
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800977e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	623b      	str	r3, [r7, #32]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	61fb      	str	r3, [r7, #28]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097b6:	23a8      	movs	r3, #168	; 0xa8
 80097b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2ba8      	cmp	r3, #168	; 0xa8
 80097be:	d00a      	beq.n	80097d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	61bb      	str	r3, [r7, #24]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d01e      	beq.n	800981a <xTaskCreateStatic+0xaa>
 80097dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d01b      	beq.n	800981a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097f4:	2300      	movs	r3, #0
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	9302      	str	r3, [sp, #8]
 80097fc:	f107 0314 	add.w	r3, r7, #20
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	68b9      	ldr	r1, [r7, #8]
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f851 	bl	80098b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009814:	f000 f8ec 	bl	80099f0 <prvAddNewTaskToReadyList>
 8009818:	e001      	b.n	800981e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800981e:	697b      	ldr	r3, [r7, #20]
	}
 8009820:	4618      	mov	r0, r3
 8009822:	3728      	adds	r7, #40	; 0x28
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08c      	sub	sp, #48	; 0x30
 800982c:	af04      	add	r7, sp, #16
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	4613      	mov	r3, r2
 8009836:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4618      	mov	r0, r3
 800983e:	f001 fe4d 	bl	800b4dc <pvPortMalloc>
 8009842:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00e      	beq.n	8009868 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800984a:	20a8      	movs	r0, #168	; 0xa8
 800984c:	f001 fe46 	bl	800b4dc <pvPortMalloc>
 8009850:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	631a      	str	r2, [r3, #48]	; 0x30
 800985e:	e005      	b.n	800986c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009860:	6978      	ldr	r0, [r7, #20]
 8009862:	f001 feff 	bl	800b664 <vPortFree>
 8009866:	e001      	b.n	800986c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009868:	2300      	movs	r3, #0
 800986a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d017      	beq.n	80098a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800987a:	88fa      	ldrh	r2, [r7, #6]
 800987c:	2300      	movs	r3, #0
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	9302      	str	r3, [sp, #8]
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f80f 	bl	80098b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009896:	69f8      	ldr	r0, [r7, #28]
 8009898:	f000 f8aa 	bl	80099f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800989c:	2301      	movs	r3, #1
 800989e:	61bb      	str	r3, [r7, #24]
 80098a0:	e002      	b.n	80098a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295
 80098a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098a8:	69bb      	ldr	r3, [r7, #24]
	}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3720      	adds	r7, #32
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	461a      	mov	r2, r3
 80098cc:	21a5      	movs	r1, #165	; 0xa5
 80098ce:	f003 febd 	bl	800d64c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098dc:	3b01      	subs	r3, #1
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	f023 0307 	bic.w	r3, r3, #7
 80098ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <prvInitialiseNewTask+0x58>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	617b      	str	r3, [r7, #20]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800990c:	2300      	movs	r3, #0
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	e012      	b.n	8009938 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4413      	add	r3, r2
 8009918:	7819      	ldrb	r1, [r3, #0]
 800991a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	4413      	add	r3, r2
 8009920:	3334      	adds	r3, #52	; 0x34
 8009922:	460a      	mov	r2, r1
 8009924:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4413      	add	r3, r2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d006      	beq.n	8009940 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	3301      	adds	r3, #1
 8009936:	61fb      	str	r3, [r7, #28]
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	2b0f      	cmp	r3, #15
 800993c:	d9e9      	bls.n	8009912 <prvInitialiseNewTask+0x5e>
 800993e:	e000      	b.n	8009942 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009940:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	2b37      	cmp	r3, #55	; 0x37
 800994e:	d901      	bls.n	8009954 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009950:	2337      	movs	r3, #55	; 0x37
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800995e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	2200      	movs	r2, #0
 8009964:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	3304      	adds	r3, #4
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fdad 	bl	80084ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	3318      	adds	r3, #24
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe fda8 	bl	80084ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	2200      	movs	r2, #0
 800999c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	3354      	adds	r3, #84	; 0x54
 80099a4:	224c      	movs	r2, #76	; 0x4c
 80099a6:	2100      	movs	r1, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f003 fe4f 	bl	800d64c <memset>
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	4a0c      	ldr	r2, [pc, #48]	; (80099e4 <prvInitialiseNewTask+0x130>)
 80099b2:	659a      	str	r2, [r3, #88]	; 0x58
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	4a0c      	ldr	r2, [pc, #48]	; (80099e8 <prvInitialiseNewTask+0x134>)
 80099b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	4a0b      	ldr	r2, [pc, #44]	; (80099ec <prvInitialiseNewTask+0x138>)
 80099be:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	68f9      	ldr	r1, [r7, #12]
 80099c4:	69b8      	ldr	r0, [r7, #24]
 80099c6:	f001 fb99 	bl	800b0fc <pxPortInitialiseStack>
 80099ca:	4602      	mov	r2, r0
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099dc:	bf00      	nop
 80099de:	3720      	adds	r7, #32
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	20003208 	.word	0x20003208
 80099e8:	20003270 	.word	0x20003270
 80099ec:	200032d8 	.word	0x200032d8

080099f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099f8:	f001 fc70 	bl	800b2dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099fc:	4b2d      	ldr	r3, [pc, #180]	; (8009ab4 <prvAddNewTaskToReadyList+0xc4>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	4a2c      	ldr	r2, [pc, #176]	; (8009ab4 <prvAddNewTaskToReadyList+0xc4>)
 8009a04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a06:	4b2c      	ldr	r3, [pc, #176]	; (8009ab8 <prvAddNewTaskToReadyList+0xc8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d109      	bne.n	8009a22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a0e:	4a2a      	ldr	r2, [pc, #168]	; (8009ab8 <prvAddNewTaskToReadyList+0xc8>)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a14:	4b27      	ldr	r3, [pc, #156]	; (8009ab4 <prvAddNewTaskToReadyList+0xc4>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d110      	bne.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a1c:	f000 fd68 	bl	800a4f0 <prvInitialiseTaskLists>
 8009a20:	e00d      	b.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a22:	4b26      	ldr	r3, [pc, #152]	; (8009abc <prvAddNewTaskToReadyList+0xcc>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a2a:	4b23      	ldr	r3, [pc, #140]	; (8009ab8 <prvAddNewTaskToReadyList+0xc8>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d802      	bhi.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a38:	4a1f      	ldr	r2, [pc, #124]	; (8009ab8 <prvAddNewTaskToReadyList+0xc8>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a3e:	4b20      	ldr	r3, [pc, #128]	; (8009ac0 <prvAddNewTaskToReadyList+0xd0>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	4a1e      	ldr	r2, [pc, #120]	; (8009ac0 <prvAddNewTaskToReadyList+0xd0>)
 8009a46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a48:	4b1d      	ldr	r3, [pc, #116]	; (8009ac0 <prvAddNewTaskToReadyList+0xd0>)
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a54:	4b1b      	ldr	r3, [pc, #108]	; (8009ac4 <prvAddNewTaskToReadyList+0xd4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d903      	bls.n	8009a64 <prvAddNewTaskToReadyList+0x74>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	4a18      	ldr	r2, [pc, #96]	; (8009ac4 <prvAddNewTaskToReadyList+0xd4>)
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4a15      	ldr	r2, [pc, #84]	; (8009ac8 <prvAddNewTaskToReadyList+0xd8>)
 8009a72:	441a      	add	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f7fe fd31 	bl	80084e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a80:	f001 fc5c 	bl	800b33c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a84:	4b0d      	ldr	r3, [pc, #52]	; (8009abc <prvAddNewTaskToReadyList+0xcc>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00e      	beq.n	8009aaa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <prvAddNewTaskToReadyList+0xc8>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d207      	bcs.n	8009aaa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a9a:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <prvAddNewTaskToReadyList+0xdc>)
 8009a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20001080 	.word	0x20001080
 8009ab8:	20000bac 	.word	0x20000bac
 8009abc:	2000108c 	.word	0x2000108c
 8009ac0:	2000109c 	.word	0x2000109c
 8009ac4:	20001088 	.word	0x20001088
 8009ac8:	20000bb0 	.word	0x20000bb0
 8009acc:	e000ed04 	.word	0xe000ed04

08009ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d017      	beq.n	8009b12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ae2:	4b13      	ldr	r3, [pc, #76]	; (8009b30 <vTaskDelay+0x60>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <vTaskDelay+0x30>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	60bb      	str	r3, [r7, #8]
}
 8009afc:	bf00      	nop
 8009afe:	e7fe      	b.n	8009afe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b00:	f000 f92c 	bl	8009d5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b04:	2100      	movs	r1, #0
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 ff72 	bl	800a9f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b0c:	f000 f934 	bl	8009d78 <xTaskResumeAll>
 8009b10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d107      	bne.n	8009b28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <vTaskDelay+0x64>)
 8009b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	200010a8 	.word	0x200010a8
 8009b34:	e000ed04 	.word	0xe000ed04

08009b38 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2b37      	cmp	r3, #55	; 0x37
 8009b4a:	d90a      	bls.n	8009b62 <vTaskPrioritySet+0x2a>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	60fb      	str	r3, [r7, #12]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b37      	cmp	r3, #55	; 0x37
 8009b66:	d901      	bls.n	8009b6c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b68:	2337      	movs	r3, #55	; 0x37
 8009b6a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8009b6c:	f001 fbb6 	bl	800b2dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <vTaskPrioritySet+0x44>
 8009b76:	4b3d      	ldr	r3, [pc, #244]	; (8009c6c <vTaskPrioritySet+0x134>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	e000      	b.n	8009b7e <vTaskPrioritySet+0x46>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b84:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d068      	beq.n	8009c60 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d90d      	bls.n	8009bb2 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8009b96:	4b35      	ldr	r3, [pc, #212]	; (8009c6c <vTaskPrioritySet+0x134>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d00f      	beq.n	8009bc0 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8009ba0:	4b32      	ldr	r3, [pc, #200]	; (8009c6c <vTaskPrioritySet+0x134>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d309      	bcc.n	8009bc0 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8009bac:	2301      	movs	r3, #1
 8009bae:	61fb      	str	r3, [r7, #28]
 8009bb0:	e006      	b.n	8009bc0 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8009bb2:	4b2e      	ldr	r3, [pc, #184]	; (8009c6c <vTaskPrioritySet+0x134>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d101      	bne.n	8009bc0 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d102      	bne.n	8009bd8 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	db04      	blt.n	8009bf0 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	6959      	ldr	r1, [r3, #20]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4a1c      	ldr	r2, [pc, #112]	; (8009c70 <vTaskPrioritySet+0x138>)
 8009c00:	4413      	add	r3, r2
 8009c02:	4299      	cmp	r1, r3
 8009c04:	d101      	bne.n	8009c0a <vTaskPrioritySet+0xd2>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <vTaskPrioritySet+0xd4>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01c      	beq.n	8009c4a <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	3304      	adds	r3, #4
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fcbf 	bl	8008598 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1e:	4b15      	ldr	r3, [pc, #84]	; (8009c74 <vTaskPrioritySet+0x13c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d903      	bls.n	8009c2e <vTaskPrioritySet+0xf6>
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	4a12      	ldr	r2, [pc, #72]	; (8009c74 <vTaskPrioritySet+0x13c>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	4a0d      	ldr	r2, [pc, #52]	; (8009c70 <vTaskPrioritySet+0x138>)
 8009c3c:	441a      	add	r2, r3
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7fe fc4c 	bl	80084e2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8009c50:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <vTaskPrioritySet+0x140>)
 8009c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8009c60:	f001 fb6c 	bl	800b33c <vPortExitCritical>
	}
 8009c64:	bf00      	nop
 8009c66:	3720      	adds	r7, #32
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	20000bac 	.word	0x20000bac
 8009c70:	20000bb0 	.word	0x20000bb0
 8009c74:	20001088 	.word	0x20001088
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08a      	sub	sp, #40	; 0x28
 8009c80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c8a:	463a      	mov	r2, r7
 8009c8c:	1d39      	adds	r1, r7, #4
 8009c8e:	f107 0308 	add.w	r3, r7, #8
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe f960 	bl	8007f58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c98:	6839      	ldr	r1, [r7, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	9202      	str	r2, [sp, #8]
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	460a      	mov	r2, r1
 8009caa:	4924      	ldr	r1, [pc, #144]	; (8009d3c <vTaskStartScheduler+0xc0>)
 8009cac:	4824      	ldr	r0, [pc, #144]	; (8009d40 <vTaskStartScheduler+0xc4>)
 8009cae:	f7ff fd5f 	bl	8009770 <xTaskCreateStatic>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4a23      	ldr	r2, [pc, #140]	; (8009d44 <vTaskStartScheduler+0xc8>)
 8009cb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009cb8:	4b22      	ldr	r3, [pc, #136]	; (8009d44 <vTaskStartScheduler+0xc8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	e001      	b.n	8009cca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d102      	bne.n	8009cd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009cd0:	f000 fee2 	bl	800aa98 <xTimerCreateTimerTask>
 8009cd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d11b      	bne.n	8009d14 <vTaskStartScheduler+0x98>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	613b      	str	r3, [r7, #16]
}
 8009cee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cf0:	4b15      	ldr	r3, [pc, #84]	; (8009d48 <vTaskStartScheduler+0xcc>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3354      	adds	r3, #84	; 0x54
 8009cf6:	4a15      	ldr	r2, [pc, #84]	; (8009d4c <vTaskStartScheduler+0xd0>)
 8009cf8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cfa:	4b15      	ldr	r3, [pc, #84]	; (8009d50 <vTaskStartScheduler+0xd4>)
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009d00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d02:	4b14      	ldr	r3, [pc, #80]	; (8009d54 <vTaskStartScheduler+0xd8>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009d08:	4b13      	ldr	r3, [pc, #76]	; (8009d58 <vTaskStartScheduler+0xdc>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009d0e:	f001 fa73 	bl	800b1f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009d12:	e00e      	b.n	8009d32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d10a      	bne.n	8009d32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60fb      	str	r3, [r7, #12]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <vTaskStartScheduler+0xb4>
}
 8009d32:	bf00      	nop
 8009d34:	3718      	adds	r7, #24
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0800e724 	.word	0x0800e724
 8009d40:	0800a4c1 	.word	0x0800a4c1
 8009d44:	200010a4 	.word	0x200010a4
 8009d48:	20000bac 	.word	0x20000bac
 8009d4c:	20000098 	.word	0x20000098
 8009d50:	200010a0 	.word	0x200010a0
 8009d54:	2000108c 	.word	0x2000108c
 8009d58:	20001084 	.word	0x20001084

08009d5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009d60:	4b04      	ldr	r3, [pc, #16]	; (8009d74 <vTaskSuspendAll+0x18>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3301      	adds	r3, #1
 8009d66:	4a03      	ldr	r2, [pc, #12]	; (8009d74 <vTaskSuspendAll+0x18>)
 8009d68:	6013      	str	r3, [r2, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	200010a8 	.word	0x200010a8

08009d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d86:	4b42      	ldr	r3, [pc, #264]	; (8009e90 <xTaskResumeAll+0x118>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	603b      	str	r3, [r7, #0]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009da4:	f001 fa9a 	bl	800b2dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009da8:	4b39      	ldr	r3, [pc, #228]	; (8009e90 <xTaskResumeAll+0x118>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	4a38      	ldr	r2, [pc, #224]	; (8009e90 <xTaskResumeAll+0x118>)
 8009db0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009db2:	4b37      	ldr	r3, [pc, #220]	; (8009e90 <xTaskResumeAll+0x118>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d162      	bne.n	8009e80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009dba:	4b36      	ldr	r3, [pc, #216]	; (8009e94 <xTaskResumeAll+0x11c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d05e      	beq.n	8009e80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dc2:	e02f      	b.n	8009e24 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009dc4:	4b34      	ldr	r3, [pc, #208]	; (8009e98 <xTaskResumeAll+0x120>)
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	3318      	adds	r3, #24
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fe fbe1 	bl	8008598 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fbdc 	bl	8008598 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de4:	4b2d      	ldr	r3, [pc, #180]	; (8009e9c <xTaskResumeAll+0x124>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d903      	bls.n	8009df4 <xTaskResumeAll+0x7c>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	4a2a      	ldr	r2, [pc, #168]	; (8009e9c <xTaskResumeAll+0x124>)
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4a27      	ldr	r2, [pc, #156]	; (8009ea0 <xTaskResumeAll+0x128>)
 8009e02:	441a      	add	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f7fe fb69 	bl	80084e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e14:	4b23      	ldr	r3, [pc, #140]	; (8009ea4 <xTaskResumeAll+0x12c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d302      	bcc.n	8009e24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009e1e:	4b22      	ldr	r3, [pc, #136]	; (8009ea8 <xTaskResumeAll+0x130>)
 8009e20:	2201      	movs	r2, #1
 8009e22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e24:	4b1c      	ldr	r3, [pc, #112]	; (8009e98 <xTaskResumeAll+0x120>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1cb      	bne.n	8009dc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e32:	f000 fbff 	bl	800a634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009e36:	4b1d      	ldr	r3, [pc, #116]	; (8009eac <xTaskResumeAll+0x134>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d010      	beq.n	8009e64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e42:	f000 f845 	bl	8009ed0 <xTaskIncrementTick>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009e4c:	4b16      	ldr	r3, [pc, #88]	; (8009ea8 <xTaskResumeAll+0x130>)
 8009e4e:	2201      	movs	r2, #1
 8009e50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1f1      	bne.n	8009e42 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009e5e:	4b13      	ldr	r3, [pc, #76]	; (8009eac <xTaskResumeAll+0x134>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e64:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <xTaskResumeAll+0x130>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d009      	beq.n	8009e80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e70:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <xTaskResumeAll+0x138>)
 8009e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e76:	601a      	str	r2, [r3, #0]
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e80:	f001 fa5c 	bl	800b33c <vPortExitCritical>

	return xAlreadyYielded;
 8009e84:	68bb      	ldr	r3, [r7, #8]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	200010a8 	.word	0x200010a8
 8009e94:	20001080 	.word	0x20001080
 8009e98:	20001040 	.word	0x20001040
 8009e9c:	20001088 	.word	0x20001088
 8009ea0:	20000bb0 	.word	0x20000bb0
 8009ea4:	20000bac 	.word	0x20000bac
 8009ea8:	20001094 	.word	0x20001094
 8009eac:	20001090 	.word	0x20001090
 8009eb0:	e000ed04 	.word	0xe000ed04

08009eb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009eba:	4b04      	ldr	r3, [pc, #16]	; (8009ecc <xTaskGetTickCount+0x18>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ec0:	687b      	ldr	r3, [r7, #4]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bc80      	pop	{r7}
 8009eca:	4770      	bx	lr
 8009ecc:	20001084 	.word	0x20001084

08009ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eda:	4b51      	ldr	r3, [pc, #324]	; (800a020 <xTaskIncrementTick+0x150>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f040 808e 	bne.w	800a000 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ee4:	4b4f      	ldr	r3, [pc, #316]	; (800a024 <xTaskIncrementTick+0x154>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009eec:	4a4d      	ldr	r2, [pc, #308]	; (800a024 <xTaskIncrementTick+0x154>)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d120      	bne.n	8009f3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ef8:	4b4b      	ldr	r3, [pc, #300]	; (800a028 <xTaskIncrementTick+0x158>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <xTaskIncrementTick+0x48>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	603b      	str	r3, [r7, #0]
}
 8009f14:	bf00      	nop
 8009f16:	e7fe      	b.n	8009f16 <xTaskIncrementTick+0x46>
 8009f18:	4b43      	ldr	r3, [pc, #268]	; (800a028 <xTaskIncrementTick+0x158>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	4b43      	ldr	r3, [pc, #268]	; (800a02c <xTaskIncrementTick+0x15c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a41      	ldr	r2, [pc, #260]	; (800a028 <xTaskIncrementTick+0x158>)
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	4a41      	ldr	r2, [pc, #260]	; (800a02c <xTaskIncrementTick+0x15c>)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	4b40      	ldr	r3, [pc, #256]	; (800a030 <xTaskIncrementTick+0x160>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	4a3f      	ldr	r2, [pc, #252]	; (800a030 <xTaskIncrementTick+0x160>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	f000 fb7d 	bl	800a634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f3a:	4b3e      	ldr	r3, [pc, #248]	; (800a034 <xTaskIncrementTick+0x164>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d34e      	bcc.n	8009fe2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f44:	4b38      	ldr	r3, [pc, #224]	; (800a028 <xTaskIncrementTick+0x158>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <xTaskIncrementTick+0x82>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <xTaskIncrementTick+0x84>
 8009f52:	2300      	movs	r3, #0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d004      	beq.n	8009f62 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f58:	4b36      	ldr	r3, [pc, #216]	; (800a034 <xTaskIncrementTick+0x164>)
 8009f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f5e:	601a      	str	r2, [r3, #0]
					break;
 8009f60:	e03f      	b.n	8009fe2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009f62:	4b31      	ldr	r3, [pc, #196]	; (800a028 <xTaskIncrementTick+0x158>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d203      	bcs.n	8009f82 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f7a:	4a2e      	ldr	r2, [pc, #184]	; (800a034 <xTaskIncrementTick+0x164>)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6013      	str	r3, [r2, #0]
						break;
 8009f80:	e02f      	b.n	8009fe2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	3304      	adds	r3, #4
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe fb06 	bl	8008598 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	3318      	adds	r3, #24
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fe fafd 	bl	8008598 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	4b25      	ldr	r3, [pc, #148]	; (800a038 <xTaskIncrementTick+0x168>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d903      	bls.n	8009fb2 <xTaskIncrementTick+0xe2>
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	4a22      	ldr	r2, [pc, #136]	; (800a038 <xTaskIncrementTick+0x168>)
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4a1f      	ldr	r2, [pc, #124]	; (800a03c <xTaskIncrementTick+0x16c>)
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	4610      	mov	r0, r2
 8009fca:	f7fe fa8a 	bl	80084e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	; (800a040 <xTaskIncrementTick+0x170>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d3b3      	bcc.n	8009f44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fe0:	e7b0      	b.n	8009f44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fe2:	4b17      	ldr	r3, [pc, #92]	; (800a040 <xTaskIncrementTick+0x170>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe8:	4914      	ldr	r1, [pc, #80]	; (800a03c <xTaskIncrementTick+0x16c>)
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d907      	bls.n	800a00a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	e004      	b.n	800a00a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a000:	4b10      	ldr	r3, [pc, #64]	; (800a044 <xTaskIncrementTick+0x174>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	4a0f      	ldr	r2, [pc, #60]	; (800a044 <xTaskIncrementTick+0x174>)
 800a008:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a00a:	4b0f      	ldr	r3, [pc, #60]	; (800a048 <xTaskIncrementTick+0x178>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a012:	2301      	movs	r3, #1
 800a014:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a016:	697b      	ldr	r3, [r7, #20]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	200010a8 	.word	0x200010a8
 800a024:	20001084 	.word	0x20001084
 800a028:	20001038 	.word	0x20001038
 800a02c:	2000103c 	.word	0x2000103c
 800a030:	20001098 	.word	0x20001098
 800a034:	200010a0 	.word	0x200010a0
 800a038:	20001088 	.word	0x20001088
 800a03c:	20000bb0 	.word	0x20000bb0
 800a040:	20000bac 	.word	0x20000bac
 800a044:	20001090 	.word	0x20001090
 800a048:	20001094 	.word	0x20001094

0800a04c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a052:	4b2a      	ldr	r3, [pc, #168]	; (800a0fc <vTaskSwitchContext+0xb0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a05a:	4b29      	ldr	r3, [pc, #164]	; (800a100 <vTaskSwitchContext+0xb4>)
 800a05c:	2201      	movs	r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a060:	e046      	b.n	800a0f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a062:	4b27      	ldr	r3, [pc, #156]	; (800a100 <vTaskSwitchContext+0xb4>)
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a068:	4b26      	ldr	r3, [pc, #152]	; (800a104 <vTaskSwitchContext+0xb8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	e010      	b.n	800a092 <vTaskSwitchContext+0x46>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10a      	bne.n	800a08c <vTaskSwitchContext+0x40>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	607b      	str	r3, [r7, #4]
}
 800a088:	bf00      	nop
 800a08a:	e7fe      	b.n	800a08a <vTaskSwitchContext+0x3e>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	3b01      	subs	r3, #1
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	491d      	ldr	r1, [pc, #116]	; (800a108 <vTaskSwitchContext+0xbc>)
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	440b      	add	r3, r1
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0e4      	beq.n	800a070 <vTaskSwitchContext+0x24>
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4a15      	ldr	r2, [pc, #84]	; (800a108 <vTaskSwitchContext+0xbc>)
 800a0b2:	4413      	add	r3, r2
 800a0b4:	60bb      	str	r3, [r7, #8]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	605a      	str	r2, [r3, #4]
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d104      	bne.n	800a0d6 <vTaskSwitchContext+0x8a>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	605a      	str	r2, [r3, #4]
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	4a0b      	ldr	r2, [pc, #44]	; (800a10c <vTaskSwitchContext+0xc0>)
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	4a08      	ldr	r2, [pc, #32]	; (800a104 <vTaskSwitchContext+0xb8>)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0e6:	4b09      	ldr	r3, [pc, #36]	; (800a10c <vTaskSwitchContext+0xc0>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3354      	adds	r3, #84	; 0x54
 800a0ec:	4a08      	ldr	r2, [pc, #32]	; (800a110 <vTaskSwitchContext+0xc4>)
 800a0ee:	6013      	str	r3, [r2, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	200010a8 	.word	0x200010a8
 800a100:	20001094 	.word	0x20001094
 800a104:	20001088 	.word	0x20001088
 800a108:	20000bb0 	.word	0x20000bb0
 800a10c:	20000bac 	.word	0x20000bac
 800a110:	20000098 	.word	0x20000098

0800a114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	60fb      	str	r3, [r7, #12]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a13a:	4b07      	ldr	r3, [pc, #28]	; (800a158 <vTaskPlaceOnEventList+0x44>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3318      	adds	r3, #24
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fe f9f0 	bl	8008528 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a148:	2101      	movs	r1, #1
 800a14a:	6838      	ldr	r0, [r7, #0]
 800a14c:	f000 fc50 	bl	800a9f0 <prvAddCurrentTaskToDelayedList>
}
 800a150:	bf00      	nop
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20000bac 	.word	0x20000bac

0800a15c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	617b      	str	r3, [r7, #20]
}
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a184:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <vTaskPlaceOnUnorderedEventList+0x70>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10a      	bne.n	800a1a2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800a18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	613b      	str	r3, [r7, #16]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a1a2:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a1ac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1ae:	4b08      	ldr	r3, [pc, #32]	; (800a1d0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	3318      	adds	r3, #24
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7fe f993 	bl	80084e2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1bc:	2101      	movs	r1, #1
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fc16 	bl	800a9f0 <prvAddCurrentTaskToDelayedList>
}
 800a1c4:	bf00      	nop
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	200010a8 	.word	0x200010a8
 800a1d0:	20000bac 	.word	0x20000bac

0800a1d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10a      	bne.n	800a1fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	617b      	str	r3, [r7, #20]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1fc:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <vTaskPlaceOnEventListRestricted+0x54>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3318      	adds	r3, #24
 800a202:	4619      	mov	r1, r3
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7fe f96c 	bl	80084e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a210:	f04f 33ff 	mov.w	r3, #4294967295
 800a214:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	68b8      	ldr	r0, [r7, #8]
 800a21a:	f000 fbe9 	bl	800a9f0 <prvAddCurrentTaskToDelayedList>
	}
 800a21e:	bf00      	nop
 800a220:	3718      	adds	r7, #24
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000bac 	.word	0x20000bac

0800a22c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	3318      	adds	r3, #24
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe f99b 	bl	8008598 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a262:	4b1e      	ldr	r3, [pc, #120]	; (800a2dc <xTaskRemoveFromEventList+0xb0>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d11d      	bne.n	800a2a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe f992 	bl	8008598 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a278:	4b19      	ldr	r3, [pc, #100]	; (800a2e0 <xTaskRemoveFromEventList+0xb4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d903      	bls.n	800a288 <xTaskRemoveFromEventList+0x5c>
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	4a16      	ldr	r2, [pc, #88]	; (800a2e0 <xTaskRemoveFromEventList+0xb4>)
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	4613      	mov	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4413      	add	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4a13      	ldr	r2, [pc, #76]	; (800a2e4 <xTaskRemoveFromEventList+0xb8>)
 800a296:	441a      	add	r2, r3
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7fe f91f 	bl	80084e2 <vListInsertEnd>
 800a2a4:	e005      	b.n	800a2b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	3318      	adds	r3, #24
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	480e      	ldr	r0, [pc, #56]	; (800a2e8 <xTaskRemoveFromEventList+0xbc>)
 800a2ae:	f7fe f918 	bl	80084e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <xTaskRemoveFromEventList+0xc0>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d905      	bls.n	800a2cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a2c4:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <xTaskRemoveFromEventList+0xc4>)
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	e001      	b.n	800a2d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a2d0:	697b      	ldr	r3, [r7, #20]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	200010a8 	.word	0x200010a8
 800a2e0:	20001088 	.word	0x20001088
 800a2e4:	20000bb0 	.word	0x20000bb0
 800a2e8:	20001040 	.word	0x20001040
 800a2ec:	20000bac 	.word	0x20000bac
 800a2f0:	20001094 	.word	0x20001094

0800a2f4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a2fe:	4b29      	ldr	r3, [pc, #164]	; (800a3a4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	613b      	str	r3, [r7, #16]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7fe f925 	bl	8008598 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	3304      	adds	r3, #4
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe f920 	bl	8008598 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d903      	bls.n	800a36c <vTaskRemoveFromUnorderedEventList+0x78>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a368:	4a0f      	ldr	r2, [pc, #60]	; (800a3a8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a370:	4613      	mov	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4a0c      	ldr	r2, [pc, #48]	; (800a3ac <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a37a:	441a      	add	r2, r3
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f7fe f8ad 	bl	80084e2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38c:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	429a      	cmp	r2, r3
 800a394:	d902      	bls.n	800a39c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a398:	2201      	movs	r2, #1
 800a39a:	601a      	str	r2, [r3, #0]
	}
}
 800a39c:	bf00      	nop
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	200010a8 	.word	0x200010a8
 800a3a8:	20001088 	.word	0x20001088
 800a3ac:	20000bb0 	.word	0x20000bb0
 800a3b0:	20000bac 	.word	0x20000bac
 800a3b4:	20001094 	.word	0x20001094

0800a3b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3c0:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <vTaskInternalSetTimeOutState+0x24>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <vTaskInternalSetTimeOutState+0x28>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	605a      	str	r2, [r3, #4]
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	20001098 	.word	0x20001098
 800a3e0:	20001084 	.word	0x20001084

0800a3e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	613b      	str	r3, [r7, #16]
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60fb      	str	r3, [r7, #12]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a426:	f000 ff59 	bl	800b2dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a42a:	4b1d      	ldr	r3, [pc, #116]	; (800a4a0 <xTaskCheckForTimeOut+0xbc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a442:	d102      	bne.n	800a44a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a444:	2300      	movs	r3, #0
 800a446:	61fb      	str	r3, [r7, #28]
 800a448:	e023      	b.n	800a492 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	4b15      	ldr	r3, [pc, #84]	; (800a4a4 <xTaskCheckForTimeOut+0xc0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	429a      	cmp	r2, r3
 800a454:	d007      	beq.n	800a466 <xTaskCheckForTimeOut+0x82>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d302      	bcc.n	800a466 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	61fb      	str	r3, [r7, #28]
 800a464:	e015      	b.n	800a492 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d20b      	bcs.n	800a488 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	1ad2      	subs	r2, r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ff9b 	bl	800a3b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a482:	2300      	movs	r3, #0
 800a484:	61fb      	str	r3, [r7, #28]
 800a486:	e004      	b.n	800a492 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a48e:	2301      	movs	r3, #1
 800a490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a492:	f000 ff53 	bl	800b33c <vPortExitCritical>

	return xReturn;
 800a496:	69fb      	ldr	r3, [r7, #28]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3720      	adds	r7, #32
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20001084 	.word	0x20001084
 800a4a4:	20001098 	.word	0x20001098

0800a4a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4ac:	4b03      	ldr	r3, [pc, #12]	; (800a4bc <vTaskMissedYield+0x14>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
}
 800a4b2:	bf00      	nop
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bc80      	pop	{r7}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20001094 	.word	0x20001094

0800a4c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4c8:	f000 f852 	bl	800a570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4cc:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <prvIdleTask+0x28>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d9f9      	bls.n	800a4c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <prvIdleTask+0x2c>)
 800a4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4e4:	e7f0      	b.n	800a4c8 <prvIdleTask+0x8>
 800a4e6:	bf00      	nop
 800a4e8:	20000bb0 	.word	0x20000bb0
 800a4ec:	e000ed04 	.word	0xe000ed04

0800a4f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	607b      	str	r3, [r7, #4]
 800a4fa:	e00c      	b.n	800a516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4a12      	ldr	r2, [pc, #72]	; (800a550 <prvInitialiseTaskLists+0x60>)
 800a508:	4413      	add	r3, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd ffbe 	bl	800848c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3301      	adds	r3, #1
 800a514:	607b      	str	r3, [r7, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b37      	cmp	r3, #55	; 0x37
 800a51a:	d9ef      	bls.n	800a4fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a51c:	480d      	ldr	r0, [pc, #52]	; (800a554 <prvInitialiseTaskLists+0x64>)
 800a51e:	f7fd ffb5 	bl	800848c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a522:	480d      	ldr	r0, [pc, #52]	; (800a558 <prvInitialiseTaskLists+0x68>)
 800a524:	f7fd ffb2 	bl	800848c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a528:	480c      	ldr	r0, [pc, #48]	; (800a55c <prvInitialiseTaskLists+0x6c>)
 800a52a:	f7fd ffaf 	bl	800848c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a52e:	480c      	ldr	r0, [pc, #48]	; (800a560 <prvInitialiseTaskLists+0x70>)
 800a530:	f7fd ffac 	bl	800848c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a534:	480b      	ldr	r0, [pc, #44]	; (800a564 <prvInitialiseTaskLists+0x74>)
 800a536:	f7fd ffa9 	bl	800848c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a53a:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <prvInitialiseTaskLists+0x78>)
 800a53c:	4a05      	ldr	r2, [pc, #20]	; (800a554 <prvInitialiseTaskLists+0x64>)
 800a53e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a540:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <prvInitialiseTaskLists+0x7c>)
 800a542:	4a05      	ldr	r2, [pc, #20]	; (800a558 <prvInitialiseTaskLists+0x68>)
 800a544:	601a      	str	r2, [r3, #0]
}
 800a546:	bf00      	nop
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20000bb0 	.word	0x20000bb0
 800a554:	20001010 	.word	0x20001010
 800a558:	20001024 	.word	0x20001024
 800a55c:	20001040 	.word	0x20001040
 800a560:	20001054 	.word	0x20001054
 800a564:	2000106c 	.word	0x2000106c
 800a568:	20001038 	.word	0x20001038
 800a56c:	2000103c 	.word	0x2000103c

0800a570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a576:	e019      	b.n	800a5ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a578:	f000 feb0 	bl	800b2dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a57c:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <prvCheckTasksWaitingTermination+0x50>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3304      	adds	r3, #4
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fe f805 	bl	8008598 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a58e:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <prvCheckTasksWaitingTermination+0x54>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3b01      	subs	r3, #1
 800a594:	4a0b      	ldr	r2, [pc, #44]	; (800a5c4 <prvCheckTasksWaitingTermination+0x54>)
 800a596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a598:	4b0b      	ldr	r3, [pc, #44]	; (800a5c8 <prvCheckTasksWaitingTermination+0x58>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	4a0a      	ldr	r2, [pc, #40]	; (800a5c8 <prvCheckTasksWaitingTermination+0x58>)
 800a5a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5a2:	f000 fecb 	bl	800b33c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f810 	bl	800a5cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5ac:	4b06      	ldr	r3, [pc, #24]	; (800a5c8 <prvCheckTasksWaitingTermination+0x58>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e1      	bne.n	800a578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20001054 	.word	0x20001054
 800a5c4:	20001080 	.word	0x20001080
 800a5c8:	20001068 	.word	0x20001068

0800a5cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3354      	adds	r3, #84	; 0x54
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f003 f8ab 	bl	800d734 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d108      	bne.n	800a5fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 f839 	bl	800b664 <vPortFree>
				vPortFree( pxTCB );
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 f836 	bl	800b664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5f8:	e018      	b.n	800a62c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a600:	2b01      	cmp	r3, #1
 800a602:	d103      	bne.n	800a60c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f001 f82d 	bl	800b664 <vPortFree>
	}
 800a60a:	e00f      	b.n	800a62c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a612:	2b02      	cmp	r3, #2
 800a614:	d00a      	beq.n	800a62c <prvDeleteTCB+0x60>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60fb      	str	r3, [r7, #12]
}
 800a628:	bf00      	nop
 800a62a:	e7fe      	b.n	800a62a <prvDeleteTCB+0x5e>
	}
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a63a:	4b0e      	ldr	r3, [pc, #56]	; (800a674 <prvResetNextTaskUnblockTime+0x40>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <prvResetNextTaskUnblockTime+0x14>
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <prvResetNextTaskUnblockTime+0x16>
 800a648:	2300      	movs	r3, #0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d004      	beq.n	800a658 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a64e:	4b0a      	ldr	r3, [pc, #40]	; (800a678 <prvResetNextTaskUnblockTime+0x44>)
 800a650:	f04f 32ff 	mov.w	r2, #4294967295
 800a654:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a656:	e008      	b.n	800a66a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a658:	4b06      	ldr	r3, [pc, #24]	; (800a674 <prvResetNextTaskUnblockTime+0x40>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	4a04      	ldr	r2, [pc, #16]	; (800a678 <prvResetNextTaskUnblockTime+0x44>)
 800a668:	6013      	str	r3, [r2, #0]
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	bc80      	pop	{r7}
 800a672:	4770      	bx	lr
 800a674:	20001038 	.word	0x20001038
 800a678:	200010a0 	.word	0x200010a0

0800a67c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a682:	4b04      	ldr	r3, [pc, #16]	; (800a694 <xTaskGetCurrentTaskHandle+0x18>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a688:	687b      	ldr	r3, [r7, #4]
	}
 800a68a:	4618      	mov	r0, r3
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	bc80      	pop	{r7}
 800a692:	4770      	bx	lr
 800a694:	20000bac 	.word	0x20000bac

0800a698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <xTaskGetSchedulerState+0x34>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	607b      	str	r3, [r7, #4]
 800a6aa:	e008      	b.n	800a6be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ac:	4b08      	ldr	r3, [pc, #32]	; (800a6d0 <xTaskGetSchedulerState+0x38>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	e001      	b.n	800a6be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6be:	687b      	ldr	r3, [r7, #4]
	}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bc80      	pop	{r7}
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	2000108c 	.word	0x2000108c
 800a6d0:	200010a8 	.word	0x200010a8

0800a6d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d056      	beq.n	800a798 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ee:	4b2d      	ldr	r3, [pc, #180]	; (800a7a4 <xTaskPriorityInherit+0xd0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d246      	bcs.n	800a786 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	db06      	blt.n	800a70e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a700:	4b28      	ldr	r3, [pc, #160]	; (800a7a4 <xTaskPriorityInherit+0xd0>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	6959      	ldr	r1, [r3, #20]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4a22      	ldr	r2, [pc, #136]	; (800a7a8 <xTaskPriorityInherit+0xd4>)
 800a720:	4413      	add	r3, r2
 800a722:	4299      	cmp	r1, r3
 800a724:	d101      	bne.n	800a72a <xTaskPriorityInherit+0x56>
 800a726:	2301      	movs	r3, #1
 800a728:	e000      	b.n	800a72c <xTaskPriorityInherit+0x58>
 800a72a:	2300      	movs	r3, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d022      	beq.n	800a776 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	3304      	adds	r3, #4
 800a734:	4618      	mov	r0, r3
 800a736:	f7fd ff2f 	bl	8008598 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a73a:	4b1a      	ldr	r3, [pc, #104]	; (800a7a4 <xTaskPriorityInherit+0xd0>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a748:	4b18      	ldr	r3, [pc, #96]	; (800a7ac <xTaskPriorityInherit+0xd8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d903      	bls.n	800a758 <xTaskPriorityInherit+0x84>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <xTaskPriorityInherit+0xd8>)
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4a10      	ldr	r2, [pc, #64]	; (800a7a8 <xTaskPriorityInherit+0xd4>)
 800a766:	441a      	add	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3304      	adds	r3, #4
 800a76c:	4619      	mov	r1, r3
 800a76e:	4610      	mov	r0, r2
 800a770:	f7fd feb7 	bl	80084e2 <vListInsertEnd>
 800a774:	e004      	b.n	800a780 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a776:	4b0b      	ldr	r3, [pc, #44]	; (800a7a4 <xTaskPriorityInherit+0xd0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a780:	2301      	movs	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e008      	b.n	800a798 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a78a:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <xTaskPriorityInherit+0xd0>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	429a      	cmp	r2, r3
 800a792:	d201      	bcs.n	800a798 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a798:	68fb      	ldr	r3, [r7, #12]
	}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000bac 	.word	0x20000bac
 800a7a8:	20000bb0 	.word	0x20000bb0
 800a7ac:	20001088 	.word	0x20001088

0800a7b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d056      	beq.n	800a874 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7c6:	4b2e      	ldr	r3, [pc, #184]	; (800a880 <xTaskPriorityDisinherit+0xd0>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d00a      	beq.n	800a7e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60fb      	str	r3, [r7, #12]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60bb      	str	r3, [r7, #8]
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a808:	1e5a      	subs	r2, r3, #1
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a816:	429a      	cmp	r2, r3
 800a818:	d02c      	beq.n	800a874 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d128      	bne.n	800a874 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	3304      	adds	r3, #4
 800a826:	4618      	mov	r0, r3
 800a828:	f7fd feb6 	bl	8008598 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a838:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a844:	4b0f      	ldr	r3, [pc, #60]	; (800a884 <xTaskPriorityDisinherit+0xd4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d903      	bls.n	800a854 <xTaskPriorityDisinherit+0xa4>
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	4a0c      	ldr	r2, [pc, #48]	; (800a884 <xTaskPriorityDisinherit+0xd4>)
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4a09      	ldr	r2, [pc, #36]	; (800a888 <xTaskPriorityDisinherit+0xd8>)
 800a862:	441a      	add	r2, r3
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	3304      	adds	r3, #4
 800a868:	4619      	mov	r1, r3
 800a86a:	4610      	mov	r0, r2
 800a86c:	f7fd fe39 	bl	80084e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a870:	2301      	movs	r3, #1
 800a872:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a874:	697b      	ldr	r3, [r7, #20]
	}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	20000bac 	.word	0x20000bac
 800a884:	20001088 	.word	0x20001088
 800a888:	20000bb0 	.word	0x20000bb0

0800a88c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a89a:	2301      	movs	r3, #1
 800a89c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d06f      	beq.n	800a984 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	60fb      	str	r3, [r7, #12]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d902      	bls.n	800a8d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	e002      	b.n	800a8d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8dc:	69fa      	ldr	r2, [r7, #28]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d050      	beq.n	800a984 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d14b      	bne.n	800a984 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a8ec:	4b27      	ldr	r3, [pc, #156]	; (800a98c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d10a      	bne.n	800a90c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	60bb      	str	r3, [r7, #8]
}
 800a908:	bf00      	nop
 800a90a:	e7fe      	b.n	800a90a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a910:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	69fa      	ldr	r2, [r7, #28]
 800a916:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	db04      	blt.n	800a92a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	6959      	ldr	r1, [r3, #20]
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4a15      	ldr	r2, [pc, #84]	; (800a990 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a93a:	4413      	add	r3, r2
 800a93c:	4299      	cmp	r1, r3
 800a93e:	d101      	bne.n	800a944 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a940:	2301      	movs	r3, #1
 800a942:	e000      	b.n	800a946 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800a944:	2300      	movs	r3, #0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d01c      	beq.n	800a984 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fd fe22 	bl	8008598 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a958:	4b0e      	ldr	r3, [pc, #56]	; (800a994 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d903      	bls.n	800a968 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	4a0b      	ldr	r2, [pc, #44]	; (800a994 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96c:	4613      	mov	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4a06      	ldr	r2, [pc, #24]	; (800a990 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a976:	441a      	add	r2, r3
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f7fd fdaf 	bl	80084e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a984:	bf00      	nop
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20000bac 	.word	0x20000bac
 800a990:	20000bb0 	.word	0x20000bb0
 800a994:	20001088 	.word	0x20001088

0800a998 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a99e:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <uxTaskResetEventItemValue+0x2c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a6:	4b07      	ldr	r3, [pc, #28]	; (800a9c4 <uxTaskResetEventItemValue+0x2c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <uxTaskResetEventItemValue+0x2c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a9b4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a9b6:	687b      	ldr	r3, [r7, #4]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bc80      	pop	{r7}
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000bac 	.word	0x20000bac

0800a9c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a9c8:	b480      	push	{r7}
 800a9ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9da:	3201      	adds	r2, #1
 800a9dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a9de:	4b03      	ldr	r3, [pc, #12]	; (800a9ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
	}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bc80      	pop	{r7}
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20000bac 	.word	0x20000bac

0800a9f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9fa:	4b21      	ldr	r3, [pc, #132]	; (800aa80 <prvAddCurrentTaskToDelayedList+0x90>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa00:	4b20      	ldr	r3, [pc, #128]	; (800aa84 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3304      	adds	r3, #4
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fd fdc6 	bl	8008598 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	d10a      	bne.n	800aa2a <prvAddCurrentTaskToDelayedList+0x3a>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d007      	beq.n	800aa2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa1a:	4b1a      	ldr	r3, [pc, #104]	; (800aa84 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4619      	mov	r1, r3
 800aa22:	4819      	ldr	r0, [pc, #100]	; (800aa88 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa24:	f7fd fd5d 	bl	80084e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa28:	e026      	b.n	800aa78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4413      	add	r3, r2
 800aa30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa32:	4b14      	ldr	r3, [pc, #80]	; (800aa84 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d209      	bcs.n	800aa56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa42:	4b12      	ldr	r3, [pc, #72]	; (800aa8c <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	f7fd fd6a 	bl	8008528 <vListInsert>
}
 800aa54:	e010      	b.n	800aa78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa56:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	4619      	mov	r1, r3
 800aa62:	4610      	mov	r0, r2
 800aa64:	f7fd fd60 	bl	8008528 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa68:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d202      	bcs.n	800aa78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa72:	4a08      	ldr	r2, [pc, #32]	; (800aa94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	6013      	str	r3, [r2, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	20001084 	.word	0x20001084
 800aa84:	20000bac 	.word	0x20000bac
 800aa88:	2000106c 	.word	0x2000106c
 800aa8c:	2000103c 	.word	0x2000103c
 800aa90:	20001038 	.word	0x20001038
 800aa94:	200010a0 	.word	0x200010a0

0800aa98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	; 0x28
 800aa9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aaa2:	f000 facb 	bl	800b03c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aaa6:	4b1c      	ldr	r3, [pc, #112]	; (800ab18 <xTimerCreateTimerTask+0x80>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d021      	beq.n	800aaf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aab6:	1d3a      	adds	r2, r7, #4
 800aab8:	f107 0108 	add.w	r1, r7, #8
 800aabc:	f107 030c 	add.w	r3, r7, #12
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fd fa61 	bl	8007f88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	9202      	str	r2, [sp, #8]
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	2302      	movs	r3, #2
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	2300      	movs	r3, #0
 800aad6:	460a      	mov	r2, r1
 800aad8:	4910      	ldr	r1, [pc, #64]	; (800ab1c <xTimerCreateTimerTask+0x84>)
 800aada:	4811      	ldr	r0, [pc, #68]	; (800ab20 <xTimerCreateTimerTask+0x88>)
 800aadc:	f7fe fe48 	bl	8009770 <xTaskCreateStatic>
 800aae0:	4603      	mov	r3, r0
 800aae2:	4a10      	ldr	r2, [pc, #64]	; (800ab24 <xTimerCreateTimerTask+0x8c>)
 800aae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aae6:	4b0f      	ldr	r3, [pc, #60]	; (800ab24 <xTimerCreateTimerTask+0x8c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10a      	bne.n	800ab0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	613b      	str	r3, [r7, #16]
}
 800ab0a:	bf00      	nop
 800ab0c:	e7fe      	b.n	800ab0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab0e:	697b      	ldr	r3, [r7, #20]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	200010dc 	.word	0x200010dc
 800ab1c:	0800e72c 	.word	0x0800e72c
 800ab20:	0800ac45 	.word	0x0800ac45
 800ab24:	200010e0 	.word	0x200010e0

0800ab28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08a      	sub	sp, #40	; 0x28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	623b      	str	r3, [r7, #32]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab56:	4b1a      	ldr	r3, [pc, #104]	; (800abc0 <xTimerGenericCommand+0x98>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d02a      	beq.n	800abb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	dc18      	bgt.n	800aba2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab70:	f7ff fd92 	bl	800a698 <xTaskGetSchedulerState>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d109      	bne.n	800ab8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab7a:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <xTimerGenericCommand+0x98>)
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	f107 0110 	add.w	r1, r7, #16
 800ab82:	2300      	movs	r3, #0
 800ab84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab86:	f7fd ff93 	bl	8008ab0 <xQueueGenericSend>
 800ab8a:	6278      	str	r0, [r7, #36]	; 0x24
 800ab8c:	e012      	b.n	800abb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab8e:	4b0c      	ldr	r3, [pc, #48]	; (800abc0 <xTimerGenericCommand+0x98>)
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	f107 0110 	add.w	r1, r7, #16
 800ab96:	2300      	movs	r3, #0
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f7fd ff89 	bl	8008ab0 <xQueueGenericSend>
 800ab9e:	6278      	str	r0, [r7, #36]	; 0x24
 800aba0:	e008      	b.n	800abb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aba2:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <xTimerGenericCommand+0x98>)
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	f107 0110 	add.w	r1, r7, #16
 800abaa:	2300      	movs	r3, #0
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	f7fe f87d 	bl	8008cac <xQueueGenericSendFromISR>
 800abb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3728      	adds	r7, #40	; 0x28
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	200010dc 	.word	0x200010dc

0800abc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af02      	add	r7, sp, #8
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abce:	4b1c      	ldr	r3, [pc, #112]	; (800ac40 <prvProcessExpiredTimer+0x7c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	3304      	adds	r3, #4
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd fcdb 	bl	8008598 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	69db      	ldr	r3, [r3, #28]
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d122      	bne.n	800ac30 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	699a      	ldr	r2, [r3, #24]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	18d1      	adds	r1, r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	6978      	ldr	r0, [r7, #20]
 800abf8:	f000 f8c8 	bl	800ad8c <prvInsertTimerInActiveList>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d016      	beq.n	800ac30 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac02:	2300      	movs	r3, #0
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	2300      	movs	r3, #0
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	6978      	ldr	r0, [r7, #20]
 800ac0e:	f7ff ff8b 	bl	800ab28 <xTimerGenericCommand>
 800ac12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d10a      	bne.n	800ac30 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	60fb      	str	r3, [r7, #12]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	6978      	ldr	r0, [r7, #20]
 800ac36:	4798      	blx	r3
}
 800ac38:	bf00      	nop
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	200010d4 	.word	0x200010d4

0800ac44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac4c:	f107 0308 	add.w	r3, r7, #8
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f857 	bl	800ad04 <prvGetNextExpireTime>
 800ac56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 f803 	bl	800ac68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac62:	f000 f8d5 	bl	800ae10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac66:	e7f1      	b.n	800ac4c <prvTimerTask+0x8>

0800ac68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac72:	f7ff f873 	bl	8009d5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac76:	f107 0308 	add.w	r3, r7, #8
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f866 	bl	800ad4c <prvSampleTimeNow>
 800ac80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d130      	bne.n	800acea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <prvProcessTimerOrBlockTask+0x3c>
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d806      	bhi.n	800aca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac96:	f7ff f86f 	bl	8009d78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff ff91 	bl	800abc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aca2:	e024      	b.n	800acee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d008      	beq.n	800acbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acaa:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <prvProcessTimerOrBlockTask+0x90>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bf0c      	ite	eq
 800acb4:	2301      	moveq	r3, #1
 800acb6:	2300      	movne	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acbc:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <prvProcessTimerOrBlockTask+0x94>)
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	4619      	mov	r1, r3
 800acca:	f7fe fd1d 	bl	8009708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acce:	f7ff f853 	bl	8009d78 <xTaskResumeAll>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d10a      	bne.n	800acee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acd8:	4b09      	ldr	r3, [pc, #36]	; (800ad00 <prvProcessTimerOrBlockTask+0x98>)
 800acda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	f3bf 8f6f 	isb	sy
}
 800ace8:	e001      	b.n	800acee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acea:	f7ff f845 	bl	8009d78 <xTaskResumeAll>
}
 800acee:	bf00      	nop
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	200010d8 	.word	0x200010d8
 800acfc:	200010dc 	.word	0x200010dc
 800ad00:	e000ed04 	.word	0xe000ed04

0800ad04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad0c:	4b0e      	ldr	r3, [pc, #56]	; (800ad48 <prvGetNextExpireTime+0x44>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	bf0c      	ite	eq
 800ad16:	2301      	moveq	r3, #1
 800ad18:	2300      	movne	r3, #0
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d105      	bne.n	800ad36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad2a:	4b07      	ldr	r3, [pc, #28]	; (800ad48 <prvGetNextExpireTime+0x44>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	e001      	b.n	800ad3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bc80      	pop	{r7}
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	200010d4 	.word	0x200010d4

0800ad4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad54:	f7ff f8ae 	bl	8009eb4 <xTaskGetTickCount>
 800ad58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad5a:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <prvSampleTimeNow+0x3c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d205      	bcs.n	800ad70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad64:	f000 f908 	bl	800af78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	e002      	b.n	800ad76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad76:	4a04      	ldr	r2, [pc, #16]	; (800ad88 <prvSampleTimeNow+0x3c>)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	200010e4 	.word	0x200010e4

0800ad8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d812      	bhi.n	800add8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	1ad2      	subs	r2, r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d302      	bcc.n	800adc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800adc0:	2301      	movs	r3, #1
 800adc2:	617b      	str	r3, [r7, #20]
 800adc4:	e01b      	b.n	800adfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adc6:	4b10      	ldr	r3, [pc, #64]	; (800ae08 <prvInsertTimerInActiveList+0x7c>)
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3304      	adds	r3, #4
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f7fd fba9 	bl	8008528 <vListInsert>
 800add6:	e012      	b.n	800adfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d206      	bcs.n	800adee <prvInsertTimerInActiveList+0x62>
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d302      	bcc.n	800adee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ade8:	2301      	movs	r3, #1
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	e007      	b.n	800adfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adee:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <prvInsertTimerInActiveList+0x80>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4619      	mov	r1, r3
 800adf8:	4610      	mov	r0, r2
 800adfa:	f7fd fb95 	bl	8008528 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800adfe:	697b      	ldr	r3, [r7, #20]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	200010d8 	.word	0x200010d8
 800ae0c:	200010d4 	.word	0x200010d4

0800ae10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b08e      	sub	sp, #56	; 0x38
 800ae14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae16:	e09d      	b.n	800af54 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	da18      	bge.n	800ae50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae1e:	1d3b      	adds	r3, r7, #4
 800ae20:	3304      	adds	r3, #4
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10a      	bne.n	800ae40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	61fb      	str	r3, [r7, #28]
}
 800ae3c:	bf00      	nop
 800ae3e:	e7fe      	b.n	800ae3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae46:	6850      	ldr	r0, [r2, #4]
 800ae48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae4a:	6892      	ldr	r2, [r2, #8]
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	db7e      	blt.n	800af54 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d004      	beq.n	800ae6c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd fb96 	bl	8008598 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae6c:	463b      	mov	r3, r7
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff ff6c 	bl	800ad4c <prvSampleTimeNow>
 800ae74:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b09      	cmp	r3, #9
 800ae7a:	d86a      	bhi.n	800af52 <prvProcessReceivedCommands+0x142>
 800ae7c:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <prvProcessReceivedCommands+0x74>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800aead 	.word	0x0800aead
 800ae88:	0800aead 	.word	0x0800aead
 800ae8c:	0800aead 	.word	0x0800aead
 800ae90:	0800af55 	.word	0x0800af55
 800ae94:	0800af09 	.word	0x0800af09
 800ae98:	0800af41 	.word	0x0800af41
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aead 	.word	0x0800aead
 800aea4:	0800af55 	.word	0x0800af55
 800aea8:	0800af09 	.word	0x0800af09
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	18d1      	adds	r1, r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeba:	f7ff ff67 	bl	800ad8c <prvInsertTimerInActiveList>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d047      	beq.n	800af54 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d13f      	bne.n	800af54 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	441a      	add	r2, r3
 800aedc:	2300      	movs	r3, #0
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	2300      	movs	r3, #0
 800aee2:	2100      	movs	r1, #0
 800aee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee6:	f7ff fe1f 	bl	800ab28 <xTimerGenericCommand>
 800aeea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d130      	bne.n	800af54 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	61bb      	str	r3, [r7, #24]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10a      	bne.n	800af2c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1a:	f383 8811 	msr	BASEPRI, r3
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	617b      	str	r3, [r7, #20]
}
 800af28:	bf00      	nop
 800af2a:	e7fe      	b.n	800af2a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	699a      	ldr	r2, [r3, #24]
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	18d1      	adds	r1, r2, r3
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af3a:	f7ff ff27 	bl	800ad8c <prvInsertTimerInActiveList>
					break;
 800af3e:	e009      	b.n	800af54 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800af46:	2b00      	cmp	r3, #0
 800af48:	d104      	bne.n	800af54 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800af4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af4c:	f000 fb8a 	bl	800b664 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af50:	e000      	b.n	800af54 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800af52:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af54:	4b07      	ldr	r3, [pc, #28]	; (800af74 <prvProcessReceivedCommands+0x164>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	1d39      	adds	r1, r7, #4
 800af5a:	2200      	movs	r2, #0
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fd ffcb 	bl	8008ef8 <xQueueReceive>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	f47f af57 	bne.w	800ae18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af6a:	bf00      	nop
 800af6c:	bf00      	nop
 800af6e:	3730      	adds	r7, #48	; 0x30
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	200010dc 	.word	0x200010dc

0800af78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af7e:	e045      	b.n	800b00c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af80:	4b2c      	ldr	r3, [pc, #176]	; (800b034 <prvSwitchTimerLists+0xbc>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af8a:	4b2a      	ldr	r3, [pc, #168]	; (800b034 <prvSwitchTimerLists+0xbc>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3304      	adds	r3, #4
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fd fafd 	bl	8008598 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	69db      	ldr	r3, [r3, #28]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d12e      	bne.n	800b00c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4413      	add	r3, r2
 800afb6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d90e      	bls.n	800afde <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afcc:	4b19      	ldr	r3, [pc, #100]	; (800b034 <prvSwitchTimerLists+0xbc>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3304      	adds	r3, #4
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f7fd faa6 	bl	8008528 <vListInsert>
 800afdc:	e016      	b.n	800b00c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afde:	2300      	movs	r3, #0
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	2300      	movs	r3, #0
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	2100      	movs	r1, #0
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fd9d 	bl	800ab28 <xTimerGenericCommand>
 800afee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <prvSwitchTimerLists+0x94>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	603b      	str	r3, [r7, #0]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b00c:	4b09      	ldr	r3, [pc, #36]	; (800b034 <prvSwitchTimerLists+0xbc>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1b4      	bne.n	800af80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b016:	4b07      	ldr	r3, [pc, #28]	; (800b034 <prvSwitchTimerLists+0xbc>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b01c:	4b06      	ldr	r3, [pc, #24]	; (800b038 <prvSwitchTimerLists+0xc0>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a04      	ldr	r2, [pc, #16]	; (800b034 <prvSwitchTimerLists+0xbc>)
 800b022:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b024:	4a04      	ldr	r2, [pc, #16]	; (800b038 <prvSwitchTimerLists+0xc0>)
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	6013      	str	r3, [r2, #0]
}
 800b02a:	bf00      	nop
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	200010d4 	.word	0x200010d4
 800b038:	200010d8 	.word	0x200010d8

0800b03c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b042:	f000 f94b 	bl	800b2dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b046:	4b15      	ldr	r3, [pc, #84]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d120      	bne.n	800b090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b04e:	4814      	ldr	r0, [pc, #80]	; (800b0a0 <prvCheckForValidListAndQueue+0x64>)
 800b050:	f7fd fa1c 	bl	800848c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b054:	4813      	ldr	r0, [pc, #76]	; (800b0a4 <prvCheckForValidListAndQueue+0x68>)
 800b056:	f7fd fa19 	bl	800848c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b05a:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <prvCheckForValidListAndQueue+0x6c>)
 800b05c:	4a10      	ldr	r2, [pc, #64]	; (800b0a0 <prvCheckForValidListAndQueue+0x64>)
 800b05e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b060:	4b12      	ldr	r3, [pc, #72]	; (800b0ac <prvCheckForValidListAndQueue+0x70>)
 800b062:	4a10      	ldr	r2, [pc, #64]	; (800b0a4 <prvCheckForValidListAndQueue+0x68>)
 800b064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b066:	2300      	movs	r3, #0
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4b11      	ldr	r3, [pc, #68]	; (800b0b0 <prvCheckForValidListAndQueue+0x74>)
 800b06c:	4a11      	ldr	r2, [pc, #68]	; (800b0b4 <prvCheckForValidListAndQueue+0x78>)
 800b06e:	2110      	movs	r1, #16
 800b070:	200a      	movs	r0, #10
 800b072:	f7fd fb23 	bl	80086bc <xQueueGenericCreateStatic>
 800b076:	4603      	mov	r3, r0
 800b078:	4a08      	ldr	r2, [pc, #32]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b07a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b07c:	4b07      	ldr	r3, [pc, #28]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b084:	4b05      	ldr	r3, [pc, #20]	; (800b09c <prvCheckForValidListAndQueue+0x60>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	490b      	ldr	r1, [pc, #44]	; (800b0b8 <prvCheckForValidListAndQueue+0x7c>)
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fe faea 	bl	8009664 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b090:	f000 f954 	bl	800b33c <vPortExitCritical>
}
 800b094:	bf00      	nop
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	200010dc 	.word	0x200010dc
 800b0a0:	200010ac 	.word	0x200010ac
 800b0a4:	200010c0 	.word	0x200010c0
 800b0a8:	200010d4 	.word	0x200010d4
 800b0ac:	200010d8 	.word	0x200010d8
 800b0b0:	20001188 	.word	0x20001188
 800b0b4:	200010e8 	.word	0x200010e8
 800b0b8:	0800e734 	.word	0x0800e734

0800b0bc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b08a      	sub	sp, #40	; 0x28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b0ca:	f06f 0301 	mvn.w	r3, #1
 800b0ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0dc:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <xTimerPendFunctionCallFromISR+0x3c>)
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	f107 0114 	add.w	r1, r7, #20
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	f7fd fde0 	bl	8008cac <xQueueGenericSendFromISR>
 800b0ec:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3728      	adds	r7, #40	; 0x28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	200010dc 	.word	0x200010dc

0800b0fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3b04      	subs	r3, #4
 800b10c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3b04      	subs	r3, #4
 800b11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f023 0201 	bic.w	r2, r3, #1
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	3b04      	subs	r3, #4
 800b12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b12c:	4a08      	ldr	r2, [pc, #32]	; (800b150 <pxPortInitialiseStack+0x54>)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3b14      	subs	r3, #20
 800b136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3b20      	subs	r3, #32
 800b142:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b144:	68fb      	ldr	r3, [r7, #12]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bc80      	pop	{r7}
 800b14e:	4770      	bx	lr
 800b150:	0800b155 	.word	0x0800b155

0800b154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b15e:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <prvTaskExitError+0x54>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b166:	d00a      	beq.n	800b17e <prvTaskExitError+0x2a>
	__asm volatile
 800b168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16c:	f383 8811 	msr	BASEPRI, r3
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	f3bf 8f4f 	dsb	sy
 800b178:	60fb      	str	r3, [r7, #12]
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <prvTaskExitError+0x28>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	60bb      	str	r3, [r7, #8]
}
 800b190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b192:	bf00      	nop
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0fc      	beq.n	800b194 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b19a:	bf00      	nop
 800b19c:	bf00      	nop
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bc80      	pop	{r7}
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	20000014 	.word	0x20000014
 800b1ac:	00000000 	.word	0x00000000

0800b1b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1b0:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <pxCurrentTCBConst2>)
 800b1b2:	6819      	ldr	r1, [r3, #0]
 800b1b4:	6808      	ldr	r0, [r1, #0]
 800b1b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b1ba:	f380 8809 	msr	PSP, r0
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f04f 0000 	mov.w	r0, #0
 800b1c6:	f380 8811 	msr	BASEPRI, r0
 800b1ca:	f04e 0e0d 	orr.w	lr, lr, #13
 800b1ce:	4770      	bx	lr

0800b1d0 <pxCurrentTCBConst2>:
 800b1d0:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop

0800b1d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b1d8:	4806      	ldr	r0, [pc, #24]	; (800b1f4 <prvPortStartFirstTask+0x1c>)
 800b1da:	6800      	ldr	r0, [r0, #0]
 800b1dc:	6800      	ldr	r0, [r0, #0]
 800b1de:	f380 8808 	msr	MSP, r0
 800b1e2:	b662      	cpsie	i
 800b1e4:	b661      	cpsie	f
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	df00      	svc	0
 800b1f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1f2:	bf00      	nop
 800b1f4:	e000ed08 	.word	0xe000ed08

0800b1f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1fe:	4b32      	ldr	r3, [pc, #200]	; (800b2c8 <xPortStartScheduler+0xd0>)
 800b200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	22ff      	movs	r2, #255	; 0xff
 800b20e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	b2db      	uxtb	r3, r3
 800b216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b220:	b2da      	uxtb	r2, r3
 800b222:	4b2a      	ldr	r3, [pc, #168]	; (800b2cc <xPortStartScheduler+0xd4>)
 800b224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b226:	4b2a      	ldr	r3, [pc, #168]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b228:	2207      	movs	r2, #7
 800b22a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b22c:	e009      	b.n	800b242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b22e:	4b28      	ldr	r3, [pc, #160]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3b01      	subs	r3, #1
 800b234:	4a26      	ldr	r2, [pc, #152]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b238:	78fb      	ldrb	r3, [r7, #3]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	b2db      	uxtb	r3, r3
 800b246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24a:	2b80      	cmp	r3, #128	; 0x80
 800b24c:	d0ef      	beq.n	800b22e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b24e:	4b20      	ldr	r3, [pc, #128]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f1c3 0307 	rsb	r3, r3, #7
 800b256:	2b04      	cmp	r3, #4
 800b258:	d00a      	beq.n	800b270 <xPortStartScheduler+0x78>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	60bb      	str	r3, [r7, #8]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b270:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	021b      	lsls	r3, r3, #8
 800b276:	4a16      	ldr	r2, [pc, #88]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b278:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b27a:	4b15      	ldr	r3, [pc, #84]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b282:	4a13      	ldr	r2, [pc, #76]	; (800b2d0 <xPortStartScheduler+0xd8>)
 800b284:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b28e:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <xPortStartScheduler+0xdc>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a10      	ldr	r2, [pc, #64]	; (800b2d4 <xPortStartScheduler+0xdc>)
 800b294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b298:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b29a:	4b0e      	ldr	r3, [pc, #56]	; (800b2d4 <xPortStartScheduler+0xdc>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a0d      	ldr	r2, [pc, #52]	; (800b2d4 <xPortStartScheduler+0xdc>)
 800b2a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2a6:	f000 f8b9 	bl	800b41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2aa:	4b0b      	ldr	r3, [pc, #44]	; (800b2d8 <xPortStartScheduler+0xe0>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2b0:	f7ff ff92 	bl	800b1d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2b4:	f7fe feca 	bl	800a04c <vTaskSwitchContext>
	prvTaskExitError();
 800b2b8:	f7ff ff4c 	bl	800b154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	e000e400 	.word	0xe000e400
 800b2cc:	200011d8 	.word	0x200011d8
 800b2d0:	200011dc 	.word	0x200011dc
 800b2d4:	e000ed20 	.word	0xe000ed20
 800b2d8:	20000014 	.word	0x20000014

0800b2dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	607b      	str	r3, [r7, #4]
}
 800b2f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	; (800b334 <vPortEnterCritical+0x58>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	4a0d      	ldr	r2, [pc, #52]	; (800b334 <vPortEnterCritical+0x58>)
 800b2fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b300:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <vPortEnterCritical+0x58>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d10f      	bne.n	800b328 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b308:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <vPortEnterCritical+0x5c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00a      	beq.n	800b328 <vPortEnterCritical+0x4c>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	603b      	str	r3, [r7, #0]
}
 800b324:	bf00      	nop
 800b326:	e7fe      	b.n	800b326 <vPortEnterCritical+0x4a>
	}
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bc80      	pop	{r7}
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	20000014 	.word	0x20000014
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b342:	4b11      	ldr	r3, [pc, #68]	; (800b388 <vPortExitCritical+0x4c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10a      	bne.n	800b360 <vPortExitCritical+0x24>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	607b      	str	r3, [r7, #4]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b360:	4b09      	ldr	r3, [pc, #36]	; (800b388 <vPortExitCritical+0x4c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3b01      	subs	r3, #1
 800b366:	4a08      	ldr	r2, [pc, #32]	; (800b388 <vPortExitCritical+0x4c>)
 800b368:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b36a:	4b07      	ldr	r3, [pc, #28]	; (800b388 <vPortExitCritical+0x4c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d105      	bne.n	800b37e <vPortExitCritical+0x42>
 800b372:	2300      	movs	r3, #0
 800b374:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	f383 8811 	msr	BASEPRI, r3
}
 800b37c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b37e:	bf00      	nop
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	bc80      	pop	{r7}
 800b386:	4770      	bx	lr
 800b388:	20000014 	.word	0x20000014
 800b38c:	00000000 	.word	0x00000000

0800b390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b390:	f3ef 8009 	mrs	r0, PSP
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <pxCurrentTCBConst>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b3a0:	6010      	str	r0, [r2, #0]
 800b3a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b3a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3aa:	f380 8811 	msr	BASEPRI, r0
 800b3ae:	f7fe fe4d 	bl	800a04c <vTaskSwitchContext>
 800b3b2:	f04f 0000 	mov.w	r0, #0
 800b3b6:	f380 8811 	msr	BASEPRI, r0
 800b3ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b3be:	6819      	ldr	r1, [r3, #0]
 800b3c0:	6808      	ldr	r0, [r1, #0]
 800b3c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b3c6:	f380 8809 	msr	PSP, r0
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	4770      	bx	lr

0800b3d0 <pxCurrentTCBConst>:
 800b3d0:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop

0800b3d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	607b      	str	r3, [r7, #4]
}
 800b3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3f2:	f7fe fd6d 	bl	8009ed0 <xTaskIncrementTick>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <SysTick_Handler+0x40>)
 800b3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	2300      	movs	r3, #0
 800b406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	f383 8811 	msr	BASEPRI, r3
}
 800b40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b420:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <vPortSetupTimerInterrupt+0x30>)
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b426:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <vPortSetupTimerInterrupt+0x34>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b42c:	4b09      	ldr	r3, [pc, #36]	; (800b454 <vPortSetupTimerInterrupt+0x38>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a09      	ldr	r2, [pc, #36]	; (800b458 <vPortSetupTimerInterrupt+0x3c>)
 800b432:	fba2 2303 	umull	r2, r3, r2, r3
 800b436:	099b      	lsrs	r3, r3, #6
 800b438:	4a08      	ldr	r2, [pc, #32]	; (800b45c <vPortSetupTimerInterrupt+0x40>)
 800b43a:	3b01      	subs	r3, #1
 800b43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b43e:	4b03      	ldr	r3, [pc, #12]	; (800b44c <vPortSetupTimerInterrupt+0x30>)
 800b440:	2207      	movs	r2, #7
 800b442:	601a      	str	r2, [r3, #0]
}
 800b444:	bf00      	nop
 800b446:	46bd      	mov	sp, r7
 800b448:	bc80      	pop	{r7}
 800b44a:	4770      	bx	lr
 800b44c:	e000e010 	.word	0xe000e010
 800b450:	e000e018 	.word	0xe000e018
 800b454:	20000008 	.word	0x20000008
 800b458:	10624dd3 	.word	0x10624dd3
 800b45c:	e000e014 	.word	0xe000e014

0800b460 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b466:	f3ef 8305 	mrs	r3, IPSR
 800b46a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b0f      	cmp	r3, #15
 800b470:	d914      	bls.n	800b49c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b472:	4a16      	ldr	r2, [pc, #88]	; (800b4cc <vPortValidateInterruptPriority+0x6c>)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	4413      	add	r3, r2
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b47c:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <vPortValidateInterruptPriority+0x70>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	7afa      	ldrb	r2, [r7, #11]
 800b482:	429a      	cmp	r2, r3
 800b484:	d20a      	bcs.n	800b49c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	607b      	str	r3, [r7, #4]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b49c:	4b0d      	ldr	r3, [pc, #52]	; (800b4d4 <vPortValidateInterruptPriority+0x74>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	; (800b4d8 <vPortValidateInterruptPriority+0x78>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d90a      	bls.n	800b4c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	603b      	str	r3, [r7, #0]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <vPortValidateInterruptPriority+0x60>
	}
 800b4c2:	bf00      	nop
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bc80      	pop	{r7}
 800b4ca:	4770      	bx	lr
 800b4cc:	e000e3f0 	.word	0xe000e3f0
 800b4d0:	200011d8 	.word	0x200011d8
 800b4d4:	e000ed0c 	.word	0xe000ed0c
 800b4d8:	200011dc 	.word	0x200011dc

0800b4dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08a      	sub	sp, #40	; 0x28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4e8:	f7fe fc38 	bl	8009d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4ec:	4b58      	ldr	r3, [pc, #352]	; (800b650 <pvPortMalloc+0x174>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4f4:	f000 f910 	bl	800b718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4f8:	4b56      	ldr	r3, [pc, #344]	; (800b654 <pvPortMalloc+0x178>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4013      	ands	r3, r2
 800b500:	2b00      	cmp	r3, #0
 800b502:	f040 808e 	bne.w	800b622 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d01d      	beq.n	800b548 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b50c:	2208      	movs	r2, #8
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4413      	add	r3, r2
 800b512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f003 0307 	and.w	r3, r3, #7
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d014      	beq.n	800b548 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f023 0307 	bic.w	r3, r3, #7
 800b524:	3308      	adds	r3, #8
 800b526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f003 0307 	and.w	r3, r3, #7
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00a      	beq.n	800b548 <pvPortMalloc+0x6c>
	__asm volatile
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	617b      	str	r3, [r7, #20]
}
 800b544:	bf00      	nop
 800b546:	e7fe      	b.n	800b546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d069      	beq.n	800b622 <pvPortMalloc+0x146>
 800b54e:	4b42      	ldr	r3, [pc, #264]	; (800b658 <pvPortMalloc+0x17c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d864      	bhi.n	800b622 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b558:	4b40      	ldr	r3, [pc, #256]	; (800b65c <pvPortMalloc+0x180>)
 800b55a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b55c:	4b3f      	ldr	r3, [pc, #252]	; (800b65c <pvPortMalloc+0x180>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b562:	e004      	b.n	800b56e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	429a      	cmp	r2, r3
 800b576:	d903      	bls.n	800b580 <pvPortMalloc+0xa4>
 800b578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1f1      	bne.n	800b564 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b580:	4b33      	ldr	r3, [pc, #204]	; (800b650 <pvPortMalloc+0x174>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b586:	429a      	cmp	r2, r3
 800b588:	d04b      	beq.n	800b622 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2208      	movs	r2, #8
 800b590:	4413      	add	r3, r2
 800b592:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	1ad2      	subs	r2, r2, r3
 800b5a4:	2308      	movs	r3, #8
 800b5a6:	005b      	lsls	r3, r3, #1
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d91f      	bls.n	800b5ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <pvPortMalloc+0xf8>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	613b      	str	r3, [r7, #16]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	685a      	ldr	r2, [r3, #4]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	1ad2      	subs	r2, r2, r3
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5e6:	69b8      	ldr	r0, [r7, #24]
 800b5e8:	f000 f8f8 	bl	800b7dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5ec:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <pvPortMalloc+0x17c>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	1ad3      	subs	r3, r2, r3
 800b5f6:	4a18      	ldr	r2, [pc, #96]	; (800b658 <pvPortMalloc+0x17c>)
 800b5f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5fa:	4b17      	ldr	r3, [pc, #92]	; (800b658 <pvPortMalloc+0x17c>)
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	4b18      	ldr	r3, [pc, #96]	; (800b660 <pvPortMalloc+0x184>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	429a      	cmp	r2, r3
 800b604:	d203      	bcs.n	800b60e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b606:	4b14      	ldr	r3, [pc, #80]	; (800b658 <pvPortMalloc+0x17c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a15      	ldr	r2, [pc, #84]	; (800b660 <pvPortMalloc+0x184>)
 800b60c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	4b10      	ldr	r3, [pc, #64]	; (800b654 <pvPortMalloc+0x178>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	431a      	orrs	r2, r3
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b622:	f7fe fba9 	bl	8009d78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	f003 0307 	and.w	r3, r3, #7
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00a      	beq.n	800b646 <pvPortMalloc+0x16a>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	60fb      	str	r3, [r7, #12]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <pvPortMalloc+0x168>
	return pvReturn;
 800b646:	69fb      	ldr	r3, [r7, #28]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3728      	adds	r7, #40	; 0x28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	200031e8 	.word	0x200031e8
 800b654:	200031f4 	.word	0x200031f4
 800b658:	200031ec 	.word	0x200031ec
 800b65c:	200031e0 	.word	0x200031e0
 800b660:	200031f0 	.word	0x200031f0

0800b664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d048      	beq.n	800b708 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b676:	2308      	movs	r3, #8
 800b678:	425b      	negs	r3, r3
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	4413      	add	r3, r2
 800b67e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	4b21      	ldr	r3, [pc, #132]	; (800b710 <vPortFree+0xac>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4013      	ands	r3, r2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <vPortFree+0x44>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	60fb      	str	r3, [r7, #12]
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00a      	beq.n	800b6c6 <vPortFree+0x62>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	60bb      	str	r3, [r7, #8]
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	4b11      	ldr	r3, [pc, #68]	; (800b710 <vPortFree+0xac>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d019      	beq.n	800b708 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d115      	bne.n	800b708 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	4b0b      	ldr	r3, [pc, #44]	; (800b710 <vPortFree+0xac>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	43db      	mvns	r3, r3
 800b6e6:	401a      	ands	r2, r3
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6ec:	f7fe fb36 	bl	8009d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	4b07      	ldr	r3, [pc, #28]	; (800b714 <vPortFree+0xb0>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	4a06      	ldr	r2, [pc, #24]	; (800b714 <vPortFree+0xb0>)
 800b6fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6fe:	6938      	ldr	r0, [r7, #16]
 800b700:	f000 f86c 	bl	800b7dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b704:	f7fe fb38 	bl	8009d78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b708:	bf00      	nop
 800b70a:	3718      	adds	r7, #24
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	200031f4 	.word	0x200031f4
 800b714:	200031ec 	.word	0x200031ec

0800b718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b71e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b724:	4b27      	ldr	r3, [pc, #156]	; (800b7c4 <prvHeapInit+0xac>)
 800b726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f003 0307 	and.w	r3, r3, #7
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00c      	beq.n	800b74c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	3307      	adds	r3, #7
 800b736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f023 0307 	bic.w	r3, r3, #7
 800b73e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	4a1f      	ldr	r2, [pc, #124]	; (800b7c4 <prvHeapInit+0xac>)
 800b748:	4413      	add	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b750:	4a1d      	ldr	r2, [pc, #116]	; (800b7c8 <prvHeapInit+0xb0>)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b756:	4b1c      	ldr	r3, [pc, #112]	; (800b7c8 <prvHeapInit+0xb0>)
 800b758:	2200      	movs	r2, #0
 800b75a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	4413      	add	r3, r2
 800b762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b764:	2208      	movs	r2, #8
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	1a9b      	subs	r3, r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f023 0307 	bic.w	r3, r3, #7
 800b772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4a15      	ldr	r2, [pc, #84]	; (800b7cc <prvHeapInit+0xb4>)
 800b778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b77a:	4b14      	ldr	r3, [pc, #80]	; (800b7cc <prvHeapInit+0xb4>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2200      	movs	r2, #0
 800b780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b782:	4b12      	ldr	r3, [pc, #72]	; (800b7cc <prvHeapInit+0xb4>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	1ad2      	subs	r2, r2, r3
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <prvHeapInit+0xb4>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	4a0a      	ldr	r2, [pc, #40]	; (800b7d0 <prvHeapInit+0xb8>)
 800b7a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	4a09      	ldr	r2, [pc, #36]	; (800b7d4 <prvHeapInit+0xbc>)
 800b7ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7b0:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <prvHeapInit+0xc0>)
 800b7b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b7b6:	601a      	str	r2, [r3, #0]
}
 800b7b8:	bf00      	nop
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	200011e0 	.word	0x200011e0
 800b7c8:	200031e0 	.word	0x200031e0
 800b7cc:	200031e8 	.word	0x200031e8
 800b7d0:	200031f0 	.word	0x200031f0
 800b7d4:	200031ec 	.word	0x200031ec
 800b7d8:	200031f4 	.word	0x200031f4

0800b7dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7e4:	4b27      	ldr	r3, [pc, #156]	; (800b884 <prvInsertBlockIntoFreeList+0xa8>)
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	e002      	b.n	800b7f0 <prvInsertBlockIntoFreeList+0x14>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d8f7      	bhi.n	800b7ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	4413      	add	r3, r2
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d108      	bne.n	800b81e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	441a      	add	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	441a      	add	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d118      	bne.n	800b864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	4b14      	ldr	r3, [pc, #80]	; (800b888 <prvInsertBlockIntoFreeList+0xac>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d00d      	beq.n	800b85a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	441a      	add	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	601a      	str	r2, [r3, #0]
 800b858:	e008      	b.n	800b86c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b85a:	4b0b      	ldr	r3, [pc, #44]	; (800b888 <prvInsertBlockIntoFreeList+0xac>)
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	e003      	b.n	800b86c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d002      	beq.n	800b87a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b87a:	bf00      	nop
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	bc80      	pop	{r7}
 800b882:	4770      	bx	lr
 800b884:	200031e0 	.word	0x200031e0
 800b888:	200031e8 	.word	0x200031e8

0800b88c <FAS_Send>:

//#define nPortNo 0
#define FAS_MaxRcvByte	100

uint8_t FAS_Send(FAS_HandlerStruct* Port, uint8_t* SendBuffer, uint8_t Len)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	4613      	mov	r3, r2
 800b898:	71fb      	strb	r3, [r7, #7]

    int Status = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
	Status = UART_OS_Transmit(Port->uart, SendBuffer, Len);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	79fa      	ldrb	r2, [r7, #7]
 800b8a4:	b292      	uxth	r2, r2
 800b8a6:	68b9      	ldr	r1, [r7, #8]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f001 f951 	bl	800cb50 <UART_OS_Transmit>
 800b8ae:	6178      	str	r0, [r7, #20]
	if(Status !=  osOK)
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d004      	beq.n	800b8c0 <FAS_Send+0x34>
	{
		SyncPrintf("EZI UART Transmit Error \r\n");
 800b8b6:	4805      	ldr	r0, [pc, #20]	; (800b8cc <FAS_Send+0x40>)
 800b8b8:	f001 f8e8 	bl	800ca8c <SyncPrintf>
		return FMC_TIMEOUT_ERROR;
 800b8bc:	2306      	movs	r3, #6
 800b8be:	e000      	b.n	800b8c2 <FAS_Send+0x36>

	}
	return FMM_OK;
 800b8c0:	2300      	movs	r3, #0

}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	0800e73c 	.word	0x0800e73c

0800b8d0 <FAS_Receive>:

uint8_t FAS_Receive(FAS_HandlerStruct* Port, uint8_t* RcvBuffer, uint8_t* RxLen)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
	int Status = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
	Status = UART_OS_Receive_ToIdle(Port->uart, RcvBuffer,(uint16_t*) RxLen, FAS_MaxRcvByte, 100);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6818      	ldr	r0, [r3, #0]
 800b8e4:	2364      	movs	r3, #100	; 0x64
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	2364      	movs	r3, #100	; 0x64
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	f001 f970 	bl	800cbd2 <UART_OS_Receive_ToIdle>
 800b8f2:	6178      	str	r0, [r7, #20]
//	Status = HAL_UARTEx_ReceiveToIdle(&EZI_UART, RcvBuffer, 255, (uint16_t*)RxLen, 1000);
	if(Status == osErrorTimeout)
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f113 0f02 	cmn.w	r3, #2
 800b8fa:	d104      	bne.n	800b906 <FAS_Receive+0x36>
	{
		SyncPrintf("Rcv Timeout \r\n");
 800b8fc:	4807      	ldr	r0, [pc, #28]	; (800b91c <FAS_Receive+0x4c>)
 800b8fe:	f001 f8c5 	bl	800ca8c <SyncPrintf>
		return FMC_TIMEOUT_ERROR;
 800b902:	2306      	movs	r3, #6
 800b904:	e005      	b.n	800b912 <FAS_Receive+0x42>
	}
	else
	{
	}

	if(Status != osOK)
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <FAS_Receive+0x40>
		return FMC_TIMEOUT_ERROR;
 800b90c:	2306      	movs	r3, #6
 800b90e:	e000      	b.n	800b912 <FAS_Receive+0x42>
	else
		return FMM_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3718      	adds	r7, #24
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	0800e758 	.word	0x0800e758

0800b920 <FAS_Lock>:
uint8_t FAS_Lock(FAS_HandlerStruct* nPortNo, uint32_t timeout)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
	return osMutexAcquire(nPortNo->uartLock, timeout);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	6839      	ldr	r1, [r7, #0]
 800b930:	4618      	mov	r0, r3
 800b932:	f7fc f909 	bl	8007b48 <osMutexAcquire>
 800b936:	4603      	mov	r3, r0
 800b938:	b2db      	uxtb	r3, r3
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <FAS_Unlock>:
uint8_t FAS_Unlock(FAS_HandlerStruct* nPortNo)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b082      	sub	sp, #8
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
	return osMutexRelease(nPortNo->uartLock);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fc f958 	bl	8007c04 <osMutexRelease>
 800b954:	4603      	mov	r3, r0
 800b956:	b2db      	uxtb	r3, r3
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <FAS_Init>:
uint8_t FAS_Init(FAS_HandlerStruct* nPortNo)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
	nPortNo->uartLock = osMutexNew(NULL);
 800b968:	2000      	movs	r0, #0
 800b96a:	f7fc f853 	bl	8007a14 <osMutexNew>
 800b96e:	4602      	mov	r2, r0
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	605a      	str	r2, [r3, #4]
	return 0;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <Wheel_Init>:

uint8_t Wheel_Init(Wheel_HandlerStruct* SteerWheel, UART_OS_HandlerStruct* uart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
	SteerWheel->EziHandler.uart = uart;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	601a      	str	r2, [r3, #0]
	FAS_Init(&SteerWheel->EziHandler);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff ffe4 	bl	800b960 <FAS_Init>

	Wheel_setLimit(SteerWheel, 25, 25);
 800b998:	4a06      	ldr	r2, [pc, #24]	; (800b9b4 <Wheel_Init+0x34>)
 800b99a:	4906      	ldr	r1, [pc, #24]	; (800b9b4 <Wheel_Init+0x34>)
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f80b 	bl	800b9b8 <Wheel_setLimit>
	Wheel_ClearPos(SteerWheel);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f88e 	bl	800bac4 <Wheel_ClearPos>

	return Wheel_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	41c80000 	.word	0x41c80000

0800b9b8 <Wheel_setLimit>:
uint8_t Wheel_setLimit(Wheel_HandlerStruct* SteerWheel, float LeftLimit, float RightLimit)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
	SteerWheel->RightLimit = RightLimit;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	611a      	str	r2, [r3, #16]
	SteerWheel->letfLimit = LeftLimit;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	60da      	str	r2, [r3, #12]
	return Wheel_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bc80      	pop	{r7}
 800b9da:	4770      	bx	lr
 800b9dc:	0000      	movs	r0, r0
	...

0800b9e0 <Wheel_SetAngle_ABS>:
	return FAS_SetInputAssignMap(&SteerWheel->EziHandler, SteerWheel->devID, 7, 18, mode);
}


uint8_t Wheel_SetAngle_ABS(Wheel_HandlerStruct* SteerWheel, float Angle)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
//	Angle = - An
	if (Angle > SteerWheel->RightLimit) Angle = SteerWheel->RightLimit;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6838      	ldr	r0, [r7, #0]
 800b9f2:	f7f5 fac5 	bl	8000f80 <__aeabi_fcmpgt>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <Wheel_SetAngle_ABS+0x24>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	603b      	str	r3, [r7, #0]
 800ba02:	e00f      	b.n	800ba24 <Wheel_SetAngle_ABS+0x44>
	else if (Angle < -SteerWheel->RightLimit) Angle = -SteerWheel->RightLimit;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6838      	ldr	r0, [r7, #0]
 800ba10:	f7f5 fa98 	bl	8000f44 <__aeabi_fcmplt>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <Wheel_SetAngle_ABS+0x44>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ba22:	603b      	str	r3, [r7, #0]
	int32_t Pos = Angle2Pulse(Angle);
 800ba24:	6838      	ldr	r0, [r7, #0]
 800ba26:	f7f4 fcff 	bl	8000428 <__aeabi_f2d>
 800ba2a:	a323      	add	r3, pc, #140	; (adr r3, 800bab8 <Wheel_SetAngle_ABS+0xd8>)
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f7f4 fd52 	bl	80004d8 <__aeabi_dmul>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4610      	mov	r0, r2
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	f7f4 ff5e 	bl	80008fc <__aeabi_d2iz>
 800ba40:	4603      	mov	r3, r0
 800ba42:	613b      	str	r3, [r7, #16]
	uint32_t Vel = Wheel_MaxVeloPul;
 800ba44:	4b1e      	ldr	r3, [pc, #120]	; (800bac0 <Wheel_SetAngle_ABS+0xe0>)
 800ba46:	60fb      	str	r3, [r7, #12]
	uint8_t Status =0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	75fb      	strb	r3, [r7, #23]
	EZISERVO_AXISSTATUS AxisStatus ={0};
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60bb      	str	r3, [r7, #8]

	Status = FAS_GetAxisStatus(&SteerWheel->EziHandler, SteerWheel->devID,(uint32_t*) &AxisStatus);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	7a1b      	ldrb	r3, [r3, #8]
 800ba56:	f107 0208 	add.w	r2, r7, #8
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	f000 f940 	bl	800bce0 <FAS_GetAxisStatus>
 800ba60:	4603      	mov	r3, r0
 800ba62:	75fb      	strb	r3, [r7, #23]
	if(Status != FMM_OK) return Wheel_Failed;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <Wheel_SetAngle_ABS+0x8e>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e01e      	b.n	800baac <Wheel_SetAngle_ABS+0xcc>
	if(AxisStatus.FFLAG_MOTIONING == 1)
 800ba6e:	7afb      	ldrb	r3, [r7, #11]
 800ba70:	f003 0308 	and.w	r3, r3, #8
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d009      	beq.n	800ba8e <Wheel_SetAngle_ABS+0xae>
	{
		Status = FAS_PositionAbsOverride(&SteerWheel->EziHandler, SteerWheel->devID, Pos);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	7a1b      	ldrb	r3, [r3, #8]
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	4619      	mov	r1, r3
 800ba84:	f000 f8bf 	bl	800bc06 <FAS_PositionAbsOverride>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75fb      	strb	r3, [r7, #23]
 800ba8c:	e008      	b.n	800baa0 <Wheel_SetAngle_ABS+0xc0>
	}else
	{
		Status = FAS_MoveSingleAxisAbsPos(&SteerWheel->EziHandler, SteerWheel->devID, Pos, Vel);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	7a19      	ldrb	r1, [r3, #8]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	f000 f82b 	bl	800baf2 <FAS_MoveSingleAxisAbsPos>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	75fb      	strb	r3, [r7, #23]
	}

	if(Status != FMM_OK) return Wheel_Failed;
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <Wheel_SetAngle_ABS+0xca>
 800baa6:	2301      	movs	r3, #1
 800baa8:	e000      	b.n	800baac <Wheel_SetAngle_ABS+0xcc>

	return Wheel_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3718      	adds	r7, #24
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	f3af 8000 	nop.w
 800bab8:	00000000 	.word	0x00000000
 800babc:	40c77000 	.word	0x40c77000
 800bac0:	000186a0 	.word	0x000186a0

0800bac4 <Wheel_ClearPos>:

	return Wheel_OK;
}

uint8_t Wheel_ClearPos(Wheel_HandlerStruct* SteerWheel)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
	uint8_t Status = FAS_ClearPosition(&SteerWheel->EziHandler, SteerWheel->devID);
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	7a1b      	ldrb	r3, [r3, #8]
 800bad2:	4619      	mov	r1, r3
 800bad4:	4610      	mov	r0, r2
 800bad6:	f000 f98b 	bl	800bdf0 <FAS_ClearPosition>
 800bada:	4603      	mov	r3, r0
 800badc:	73fb      	strb	r3, [r7, #15]
	if(Status != FMM_OK) return Wheel_Failed;
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d001      	beq.n	800bae8 <Wheel_ClearPos+0x24>
 800bae4:	2301      	movs	r3, #1
 800bae6:	e000      	b.n	800baea <Wheel_ClearPos+0x26>
	return Wheel_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <FAS_MoveSingleAxisAbsPos>:
	vPortFree(RcvBuffer);
	vPortFree(RespData);
	return ComStatus;
}
int FAS_MoveSingleAxisAbsPos(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo, int32_t lAbsPos, uint32_t lVelocity)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b090      	sub	sp, #64	; 0x40
 800baf6:	af04      	add	r7, sp, #16
 800baf8:	60f8      	str	r0, [r7, #12]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	603b      	str	r3, [r7, #0]
 800bafe:	460b      	mov	r3, r1
 800bb00:	72fb      	strb	r3, [r7, #11]
    const uint8_t FrameType = 0x34;
 800bb02:	2334      	movs	r3, #52	; 0x34
 800bb04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    const uint8_t SendDataLen = 8;
 800bb08:	2308      	movs	r3, #8
 800bb0a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    const uint8_t RcvDataLen = 1;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t ComStatus;

    uint8_t* SendBuffer = (uint8_t*)pvPortMalloc(15 + 2*SendDataLen);
 800bb14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	330f      	adds	r3, #15
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff fcdd 	bl	800b4dc <pvPortMalloc>
 800bb22:	62b8      	str	r0, [r7, #40]	; 0x28
    uint8_t SendLen;
    uint8_t* RcvBuffer = (uint8_t*)pvPortMalloc(15 + RcvDataLen);
 800bb24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bb28:	330f      	adds	r3, #15
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff fcd6 	bl	800b4dc <pvPortMalloc>
 800bb30:	6278      	str	r0, [r7, #36]	; 0x24
    uint8_t RcvLen;
    uint8_t* RespData = (uint8_t*)pvPortMalloc(RcvDataLen + 2);
 800bb32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800bb36:	3302      	adds	r3, #2
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fccf 	bl	800b4dc <pvPortMalloc>
 800bb3e:	6238      	str	r0, [r7, #32]
	uint8_t RespDataLen;

    uint8_t* Data = (uint8_t*)pvPortMalloc(SendDataLen);
 800bb40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff fcc9 	bl	800b4dc <pvPortMalloc>
 800bb4a:	61f8      	str	r0, [r7, #28]
 800bb4c:	687a      	ldr	r2, [r7, #4]
    memcpy(Data, &lAbsPos, 4);
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	601a      	str	r2, [r3, #0]
    memcpy(Data + 4, &lVelocity, 4);
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	3304      	adds	r3, #4
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	601a      	str	r2, [r3, #0]
    uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, Data, SendDataLen, SendBuffer, &SendLen);
 800bb5a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bb5e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800bb62:	7af8      	ldrb	r0, [r7, #11]
 800bb64:	f107 0319 	add.w	r3, r7, #25
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	f000 fa85 	bl	800c080 <FAS_PackData>
 800bb76:	4603      	mov	r3, r0
 800bb78:	76fb      	strb	r3, [r7, #27]
    FAS_Send(nPortNo, SendBuffer, SendLen);
 800bb7a:	7e7b      	ldrb	r3, [r7, #25]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fe83 	bl	800b88c <FAS_Send>
    vPortFree(SendBuffer);
 800bb86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb88:	f7ff fd6c 	bl	800b664 <vPortFree>
    vPortFree(Data);
 800bb8c:	69f8      	ldr	r0, [r7, #28]
 800bb8e:	f7ff fd69 	bl	800b664 <vPortFree>

    ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800bb92:	f107 0318 	add.w	r3, r7, #24
 800bb96:	461a      	mov	r2, r3
 800bb98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7ff fe98 	bl	800b8d0 <FAS_Receive>
 800bba0:	4603      	mov	r3, r0
 800bba2:	76bb      	strb	r3, [r7, #26]
	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800bba4:	7e39      	ldrb	r1, [r7, #24]
 800bba6:	7ef8      	ldrb	r0, [r7, #27]
 800bba8:	7afa      	ldrb	r2, [r7, #11]
 800bbaa:	f107 0317 	add.w	r3, r7, #23
 800bbae:	9302      	str	r3, [sp, #8]
 800bbb0:	6a3b      	ldr	r3, [r7, #32]
 800bbb2:	9301      	str	r3, [sp, #4]
 800bbb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	4603      	mov	r3, r0
 800bbbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbbe:	f000 fadd 	bl	800c17c <FAS_UnPackData>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	76bb      	strb	r3, [r7, #26]
	if(ComStatus != FMM_OK) return ComStatus;
 800bbc6:	7ebb      	ldrb	r3, [r7, #26]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <FAS_MoveSingleAxisAbsPos+0xde>
 800bbcc:	7ebb      	ldrb	r3, [r7, #26]
 800bbce:	e016      	b.n	800bbfe <FAS_MoveSingleAxisAbsPos+0x10c>

	if(RespDataLen != RcvDataLen)
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d007      	beq.n	800bbea <FAS_MoveSingleAxisAbsPos+0xf8>
	{
		vPortFree(RcvBuffer);
 800bbda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbdc:	f7ff fd42 	bl	800b664 <vPortFree>
		vPortFree(RespData);
 800bbe0:	6a38      	ldr	r0, [r7, #32]
 800bbe2:	f7ff fd3f 	bl	800b664 <vPortFree>
		return FMM_UNKNOWN_ERROR;
 800bbe6:	23ff      	movs	r3, #255	; 0xff
 800bbe8:	e009      	b.n	800bbfe <FAS_MoveSingleAxisAbsPos+0x10c>
	}

	ComStatus = RespData[0];
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	76bb      	strb	r3, [r7, #26]
	vPortFree(RcvBuffer);
 800bbf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbf2:	f7ff fd37 	bl	800b664 <vPortFree>
	vPortFree(RespData);
 800bbf6:	6a38      	ldr	r0, [r7, #32]
 800bbf8:	f7ff fd34 	bl	800b664 <vPortFree>
	return ComStatus;
 800bbfc:	7ebb      	ldrb	r3, [r7, #26]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3730      	adds	r7, #48	; 0x30
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <FAS_PositionAbsOverride>:
	vPortFree(RcvBuffer);
	vPortFree(RespData);
	return ComStatus;
}
int FAS_PositionAbsOverride(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo, int32_t lOverridePos)
{
 800bc06:	b590      	push	{r4, r7, lr}
 800bc08:	b09d      	sub	sp, #116	; 0x74
 800bc0a:	af04      	add	r7, sp, #16
 800bc0c:	60f8      	str	r0, [r7, #12]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	607a      	str	r2, [r7, #4]
 800bc12:	72fb      	strb	r3, [r7, #11]
    const uint8_t FrameType = 0x38;
 800bc14:	2338      	movs	r3, #56	; 0x38
 800bc16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    const uint8_t SendDataLen = 4;
 800bc1a:	2304      	movs	r3, #4
 800bc1c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    const uint8_t RcvDataLen = 1;
 800bc20:	2301      	movs	r3, #1
 800bc22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800bc26:	687b      	ldr	r3, [r7, #4]

    uint8_t SendBuffer[24];
//    uint8_t* SendBuffer = (uint8_t*)pvPortMalloc(15 + 2 * SendDataLen);
    uint8_t SendLen;
//    lOverridePos = -1 * lOverridePos;
    memcpy(Data, &lOverridePos, 4);
 800bc28:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, Data, SendDataLen, SendBuffer, &SendLen);
 800bc2a:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 800bc2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bc32:	f897 105f 	ldrb.w	r1, [r7, #95]	; 0x5f
 800bc36:	7af8      	ldrb	r0, [r7, #11]
 800bc38:	f107 0313 	add.w	r3, r7, #19
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	f107 0314 	add.w	r3, r7, #20
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	4623      	mov	r3, r4
 800bc46:	f000 fa1b 	bl	800c080 <FAS_PackData>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
    FAS_Lock(nPortNo, 10);
 800bc50:	210a      	movs	r1, #10
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f7ff fe64 	bl	800b920 <FAS_Lock>
    FAS_Send(nPortNo, SendBuffer, SendLen);
 800bc58:	7cfa      	ldrb	r2, [r7, #19]
 800bc5a:	f107 0314 	add.w	r3, r7, #20
 800bc5e:	4619      	mov	r1, r3
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f7ff fe13 	bl	800b88c <FAS_Send>
    ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800bc66:	f107 0243 	add.w	r2, r7, #67	; 0x43
 800bc6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bc6e:	4619      	mov	r1, r3
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f7ff fe2d 	bl	800b8d0 <FAS_Receive>
 800bc76:	4603      	mov	r3, r0
 800bc78:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	FAS_Unlock(nPortNo);
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f7ff fe60 	bl	800b942 <FAS_Unlock>
	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800bc82:	f897 1043 	ldrb.w	r1, [r7, #67]	; 0x43
 800bc86:	f897 405c 	ldrb.w	r4, [r7, #92]	; 0x5c
 800bc8a:	7afa      	ldrb	r2, [r7, #11]
 800bc8c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800bc90:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bc94:	9302      	str	r3, [sp, #8]
 800bc96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bc9a:	9301      	str	r3, [sp, #4]
 800bc9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	4623      	mov	r3, r4
 800bca4:	f000 fa6a 	bl	800c17c <FAS_UnPackData>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	if(ComStatus != FMM_OK) return ComStatus;
 800bcae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <FAS_PositionAbsOverride+0xb6>
 800bcb6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bcba:	e00d      	b.n	800bcd8 <FAS_PositionAbsOverride+0xd2>

	ComStatus = RespDataLen != RcvDataLen ? FMM_UNKNOWN_ERROR:RespData[0];
 800bcbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcc0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d102      	bne.n	800bcce <FAS_PositionAbsOverride+0xc8>
 800bcc8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800bccc:	e000      	b.n	800bcd0 <FAS_PositionAbsOverride+0xca>
 800bcce:	23ff      	movs	r3, #255	; 0xff
 800bcd0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	return ComStatus;
 800bcd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3764      	adds	r7, #100	; 0x64
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd90      	pop	{r4, r7, pc}

0800bce0 <FAS_GetAxisStatus>:
#include "FAS_EziMOTIONPlusR.h"

#ifdef USE_FAS_GetAxisStatus
int FAS_GetAxisStatus(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo, uint32_t* dwAxisStatus)
{
 800bce0:	b590      	push	{r4, r7, lr}
 800bce2:	b097      	sub	sp, #92	; 0x5c
 800bce4:	af04      	add	r7, sp, #16
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	460b      	mov	r3, r1
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	72fb      	strb	r3, [r7, #11]
    const uint8_t FrameType = 0x40;
 800bcee:	2340      	movs	r3, #64	; 0x40
 800bcf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
//    const uint8_t SendDataLen = 0;
    const uint8_t RcvDataLen = 5;
 800bcf4:	2305      	movs	r3, #5
 800bcf6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
//    uint8_t *SendBuffer = (uint8_t*) pvPortMalloc(15 + 2*SendDataLen);
    uint8_t SendBuffer[16] = {0};
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	605a      	str	r2, [r3, #4]
 800bd08:	609a      	str	r2, [r3, #8]

    uint8_t SendLen;
//    uint8_t *RcvBuffer = (uint8_t*)pvPortMalloc(15 + SendDataLen);
    uint8_t RcvBuffer[16] = {0};
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	623b      	str	r3, [r7, #32]
 800bd0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	605a      	str	r2, [r3, #4]
 800bd18:	609a      	str	r2, [r3, #8]

    uint8_t RcvLen;
//    uint8_t* RespData = (uint8_t*)pvPortMalloc(RcvDataLen + 2);
    uint8_t RespData[10] = {0};
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	f107 0318 	add.w	r3, r7, #24
 800bd22:	2200      	movs	r2, #0
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	809a      	strh	r2, [r3, #4]

	uint8_t RespDataLen;

    uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, 0, 0, SendBuffer, &SendLen);
 800bd28:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800bd2c:	7af8      	ldrb	r0, [r7, #11]
 800bd2e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f000 f99f 	bl	800c080 <FAS_PackData>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t ComStatus;
    FAS_Lock(nPortNo, 10);
 800bd48:	210a      	movs	r1, #10
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fde8 	bl	800b920 <FAS_Lock>
    FAS_Send(nPortNo, SendBuffer, SendLen);
 800bd50:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800bd54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bd58:	4619      	mov	r1, r3
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7ff fd96 	bl	800b88c <FAS_Send>
    ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800bd60:	f107 021f 	add.w	r2, r7, #31
 800bd64:	f107 0320 	add.w	r3, r7, #32
 800bd68:	4619      	mov	r1, r3
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff fdb0 	bl	800b8d0 <FAS_Receive>
 800bd70:	4603      	mov	r3, r0
 800bd72:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    FAS_Unlock(nPortNo);
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff fde3 	bl	800b942 <FAS_Unlock>

	if(ComStatus != FMM_OK) return ComStatus;
 800bd7c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <FAS_GetAxisStatus+0xaa>
 800bd84:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bd88:	e02e      	b.n	800bde8 <FAS_GetAxisStatus+0x108>
	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800bd8a:	7ff9      	ldrb	r1, [r7, #31]
 800bd8c:	f897 4045 	ldrb.w	r4, [r7, #69]	; 0x45
 800bd90:	7afa      	ldrb	r2, [r7, #11]
 800bd92:	f107 0020 	add.w	r0, r7, #32
 800bd96:	f107 0313 	add.w	r3, r7, #19
 800bd9a:	9302      	str	r3, [sp, #8]
 800bd9c:	f107 0314 	add.w	r3, r7, #20
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	4623      	mov	r3, r4
 800bdaa:	f000 f9e7 	bl	800c17c <FAS_UnPackData>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	if(ComStatus != FMM_OK) return ComStatus;
 800bdb4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <FAS_GetAxisStatus+0xe2>
 800bdbc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bdc0:	e012      	b.n	800bde8 <FAS_GetAxisStatus+0x108>


	ComStatus = RespDataLen != RcvDataLen ? FMM_UNKNOWN_ERROR:RespData[0];
 800bdc2:	7cfb      	ldrb	r3, [r7, #19]
 800bdc4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d101      	bne.n	800bdd0 <FAS_GetAxisStatus+0xf0>
 800bdcc:	7d3b      	ldrb	r3, [r7, #20]
 800bdce:	e000      	b.n	800bdd2 <FAS_GetAxisStatus+0xf2>
 800bdd0:	23ff      	movs	r3, #255	; 0xff
 800bdd2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	memcpy(dwAxisStatus, RespData+1,4);
 800bdd6:	f107 0314 	add.w	r3, r7, #20
 800bdda:	3301      	adds	r3, #1
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	601a      	str	r2, [r3, #0]
//	vPortFree(RcvBuffer);
//	vPortFree(RespData);
	return ComStatus;
 800bde4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	374c      	adds	r7, #76	; 0x4c
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd90      	pop	{r4, r7, pc}

0800bdf0 <FAS_ClearPosition>:
}
#endif

#if USE_FAS_ClearPosition == 1
int FAS_ClearPosition(FAS_HandlerStruct* nPortNo, uint8_t iSlaveNo)
{
 800bdf0:	b590      	push	{r4, r7, lr}
 800bdf2:	b097      	sub	sp, #92	; 0x5c
 800bdf4:	af04      	add	r7, sp, #16
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
	const uint8_t FrameType = 0x56;
 800bdfc:	2356      	movs	r3, #86	; 0x56
 800bdfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	const uint8_t SendDataLen = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	const uint8_t RcvDataLen = 1;
 800be08:	2301      	movs	r3, #1
 800be0a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t SendBuffer[16] = {0};
 800be0e:	2300      	movs	r3, #0
 800be10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be16:	2200      	movs	r2, #0
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	605a      	str	r2, [r3, #4]
 800be1c:	609a      	str	r2, [r3, #8]
//	uint8_t *SendBuffer = (uint8_t*) pvPortMalloc(15 + 2*SendDataLen);

	uint8_t SendLen;
	uint8_t* SendData = NULL;
 800be1e:	2300      	movs	r3, #0
 800be20:	643b      	str	r3, [r7, #64]	; 0x40
//	uint8_t SendData[] = (uint8_t*) pvPortMalloc(SendDataLen);

//	uint8_t *RcvBuffer = (uint8_t*)pvPortMalloc(15 + 2*RcvDataLen);
	uint8_t RcvBuffer[20] ={0} ;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	f107 0318 	add.w	r3, r7, #24
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	605a      	str	r2, [r3, #4]
 800be30:	609a      	str	r2, [r3, #8]
 800be32:	60da      	str	r2, [r3, #12]

	uint8_t RcvLen;
//	uint8_t* RespData = (uint8_t*)pvPortMalloc(RcvDataLen + 2);
	uint8_t RespData[4] = {0};
 800be34:	2300      	movs	r3, #0
 800be36:	60fb      	str	r3, [r7, #12]

	uint8_t RespDataLen;

	uint8_t SyncByte = FAS_PackData(iSlaveNo, FrameType, SendData, SendDataLen, SendBuffer, &SendLen);
 800be38:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800be3c:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800be40:	78f8      	ldrb	r0, [r7, #3]
 800be42:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	4613      	mov	r3, r2
 800be50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be52:	f000 f915 	bl	800c080 <FAS_PackData>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t ComStatus;
	FAS_Lock(nPortNo, 20);
 800be5c:	2114      	movs	r1, #20
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f7ff fd5e 	bl	800b920 <FAS_Lock>
	FAS_Send(nPortNo, SendBuffer, SendLen);
 800be64:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800be68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be6c:	4619      	mov	r1, r3
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff fd0c 	bl	800b88c <FAS_Send>
//	vPortFree(SendData);
//	vPortFree(SendBuffer);
	ComStatus = FAS_Receive(nPortNo, RcvBuffer,&RcvLen);
 800be74:	f107 0213 	add.w	r2, r7, #19
 800be78:	f107 0314 	add.w	r3, r7, #20
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f7ff fd26 	bl	800b8d0 <FAS_Receive>
 800be84:	4603      	mov	r3, r0
 800be86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 	FAS_Unlock(nPortNo);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7ff fd59 	bl	800b942 <FAS_Unlock>

	ComStatus = FAS_UnPackData(RcvBuffer, RcvLen, iSlaveNo, SyncByte, FrameType, RespData, &RespDataLen);
 800be90:	7cf9      	ldrb	r1, [r7, #19]
 800be92:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 800be96:	78fa      	ldrb	r2, [r7, #3]
 800be98:	f107 0014 	add.w	r0, r7, #20
 800be9c:	f107 030b 	add.w	r3, r7, #11
 800bea0:	9302      	str	r3, [sp, #8]
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	9301      	str	r3, [sp, #4]
 800bea8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	4623      	mov	r3, r4
 800beb0:	f000 f964 	bl	800c17c <FAS_UnPackData>
 800beb4:	4603      	mov	r3, r0
 800beb6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	ComStatus = RespDataLen != RcvDataLen? FMC_RECVPACKET_ERROR: RespData[0];
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d101      	bne.n	800bec8 <FAS_ClearPosition+0xd8>
 800bec4:	7b3b      	ldrb	r3, [r7, #12]
 800bec6:	e000      	b.n	800beca <FAS_ClearPosition+0xda>
 800bec8:	2308      	movs	r3, #8
 800beca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

//	vPortFree(RcvBuffer);
//	vPortFree(RespData);
	return ComStatus;
 800bece:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	374c      	adds	r7, #76	; 0x4c
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd90      	pop	{r4, r7, pc}

0800beda <FAS_AddByteStuffing>:

static const char FAS_Header[] = { 0xAA, 0xCC };
static const char FAS_HeaderTmp[] = { 0x00, 0xCC };
static const char FAS_Tail[] = { 0xAA, 0xEE };
static void FAS_AddByteStuffing(uint8_t* Buffer, uint8_t* BufferLen)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b084      	sub	sp, #16
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
    uint8_t Length = *BufferLen;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < Length; ++i)
 800beea:	2300      	movs	r3, #0
 800beec:	73bb      	strb	r3, [r7, #14]
 800beee:	e020      	b.n	800bf32 <FAS_AddByteStuffing+0x58>
    {
        if (Buffer[i] == 0xAA)
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	4413      	add	r3, r2
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2baa      	cmp	r3, #170	; 0xaa
 800befa:	d117      	bne.n	800bf2c <FAS_AddByteStuffing+0x52>
        {
            memmove(Buffer + i + 1, Buffer + i, Length - i);
 800befc:	7bbb      	ldrb	r3, [r7, #14]
 800befe:	3301      	adds	r3, #1
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	18d0      	adds	r0, r2, r3
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	18d1      	adds	r1, r2, r3
 800bf0a:	7bfa      	ldrb	r2, [r7, #15]
 800bf0c:	7bbb      	ldrb	r3, [r7, #14]
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	461a      	mov	r2, r3
 800bf12:	f001 fb81 	bl	800d618 <memmove>
            Buffer[i] = 0xAA;
 800bf16:	7bbb      	ldrb	r3, [r7, #14]
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	22aa      	movs	r2, #170	; 0xaa
 800bf1e:	701a      	strb	r2, [r3, #0]
            i++;
 800bf20:	7bbb      	ldrb	r3, [r7, #14]
 800bf22:	3301      	adds	r3, #1
 800bf24:	73bb      	strb	r3, [r7, #14]
            Length++;
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < Length; ++i)
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	73bb      	strb	r3, [r7, #14]
 800bf32:	7bba      	ldrb	r2, [r7, #14]
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d3da      	bcc.n	800bef0 <FAS_AddByteStuffing+0x16>
        }
    }
    *BufferLen = Length;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	7bfa      	ldrb	r2, [r7, #15]
 800bf3e:	701a      	strb	r2, [r3, #0]
}
 800bf40:	bf00      	nop
 800bf42:	3710      	adds	r7, #16
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <FAS_UnStuffingByte>:

static uint8_t FAS_UnStuffingByte(uint8_t* Buffer, uint8_t* BufferLen)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
	uint8_t _BufferLen = *BufferLen;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	737b      	strb	r3, [r7, #13]
	uint8_t* UnStuffBuffer = (uint8_t*)pvPortMalloc(_BufferLen);
 800bf58:	7b7b      	ldrb	r3, [r7, #13]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7ff fabe 	bl	800b4dc <pvPortMalloc>
 800bf60:	60b8      	str	r0, [r7, #8]
	uint8_t UnStuffBufferLen = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < _BufferLen; ++i)
 800bf66:	2300      	movs	r3, #0
 800bf68:	73bb      	strb	r3, [r7, #14]
 800bf6a:	e03b      	b.n	800bfe4 <FAS_UnStuffingByte+0x9c>
	{
		if(Buffer[i] == 0xAA && Buffer[i+1] == 0xAA)
 800bf6c:	7bbb      	ldrb	r3, [r7, #14]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	4413      	add	r3, r2
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	2baa      	cmp	r3, #170	; 0xaa
 800bf76:	d115      	bne.n	800bfa4 <FAS_UnStuffingByte+0x5c>
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	4413      	add	r3, r2
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	2baa      	cmp	r3, #170	; 0xaa
 800bf84:	d10e      	bne.n	800bfa4 <FAS_UnStuffingByte+0x5c>
		{
			UnStuffBuffer[UnStuffBufferLen] = Buffer[i];
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	441a      	add	r2, r3
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	440b      	add	r3, r1
 800bf92:	7812      	ldrb	r2, [r2, #0]
 800bf94:	701a      	strb	r2, [r3, #0]
			i++;
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	73bb      	strb	r3, [r7, #14]
			UnStuffBufferLen++;
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	73fb      	strb	r3, [r7, #15]
 800bfa2:	e01c      	b.n	800bfde <FAS_UnStuffingByte+0x96>
		}
		else if(Buffer[i] == 0xAa && Buffer[i+1] != 0xAA)
 800bfa4:	7bbb      	ldrb	r3, [r7, #14]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	2baa      	cmp	r3, #170	; 0xaa
 800bfae:	d10b      	bne.n	800bfc8 <FAS_UnStuffingByte+0x80>
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2baa      	cmp	r3, #170	; 0xaa
 800bfbc:	d004      	beq.n	800bfc8 <FAS_UnStuffingByte+0x80>
		{
			vPortFree(UnStuffBuffer);
 800bfbe:	68b8      	ldr	r0, [r7, #8]
 800bfc0:	f7ff fb50 	bl	800b664 <vPortFree>
			return FMP_PACKETERROR;
 800bfc4:	2382      	movs	r3, #130	; 0x82
 800bfc6:	e01e      	b.n	800c006 <FAS_UnStuffingByte+0xbe>
		}
		else
		{
			UnStuffBuffer[UnStuffBufferLen] = Buffer[i];
 800bfc8:	7bbb      	ldrb	r3, [r7, #14]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	441a      	add	r2, r3
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	440b      	add	r3, r1
 800bfd4:	7812      	ldrb	r2, [r2, #0]
 800bfd6:	701a      	strb	r2, [r3, #0]
			UnStuffBufferLen++;
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < _BufferLen; ++i)
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	73bb      	strb	r3, [r7, #14]
 800bfe4:	7bba      	ldrb	r2, [r7, #14]
 800bfe6:	7b7b      	ldrb	r3, [r7, #13]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d3bf      	bcc.n	800bf6c <FAS_UnStuffingByte+0x24>
		}
	}
	memcpy(Buffer, UnStuffBuffer, UnStuffBufferLen);
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
 800bfee:	461a      	mov	r2, r3
 800bff0:	68b9      	ldr	r1, [r7, #8]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 fc6f 	bl	800d8d6 <memcpy>
	*BufferLen = UnStuffBufferLen;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	7bfa      	ldrb	r2, [r7, #15]
 800bffc:	701a      	strb	r2, [r3, #0]
	vPortFree(UnStuffBuffer);
 800bffe:	68b8      	ldr	r0, [r7, #8]
 800c000:	f7ff fb30 	bl	800b664 <vPortFree>
	return FMM_OK;
 800c004:	2300      	movs	r3, #0

}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
	...

0800c010 <FAS_CalcCRC>:

static uint16_t FAS_CalcCRC(uint8_t* Data, uint8_t Len)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	460b      	mov	r3, r1
 800c01a:	70fb      	strb	r3, [r7, #3]
    unsigned char nTemp;
    unsigned short wCRCWord = 0xFFFF;
 800c01c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c020:	81fb      	strh	r3, [r7, #14]
    while (Len--)
 800c022:	e011      	b.n	800c048 <FAS_CalcCRC+0x38>
    {
        nTemp = wCRCWord ^ *(Data++);
 800c024:	89fb      	ldrh	r3, [r7, #14]
 800c026:	b2da      	uxtb	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	1c59      	adds	r1, r3, #1
 800c02c:	6079      	str	r1, [r7, #4]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	4053      	eors	r3, r2
 800c032:	737b      	strb	r3, [r7, #13]
        wCRCWord >>= 8;
 800c034:	89fb      	ldrh	r3, [r7, #14]
 800c036:	0a1b      	lsrs	r3, r3, #8
 800c038:	81fb      	strh	r3, [r7, #14]
        wCRCWord ^= TABLE_CRCVALUE[nTemp];
 800c03a:	7b7b      	ldrb	r3, [r7, #13]
 800c03c:	4a08      	ldr	r2, [pc, #32]	; (800c060 <FAS_CalcCRC+0x50>)
 800c03e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800c042:	89fb      	ldrh	r3, [r7, #14]
 800c044:	4053      	eors	r3, r2
 800c046:	81fb      	strh	r3, [r7, #14]
    while (Len--)
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	1e5a      	subs	r2, r3, #1
 800c04c:	70fa      	strb	r2, [r7, #3]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e8      	bne.n	800c024 <FAS_CalcCRC+0x14>
    }
    return wCRCWord;
 800c052:	89fb      	ldrh	r3, [r7, #14]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	bc80      	pop	{r7}
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	0800e860 	.word	0x0800e860

0800c064 <FAS_GetSync>:

static uint8_t FAS_GetSync()
{
 800c064:	b480      	push	{r7}
 800c066:	af00      	add	r7, sp, #0
    static uint8_t Sync = 0;
    return Sync++;
 800c068:	4b04      	ldr	r3, [pc, #16]	; (800c07c <FAS_GetSync+0x18>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	1c5a      	adds	r2, r3, #1
 800c06e:	b2d1      	uxtb	r1, r2
 800c070:	4a02      	ldr	r2, [pc, #8]	; (800c07c <FAS_GetSync+0x18>)
 800c072:	7011      	strb	r1, [r2, #0]
}
 800c074:	4618      	mov	r0, r3
 800c076:	46bd      	mov	sp, r7
 800c078:	bc80      	pop	{r7}
 800c07a:	4770      	bx	lr
 800c07c:	200031f8 	.word	0x200031f8

0800c080 <FAS_PackData>:


uint8_t FAS_PackData(uint8_t SlaveID, uint8_t FrameType ,uint8_t* Data, uint8_t DataLen, uint8_t* PackedData, uint8_t* PackedLen)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	603a      	str	r2, [r7, #0]
 800c088:	461a      	mov	r2, r3
 800c08a:	4603      	mov	r3, r0
 800c08c:	71fb      	strb	r3, [r7, #7]
 800c08e:	460b      	mov	r3, r1
 800c090:	71bb      	strb	r3, [r7, #6]
 800c092:	4613      	mov	r3, r2
 800c094:	717b      	strb	r3, [r7, #5]
    uint8_t _PackedLen = 0;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
    uint8_t Sync = FAS_GetSync();
 800c09a:	f7ff ffe3 	bl	800c064 <FAS_GetSync>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	73bb      	strb	r3, [r7, #14]
    /*  Add Slave ID*/
    memcpy(PackedData + _PackedLen, &SlaveID, 1); 
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	79fa      	ldrb	r2, [r7, #7]
 800c0ac:	701a      	strb	r2, [r3, #0]
    _PackedLen +=1;
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	73fb      	strb	r3, [r7, #15]
    /*  Add Sync Byte*/
    memcpy(PackedData + _PackedLen, &Sync, 1);
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	4413      	add	r3, r2
 800c0be:	7bba      	ldrb	r2, [r7, #14]
 800c0c0:	701a      	strb	r2, [r3, #0]
    _PackedLen +=1;
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	73fb      	strb	r3, [r7, #15]
    /*  Add FrameType */
    memcpy(PackedData + _PackedLen, &FrameType, 1);
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	79ba      	ldrb	r2, [r7, #6]
 800c0d4:	701a      	strb	r2, [r3, #0]
    _PackedLen +=1;
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	73fb      	strb	r3, [r7, #15]
    /*  Add Data*/
    memcpy(PackedData+ _PackedLen, Data, DataLen);
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	797a      	ldrb	r2, [r7, #5]
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f001 fbf3 	bl	800d8d6 <memcpy>
    _PackedLen += DataLen;
 800c0f0:	7bfa      	ldrb	r2, [r7, #15]
 800c0f2:	797b      	ldrb	r3, [r7, #5]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	73fb      	strb	r3, [r7, #15]
    /* Add CRC */
    uint16_t calcCRC = FAS_CalcCRC(PackedData, _PackedLen);
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	69b8      	ldr	r0, [r7, #24]
 800c100:	f7ff ff86 	bl	800c010 <FAS_CalcCRC>
 800c104:	4603      	mov	r3, r0
 800c106:	81bb      	strh	r3, [r7, #12]
    memcpy(PackedData + _PackedLen, &calcCRC, 2);
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	461a      	mov	r2, r3
 800c10c:	69bb      	ldr	r3, [r7, #24]
 800c10e:	4413      	add	r3, r2
 800c110:	89ba      	ldrh	r2, [r7, #12]
 800c112:	801a      	strh	r2, [r3, #0]
    _PackedLen += 2;
 800c114:	7bfb      	ldrb	r3, [r7, #15]
 800c116:	3302      	adds	r3, #2
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	73fb      	strb	r3, [r7, #15]
    FAS_AddByteStuffing(PackedData, &_PackedLen);
 800c11c:	f107 030f 	add.w	r3, r7, #15
 800c120:	4619      	mov	r1, r3
 800c122:	69b8      	ldr	r0, [r7, #24]
 800c124:	f7ff fed9 	bl	800beda <FAS_AddByteStuffing>
    /* Add Header*/
    memmove(PackedData + 2, PackedData, _PackedLen);
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	3302      	adds	r3, #2
 800c12c:	7bfa      	ldrb	r2, [r7, #15]
 800c12e:	69b9      	ldr	r1, [r7, #24]
 800c130:	4618      	mov	r0, r3
 800c132:	f001 fa71 	bl	800d618 <memmove>
    memcpy(PackedData, FAS_Header,2);
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	490e      	ldr	r1, [pc, #56]	; (800c174 <FAS_PackData+0xf4>)
 800c13a:	461a      	mov	r2, r3
 800c13c:	460b      	mov	r3, r1
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	8013      	strh	r3, [r2, #0]
    _PackedLen+=2;
 800c142:	7bfb      	ldrb	r3, [r7, #15]
 800c144:	3302      	adds	r3, #2
 800c146:	b2db      	uxtb	r3, r3
 800c148:	73fb      	strb	r3, [r7, #15]
    /*  Add Tail*/
    memcpy(PackedData + _PackedLen, FAS_Tail, 2);
 800c14a:	7bfb      	ldrb	r3, [r7, #15]
 800c14c:	461a      	mov	r2, r3
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	4413      	add	r3, r2
 800c152:	4909      	ldr	r1, [pc, #36]	; (800c178 <FAS_PackData+0xf8>)
 800c154:	461a      	mov	r2, r3
 800c156:	460b      	mov	r3, r1
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	8013      	strh	r3, [r2, #0]
    _PackedLen +=2;
 800c15c:	7bfb      	ldrb	r3, [r7, #15]
 800c15e:	3302      	adds	r3, #2
 800c160:	b2db      	uxtb	r3, r3
 800c162:	73fb      	strb	r3, [r7, #15]
    *PackedLen = _PackedLen;
 800c164:	7bfa      	ldrb	r2, [r7, #15]
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	701a      	strb	r2, [r3, #0]
    return Sync;
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	0800ea60 	.word	0x0800ea60
 800c178:	0800ea68 	.word	0x0800ea68

0800c17c <FAS_UnPackData>:

uint8_t FAS_UnPackData(uint8_t* Buffer, uint8_t BufferLen, uint8_t SlaveID, uint8_t Sync, uint8_t FrameType, uint8_t* Data, uint8_t* DataLen)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	461a      	mov	r2, r3
 800c18a:	4603      	mov	r3, r0
 800c18c:	70fb      	strb	r3, [r7, #3]
 800c18e:	460b      	mov	r3, r1
 800c190:	70bb      	strb	r3, [r7, #2]
 800c192:	4613      	mov	r3, r2
 800c194:	707b      	strb	r3, [r7, #1]
	uint8_t _DataLen = BufferLen;
 800c196:	78fb      	ldrb	r3, [r7, #3]
 800c198:	73bb      	strb	r3, [r7, #14]
	uint8_t Status;
	uint16_t FasCRC;
	Status = memcmp(Buffer,FAS_HeaderTmp, 2);
 800c19a:	2202      	movs	r2, #2
 800c19c:	493c      	ldr	r1, [pc, #240]	; (800c290 <FAS_UnPackData+0x114>)
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f001 fa2a 	bl	800d5f8 <memcmp>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	73fb      	strb	r3, [r7, #15]
	if(Status != 0) return FMP_PACKETERROR;
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <FAS_UnPackData+0x36>
 800c1ae:	2382      	movs	r3, #130	; 0x82
 800c1b0:	e069      	b.n	800c286 <FAS_UnPackData+0x10a>
	Status = memcmp(Buffer+_DataLen - 2, FAS_Tail,2);
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	3b02      	subs	r3, #2
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	4935      	ldr	r1, [pc, #212]	; (800c294 <FAS_UnPackData+0x118>)
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f001 fa1a 	bl	800d5f8 <memcmp>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	73fb      	strb	r3, [r7, #15]
	if(Status != 0) return FMP_PACKETERROR;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <FAS_UnPackData+0x56>
 800c1ce:	2382      	movs	r3, #130	; 0x82
 800c1d0:	e059      	b.n	800c286 <FAS_UnPackData+0x10a>
	memcpy(Data, Buffer+2, _DataLen - 4);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3302      	adds	r3, #2
 800c1d6:	7bba      	ldrb	r2, [r7, #14]
 800c1d8:	3a04      	subs	r2, #4
 800c1da:	4619      	mov	r1, r3
 800c1dc:	69f8      	ldr	r0, [r7, #28]
 800c1de:	f001 fb7a 	bl	800d8d6 <memcpy>
	_DataLen -= 4;
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	3b04      	subs	r3, #4
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	73bb      	strb	r3, [r7, #14]

	Status = FAS_UnStuffingByte(Data, &_DataLen);
 800c1ea:	f107 030e 	add.w	r3, r7, #14
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	69f8      	ldr	r0, [r7, #28]
 800c1f2:	f7ff fea9 	bl	800bf48 <FAS_UnStuffingByte>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
	if(Status != FMM_OK)
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <FAS_UnPackData+0x88>
		return Status;
 800c200:	7bfb      	ldrb	r3, [r7, #15]
 800c202:	e040      	b.n	800c286 <FAS_UnPackData+0x10a>
	FasCRC = FAS_CalcCRC(Data, _DataLen - 2);
 800c204:	7bbb      	ldrb	r3, [r7, #14]
 800c206:	3b02      	subs	r3, #2
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	4619      	mov	r1, r3
 800c20c:	69f8      	ldr	r0, [r7, #28]
 800c20e:	f7ff feff 	bl	800c010 <FAS_CalcCRC>
 800c212:	4603      	mov	r3, r0
 800c214:	81bb      	strh	r3, [r7, #12]
	Status = memcmp(&FasCRC, Data + _DataLen - 2, 2);
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	3b02      	subs	r3, #2
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	18d1      	adds	r1, r2, r3
 800c21e:	f107 030c 	add.w	r3, r7, #12
 800c222:	2202      	movs	r2, #2
 800c224:	4618      	mov	r0, r3
 800c226:	f001 f9e7 	bl	800d5f8 <memcmp>
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]
	if(Status != 0) return FMC_CRCFAILED_ERROR;
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d001      	beq.n	800c238 <FAS_UnPackData+0xbc>
 800c234:	2307      	movs	r3, #7
 800c236:	e026      	b.n	800c286 <FAS_UnPackData+0x10a>

	if(Data[0] != SlaveID)
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	78ba      	ldrb	r2, [r7, #2]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d001      	beq.n	800c246 <FAS_UnPackData+0xca>
		return FMP_PACKETERROR;
 800c242:	2382      	movs	r3, #130	; 0x82
 800c244:	e01f      	b.n	800c286 <FAS_UnPackData+0x10a>

	if(Data[1] != Sync)
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	3301      	adds	r3, #1
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	787a      	ldrb	r2, [r7, #1]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d001      	beq.n	800c256 <FAS_UnPackData+0xda>
		return 0xAA;
 800c252:	23aa      	movs	r3, #170	; 0xaa
 800c254:	e017      	b.n	800c286 <FAS_UnPackData+0x10a>

	if(Data[2] != FrameType)
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	3302      	adds	r3, #2
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	7e3a      	ldrb	r2, [r7, #24]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d001      	beq.n	800c266 <FAS_UnPackData+0xea>
		return FMP_PACKETERROR;
 800c262:	2382      	movs	r3, #130	; 0x82
 800c264:	e00f      	b.n	800c286 <FAS_UnPackData+0x10a>
	_DataLen -=5;
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	3b05      	subs	r3, #5
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	73bb      	strb	r3, [r7, #14]
	*DataLen = _DataLen;
 800c26e:	7bba      	ldrb	r2, [r7, #14]
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	701a      	strb	r2, [r3, #0]
	memcpy(Data, Data+3, _DataLen);
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	3303      	adds	r3, #3
 800c278:	7bba      	ldrb	r2, [r7, #14]
 800c27a:	4619      	mov	r1, r3
 800c27c:	69f8      	ldr	r0, [r7, #28]
 800c27e:	f001 fb2a 	bl	800d8d6 <memcpy>
	return Data[0];
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	781b      	ldrb	r3, [r3, #0]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	0800ea64 	.word	0x0800ea64
 800c294:	0800ea68 	.word	0x0800ea68

0800c298 <CANFrame_ClearRcvInfo>:
  .stack_size = 400 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};

static inline void CANFrame_ClearRcvInfo(CANFrame_RcvInfoTypedef* rcvinfo)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
	memset(rcvinfo, 0,sizeof( CANFrame_RcvInfoTypedef));
 800c2a0:	223b      	movs	r2, #59	; 0x3b
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f001 f9d1 	bl	800d64c <memset>
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <CANFrame_ProcessData>:

static CANFrame_RcvInfoTypedef* CANFrame_ProcessData(CANFrame_HandlerStruct* CANHandler, CAN_RxHeaderTypeDef* RxHeader, uint8_t* RxData)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
	uint8_t senderID = RxData[0];
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	77fb      	strb	r3, [r7, #31]
	CANFrame_RcvInfoTypedef* RcvInfo = &CANHandler->_RxRcvInfo[senderID];
 800c2c6:	7ffa      	ldrb	r2, [r7, #31]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	1a9b      	subs	r3, r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	1a9b      	subs	r3, r3, r2
 800c2d2:	3318      	adds	r3, #24
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	61bb      	str	r3, [r7, #24]
	uint8_t CpyLen;
	uint8_t RcvFrameType = CANFRAME_GETFRAMETYPE_FROMID(RxHeader->StdId);
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	f003 0307 	and.w	r3, r3, #7
 800c2e4:	75fb      	strb	r3, [r7, #23]
	uint8_t MsgType =	CANFRAME_GETMSGTYPE_FROMID(RxHeader->StdId);
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	09db      	lsrs	r3, r3, #7
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	f003 030f 	and.w	r3, r3, #15
 800c2f2:	75bb      	strb	r3, [r7, #22]
	uint8_t CurrentFrameType = RcvInfo->CurrentFrameType;
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2fa:	757b      	strb	r3, [r7, #21]
//	SyncPrintf("Rcv Frame Type %d CurrentFrameType %d \r\n", RcvFrameType, CurrentFrameType);
	uint8_t Receive_CRC;
	uint8_t Calc_CRC;
	if(CurrentFrameType == 0)
 800c2fc:	7d7b      	ldrb	r3, [r7, #21]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f040 8086 	bne.w	800c410 <CANFrame_ProcessData+0x15c>
	{
		// Empty buffer not receive any frame
		if(RxData[1] > CANFRAME_MAX_BUFFER_SIZE)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	3301      	adds	r3, #1
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b37      	cmp	r3, #55	; 0x37
 800c30c:	d901      	bls.n	800c312 <CANFrame_ProcessData+0x5e>
		{
			return NULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	e11e      	b.n	800c550 <CANFrame_ProcessData+0x29c>
		}
		CANFrame_ClearRcvInfo(RcvInfo);
 800c312:	69b8      	ldr	r0, [r7, #24]
 800c314:	f7ff ffc0 	bl	800c298 <CANFrame_ClearRcvInfo>
		RcvInfo->ExpectedLen = RxData[1];
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	785a      	ldrb	r2, [r3, #1]
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	701a      	strb	r2, [r3, #0]
		RcvInfo->MsgType = MsgType;
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	7dba      	ldrb	r2, [r7, #22]
 800c324:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		RcvInfo->CurrentFrameType = RcvFrameType;
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	7dfa      	ldrb	r2, [r7, #23]
 800c32c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		switch (RcvFrameType) {
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d01a      	beq.n	800c36c <CANFrame_ProcessData+0xb8>
 800c336:	2b01      	cmp	r3, #1
 800c338:	d167      	bne.n	800c40a <CANFrame_ProcessData+0x156>
			case CANFRAME_FRAMETYPE_FIRST:
				CpyLen = 6;
 800c33a:	2306      	movs	r3, #6
 800c33c:	753b      	strb	r3, [r7, #20]
				memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 2, CpyLen);
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	3301      	adds	r3, #1
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c348:	1898      	adds	r0, r3, r2
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	3302      	adds	r3, #2
 800c34e:	7d3a      	ldrb	r2, [r7, #20]
 800c350:	4619      	mov	r1, r3
 800c352:	f001 fac0 	bl	800d8d6 <memcpy>
				RcvInfo->ReceivedLen += CpyLen;
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c35c:	7d3b      	ldrb	r3, [r7, #20]
 800c35e:	4413      	add	r3, r2
 800c360:	b2da      	uxtb	r2, r3
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				return NULL;
 800c368:	2300      	movs	r3, #0
 800c36a:	e0f1      	b.n	800c550 <CANFrame_ProcessData+0x29c>
			case CANFRAME_FRAMETYPE_END:
				CpyLen = RcvInfo->ExpectedLen;
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	753b      	strb	r3, [r7, #20]
				memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 2, CpyLen);
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	3301      	adds	r3, #1
 800c376:	69ba      	ldr	r2, [r7, #24]
 800c378:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c37c:	1898      	adds	r0, r3, r2
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3302      	adds	r3, #2
 800c382:	7d3a      	ldrb	r2, [r7, #20]
 800c384:	4619      	mov	r1, r3
 800c386:	f001 faa6 	bl	800d8d6 <memcpy>
				RcvInfo->ReceivedLen += CpyLen;
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c390:	7d3b      	ldrb	r3, [r7, #20]
 800c392:	4413      	add	r3, r2
 800c394:	b2da      	uxtb	r2, r3
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#ifdef CANFRAME_ENABLE_COUNTER
//				Receive_CRC = RxData[CpyLen + 2];
				RcvInfo->ExpectedLen-=1;
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	701a      	strb	r2, [r3, #0]
				Receive_CRC = RcvInfo->Data[RcvInfo->ExpectedLen];
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	785b      	ldrb	r3, [r3, #1]
 800c3b4:	74bb      	strb	r3, [r7, #18]
				RcvInfo->Data[RcvInfo->ExpectedLen] = 0;
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	4413      	add	r3, r2
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	705a      	strb	r2, [r3, #1]
				Calc_CRC = crc_8(RcvInfo->Data, RcvInfo->ExpectedLen);
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	f000 fca1 	bl	800cd16 <crc_8>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	747b      	strb	r3, [r7, #17]
				if(Receive_CRC == Calc_CRC)
 800c3d8:	7cba      	ldrb	r2, [r7, #18]
 800c3da:	7c7b      	ldrb	r3, [r7, #17]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d108      	bne.n	800c3f2 <CANFrame_ProcessData+0x13e>
				{
					CANHandler->RcvSucessCounter++;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
					SyncPrintf("Invalid CRC\r\n");
					CANHandler->RcvFailedCounter++;
					return NULL;
				}
#endif
				return RcvInfo;
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	e0ae      	b.n	800c550 <CANFrame_ProcessData+0x29c>
					SyncPrintf("Invalid CRC\r\n");
 800c3f2:	4859      	ldr	r0, [pc, #356]	; (800c558 <CANFrame_ProcessData+0x2a4>)
 800c3f4:	f000 fb4a 	bl	800ca8c <SyncPrintf>
					CANHandler->RcvFailedCounter++;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
					return NULL;
 800c406:	2300      	movs	r3, #0
 800c408:	e0a2      	b.n	800c550 <CANFrame_ProcessData+0x29c>
			default:
				break;
 800c40a:	bf00      	nop
		}
		return NULL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	e09f      	b.n	800c550 <CANFrame_ProcessData+0x29c>
	} else
	{
		if(RcvInfo->MsgType != MsgType)
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c416:	7dba      	ldrb	r2, [r7, #22]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d00c      	beq.n	800c436 <CANFrame_ProcessData+0x182>
		{
			CANFrame_ClearRcvInfo(RcvInfo);
 800c41c:	69b8      	ldr	r0, [r7, #24]
 800c41e:	f7ff ff3b 	bl	800c298 <CANFrame_ClearRcvInfo>
#ifdef CANFRAME_ENABLE_COUNTER
				SyncPrintf("Not same MsgType\r\n");
 800c422:	484e      	ldr	r0, [pc, #312]	; (800c55c <CANFrame_ProcessData+0x2a8>)
 800c424:	f000 fb32 	bl	800ca8c <SyncPrintf>
				CANHandler->RcvFailedCounter++;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
#endif
		}
		if(RcvFrameType == CANFRAME_FRAMETYPE_END)
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d159      	bne.n	800c4f0 <CANFrame_ProcessData+0x23c>
		{
//			SyncPrintf("Frame Type END\r\n");
			RcvInfo->CurrentFrameType = CANFRAME_FRAMETYPE_END;
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			uint8_t remainLen = RcvInfo->ExpectedLen - RcvInfo->ReceivedLen;
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	781a      	ldrb	r2, [r3, #0]
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	74fb      	strb	r3, [r7, #19]
//			if(remainLen > 7)
//			{
//				CANFrame_ClearRcvInfo(RcvInfo);
//				return NULL;
//			}
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 1, remainLen);
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	3301      	adds	r3, #1
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c45c:	1898      	adds	r0, r3, r2
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3301      	adds	r3, #1
 800c462:	7cfa      	ldrb	r2, [r7, #19]
 800c464:	4619      	mov	r1, r3
 800c466:	f001 fa36 	bl	800d8d6 <memcpy>
			RcvInfo->ReceivedLen += remainLen;
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c470:	7cfb      	ldrb	r3, [r7, #19]
 800c472:	4413      	add	r3, r2
 800c474:	b2da      	uxtb	r2, r3
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#ifdef CANFRAME_ENABLE_COUNTER
				RcvInfo->ExpectedLen-=1;
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	3b01      	subs	r3, #1
 800c482:	b2da      	uxtb	r2, r3
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	701a      	strb	r2, [r3, #0]
				Receive_CRC = RcvInfo->Data[RcvInfo->ExpectedLen];
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	461a      	mov	r2, r3
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	4413      	add	r3, r2
 800c492:	785b      	ldrb	r3, [r3, #1]
 800c494:	74bb      	strb	r3, [r7, #18]
				RcvInfo->Data[RcvInfo->ExpectedLen] = 0;
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	4413      	add	r3, r2
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	705a      	strb	r2, [r3, #1]

				Calc_CRC = crc_8(RcvInfo->Data, RcvInfo->ExpectedLen);
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f000 fc31 	bl	800cd16 <crc_8>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	747b      	strb	r3, [r7, #17]
				if(Receive_CRC == Calc_CRC)
 800c4b8:	7cba      	ldrb	r2, [r7, #18]
 800c4ba:	7c7b      	ldrb	r3, [r7, #17]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d108      	bne.n	800c4d2 <CANFrame_ProcessData+0x21e>
				{
					CANHandler->RcvSucessCounter++;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
					return NULL;

				}
#endif
//			SyncPrintf("CpyLen %d ReceivedLen %d ExpectedLen %d\r\n", CpyLen, RcvInfo->ReceivedLen, RcvInfo->ExpectedLen);
			return RcvInfo;
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	e03e      	b.n	800c550 <CANFrame_ProcessData+0x29c>
					SyncPrintf("Invalid CRC Calc 0x%.2x Rcv 0x%2x\r\n", Calc_CRC, Receive_CRC);
 800c4d2:	7c7b      	ldrb	r3, [r7, #17]
 800c4d4:	7cba      	ldrb	r2, [r7, #18]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4821      	ldr	r0, [pc, #132]	; (800c560 <CANFrame_ProcessData+0x2ac>)
 800c4da:	f000 fad7 	bl	800ca8c <SyncPrintf>
					CANHandler->RcvFailedCounter++;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
					return NULL;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e02f      	b.n	800c550 <CANFrame_ProcessData+0x29c>
		}
		else if (RcvFrameType != CurrentFrameType + 1 )
 800c4f0:	7dfa      	ldrb	r2, [r7, #23]
 800c4f2:	7d7b      	ldrb	r3, [r7, #21]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d00e      	beq.n	800c518 <CANFrame_ProcessData+0x264>
		{
#ifdef CANFRAME_ENABLE_COUNTER
			SyncPrintf("FrameType not contiguos\r\n");
 800c4fa:	481a      	ldr	r0, [pc, #104]	; (800c564 <CANFrame_ProcessData+0x2b0>)
 800c4fc:	f000 fac6 	bl	800ca8c <SyncPrintf>
				CANHandler->RcvFailedCounter++;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
#endif
			CANFrame_ClearRcvInfo(RcvInfo);
 800c50e:	69b8      	ldr	r0, [r7, #24]
 800c510:	f7ff fec2 	bl	800c298 <CANFrame_ClearRcvInfo>
			return NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	e01b      	b.n	800c550 <CANFrame_ProcessData+0x29c>
		}
		else
		{
//			SyncPrintf("Frame Type %d\r\n", RcvFrameType);
			RcvInfo->CurrentFrameType = RcvFrameType;
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	7dfa      	ldrb	r2, [r7, #23]
 800c51c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			CpyLen = 7;
 800c520:	2307      	movs	r3, #7
 800c522:	753b      	strb	r3, [r7, #20]
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 1, CpyLen);
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	3301      	adds	r3, #1
 800c528:	69ba      	ldr	r2, [r7, #24]
 800c52a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c52e:	1898      	adds	r0, r3, r2
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3301      	adds	r3, #1
 800c534:	7d3a      	ldrb	r2, [r7, #20]
 800c536:	4619      	mov	r1, r3
 800c538:	f001 f9cd 	bl	800d8d6 <memcpy>
			RcvInfo->ReceivedLen += CpyLen;
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c542:	7d3b      	ldrb	r3, [r7, #20]
 800c544:	4413      	add	r3, r2
 800c546:	b2da      	uxtb	r2, r3
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
//			SyncPrintf("CpyLen %d ReceivedLen %d ExpectedLen %d\r\n", CpyLen, RcvInfo->ReceivedLen, RcvInfo->ExpectedLen);
			return NULL;
 800c54e:	2300      	movs	r3, #0
		}
	}
}
 800c550:	4618      	mov	r0, r3
 800c552:	3720      	adds	r7, #32
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	0800e794 	.word	0x0800e794
 800c55c:	0800e7a4 	.word	0x0800e7a4
 800c560:	0800e7b8 	.word	0x0800e7b8
 800c564:	0800e7dc 	.word	0x0800e7dc

0800c568 <CANFrame_RcvTask>:

void CANFrame_RcvTask(void* arg)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b092      	sub	sp, #72	; 0x48
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	int Status = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	647b      	str	r3, [r7, #68]	; 0x44
	CANFrame_HandlerStruct* CANHandler = (CANFrame_HandlerStruct*) arg;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	643b      	str	r3, [r7, #64]	; 0x40
	CAN_RxHeaderTypeDef CAN_RxHeader;
	CANFrame_RxHeaderTypedef CANFrame_RxHeader;
	uint8_t RxData[8];
	uint8_t senderID;
	uint8_t TargetNode;
	uint8_t FifoFillLevel = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		CAN_OS_GetRxFifoFillLevel(CANHandler->CAN, CANHandler->RxFifo, &FifoFillLevel);
 800c57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	f107 020b 	add.w	r2, r7, #11
 800c588:	4619      	mov	r1, r3
 800c58a:	f000 f981 	bl	800c890 <CAN_OS_GetRxFifoFillLevel>
		if(FifoFillLevel == 0)
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10c      	bne.n	800c5ae <CANFrame_RcvTask+0x46>
		{
			Status = CAN_OS_ListenMsg(CANHandler->CAN, CANHandler->RxFifo, osWaitForever);
 800c594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c596:	6818      	ldr	r0, [r3, #0]
 800c598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f000 f933 	bl	800c80c <CAN_OS_ListenMsg>
 800c5a6:	6478      	str	r0, [r7, #68]	; 0x44
			if(Status != osOK)
 800c5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d150      	bne.n	800c650 <CANFrame_RcvTask+0xe8>
			{
				continue;
			}
		}
		Status = CAN_OS_GetRxMessage(CANHandler->CAN, CANHandler->RxFifo, &CAN_RxHeader, RxData);
 800c5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	6899      	ldr	r1, [r3, #8]
 800c5b6:	f107 030c 	add.w	r3, r7, #12
 800c5ba:	f107 021c 	add.w	r2, r7, #28
 800c5be:	f000 f97c 	bl	800c8ba <CAN_OS_GetRxMessage>
 800c5c2:	6478      	str	r0, [r7, #68]	; 0x44
		if(Status != osOK)
 800c5c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d144      	bne.n	800c654 <CANFrame_RcvTask+0xec>
//		for(uint8_t i = 0; i<8; i++)
//		{
//			SyncPrintf("0x%.2x ", RxData[i]);
//		}
//		SyncPrintf("\r\n");
		TargetNode = CANFRAME_GETTARGETNODE_FROMID(CAN_RxHeader.StdId);
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	08db      	lsrs	r3, r3, #3
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	f003 030f 	and.w	r3, r3, #15
 800c5d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if( !((TargetNode != CANHandler->nodeID) || (TargetNode != CANFRAME_ALL_NODE)))
 800c5d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5e0:	889b      	ldrh	r3, [r3, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d103      	bne.n	800c5ee <CANFrame_RcvTask+0x86>
 800c5e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d034      	beq.n	800c658 <CANFrame_RcvTask+0xf0>
		{
			continue;
		}
		senderID = RxData[0];
 800c5ee:	7b3b      	ldrb	r3, [r7, #12]
 800c5f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		CANFrame_RcvInfoTypedef* rcvInfo = CANFrame_ProcessData(CANHandler, &CAN_RxHeader, RxData);
 800c5f4:	f107 020c 	add.w	r2, r7, #12
 800c5f8:	f107 031c 	add.w	r3, r7, #28
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c600:	f7ff fe58 	bl	800c2b4 <CANFrame_ProcessData>
 800c604:	63b8      	str	r0, [r7, #56]	; 0x38
		if(rcvInfo != NULL)
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d0b7      	beq.n	800c57c <CANFrame_RcvTask+0x14>
		{
			CANFrame_RxHeader.DataLen = rcvInfo->ExpectedLen;
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	763b      	strb	r3, [r7, #24]
			CANFrame_RxHeader.MessageType = rcvInfo->MsgType;
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c618:	b29b      	uxth	r3, r3
 800c61a:	82bb      	strh	r3, [r7, #20]
			CANFrame_RxHeader.senderID = senderID;
 800c61c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c620:	b29b      	uxth	r3, r3
 800c622:	82fb      	strh	r3, [r7, #22]
//			{
//				SyncPrintf("%d ", rcvInfo->Data[i]);
//			}
//			SyncPrintf("\r\n");
//			SyncPrintf("%s \r\n", rcvInfo->Data);
			rcvInfo->Data[CANFrame_RxHeader.DataLen] = 0;
 800c624:	7e3b      	ldrb	r3, [r7, #24]
 800c626:	461a      	mov	r2, r3
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	4413      	add	r3, r2
 800c62c:	2200      	movs	r2, #0
 800c62e:	705a      	strb	r2, [r3, #1]

			if(CANHandler->ReceiveDataCB != NULL)
 800c630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c632:	695b      	ldr	r3, [r3, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d007      	beq.n	800c648 <CANFrame_RcvTask+0xe0>
			{
				CANHandler->ReceiveDataCB(&CANFrame_RxHeader, rcvInfo->Data);
 800c638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c63e:	1c51      	adds	r1, r2, #1
 800c640:	f107 0214 	add.w	r2, r7, #20
 800c644:	4610      	mov	r0, r2
 800c646:	4798      	blx	r3
			}
			CANFrame_ClearRcvInfo(rcvInfo);
 800c648:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c64a:	f7ff fe25 	bl	800c298 <CANFrame_ClearRcvInfo>
 800c64e:	e795      	b.n	800c57c <CANFrame_RcvTask+0x14>
				continue;
 800c650:	bf00      	nop
 800c652:	e793      	b.n	800c57c <CANFrame_RcvTask+0x14>
			continue;
 800c654:	bf00      	nop
 800c656:	e791      	b.n	800c57c <CANFrame_RcvTask+0x14>
			continue;
 800c658:	bf00      	nop
	{
 800c65a:	e78f      	b.n	800c57c <CANFrame_RcvTask+0x14>

0800c65c <CANFrame_Init>:
		}
	}
}

int CANFrame_Init(CANFrame_HandlerStruct* canhandler, CAN_OS_HandlerStruct* CAN, uint16_t nodeID, uint32_t CAN_RxFifo)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	80fb      	strh	r3, [r7, #6]
	memset(canhandler, 0, sizeof(CANFrame_HandlerStruct));
 800c66c:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c670:	2100      	movs	r1, #0
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f000 ffea 	bl	800d64c <memset>
	canhandler->CAN = CAN;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	601a      	str	r2, [r3, #0]
	canhandler->nodeID = nodeID;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	88fa      	ldrh	r2, [r7, #6]
 800c682:	809a      	strh	r2, [r3, #4]
	canhandler->usedFilterBank = 0;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	80da      	strh	r2, [r3, #6]
	canhandler->RxFifo = CAN_RxFifo;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	609a      	str	r2, [r3, #8]

	canhandler->TxSem = osSemaphoreNew(1, 1, NULL);
 800c690:	2200      	movs	r2, #0
 800c692:	2101      	movs	r1, #1
 800c694:	2001      	movs	r0, #1
 800c696:	f7fb fb05 	bl	8007ca4 <osSemaphoreNew>
 800c69a:	4602      	mov	r2, r0
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	60da      	str	r2, [r3, #12]
	canhandler->rcvHandler_Th = osThreadNew(CANFrame_RcvTask, canhandler, &CANRcvTask_attributes);
 800c6a0:	4a0b      	ldr	r2, [pc, #44]	; (800c6d0 <CANFrame_Init+0x74>)
 800c6a2:	68f9      	ldr	r1, [r7, #12]
 800c6a4:	480b      	ldr	r0, [pc, #44]	; (800c6d4 <CANFrame_Init+0x78>)
 800c6a6:	f7fa ff3d 	bl	8007524 <osThreadNew>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	611a      	str	r2, [r3, #16]
	CANFrame_FilterConfig(canhandler, CANFRAME_ALL_NODE, CAN_RxFifo);
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	68f8      	ldr	r0, [r7, #12]
 800c6b6:	f000 f825 	bl	800c704 <CANFrame_FilterConfig>
	return CANFrame_FilterConfig(canhandler, nodeID, CAN_RxFifo);
 800c6ba:	88fb      	ldrh	r3, [r7, #6]
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	4619      	mov	r1, r3
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 f81f 	bl	800c704 <CANFrame_FilterConfig>
 800c6c6:	4603      	mov	r3, r0

}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	0800ea6c 	.word	0x0800ea6c
 800c6d4:	0800c569 	.word	0x0800c569

0800c6d8 <CANFrame_RegCB>:
	return osOK;
}

int CANFrame_RegCB(CANFrame_HandlerStruct* CANHandler, uint8_t CallbackID,
					void (*Func)(CANFrame_RxHeaderTypedef*, uint8_t*))
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	72fb      	strb	r3, [r7, #11]
	switch (CallbackID) {
 800c6e6:	7afb      	ldrb	r3, [r7, #11]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d104      	bne.n	800c6f6 <CANFrame_RegCB+0x1e>
		case CANFRAME_RCVCPLT_CB_ID:
			CANHandler->ReceiveDataCB = Func;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	615a      	str	r2, [r3, #20]
			return osOK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e001      	b.n	800c6fa <CANFrame_RegCB+0x22>
		default:
			return osErrorParameter;
 800c6f6:	f06f 0303 	mvn.w	r3, #3

	}

}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bc80      	pop	{r7}
 800c702:	4770      	bx	lr

0800c704 <CANFrame_FilterConfig>:

int CANFrame_FilterConfig(CANFrame_HandlerStruct *Can, uint16_t NodeID, uint32_t RxFifo)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08e      	sub	sp, #56	; 0x38
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	460b      	mov	r3, r1
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	817b      	strh	r3, [r7, #10]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 800c712:	2301      	movs	r3, #1
 800c714:	633b      	str	r3, [r7, #48]	; 0x30
	Can_filter_init.FilterBank= Can->usedFilterBank++;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	88db      	ldrh	r3, [r3, #6]
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	b291      	uxth	r1, r2
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	80d1      	strh	r1, [r2, #6]
 800c722:	627b      	str	r3, [r7, #36]	; 0x24
	if(Can->usedFilterBank > 14){
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	88db      	ldrh	r3, [r3, #6]
 800c728:	2b0e      	cmp	r3, #14
 800c72a:	d901      	bls.n	800c730 <CANFrame_FilterConfig+0x2c>
		Error_Handler();
 800c72c:	f7f4 ffb8 	bl	80016a0 <Error_Handler>
	}
	Can_filter_init.FilterFIFOAssignment=RxFifo;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterIdHigh=NodeID<<8;
 800c734:	897b      	ldrh	r3, [r7, #10]
 800c736:	021b      	lsls	r3, r3, #8
 800c738:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdLow= 0x0000;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMaskIdHigh= 0x0F00;
 800c73e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800c742:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 800c744:	2300      	movs	r3, #0
 800c746:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 800c748:	2300      	movs	r3, #0
 800c74a:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 800c74c:	2301      	movs	r3, #1
 800c74e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(CAN_OS_ConfigFilter(Can->CAN,&Can_filter_init)!=HAL_OK)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f107 0210 	add.w	r2, r7, #16
 800c758:	4611      	mov	r1, r2
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 f830 	bl	800c7c0 <CAN_OS_ConfigFilter>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <CANFrame_FilterConfig+0x66>
	{
		Error_Handler();
 800c766:	f7f4 ff9b 	bl	80016a0 <Error_Handler>
	}
	return osOK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3738      	adds	r7, #56	; 0x38
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <CAN_OS_Init>:

#include "CANHandler.h"

int CAN_OS_Init(CAN_OS_HandlerStruct* CANHandler, CAN_HandleTypeDef* hcan)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
	HAL_CAN_Stop(hcan);
 800c77e:	6838      	ldr	r0, [r7, #0]
 800c780:	f7f5 fef9 	bl	8002576 <HAL_CAN_Stop>
	CANHandler->hcan = hcan;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	601a      	str	r2, [r3, #0]
	CANHandler->EventFlag = osEventFlagsNew(NULL);
 800c78a:	2000      	movs	r0, #0
 800c78c:	f7fa ffde 	bl	800774c <osEventFlagsNew>
 800c790:	4602      	mov	r2, r0
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	60da      	str	r2, [r3, #12]
	CANHandler->TxSemaphore = osSemaphoreNew(CAN_OS_TxMailBox_Max, CAN_OS_TxMailBox_Max, NULL);
 800c796:	2200      	movs	r2, #0
 800c798:	2103      	movs	r1, #3
 800c79a:	2003      	movs	r0, #3
 800c79c:	f7fb fa82 	bl	8007ca4 <osSemaphoreNew>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	605a      	str	r2, [r3, #4]
	CANHandler->RxSemaphore = osSemaphoreNew(1, 1, NULL);
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2101      	movs	r1, #1
 800c7aa:	2001      	movs	r0, #1
 800c7ac:	f7fb fa7a 	bl	8007ca4 <osSemaphoreNew>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <CAN_OS_ConfigFilter>:

int CAN_OS_ConfigFilter(CAN_OS_HandlerStruct* CANHandler,const CAN_FilterTypeDef* Filter)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef Status =  HAL_CAN_ConfigFilter(CANHandler->hcan, Filter);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7f5 fdc3 	bl	800235c <HAL_CAN_ConfigFilter>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	73fb      	strb	r3, [r7, #15]
	return Status == HAL_OK? osOK: osError;
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <CAN_OS_ConfigFilter+0x24>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	e001      	b.n	800c7e8 <CAN_OS_ConfigFilter+0x28>
 800c7e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <CAN_OS_Start>:
{
	 return HAL_CAN_ActivateNotification(CANHandler->hcan,ActiveITs);
}

int CAN_OS_Start(CAN_OS_HandlerStruct* CANHandler)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
//	CAN_OS_ActivateNotification(CANHandler, CAN_IT_TX_MAILBOX_EMPTY);

	return HAL_CAN_Start(CANHandler->hcan);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7f5 fe76 	bl	80024ee <HAL_CAN_Start>
 800c802:	4603      	mov	r3, r0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <CAN_OS_ListenMsg>:
//	int Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
//	return Status > 0 ? osOK : Status;
//}

int CAN_OS_ListenMsg(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint32_t timeout)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b088      	sub	sp, #32
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
	int Status;
	uint32_t activateITS;
	uint8_t waitEvent;
	if (rxFifo == CAN_FILTER_FIFO0){
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d104      	bne.n	800c828 <CAN_OS_ListenMsg+0x1c>
		activateITS = CAN_IT_RX_FIFO0_MSG_PENDING;
 800c81e:	2302      	movs	r3, #2
 800c820:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo0Cplt_Event;
 800c822:	2301      	movs	r3, #1
 800c824:	76fb      	strb	r3, [r7, #27]
 800c826:	e00a      	b.n	800c83e <CAN_OS_ListenMsg+0x32>
	}
	else if (rxFifo == CAN_FILTER_FIFO1 ) {
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d104      	bne.n	800c838 <CAN_OS_ListenMsg+0x2c>
		activateITS = CAN_IT_RX_FIFO1_MSG_PENDING;
 800c82e:	2310      	movs	r3, #16
 800c830:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo1Cplt_Event;
 800c832:	2302      	movs	r3, #2
 800c834:	76fb      	strb	r3, [r7, #27]
 800c836:	e002      	b.n	800c83e <CAN_OS_ListenMsg+0x32>
	}
	else return osErrorParameter;
 800c838:	f06f 0303 	mvn.w	r3, #3
 800c83c:	e024      	b.n	800c888 <CAN_OS_ListenMsg+0x7c>

	Status = HAL_CAN_ActivateNotification(CANHandler->hcan, activateITS);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	69f9      	ldr	r1, [r7, #28]
 800c844:	4618      	mov	r0, r3
 800c846:	f7f6 f827 	bl	8002898 <HAL_CAN_ActivateNotification>
 800c84a:	4603      	mov	r3, r0
 800c84c:	617b      	str	r3, [r7, #20]

	Status = osSemaphoreAcquire(CANHandler->RxSemaphore, timeout);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	6879      	ldr	r1, [r7, #4]
 800c854:	4618      	mov	r0, r3
 800c856:	f7fb fac1 	bl	8007ddc <osSemaphoreAcquire>
 800c85a:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <CAN_OS_ListenMsg+0x5a>
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	e010      	b.n	800c888 <CAN_OS_ListenMsg+0x7c>
	Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68d8      	ldr	r0, [r3, #12]
 800c86a:	7ef9      	ldrb	r1, [r7, #27]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f7fb f85a 	bl	8007928 <osEventFlagsWait>
 800c874:	4603      	mov	r3, r0
 800c876:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(CANHandler->RxSemaphore);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fb fb13 	bl	8007ea8 <osSemaphoreRelease>
	return Status > 0 ? osOK : Status;
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3720      	adds	r7, #32
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <CAN_OS_GetRxFifoFillLevel>:

int CAN_OS_GetRxFifoFillLevel(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint8_t* FillLevel)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	60b9      	str	r1, [r7, #8]
 800c89a:	607a      	str	r2, [r7, #4]
	*FillLevel = HAL_CAN_GetRxFifoFillLevel(CANHandler->hcan, rxFifo);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68b9      	ldr	r1, [r7, #8]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7f5 ffd1 	bl	800284a <HAL_CAN_GetRxFifoFillLevel>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	701a      	strb	r2, [r3, #0]
	return osOK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <CAN_OS_GetRxMessage>:

int CAN_OS_GetRxMessage(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, CAN_RxHeaderTypeDef* rxHeader, uint8_t* rxData)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b086      	sub	sp, #24
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	607a      	str	r2, [r7, #4]
 800c8c6:	603b      	str	r3, [r7, #0]
	uint8_t Status = HAL_CAN_GetRxMessage(CANHandler->hcan, rxFifo, rxHeader, rxData);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6818      	ldr	r0, [r3, #0]
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	68b9      	ldr	r1, [r7, #8]
 800c8d2:	f7f5 fe99 	bl	8002608 <HAL_CAN_GetRxMessage>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	75fb      	strb	r3, [r7, #23]
	return Status == HAL_OK? osOK: osError;
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d101      	bne.n	800c8e4 <CAN_OS_GetRxMessage+0x2a>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e001      	b.n	800c8e8 <CAN_OS_GetRxMessage+0x2e>
 800c8e4:	f04f 33ff 	mov.w	r3, #4294967295

}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <CAN_OS_RxFifo0Cplt_CB>:

void CAN_OS_RxFifo0Cplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	695a      	ldr	r2, [r3, #20]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f022 0202 	bic.w	r2, r2, #2
 800c90a:	615a      	str	r2, [r3, #20]
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo0Cplt_Event);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	2101      	movs	r1, #1
 800c912:	4618      	mov	r0, r3
 800c914:	f7fa ff6c 	bl	80077f0 <osEventFlagsSet>
}
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <CAN_OS_TxCplt_CB>:
{
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo1Cplt_Event);
}
void CAN_OS_TxCplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CANHandler->TxSemaphore);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7fb fabb 	bl	8007ea8 <osSemaphoreRelease>

}
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <CAN_OS_RegisterCB>:

int CAN_OS_RegisterCB(CAN_OS_HandlerStruct *hcan, uint8_t callbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	460b      	mov	r3, r1
 800c944:	607a      	str	r2, [r7, #4]
 800c946:	72fb      	strb	r3, [r7, #11]
	switch (callbackID)
 800c948:	7afb      	ldrb	r3, [r7, #11]
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d039      	beq.n	800c9c2 <CAN_OS_RegisterCB+0x88>
 800c94e:	2b02      	cmp	r3, #2
 800c950:	dc3f      	bgt.n	800c9d2 <CAN_OS_RegisterCB+0x98>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d002      	beq.n	800c95c <CAN_OS_RegisterCB+0x22>
 800c956:	2b01      	cmp	r3, #1
 800c958:	d02b      	beq.n	800c9b2 <CAN_OS_RegisterCB+0x78>
 800c95a:	e03a      	b.n	800c9d2 <CAN_OS_RegisterCB+0x98>
	{
		case CAN_OS_ActivateTxCB_ID:
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID,pCallback);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	2100      	movs	r1, #0
 800c964:	4618      	mov	r0, r3
 800c966:	f7f5 fc4b 	bl	8002200 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID,pCallback);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	2101      	movs	r1, #1
 800c972:	4618      	mov	r0, r3
 800c974:	f7f5 fc44 	bl	8002200 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID,pCallback);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	2102      	movs	r1, #2
 800c980:	4618      	mov	r0, r3
 800c982:	f7f5 fc3d 	bl	8002200 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_ABORT_CB_ID,pCallback);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	2103      	movs	r1, #3
 800c98e:	4618      	mov	r0, r3
 800c990:	f7f5 fc36 	bl	8002200 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_ABORT_CB_ID,pCallback);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	2104      	movs	r1, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7f5 fc2f 	bl	8002200 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_ABORT_CB_ID,pCallback);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	2105      	movs	r1, #5
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7f5 fc28 	bl	8002200 <HAL_CAN_RegisterCallback>
			break;
 800c9b0:	e012      	b.n	800c9d8 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo0_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID,pCallback);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	2106      	movs	r1, #6
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7f5 fc20 	bl	8002200 <HAL_CAN_RegisterCallback>

			break;
 800c9c0:	e00a      	b.n	800c9d8 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo1_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID,pCallback);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	2108      	movs	r1, #8
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7f5 fc18 	bl	8002200 <HAL_CAN_RegisterCallback>

			break;
 800c9d0:	e002      	b.n	800c9d8 <CAN_OS_RegisterCB+0x9e>
		default:
			return osErrorParameter;
 800c9d2:	f06f 0303 	mvn.w	r3, #3
 800c9d6:	e000      	b.n	800c9da <CAN_OS_RegisterCB+0xa0>
			break;
	}
	return osOK;
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <GPIO_TogglePin>:
GPIO_HandlerStruct PC6 = {.Port = GPIOC, .Pin = GPIO_PIN_6};
GPIO_HandlerStruct PC13 = {.Port = GPIOC, .Pin = GPIO_PIN_13};


void GPIO_TogglePin(GPIO_HandlerStruct GPIO)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	463b      	mov	r3, r7
 800c9ea:	e883 0003 	stmia.w	r3, {r0, r1}
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	b292      	uxth	r2, r2
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7f6 fee4 	bl	80037c4 <HAL_GPIO_TogglePin>
}
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <I2C_OS_Init>:
 */


#include "I2C_Handler.h"
int I2C_OS_Init(I2C_OS_HandlerStruct* i2c, I2C_HandleTypeDef* hi2c)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b082      	sub	sp, #8
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
	i2c->hi2c = hi2c;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	601a      	str	r2, [r3, #0]
//	osSemaphoreNew(1, 0, NULL);
	i2c->Semaphore = osSemaphoreNew(1, 1, NULL);
 800ca12:	2200      	movs	r2, #0
 800ca14:	2101      	movs	r1, #1
 800ca16:	2001      	movs	r0, #1
 800ca18:	f7fb f944 	bl	8007ca4 <osSemaphoreNew>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	605a      	str	r2, [r3, #4]
	i2c->EventFlag = osEventFlagsNew(NULL);
 800ca22:	2000      	movs	r0, #0
 800ca24:	f7fa fe92 	bl	800774c <osEventFlagsNew>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	609a      	str	r2, [r3, #8]
	return 0;
 800ca2e:	2300      	movs	r3, #0
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}

0800ca38 <I2C_OS_MEM_RxCpltCB>:
	osSemaphoreRelease(i2c->Semaphore);
	return Status > 0 ? osOK: Status;
}

void I2C_OS_MEM_RxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	2102      	movs	r1, #2
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fa fed2 	bl	80077f0 <osEventFlagsSet>
}
 800ca4c:	bf00      	nop
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <I2C_OS_MEM_TxCpltCB>:
void I2C_OS_MEM_TxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	2101      	movs	r1, #1
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fa fec4 	bl	80077f0 <osEventFlagsSet>
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 800ca74:	4803      	ldr	r0, [pc, #12]	; (800ca84 <SyncPrintf_Init+0x14>)
 800ca76:	f7fa ffcd 	bl	8007a14 <osMutexNew>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	4a02      	ldr	r2, [pc, #8]	; (800ca88 <SyncPrintf_Init+0x18>)
 800ca7e:	6013      	str	r3, [r2, #0]
}
 800ca80:	bf00      	nop
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	0800ea90 	.word	0x0800ea90
 800ca88:	200031fc 	.word	0x200031fc

0800ca8c <SyncPrintf>:

int	SyncPrintf (const char *__restrict format, ...)
{
 800ca8c:	b40f      	push	{r0, r1, r2, r3}
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b096      	sub	sp, #88	; 0x58
 800ca92:	af00      	add	r7, sp, #0
#if USE_SyncPrintf == 1
	osMutexAcquire(PrintfMutex, osWaitForever);
 800ca94:	4b1d      	ldr	r3, [pc, #116]	; (800cb0c <SyncPrintf+0x80>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f04f 31ff 	mov.w	r1, #4294967295
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fb f853 	bl	8007b48 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 800caa2:	2300      	movs	r3, #0
 800caa4:	60bb      	str	r3, [r7, #8]
 800caa6:	f107 030c 	add.w	r3, r7, #12
 800caaa:	2242      	movs	r2, #66	; 0x42
 800caac:	2100      	movs	r1, #0
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fdcc 	bl	800d64c <memset>
	size_t size = PrintBufferSize;
 800cab4:	2346      	movs	r3, #70	; 0x46
 800cab6:	607b      	str	r3, [r7, #4]
	va_start(arg,format);
 800cab8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cabc:	653b      	str	r3, [r7, #80]	; 0x50
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 800cabe:	1d39      	adds	r1, r7, #4
 800cac0:	f107 0008 	add.w	r0, r7, #8
 800cac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cac8:	f000 fd88 	bl	800d5dc <vasniprintf>
 800cacc:	6578      	str	r0, [r7, #84]	; 0x54
	va_end(arg);
	if(Output != NULL)
 800cace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00e      	beq.n	800caf2 <SyncPrintf+0x66>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	230a      	movs	r3, #10
 800cada:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cadc:	480c      	ldr	r0, [pc, #48]	; (800cb10 <SyncPrintf+0x84>)
 800cade:	f7f9 fb69 	bl	80061b4 <HAL_UART_Transmit>

		if(Output != Buffer)
 800cae2:	f107 0308 	add.w	r3, r7, #8
 800cae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cae8:	429a      	cmp	r2, r3
 800caea:	d002      	beq.n	800caf2 <SyncPrintf+0x66>
		{

			vPortFree(Output);
 800caec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800caee:	f7fe fdb9 	bl	800b664 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 800caf2:	4b06      	ldr	r3, [pc, #24]	; (800cb0c <SyncPrintf+0x80>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fb f884 	bl	8007c04 <osMutexRelease>

	return size;
 800cafc:	687b      	ldr	r3, [r7, #4]
#else
	return 0;
#endif
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3758      	adds	r7, #88	; 0x58
 800cb02:	46bd      	mov	sp, r7
 800cb04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb08:	b004      	add	sp, #16
 800cb0a:	4770      	bx	lr
 800cb0c:	200031fc 	.word	0x200031fc
 800cb10:	20000170 	.word	0x20000170

0800cb14 <UART_OS_Init>:
#include <stdarg.h>
#include "string.h"

#define UART_OS_PrintfBufferSize 100
void UART_OS_Init(UART_OS_HandlerStruct* UART, UART_HandleTypeDef* huart)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
	UART->RXMutex = osMutexNew(NULL);
 800cb1e:	2000      	movs	r0, #0
 800cb20:	f7fa ff78 	bl	8007a14 <osMutexNew>
 800cb24:	4602      	mov	r2, r0
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	605a      	str	r2, [r3, #4]
	UART->TXMutex = osMutexNew(NULL);
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	f7fa ff72 	bl	8007a14 <osMutexNew>
 800cb30:	4602      	mov	r2, r0
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	609a      	str	r2, [r3, #8]
	UART->EventFlags = osEventFlagsNew(NULL);
 800cb36:	2000      	movs	r0, #0
 800cb38:	f7fa fe08 	bl	800774c <osEventFlagsNew>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	60da      	str	r2, [r3, #12]
	UART->huart = huart;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	601a      	str	r2, [r3, #0]
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <UART_OS_Transmit>:

	return size;
}

int UART_OS_Transmit(UART_OS_HandlerStruct* UART, uint8_t* Buffer, uint16_t size)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	80fb      	strh	r3, [r7, #6]
	int Status;
	Status = osMutexAcquire(UART->TXMutex, 20);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	2114      	movs	r1, #20
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7fa ffef 	bl	8007b48 <osMutexAcquire>
 800cb6a:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <UART_OS_Transmit+0x26>
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	e029      	b.n	800cbca <UART_OS_Transmit+0x7a>
	osEventFlagsClear(UART->EventFlags, UART_OS_TxCpl_Event);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	2104      	movs	r1, #4
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7fa fe8f 	bl	80078a0 <osEventFlagsClear>

	HAL_UART_Transmit_DMA(UART->huart, Buffer, size);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	88fa      	ldrh	r2, [r7, #6]
 800cb88:	68b9      	ldr	r1, [r7, #8]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7f9 fb96 	bl	80062bc <HAL_UART_Transmit_DMA>
	__HAL_DMA_DISABLE_IT(UART->huart->hdmatx, DMA_IT_HT);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f022 0204 	bic.w	r2, r2, #4
 800cba6:	601a      	str	r2, [r3, #0]

	Status = osEventFlagsWait(UART->EventFlags, UART_OS_TxCpl_Event, osFlagsWaitAll, 20);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	68d8      	ldr	r0, [r3, #12]
 800cbac:	2314      	movs	r3, #20
 800cbae:	2201      	movs	r2, #1
 800cbb0:	2104      	movs	r1, #4
 800cbb2:	f7fa feb9 	bl	8007928 <osEventFlagsWait>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	617b      	str	r3, [r7, #20]

	osMutexRelease(UART->TXMutex);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fb f820 	bl	8007c04 <osMutexRelease>

	return Status>0? osOK: Status;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <UART_OS_Receive_ToIdle>:

int UART_OS_Receive_ToIdle(UART_OS_HandlerStruct* UART, uint8_t* RcvBuffer, uint16_t* RcvLen, uint16_t MaxRcv, uint32_t timeout)
{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b086      	sub	sp, #24
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	60f8      	str	r0, [r7, #12]
 800cbda:	60b9      	str	r1, [r7, #8]
 800cbdc:	607a      	str	r2, [r7, #4]
 800cbde:	807b      	strh	r3, [r7, #2]
	int Status = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	617b      	str	r3, [r7, #20]
	Status = osMutexAcquire(UART->RXMutex, timeout);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	6a39      	ldr	r1, [r7, #32]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fa ffac 	bl	8007b48 <osMutexAcquire>
 800cbf0:	6178      	str	r0, [r7, #20]
	if(Status == osErrorTimeout) return osErrorTimeout;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f113 0f02 	cmn.w	r3, #2
 800cbf8:	d102      	bne.n	800cc00 <UART_OS_Receive_ToIdle+0x2e>
 800cbfa:	f06f 0301 	mvn.w	r3, #1
 800cbfe:	e057      	b.n	800ccb0 <UART_OS_Receive_ToIdle+0xde>
	else if (Status < 0 ) return osError;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	da02      	bge.n	800cc0c <UART_OS_Receive_ToIdle+0x3a>
 800cc06:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0a:	e051      	b.n	800ccb0 <UART_OS_Receive_ToIdle+0xde>

	osEventFlagsClear(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	2102      	movs	r1, #2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fa fe44 	bl	80078a0 <osEventFlagsClear>
	Status = HAL_UARTEx_ReceiveToIdle_DMA(UART->huart, RcvBuffer, MaxRcv);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	887a      	ldrh	r2, [r7, #2]
 800cc1e:	68b9      	ldr	r1, [r7, #8]
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7f9 fbbb 	bl	800639c <HAL_UARTEx_ReceiveToIdle_DMA>
 800cc26:	4603      	mov	r3, r0
 800cc28:	617b      	str	r3, [r7, #20]
	__HAL_DMA_DISABLE_IT(UART->huart->hdmarx, DMA_IT_HT);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f022 0204 	bic.w	r2, r2, #4
 800cc40:	601a      	str	r2, [r3, #0]

	if (Status !=HAL_OK)
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00c      	beq.n	800cc62 <UART_OS_Receive_ToIdle+0x90>
	{
		HAL_UART_AbortReceive(UART->huart);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7f9 fc02 	bl	8006456 <HAL_UART_AbortReceive>
		osMutexRelease(UART->RXMutex);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fa ffd4 	bl	8007c04 <osMutexRelease>
		return osError;
 800cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc60:	e026      	b.n	800ccb0 <UART_OS_Receive_ToIdle+0xde>
	}

	Status = osEventFlagsWait(UART->EventFlags, UART_OS_RcvToIdleCpl_Event, osFlagsWaitAll, timeout);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68d8      	ldr	r0, [r3, #12]
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	2102      	movs	r1, #2
 800cc6c:	f7fa fe5c 	bl	8007928 <osEventFlagsWait>
 800cc70:	4603      	mov	r3, r0
 800cc72:	617b      	str	r3, [r7, #20]

	if(Status >0)
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	dd07      	ble.n	800cc8a <UART_OS_Receive_ToIdle+0xb8>
	{
		*RcvLen = UART->RxLen;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	8a1b      	ldrh	r3, [r3, #16]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	801a      	strh	r2, [r3, #0]
		UART->RxLen = 0;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	821a      	strh	r2, [r3, #16]
//		Status = osOK
	}
	HAL_UART_AbortReceive(UART->huart);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7f9 fbe1 	bl	8006456 <HAL_UART_AbortReceive>
	osEventFlagsClear(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	2102      	movs	r1, #2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fa fe00 	bl	80078a0 <osEventFlagsClear>
	osMutexRelease(UART->RXMutex);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fa ffad 	bl	8007c04 <osMutexRelease>
//	SyncPrintf("Proc Time %ld \r\n", osKernelGetTickCount()-timeStart);

	return Status > 0? osOK: Status;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <UART_OS_RcvToIdle_CB>:
	osMutexRelease(UART->RXMutex);
	return Status > 0? osOK: Status;
}

void UART_OS_RcvToIdle_CB(UART_OS_HandlerStruct* UART, uint16_t RcvLen)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	807b      	strh	r3, [r7, #2]
	UART->RxLen = RcvLen;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	887a      	ldrh	r2, [r7, #2]
 800ccc8:	821a      	strh	r2, [r3, #16]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	2102      	movs	r1, #2
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7fa fd8d 	bl	80077f0 <osEventFlagsSet>
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <UART_OS_RxCplt_CB>:

void UART_OS_RxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvCpl_Event);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	2101      	movs	r1, #1
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7fa fd7f 	bl	80077f0 <osEventFlagsSet>
}
 800ccf2:	bf00      	nop
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <UART_OS_TxCplt_CB>:

void UART_OS_TxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
//	uint32_t flag = osEventFlagsGet(UART->EventFlags);
	osEventFlagsSet(UART->EventFlags, UART_OS_TxCpl_Event);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	2104      	movs	r1, #4
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fa fd71 	bl	80077f0 <osEventFlagsSet>
}
 800cd0e:	bf00      	nop
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 800cd16:	b480      	push	{r7}
 800cd18:	b087      	sub	sp, #28
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 800cd26:	78fb      	ldrb	r3, [r7, #3]
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	e023      	b.n	800cd74 <crc_8+0x5e>
    crc ^= (*data << 8);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	021b      	lsls	r3, r3, #8
 800cd32:	461a      	mov	r2, r3
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	4053      	eors	r3, r2
 800cd38:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 800cd3a:	2308      	movs	r3, #8
 800cd3c:	613b      	str	r3, [r7, #16]
 800cd3e:	e010      	b.n	800cd62 <crc_8+0x4c>
      if (crc & 0x8000)
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d005      	beq.n	800cd56 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 800cd50:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800cd54:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	613b      	str	r3, [r7, #16]
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1eb      	bne.n	800cd40 <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3301      	adds	r3, #1
 800cd72:	607b      	str	r3, [r7, #4]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1d8      	bne.n	800cd2c <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	0a1b      	lsrs	r3, r3, #8
 800cd7e:	b2db      	uxtb	r3, r3
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	371c      	adds	r7, #28
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bc80      	pop	{r7}
 800cd88:	4770      	bx	lr
	...

0800cd8c <DataPack_Split>:
#include "string.h"
#include "stdlib.h"
#include "DataProcess.h"

int DataPack_Split(char* str, uint8_t* ID, char *pValue)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]

	if (str[0] != '#') return 1;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b23      	cmp	r3, #35	; 0x23
 800cd9e:	d001      	beq.n	800cda4 <DataPack_Split+0x18>
 800cda0:	2301      	movs	r3, #1
 800cda2:	e026      	b.n	800cdf2 <DataPack_Split+0x66>
	*ID = atoi(str+1);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	3301      	adds	r3, #1
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 f9a3 	bl	800d0f4 <atoi>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	701a      	strb	r2, [r3, #0]
	char* tok = strtok(str, "=");
 800cdb6:	4911      	ldr	r1, [pc, #68]	; (800cdfc <DataPack_Split+0x70>)
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f000 fc4f 	bl	800d65c <strtok>
 800cdbe:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <DataPack_Split+0x3e>
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e013      	b.n	800cdf2 <DataPack_Split+0x66>
	tok = strtok(NULL,"=");
 800cdca:	490c      	ldr	r1, [pc, #48]	; (800cdfc <DataPack_Split+0x70>)
 800cdcc:	2000      	movs	r0, #0
 800cdce:	f000 fc45 	bl	800d65c <strtok>
 800cdd2:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <DataPack_Split+0x52>
 800cdda:	2301      	movs	r3, #1
 800cddc:	e009      	b.n	800cdf2 <DataPack_Split+0x66>
	strcpy(pValue, tok);
 800cdde:	6979      	ldr	r1, [r7, #20]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 fd70 	bl	800d8c6 <strcpy>
	tok = strtok(pValue,"\r");
 800cde6:	4906      	ldr	r1, [pc, #24]	; (800ce00 <DataPack_Split+0x74>)
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 fc37 	bl	800d65c <strtok>
 800cdee:	6178      	str	r0, [r7, #20]
	return 0;
 800cdf0:	2300      	movs	r3, #0
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3718      	adds	r7, #24
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	0800e804 	.word	0x0800e804
 800ce00:	0800e808 	.word	0x0800e808

0800ce04 <DataPack_GetSteerAngle>:
	*SpeakerState = atoi(str);
	return 0;
}

int DataPack_GetSteerAngle(char* str, float* Angle)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]

	*Angle = StrToFloat(str);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f8f2 	bl	800cff8 <StrToFloat>
 800ce14:	4602      	mov	r2, r0
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	601a      	str	r2, [r3, #0]
	return 0;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <reverseStr>:
 */
#include "Utility.h"
#include "string.h"
#include "math.h"
void reverseStr(char* str, int len)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	617b      	str	r3, [r7, #20]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800ce38:	e018      	b.n	800ce6c <reverseStr+0x48>
        temp = str[i];
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	4413      	add	r3, r2
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	441a      	add	r2, r3
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	440b      	add	r3, r1
 800ce50:	7812      	ldrb	r2, [r2, #0]
 800ce52:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	4413      	add	r3, r2
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	b2d2      	uxtb	r2, r2
 800ce5e:	701a      	strb	r2, [r3, #0]
        i++;
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	3301      	adds	r3, #1
 800ce64:	617b      	str	r3, [r7, #20]
        j--;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	613b      	str	r3, [r7, #16]
    while (i < j) {
 800ce6c:	697a      	ldr	r2, [r7, #20]
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	dbe2      	blt.n	800ce3a <reverseStr+0x16>
    }
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop
 800ce78:	371c      	adds	r7, #28
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bc80      	pop	{r7}
 800ce7e:	4770      	bx	lr

0800ce80 <intToStr>:
int intToStr(int x, char str[], int d)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	617b      	str	r3, [r7, #20]
    while (x) {
 800ce90:	e01d      	b.n	800cece <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	4b1d      	ldr	r3, [pc, #116]	; (800cf0c <intToStr+0x8c>)
 800ce96:	fb83 1302 	smull	r1, r3, r3, r2
 800ce9a:	1099      	asrs	r1, r3, #2
 800ce9c:	17d3      	asrs	r3, r2, #31
 800ce9e:	1ac9      	subs	r1, r1, r3
 800cea0:	460b      	mov	r3, r1
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	440b      	add	r3, r1
 800cea6:	005b      	lsls	r3, r3, #1
 800cea8:	1ad1      	subs	r1, r2, r3
 800ceaa:	b2ca      	uxtb	r2, r1
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	1c59      	adds	r1, r3, #1
 800ceb0:	6179      	str	r1, [r7, #20]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	440b      	add	r3, r1
 800ceb8:	3230      	adds	r2, #48	; 0x30
 800ceba:	b2d2      	uxtb	r2, r2
 800cebc:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	4a12      	ldr	r2, [pc, #72]	; (800cf0c <intToStr+0x8c>)
 800cec2:	fb82 1203 	smull	r1, r2, r2, r3
 800cec6:	1092      	asrs	r2, r2, #2
 800cec8:	17db      	asrs	r3, r3, #31
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	60fb      	str	r3, [r7, #12]
    while (x) {
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1de      	bne.n	800ce92 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800ced4:	e007      	b.n	800cee6 <intToStr+0x66>
        str[i++] = '0';
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	617a      	str	r2, [r7, #20]
 800cedc:	461a      	mov	r2, r3
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	4413      	add	r3, r2
 800cee2:	2230      	movs	r2, #48	; 0x30
 800cee4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800cee6:	697a      	ldr	r2, [r7, #20]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	dbf3      	blt.n	800ced6 <intToStr+0x56>

    reverseStr(str, i);
 800ceee:	6979      	ldr	r1, [r7, #20]
 800cef0:	68b8      	ldr	r0, [r7, #8]
 800cef2:	f7ff ff97 	bl	800ce24 <reverseStr>
    str[i] = '\0';
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	4413      	add	r3, r2
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]
    return i;
 800cf00:	697b      	ldr	r3, [r7, #20]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3718      	adds	r7, #24
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	66666667 	.word	0x66666667

0800cf10 <quick_pow10>:
        1, 10, 100, 1000, 10000,
        100000, 1000000, 10000000, 100000000, 1000000000
    };

int quick_pow10(int n)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
    return pow10[n];
 800cf18:	4a04      	ldr	r2, [pc, #16]	; (800cf2c <quick_pow10+0x1c>)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bc80      	pop	{r7}
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	20000018 	.word	0x20000018

0800cf30 <FloatToStr>:

int FloatToStr(float n, char* res, int afterpoint)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b088      	sub	sp, #32
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]

	if(afterpoint > sizeof(pow10)) return 1;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b28      	cmp	r3, #40	; 0x28
 800cf40:	d901      	bls.n	800cf46 <FloatToStr+0x16>
 800cf42:	2301      	movs	r3, #1
 800cf44:	e053      	b.n	800cfee <FloatToStr+0xbe>
    // Extract integer part
	uint8_t offset = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	77fb      	strb	r3, [r7, #31]
	if(n < 0)
 800cf4a:	f04f 0100 	mov.w	r1, #0
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7f3 fff8 	bl	8000f44 <__aeabi_fcmplt>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d008      	beq.n	800cf6c <FloatToStr+0x3c>
	{
		offset = 1;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	77fb      	strb	r3, [r7, #31]
		n = -n;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cf64:	60fb      	str	r3, [r7, #12]
		res[0] = '-';
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	222d      	movs	r2, #45	; 0x2d
 800cf6a:	701a      	strb	r2, [r3, #0]
	}
    int ipart = (int)n;
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f7f4 f811 	bl	8000f94 <__aeabi_f2iz>
 800cf72:	4603      	mov	r3, r0
 800cf74:	61bb      	str	r3, [r7, #24]

    // Extract floating part
    float fpart = n - (float)ipart;
 800cf76:	69b8      	ldr	r0, [r7, #24]
 800cf78:	f7f3 fdf2 	bl	8000b60 <__aeabi_i2f>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	4619      	mov	r1, r3
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7f3 fd37 	bl	80009f4 <__aeabi_fsub>
 800cf86:	4603      	mov	r3, r0
 800cf88:	617b      	str	r3, [r7, #20]

    // convert integer part to string
    int i = intToStr(ipart, res + offset, 0);
 800cf8a:	7ffb      	ldrb	r3, [r7, #31]
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	4413      	add	r3, r2
 800cf90:	2200      	movs	r2, #0
 800cf92:	4619      	mov	r1, r3
 800cf94:	69b8      	ldr	r0, [r7, #24]
 800cf96:	f7ff ff73 	bl	800ce80 <intToStr>
 800cf9a:	6138      	str	r0, [r7, #16]
    offset += i;
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	7ffb      	ldrb	r3, [r7, #31]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	77fb      	strb	r3, [r7, #31]
    // check for display option after point
    if (afterpoint != 0) {
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d01f      	beq.n	800cfec <FloatToStr+0xbc>
        res[offset] = '.'; // add dot
 800cfac:	7ffb      	ldrb	r3, [r7, #31]
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	222e      	movs	r2, #46	; 0x2e
 800cfb4:	701a      	strb	r2, [r3, #0]
        offset++;
 800cfb6:	7ffb      	ldrb	r3, [r7, #31]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	77fb      	strb	r3, [r7, #31]
        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * quick_pow10(afterpoint);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff ffa7 	bl	800cf10 <quick_pow10>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7f3 fdcb 	bl	8000b60 <__aeabi_i2f>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6978      	ldr	r0, [r7, #20]
 800cfd0:	f7f3 fe1a 	bl	8000c08 <__aeabi_fmul>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	617b      	str	r3, [r7, #20]
//        fpart = fpart*10;
//        fpart = fpart* pow(10, afterpoint);

        intToStr((int)fpart, res + offset, afterpoint);
 800cfd8:	6978      	ldr	r0, [r7, #20]
 800cfda:	f7f3 ffdb 	bl	8000f94 <__aeabi_f2iz>
 800cfde:	7ffb      	ldrb	r3, [r7, #31]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f7ff ff4a 	bl	800ce80 <intToStr>
    }
    return 0;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3720      	adds	r7, #32
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <StrToFloat>:

float StrToFloat(char *string)
{
 800cff8:	b5b0      	push	{r4, r5, r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
    float result= 0.0;
 800d000:	f04f 0300 	mov.w	r3, #0
 800d004:	61fb      	str	r3, [r7, #28]
    int len = strlen(string);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7f3 f8a2 	bl	8000150 <strlen>
 800d00c:	4603      	mov	r3, r0
 800d00e:	60fb      	str	r3, [r7, #12]
    int dotPosition = 0;
 800d010:	2300      	movs	r3, #0
 800d012:	61bb      	str	r3, [r7, #24]
    uint8_t isNegNumber = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++)
 800d018:	2300      	movs	r3, #0
 800d01a:	613b      	str	r3, [r7, #16]
 800d01c:	e04a      	b.n	800d0b4 <StrToFloat+0xbc>
	{
    	if(i == 0 && string[i] == '-')
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d108      	bne.n	800d036 <StrToFloat+0x3e>
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	4413      	add	r3, r2
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	2b2d      	cmp	r3, #45	; 0x2d
 800d02e:	d102      	bne.n	800d036 <StrToFloat+0x3e>
    	{
    		isNegNumber = 1;
 800d030:	2301      	movs	r3, #1
 800d032:	75fb      	strb	r3, [r7, #23]
 800d034:	e03b      	b.n	800d0ae <StrToFloat+0xb6>
    	}
    	else if (string[i] == '.')
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	4413      	add	r3, r2
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b2e      	cmp	r3, #46	; 0x2e
 800d040:	d105      	bne.n	800d04e <StrToFloat+0x56>
		{
    		dotPosition = len - i  - 1;
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	3b01      	subs	r3, #1
 800d04a:	61bb      	str	r3, [r7, #24]
 800d04c:	e02f      	b.n	800d0ae <StrToFloat+0xb6>
		}
		else
		{
			if(string[i] < '0' || string[i] > '9')
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	4413      	add	r3, r2
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b2f      	cmp	r3, #47	; 0x2f
 800d058:	d905      	bls.n	800d066 <StrToFloat+0x6e>
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	4413      	add	r3, r2
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b39      	cmp	r3, #57	; 0x39
 800d064:	d901      	bls.n	800d06a <StrToFloat+0x72>
			{
				return result;
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	e03c      	b.n	800d0e4 <StrToFloat+0xec>
			}
			result = result * 10.0 + (string[i]-'0');
 800d06a:	69f8      	ldr	r0, [r7, #28]
 800d06c:	f7f3 f9dc 	bl	8000428 <__aeabi_f2d>
 800d070:	f04f 0200 	mov.w	r2, #0
 800d074:	4b1d      	ldr	r3, [pc, #116]	; (800d0ec <StrToFloat+0xf4>)
 800d076:	f7f3 fa2f 	bl	80004d8 <__aeabi_dmul>
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	4614      	mov	r4, r2
 800d080:	461d      	mov	r5, r3
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	3b30      	subs	r3, #48	; 0x30
 800d08c:	4618      	mov	r0, r3
 800d08e:	f7f3 f9b9 	bl	8000404 <__aeabi_i2d>
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	4620      	mov	r0, r4
 800d098:	4629      	mov	r1, r5
 800d09a:	f7f3 f867 	bl	800016c <__adddf3>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	f7f3 fc51 	bl	800094c <__aeabi_d2f>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < len; i++)
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	613b      	str	r3, [r7, #16]
 800d0b4:	693a      	ldr	r2, [r7, #16]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	dbb0      	blt.n	800d01e <StrToFloat+0x26>
		}
	}

      while (dotPosition--)
 800d0bc:	e005      	b.n	800d0ca <StrToFloat+0xd2>
      {
        result /= 10.0;
 800d0be:	490c      	ldr	r1, [pc, #48]	; (800d0f0 <StrToFloat+0xf8>)
 800d0c0:	69f8      	ldr	r0, [r7, #28]
 800d0c2:	f7f3 fe55 	bl	8000d70 <__aeabi_fdiv>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	61fb      	str	r3, [r7, #28]
      while (dotPosition--)
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	1e5a      	subs	r2, r3, #1
 800d0ce:	61ba      	str	r2, [r7, #24]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1f4      	bne.n	800d0be <StrToFloat+0xc6>
      }

    return isNegNumber ? - result: result;
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <StrToFloat+0xea>
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d0e0:	e000      	b.n	800d0e4 <StrToFloat+0xec>
 800d0e2:	69fb      	ldr	r3, [r7, #28]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3720      	adds	r7, #32
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d0ec:	40240000 	.word	0x40240000
 800d0f0:	41200000 	.word	0x41200000

0800d0f4 <atoi>:
 800d0f4:	220a      	movs	r2, #10
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	f000 b932 	b.w	800d360 <strtol>

0800d0fc <malloc>:
 800d0fc:	4b02      	ldr	r3, [pc, #8]	; (800d108 <malloc+0xc>)
 800d0fe:	4601      	mov	r1, r0
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	f000 b823 	b.w	800d14c <_malloc_r>
 800d106:	bf00      	nop
 800d108:	20000098 	.word	0x20000098

0800d10c <sbrk_aligned>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	4e0e      	ldr	r6, [pc, #56]	; (800d148 <sbrk_aligned+0x3c>)
 800d110:	460c      	mov	r4, r1
 800d112:	6831      	ldr	r1, [r6, #0]
 800d114:	4605      	mov	r5, r0
 800d116:	b911      	cbnz	r1, 800d11e <sbrk_aligned+0x12>
 800d118:	f000 fb86 	bl	800d828 <_sbrk_r>
 800d11c:	6030      	str	r0, [r6, #0]
 800d11e:	4621      	mov	r1, r4
 800d120:	4628      	mov	r0, r5
 800d122:	f000 fb81 	bl	800d828 <_sbrk_r>
 800d126:	1c43      	adds	r3, r0, #1
 800d128:	d00a      	beq.n	800d140 <sbrk_aligned+0x34>
 800d12a:	1cc4      	adds	r4, r0, #3
 800d12c:	f024 0403 	bic.w	r4, r4, #3
 800d130:	42a0      	cmp	r0, r4
 800d132:	d007      	beq.n	800d144 <sbrk_aligned+0x38>
 800d134:	1a21      	subs	r1, r4, r0
 800d136:	4628      	mov	r0, r5
 800d138:	f000 fb76 	bl	800d828 <_sbrk_r>
 800d13c:	3001      	adds	r0, #1
 800d13e:	d101      	bne.n	800d144 <sbrk_aligned+0x38>
 800d140:	f04f 34ff 	mov.w	r4, #4294967295
 800d144:	4620      	mov	r0, r4
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	20003204 	.word	0x20003204

0800d14c <_malloc_r>:
 800d14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d150:	1ccd      	adds	r5, r1, #3
 800d152:	f025 0503 	bic.w	r5, r5, #3
 800d156:	3508      	adds	r5, #8
 800d158:	2d0c      	cmp	r5, #12
 800d15a:	bf38      	it	cc
 800d15c:	250c      	movcc	r5, #12
 800d15e:	2d00      	cmp	r5, #0
 800d160:	4607      	mov	r7, r0
 800d162:	db01      	blt.n	800d168 <_malloc_r+0x1c>
 800d164:	42a9      	cmp	r1, r5
 800d166:	d905      	bls.n	800d174 <_malloc_r+0x28>
 800d168:	230c      	movs	r3, #12
 800d16a:	2600      	movs	r6, #0
 800d16c:	603b      	str	r3, [r7, #0]
 800d16e:	4630      	mov	r0, r6
 800d170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d248 <_malloc_r+0xfc>
 800d178:	f000 f868 	bl	800d24c <__malloc_lock>
 800d17c:	f8d8 3000 	ldr.w	r3, [r8]
 800d180:	461c      	mov	r4, r3
 800d182:	bb5c      	cbnz	r4, 800d1dc <_malloc_r+0x90>
 800d184:	4629      	mov	r1, r5
 800d186:	4638      	mov	r0, r7
 800d188:	f7ff ffc0 	bl	800d10c <sbrk_aligned>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	4604      	mov	r4, r0
 800d190:	d155      	bne.n	800d23e <_malloc_r+0xf2>
 800d192:	f8d8 4000 	ldr.w	r4, [r8]
 800d196:	4626      	mov	r6, r4
 800d198:	2e00      	cmp	r6, #0
 800d19a:	d145      	bne.n	800d228 <_malloc_r+0xdc>
 800d19c:	2c00      	cmp	r4, #0
 800d19e:	d048      	beq.n	800d232 <_malloc_r+0xe6>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4638      	mov	r0, r7
 800d1a6:	eb04 0903 	add.w	r9, r4, r3
 800d1aa:	f000 fb3d 	bl	800d828 <_sbrk_r>
 800d1ae:	4581      	cmp	r9, r0
 800d1b0:	d13f      	bne.n	800d232 <_malloc_r+0xe6>
 800d1b2:	6821      	ldr	r1, [r4, #0]
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	1a6d      	subs	r5, r5, r1
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7ff ffa7 	bl	800d10c <sbrk_aligned>
 800d1be:	3001      	adds	r0, #1
 800d1c0:	d037      	beq.n	800d232 <_malloc_r+0xe6>
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	442b      	add	r3, r5
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d038      	beq.n	800d242 <_malloc_r+0xf6>
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	42a2      	cmp	r2, r4
 800d1d4:	d12b      	bne.n	800d22e <_malloc_r+0xe2>
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	605a      	str	r2, [r3, #4]
 800d1da:	e00f      	b.n	800d1fc <_malloc_r+0xb0>
 800d1dc:	6822      	ldr	r2, [r4, #0]
 800d1de:	1b52      	subs	r2, r2, r5
 800d1e0:	d41f      	bmi.n	800d222 <_malloc_r+0xd6>
 800d1e2:	2a0b      	cmp	r2, #11
 800d1e4:	d917      	bls.n	800d216 <_malloc_r+0xca>
 800d1e6:	1961      	adds	r1, r4, r5
 800d1e8:	42a3      	cmp	r3, r4
 800d1ea:	6025      	str	r5, [r4, #0]
 800d1ec:	bf18      	it	ne
 800d1ee:	6059      	strne	r1, [r3, #4]
 800d1f0:	6863      	ldr	r3, [r4, #4]
 800d1f2:	bf08      	it	eq
 800d1f4:	f8c8 1000 	streq.w	r1, [r8]
 800d1f8:	5162      	str	r2, [r4, r5]
 800d1fa:	604b      	str	r3, [r1, #4]
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f104 060b 	add.w	r6, r4, #11
 800d202:	f000 f829 	bl	800d258 <__malloc_unlock>
 800d206:	f026 0607 	bic.w	r6, r6, #7
 800d20a:	1d23      	adds	r3, r4, #4
 800d20c:	1af2      	subs	r2, r6, r3
 800d20e:	d0ae      	beq.n	800d16e <_malloc_r+0x22>
 800d210:	1b9b      	subs	r3, r3, r6
 800d212:	50a3      	str	r3, [r4, r2]
 800d214:	e7ab      	b.n	800d16e <_malloc_r+0x22>
 800d216:	42a3      	cmp	r3, r4
 800d218:	6862      	ldr	r2, [r4, #4]
 800d21a:	d1dd      	bne.n	800d1d8 <_malloc_r+0x8c>
 800d21c:	f8c8 2000 	str.w	r2, [r8]
 800d220:	e7ec      	b.n	800d1fc <_malloc_r+0xb0>
 800d222:	4623      	mov	r3, r4
 800d224:	6864      	ldr	r4, [r4, #4]
 800d226:	e7ac      	b.n	800d182 <_malloc_r+0x36>
 800d228:	4634      	mov	r4, r6
 800d22a:	6876      	ldr	r6, [r6, #4]
 800d22c:	e7b4      	b.n	800d198 <_malloc_r+0x4c>
 800d22e:	4613      	mov	r3, r2
 800d230:	e7cc      	b.n	800d1cc <_malloc_r+0x80>
 800d232:	230c      	movs	r3, #12
 800d234:	4638      	mov	r0, r7
 800d236:	603b      	str	r3, [r7, #0]
 800d238:	f000 f80e 	bl	800d258 <__malloc_unlock>
 800d23c:	e797      	b.n	800d16e <_malloc_r+0x22>
 800d23e:	6025      	str	r5, [r4, #0]
 800d240:	e7dc      	b.n	800d1fc <_malloc_r+0xb0>
 800d242:	605b      	str	r3, [r3, #4]
 800d244:	deff      	udf	#255	; 0xff
 800d246:	bf00      	nop
 800d248:	20003200 	.word	0x20003200

0800d24c <__malloc_lock>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__malloc_lock+0x8>)
 800d24e:	f000 bb38 	b.w	800d8c2 <__retarget_lock_acquire_recursive>
 800d252:	bf00      	nop
 800d254:	20003348 	.word	0x20003348

0800d258 <__malloc_unlock>:
 800d258:	4801      	ldr	r0, [pc, #4]	; (800d260 <__malloc_unlock+0x8>)
 800d25a:	f000 bb33 	b.w	800d8c4 <__retarget_lock_release_recursive>
 800d25e:	bf00      	nop
 800d260:	20003348 	.word	0x20003348

0800d264 <_strtol_l.constprop.0>:
 800d264:	2b01      	cmp	r3, #1
 800d266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d26a:	4686      	mov	lr, r0
 800d26c:	4690      	mov	r8, r2
 800d26e:	d001      	beq.n	800d274 <_strtol_l.constprop.0+0x10>
 800d270:	2b24      	cmp	r3, #36	; 0x24
 800d272:	d906      	bls.n	800d282 <_strtol_l.constprop.0+0x1e>
 800d274:	f000 fafa 	bl	800d86c <__errno>
 800d278:	2316      	movs	r3, #22
 800d27a:	6003      	str	r3, [r0, #0]
 800d27c:	2000      	movs	r0, #0
 800d27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d282:	460d      	mov	r5, r1
 800d284:	4835      	ldr	r0, [pc, #212]	; (800d35c <_strtol_l.constprop.0+0xf8>)
 800d286:	462a      	mov	r2, r5
 800d288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d28c:	5d06      	ldrb	r6, [r0, r4]
 800d28e:	f016 0608 	ands.w	r6, r6, #8
 800d292:	d1f8      	bne.n	800d286 <_strtol_l.constprop.0+0x22>
 800d294:	2c2d      	cmp	r4, #45	; 0x2d
 800d296:	d12e      	bne.n	800d2f6 <_strtol_l.constprop.0+0x92>
 800d298:	2601      	movs	r6, #1
 800d29a:	782c      	ldrb	r4, [r5, #0]
 800d29c:	1c95      	adds	r5, r2, #2
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d057      	beq.n	800d352 <_strtol_l.constprop.0+0xee>
 800d2a2:	2b10      	cmp	r3, #16
 800d2a4:	d109      	bne.n	800d2ba <_strtol_l.constprop.0+0x56>
 800d2a6:	2c30      	cmp	r4, #48	; 0x30
 800d2a8:	d107      	bne.n	800d2ba <_strtol_l.constprop.0+0x56>
 800d2aa:	782a      	ldrb	r2, [r5, #0]
 800d2ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d2b0:	2a58      	cmp	r2, #88	; 0x58
 800d2b2:	d149      	bne.n	800d348 <_strtol_l.constprop.0+0xe4>
 800d2b4:	2310      	movs	r3, #16
 800d2b6:	786c      	ldrb	r4, [r5, #1]
 800d2b8:	3502      	adds	r5, #2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800d2c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d2c4:	fbbc f9f3 	udiv	r9, ip, r3
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	fb03 ca19 	mls	sl, r3, r9, ip
 800d2ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d2d2:	2f09      	cmp	r7, #9
 800d2d4:	d814      	bhi.n	800d300 <_strtol_l.constprop.0+0x9c>
 800d2d6:	463c      	mov	r4, r7
 800d2d8:	42a3      	cmp	r3, r4
 800d2da:	dd20      	ble.n	800d31e <_strtol_l.constprop.0+0xba>
 800d2dc:	1c57      	adds	r7, r2, #1
 800d2de:	d007      	beq.n	800d2f0 <_strtol_l.constprop.0+0x8c>
 800d2e0:	4581      	cmp	r9, r0
 800d2e2:	d319      	bcc.n	800d318 <_strtol_l.constprop.0+0xb4>
 800d2e4:	d101      	bne.n	800d2ea <_strtol_l.constprop.0+0x86>
 800d2e6:	45a2      	cmp	sl, r4
 800d2e8:	db16      	blt.n	800d318 <_strtol_l.constprop.0+0xb4>
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	fb00 4003 	mla	r0, r0, r3, r4
 800d2f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2f4:	e7eb      	b.n	800d2ce <_strtol_l.constprop.0+0x6a>
 800d2f6:	2c2b      	cmp	r4, #43	; 0x2b
 800d2f8:	bf04      	itt	eq
 800d2fa:	782c      	ldrbeq	r4, [r5, #0]
 800d2fc:	1c95      	addeq	r5, r2, #2
 800d2fe:	e7ce      	b.n	800d29e <_strtol_l.constprop.0+0x3a>
 800d300:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d304:	2f19      	cmp	r7, #25
 800d306:	d801      	bhi.n	800d30c <_strtol_l.constprop.0+0xa8>
 800d308:	3c37      	subs	r4, #55	; 0x37
 800d30a:	e7e5      	b.n	800d2d8 <_strtol_l.constprop.0+0x74>
 800d30c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d310:	2f19      	cmp	r7, #25
 800d312:	d804      	bhi.n	800d31e <_strtol_l.constprop.0+0xba>
 800d314:	3c57      	subs	r4, #87	; 0x57
 800d316:	e7df      	b.n	800d2d8 <_strtol_l.constprop.0+0x74>
 800d318:	f04f 32ff 	mov.w	r2, #4294967295
 800d31c:	e7e8      	b.n	800d2f0 <_strtol_l.constprop.0+0x8c>
 800d31e:	1c53      	adds	r3, r2, #1
 800d320:	d108      	bne.n	800d334 <_strtol_l.constprop.0+0xd0>
 800d322:	2322      	movs	r3, #34	; 0x22
 800d324:	4660      	mov	r0, ip
 800d326:	f8ce 3000 	str.w	r3, [lr]
 800d32a:	f1b8 0f00 	cmp.w	r8, #0
 800d32e:	d0a6      	beq.n	800d27e <_strtol_l.constprop.0+0x1a>
 800d330:	1e69      	subs	r1, r5, #1
 800d332:	e006      	b.n	800d342 <_strtol_l.constprop.0+0xde>
 800d334:	b106      	cbz	r6, 800d338 <_strtol_l.constprop.0+0xd4>
 800d336:	4240      	negs	r0, r0
 800d338:	f1b8 0f00 	cmp.w	r8, #0
 800d33c:	d09f      	beq.n	800d27e <_strtol_l.constprop.0+0x1a>
 800d33e:	2a00      	cmp	r2, #0
 800d340:	d1f6      	bne.n	800d330 <_strtol_l.constprop.0+0xcc>
 800d342:	f8c8 1000 	str.w	r1, [r8]
 800d346:	e79a      	b.n	800d27e <_strtol_l.constprop.0+0x1a>
 800d348:	2430      	movs	r4, #48	; 0x30
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1b5      	bne.n	800d2ba <_strtol_l.constprop.0+0x56>
 800d34e:	2308      	movs	r3, #8
 800d350:	e7b3      	b.n	800d2ba <_strtol_l.constprop.0+0x56>
 800d352:	2c30      	cmp	r4, #48	; 0x30
 800d354:	d0a9      	beq.n	800d2aa <_strtol_l.constprop.0+0x46>
 800d356:	230a      	movs	r3, #10
 800d358:	e7af      	b.n	800d2ba <_strtol_l.constprop.0+0x56>
 800d35a:	bf00      	nop
 800d35c:	0800eaa1 	.word	0x0800eaa1

0800d360 <strtol>:
 800d360:	4613      	mov	r3, r2
 800d362:	460a      	mov	r2, r1
 800d364:	4601      	mov	r1, r0
 800d366:	4802      	ldr	r0, [pc, #8]	; (800d370 <strtol+0x10>)
 800d368:	6800      	ldr	r0, [r0, #0]
 800d36a:	f7ff bf7b 	b.w	800d264 <_strtol_l.constprop.0>
 800d36e:	bf00      	nop
 800d370:	20000098 	.word	0x20000098

0800d374 <std>:
 800d374:	2300      	movs	r3, #0
 800d376:	b510      	push	{r4, lr}
 800d378:	4604      	mov	r4, r0
 800d37a:	e9c0 3300 	strd	r3, r3, [r0]
 800d37e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d382:	6083      	str	r3, [r0, #8]
 800d384:	8181      	strh	r1, [r0, #12]
 800d386:	6643      	str	r3, [r0, #100]	; 0x64
 800d388:	81c2      	strh	r2, [r0, #14]
 800d38a:	6183      	str	r3, [r0, #24]
 800d38c:	4619      	mov	r1, r3
 800d38e:	2208      	movs	r2, #8
 800d390:	305c      	adds	r0, #92	; 0x5c
 800d392:	f000 f95b 	bl	800d64c <memset>
 800d396:	4b0d      	ldr	r3, [pc, #52]	; (800d3cc <std+0x58>)
 800d398:	6224      	str	r4, [r4, #32]
 800d39a:	6263      	str	r3, [r4, #36]	; 0x24
 800d39c:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <std+0x5c>)
 800d39e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3a0:	4b0c      	ldr	r3, [pc, #48]	; (800d3d4 <std+0x60>)
 800d3a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3a4:	4b0c      	ldr	r3, [pc, #48]	; (800d3d8 <std+0x64>)
 800d3a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d3a8:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <std+0x68>)
 800d3aa:	429c      	cmp	r4, r3
 800d3ac:	d006      	beq.n	800d3bc <std+0x48>
 800d3ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d3b2:	4294      	cmp	r4, r2
 800d3b4:	d002      	beq.n	800d3bc <std+0x48>
 800d3b6:	33d0      	adds	r3, #208	; 0xd0
 800d3b8:	429c      	cmp	r4, r3
 800d3ba:	d105      	bne.n	800d3c8 <std+0x54>
 800d3bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3c4:	f000 ba7c 	b.w	800d8c0 <__retarget_lock_init_recursive>
 800d3c8:	bd10      	pop	{r4, pc}
 800d3ca:	bf00      	nop
 800d3cc:	0800d4f9 	.word	0x0800d4f9
 800d3d0:	0800d51b 	.word	0x0800d51b
 800d3d4:	0800d553 	.word	0x0800d553
 800d3d8:	0800d577 	.word	0x0800d577
 800d3dc:	20003208 	.word	0x20003208

0800d3e0 <stdio_exit_handler>:
 800d3e0:	4a02      	ldr	r2, [pc, #8]	; (800d3ec <stdio_exit_handler+0xc>)
 800d3e2:	4903      	ldr	r1, [pc, #12]	; (800d3f0 <stdio_exit_handler+0x10>)
 800d3e4:	4803      	ldr	r0, [pc, #12]	; (800d3f4 <stdio_exit_handler+0x14>)
 800d3e6:	f000 b869 	b.w	800d4bc <_fwalk_sglue>
 800d3ea:	bf00      	nop
 800d3ec:	20000040 	.word	0x20000040
 800d3f0:	0800e09d 	.word	0x0800e09d
 800d3f4:	2000004c 	.word	0x2000004c

0800d3f8 <cleanup_stdio>:
 800d3f8:	6841      	ldr	r1, [r0, #4]
 800d3fa:	4b0c      	ldr	r3, [pc, #48]	; (800d42c <cleanup_stdio+0x34>)
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	4299      	cmp	r1, r3
 800d400:	4604      	mov	r4, r0
 800d402:	d001      	beq.n	800d408 <cleanup_stdio+0x10>
 800d404:	f000 fe4a 	bl	800e09c <_fflush_r>
 800d408:	68a1      	ldr	r1, [r4, #8]
 800d40a:	4b09      	ldr	r3, [pc, #36]	; (800d430 <cleanup_stdio+0x38>)
 800d40c:	4299      	cmp	r1, r3
 800d40e:	d002      	beq.n	800d416 <cleanup_stdio+0x1e>
 800d410:	4620      	mov	r0, r4
 800d412:	f000 fe43 	bl	800e09c <_fflush_r>
 800d416:	68e1      	ldr	r1, [r4, #12]
 800d418:	4b06      	ldr	r3, [pc, #24]	; (800d434 <cleanup_stdio+0x3c>)
 800d41a:	4299      	cmp	r1, r3
 800d41c:	d004      	beq.n	800d428 <cleanup_stdio+0x30>
 800d41e:	4620      	mov	r0, r4
 800d420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d424:	f000 be3a 	b.w	800e09c <_fflush_r>
 800d428:	bd10      	pop	{r4, pc}
 800d42a:	bf00      	nop
 800d42c:	20003208 	.word	0x20003208
 800d430:	20003270 	.word	0x20003270
 800d434:	200032d8 	.word	0x200032d8

0800d438 <global_stdio_init.part.0>:
 800d438:	b510      	push	{r4, lr}
 800d43a:	4b0b      	ldr	r3, [pc, #44]	; (800d468 <global_stdio_init.part.0+0x30>)
 800d43c:	4c0b      	ldr	r4, [pc, #44]	; (800d46c <global_stdio_init.part.0+0x34>)
 800d43e:	4a0c      	ldr	r2, [pc, #48]	; (800d470 <global_stdio_init.part.0+0x38>)
 800d440:	4620      	mov	r0, r4
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	2104      	movs	r1, #4
 800d446:	2200      	movs	r2, #0
 800d448:	f7ff ff94 	bl	800d374 <std>
 800d44c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d450:	2201      	movs	r2, #1
 800d452:	2109      	movs	r1, #9
 800d454:	f7ff ff8e 	bl	800d374 <std>
 800d458:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d45c:	2202      	movs	r2, #2
 800d45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d462:	2112      	movs	r1, #18
 800d464:	f7ff bf86 	b.w	800d374 <std>
 800d468:	20003340 	.word	0x20003340
 800d46c:	20003208 	.word	0x20003208
 800d470:	0800d3e1 	.word	0x0800d3e1

0800d474 <__sfp_lock_acquire>:
 800d474:	4801      	ldr	r0, [pc, #4]	; (800d47c <__sfp_lock_acquire+0x8>)
 800d476:	f000 ba24 	b.w	800d8c2 <__retarget_lock_acquire_recursive>
 800d47a:	bf00      	nop
 800d47c:	20003349 	.word	0x20003349

0800d480 <__sfp_lock_release>:
 800d480:	4801      	ldr	r0, [pc, #4]	; (800d488 <__sfp_lock_release+0x8>)
 800d482:	f000 ba1f 	b.w	800d8c4 <__retarget_lock_release_recursive>
 800d486:	bf00      	nop
 800d488:	20003349 	.word	0x20003349

0800d48c <__sinit>:
 800d48c:	b510      	push	{r4, lr}
 800d48e:	4604      	mov	r4, r0
 800d490:	f7ff fff0 	bl	800d474 <__sfp_lock_acquire>
 800d494:	6a23      	ldr	r3, [r4, #32]
 800d496:	b11b      	cbz	r3, 800d4a0 <__sinit+0x14>
 800d498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d49c:	f7ff bff0 	b.w	800d480 <__sfp_lock_release>
 800d4a0:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <__sinit+0x28>)
 800d4a2:	6223      	str	r3, [r4, #32]
 800d4a4:	4b04      	ldr	r3, [pc, #16]	; (800d4b8 <__sinit+0x2c>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1f5      	bne.n	800d498 <__sinit+0xc>
 800d4ac:	f7ff ffc4 	bl	800d438 <global_stdio_init.part.0>
 800d4b0:	e7f2      	b.n	800d498 <__sinit+0xc>
 800d4b2:	bf00      	nop
 800d4b4:	0800d3f9 	.word	0x0800d3f9
 800d4b8:	20003340 	.word	0x20003340

0800d4bc <_fwalk_sglue>:
 800d4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c0:	4607      	mov	r7, r0
 800d4c2:	4688      	mov	r8, r1
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	2600      	movs	r6, #0
 800d4c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4cc:	f1b9 0901 	subs.w	r9, r9, #1
 800d4d0:	d505      	bpl.n	800d4de <_fwalk_sglue+0x22>
 800d4d2:	6824      	ldr	r4, [r4, #0]
 800d4d4:	2c00      	cmp	r4, #0
 800d4d6:	d1f7      	bne.n	800d4c8 <_fwalk_sglue+0xc>
 800d4d8:	4630      	mov	r0, r6
 800d4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4de:	89ab      	ldrh	r3, [r5, #12]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d907      	bls.n	800d4f4 <_fwalk_sglue+0x38>
 800d4e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	d003      	beq.n	800d4f4 <_fwalk_sglue+0x38>
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	47c0      	blx	r8
 800d4f2:	4306      	orrs	r6, r0
 800d4f4:	3568      	adds	r5, #104	; 0x68
 800d4f6:	e7e9      	b.n	800d4cc <_fwalk_sglue+0x10>

0800d4f8 <__sread>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d500:	f000 f980 	bl	800d804 <_read_r>
 800d504:	2800      	cmp	r0, #0
 800d506:	bfab      	itete	ge
 800d508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d50a:	89a3      	ldrhlt	r3, [r4, #12]
 800d50c:	181b      	addge	r3, r3, r0
 800d50e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d512:	bfac      	ite	ge
 800d514:	6563      	strge	r3, [r4, #84]	; 0x54
 800d516:	81a3      	strhlt	r3, [r4, #12]
 800d518:	bd10      	pop	{r4, pc}

0800d51a <__swrite>:
 800d51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51e:	461f      	mov	r7, r3
 800d520:	898b      	ldrh	r3, [r1, #12]
 800d522:	4605      	mov	r5, r0
 800d524:	05db      	lsls	r3, r3, #23
 800d526:	460c      	mov	r4, r1
 800d528:	4616      	mov	r6, r2
 800d52a:	d505      	bpl.n	800d538 <__swrite+0x1e>
 800d52c:	2302      	movs	r3, #2
 800d52e:	2200      	movs	r2, #0
 800d530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d534:	f000 f954 	bl	800d7e0 <_lseek_r>
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	4632      	mov	r2, r6
 800d53c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	4628      	mov	r0, r5
 800d544:	463b      	mov	r3, r7
 800d546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d54e:	f000 b97b 	b.w	800d848 <_write_r>

0800d552 <__sseek>:
 800d552:	b510      	push	{r4, lr}
 800d554:	460c      	mov	r4, r1
 800d556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d55a:	f000 f941 	bl	800d7e0 <_lseek_r>
 800d55e:	1c43      	adds	r3, r0, #1
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	bf15      	itete	ne
 800d564:	6560      	strne	r0, [r4, #84]	; 0x54
 800d566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d56a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d56e:	81a3      	strheq	r3, [r4, #12]
 800d570:	bf18      	it	ne
 800d572:	81a3      	strhne	r3, [r4, #12]
 800d574:	bd10      	pop	{r4, pc}

0800d576 <__sclose>:
 800d576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d57a:	f000 b8cb 	b.w	800d714 <_close_r>

0800d57e <_vasniprintf_r>:
 800d57e:	b530      	push	{r4, r5, lr}
 800d580:	4615      	mov	r5, r2
 800d582:	b09b      	sub	sp, #108	; 0x6c
 800d584:	461a      	mov	r2, r3
 800d586:	682c      	ldr	r4, [r5, #0]
 800d588:	b189      	cbz	r1, 800d5ae <_vasniprintf_r+0x30>
 800d58a:	2c00      	cmp	r4, #0
 800d58c:	bf12      	itee	ne
 800d58e:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 800d592:	f44f 7322 	moveq.w	r3, #648	; 0x288
 800d596:	2100      	moveq	r1, #0
 800d598:	2c00      	cmp	r4, #0
 800d59a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d59e:	9100      	str	r1, [sp, #0]
 800d5a0:	9104      	str	r1, [sp, #16]
 800d5a2:	da08      	bge.n	800d5b6 <_vasniprintf_r+0x38>
 800d5a4:	238b      	movs	r3, #139	; 0x8b
 800d5a6:	6003      	str	r3, [r0, #0]
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	b01b      	add	sp, #108	; 0x6c
 800d5ac:	bd30      	pop	{r4, r5, pc}
 800d5ae:	f44f 7322 	mov.w	r3, #648	; 0x288
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	e7f0      	b.n	800d598 <_vasniprintf_r+0x1a>
 800d5b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5ba:	4669      	mov	r1, sp
 800d5bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d5c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d5c2:	9402      	str	r4, [sp, #8]
 800d5c4:	9405      	str	r4, [sp, #20]
 800d5c6:	f000 fa55 	bl	800da74 <_svfiprintf_r>
 800d5ca:	1e03      	subs	r3, r0, #0
 800d5cc:	f04f 0000 	mov.w	r0, #0
 800d5d0:	bfa1      	itttt	ge
 800d5d2:	602b      	strge	r3, [r5, #0]
 800d5d4:	9b00      	ldrge	r3, [sp, #0]
 800d5d6:	7018      	strbge	r0, [r3, #0]
 800d5d8:	9804      	ldrge	r0, [sp, #16]
 800d5da:	e7e6      	b.n	800d5aa <_vasniprintf_r+0x2c>

0800d5dc <vasniprintf>:
 800d5dc:	b507      	push	{r0, r1, r2, lr}
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	460a      	mov	r2, r1
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	4803      	ldr	r0, [pc, #12]	; (800d5f4 <vasniprintf+0x18>)
 800d5e8:	6800      	ldr	r0, [r0, #0]
 800d5ea:	f7ff ffc8 	bl	800d57e <_vasniprintf_r>
 800d5ee:	b003      	add	sp, #12
 800d5f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5f4:	20000098 	.word	0x20000098

0800d5f8 <memcmp>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	3901      	subs	r1, #1
 800d5fc:	4402      	add	r2, r0
 800d5fe:	4290      	cmp	r0, r2
 800d600:	d101      	bne.n	800d606 <memcmp+0xe>
 800d602:	2000      	movs	r0, #0
 800d604:	e005      	b.n	800d612 <memcmp+0x1a>
 800d606:	7803      	ldrb	r3, [r0, #0]
 800d608:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d60c:	42a3      	cmp	r3, r4
 800d60e:	d001      	beq.n	800d614 <memcmp+0x1c>
 800d610:	1b18      	subs	r0, r3, r4
 800d612:	bd10      	pop	{r4, pc}
 800d614:	3001      	adds	r0, #1
 800d616:	e7f2      	b.n	800d5fe <memcmp+0x6>

0800d618 <memmove>:
 800d618:	4288      	cmp	r0, r1
 800d61a:	b510      	push	{r4, lr}
 800d61c:	eb01 0402 	add.w	r4, r1, r2
 800d620:	d902      	bls.n	800d628 <memmove+0x10>
 800d622:	4284      	cmp	r4, r0
 800d624:	4623      	mov	r3, r4
 800d626:	d807      	bhi.n	800d638 <memmove+0x20>
 800d628:	1e43      	subs	r3, r0, #1
 800d62a:	42a1      	cmp	r1, r4
 800d62c:	d008      	beq.n	800d640 <memmove+0x28>
 800d62e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d632:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d636:	e7f8      	b.n	800d62a <memmove+0x12>
 800d638:	4601      	mov	r1, r0
 800d63a:	4402      	add	r2, r0
 800d63c:	428a      	cmp	r2, r1
 800d63e:	d100      	bne.n	800d642 <memmove+0x2a>
 800d640:	bd10      	pop	{r4, pc}
 800d642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d64a:	e7f7      	b.n	800d63c <memmove+0x24>

0800d64c <memset>:
 800d64c:	4603      	mov	r3, r0
 800d64e:	4402      	add	r2, r0
 800d650:	4293      	cmp	r3, r2
 800d652:	d100      	bne.n	800d656 <memset+0xa>
 800d654:	4770      	bx	lr
 800d656:	f803 1b01 	strb.w	r1, [r3], #1
 800d65a:	e7f9      	b.n	800d650 <memset+0x4>

0800d65c <strtok>:
 800d65c:	4b16      	ldr	r3, [pc, #88]	; (800d6b8 <strtok+0x5c>)
 800d65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d662:	681f      	ldr	r7, [r3, #0]
 800d664:	4605      	mov	r5, r0
 800d666:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800d668:	460e      	mov	r6, r1
 800d66a:	b9ec      	cbnz	r4, 800d6a8 <strtok+0x4c>
 800d66c:	2050      	movs	r0, #80	; 0x50
 800d66e:	f7ff fd45 	bl	800d0fc <malloc>
 800d672:	4602      	mov	r2, r0
 800d674:	6478      	str	r0, [r7, #68]	; 0x44
 800d676:	b920      	cbnz	r0, 800d682 <strtok+0x26>
 800d678:	215b      	movs	r1, #91	; 0x5b
 800d67a:	4b10      	ldr	r3, [pc, #64]	; (800d6bc <strtok+0x60>)
 800d67c:	4810      	ldr	r0, [pc, #64]	; (800d6c0 <strtok+0x64>)
 800d67e:	f000 f939 	bl	800d8f4 <__assert_func>
 800d682:	e9c0 4400 	strd	r4, r4, [r0]
 800d686:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d68a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d68e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d692:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d696:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d69a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d69e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d6a2:	6184      	str	r4, [r0, #24]
 800d6a4:	7704      	strb	r4, [r0, #28]
 800d6a6:	6244      	str	r4, [r0, #36]	; 0x24
 800d6a8:	4631      	mov	r1, r6
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b4:	f000 b806 	b.w	800d6c4 <__strtok_r>
 800d6b8:	20000098 	.word	0x20000098
 800d6bc:	0800eba1 	.word	0x0800eba1
 800d6c0:	0800ebb8 	.word	0x0800ebb8

0800d6c4 <__strtok_r>:
 800d6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6c6:	b908      	cbnz	r0, 800d6cc <__strtok_r+0x8>
 800d6c8:	6810      	ldr	r0, [r2, #0]
 800d6ca:	b188      	cbz	r0, 800d6f0 <__strtok_r+0x2c>
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	460f      	mov	r7, r1
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d6d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d6da:	b91e      	cbnz	r6, 800d6e4 <__strtok_r+0x20>
 800d6dc:	b965      	cbnz	r5, 800d6f8 <__strtok_r+0x34>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	6015      	str	r5, [r2, #0]
 800d6e2:	e005      	b.n	800d6f0 <__strtok_r+0x2c>
 800d6e4:	42b5      	cmp	r5, r6
 800d6e6:	d1f6      	bne.n	800d6d6 <__strtok_r+0x12>
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1f0      	bne.n	800d6ce <__strtok_r+0xa>
 800d6ec:	6014      	str	r4, [r2, #0]
 800d6ee:	7003      	strb	r3, [r0, #0]
 800d6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6f2:	461c      	mov	r4, r3
 800d6f4:	e00c      	b.n	800d710 <__strtok_r+0x4c>
 800d6f6:	b915      	cbnz	r5, 800d6fe <__strtok_r+0x3a>
 800d6f8:	460e      	mov	r6, r1
 800d6fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d6fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d702:	42ab      	cmp	r3, r5
 800d704:	d1f7      	bne.n	800d6f6 <__strtok_r+0x32>
 800d706:	2b00      	cmp	r3, #0
 800d708:	d0f3      	beq.n	800d6f2 <__strtok_r+0x2e>
 800d70a:	2300      	movs	r3, #0
 800d70c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d710:	6014      	str	r4, [r2, #0]
 800d712:	e7ed      	b.n	800d6f0 <__strtok_r+0x2c>

0800d714 <_close_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	2300      	movs	r3, #0
 800d718:	4d05      	ldr	r5, [pc, #20]	; (800d730 <_close_r+0x1c>)
 800d71a:	4604      	mov	r4, r0
 800d71c:	4608      	mov	r0, r1
 800d71e:	602b      	str	r3, [r5, #0]
 800d720:	f7f4 fb64 	bl	8001dec <_close>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	d102      	bne.n	800d72e <_close_r+0x1a>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	b103      	cbz	r3, 800d72e <_close_r+0x1a>
 800d72c:	6023      	str	r3, [r4, #0]
 800d72e:	bd38      	pop	{r3, r4, r5, pc}
 800d730:	20003344 	.word	0x20003344

0800d734 <_reclaim_reent>:
 800d734:	4b29      	ldr	r3, [pc, #164]	; (800d7dc <_reclaim_reent+0xa8>)
 800d736:	b570      	push	{r4, r5, r6, lr}
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4604      	mov	r4, r0
 800d73c:	4283      	cmp	r3, r0
 800d73e:	d04b      	beq.n	800d7d8 <_reclaim_reent+0xa4>
 800d740:	69c3      	ldr	r3, [r0, #28]
 800d742:	b143      	cbz	r3, 800d756 <_reclaim_reent+0x22>
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d144      	bne.n	800d7d4 <_reclaim_reent+0xa0>
 800d74a:	69e3      	ldr	r3, [r4, #28]
 800d74c:	6819      	ldr	r1, [r3, #0]
 800d74e:	b111      	cbz	r1, 800d756 <_reclaim_reent+0x22>
 800d750:	4620      	mov	r0, r4
 800d752:	f000 f8ed 	bl	800d930 <_free_r>
 800d756:	6961      	ldr	r1, [r4, #20]
 800d758:	b111      	cbz	r1, 800d760 <_reclaim_reent+0x2c>
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 f8e8 	bl	800d930 <_free_r>
 800d760:	69e1      	ldr	r1, [r4, #28]
 800d762:	b111      	cbz	r1, 800d76a <_reclaim_reent+0x36>
 800d764:	4620      	mov	r0, r4
 800d766:	f000 f8e3 	bl	800d930 <_free_r>
 800d76a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d76c:	b111      	cbz	r1, 800d774 <_reclaim_reent+0x40>
 800d76e:	4620      	mov	r0, r4
 800d770:	f000 f8de 	bl	800d930 <_free_r>
 800d774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d776:	b111      	cbz	r1, 800d77e <_reclaim_reent+0x4a>
 800d778:	4620      	mov	r0, r4
 800d77a:	f000 f8d9 	bl	800d930 <_free_r>
 800d77e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d780:	b111      	cbz	r1, 800d788 <_reclaim_reent+0x54>
 800d782:	4620      	mov	r0, r4
 800d784:	f000 f8d4 	bl	800d930 <_free_r>
 800d788:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d78a:	b111      	cbz	r1, 800d792 <_reclaim_reent+0x5e>
 800d78c:	4620      	mov	r0, r4
 800d78e:	f000 f8cf 	bl	800d930 <_free_r>
 800d792:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d794:	b111      	cbz	r1, 800d79c <_reclaim_reent+0x68>
 800d796:	4620      	mov	r0, r4
 800d798:	f000 f8ca 	bl	800d930 <_free_r>
 800d79c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d79e:	b111      	cbz	r1, 800d7a6 <_reclaim_reent+0x72>
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f000 f8c5 	bl	800d930 <_free_r>
 800d7a6:	6a23      	ldr	r3, [r4, #32]
 800d7a8:	b1b3      	cbz	r3, 800d7d8 <_reclaim_reent+0xa4>
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7b0:	4718      	bx	r3
 800d7b2:	5949      	ldr	r1, [r1, r5]
 800d7b4:	b941      	cbnz	r1, 800d7c8 <_reclaim_reent+0x94>
 800d7b6:	3504      	adds	r5, #4
 800d7b8:	69e3      	ldr	r3, [r4, #28]
 800d7ba:	2d80      	cmp	r5, #128	; 0x80
 800d7bc:	68d9      	ldr	r1, [r3, #12]
 800d7be:	d1f8      	bne.n	800d7b2 <_reclaim_reent+0x7e>
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f000 f8b5 	bl	800d930 <_free_r>
 800d7c6:	e7c0      	b.n	800d74a <_reclaim_reent+0x16>
 800d7c8:	680e      	ldr	r6, [r1, #0]
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f000 f8b0 	bl	800d930 <_free_r>
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	e7ef      	b.n	800d7b4 <_reclaim_reent+0x80>
 800d7d4:	2500      	movs	r5, #0
 800d7d6:	e7ef      	b.n	800d7b8 <_reclaim_reent+0x84>
 800d7d8:	bd70      	pop	{r4, r5, r6, pc}
 800d7da:	bf00      	nop
 800d7dc:	20000098 	.word	0x20000098

0800d7e0 <_lseek_r>:
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	4d05      	ldr	r5, [pc, #20]	; (800d800 <_lseek_r+0x20>)
 800d7ec:	602a      	str	r2, [r5, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f7f4 fb20 	bl	8001e34 <_lseek>
 800d7f4:	1c43      	adds	r3, r0, #1
 800d7f6:	d102      	bne.n	800d7fe <_lseek_r+0x1e>
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	b103      	cbz	r3, 800d7fe <_lseek_r+0x1e>
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	20003344 	.word	0x20003344

0800d804 <_read_r>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	4611      	mov	r1, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	4d05      	ldr	r5, [pc, #20]	; (800d824 <_read_r+0x20>)
 800d810:	602a      	str	r2, [r5, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	f7f4 fab1 	bl	8001d7a <_read>
 800d818:	1c43      	adds	r3, r0, #1
 800d81a:	d102      	bne.n	800d822 <_read_r+0x1e>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	b103      	cbz	r3, 800d822 <_read_r+0x1e>
 800d820:	6023      	str	r3, [r4, #0]
 800d822:	bd38      	pop	{r3, r4, r5, pc}
 800d824:	20003344 	.word	0x20003344

0800d828 <_sbrk_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	2300      	movs	r3, #0
 800d82c:	4d05      	ldr	r5, [pc, #20]	; (800d844 <_sbrk_r+0x1c>)
 800d82e:	4604      	mov	r4, r0
 800d830:	4608      	mov	r0, r1
 800d832:	602b      	str	r3, [r5, #0]
 800d834:	f7f4 fb0a 	bl	8001e4c <_sbrk>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d102      	bne.n	800d842 <_sbrk_r+0x1a>
 800d83c:	682b      	ldr	r3, [r5, #0]
 800d83e:	b103      	cbz	r3, 800d842 <_sbrk_r+0x1a>
 800d840:	6023      	str	r3, [r4, #0]
 800d842:	bd38      	pop	{r3, r4, r5, pc}
 800d844:	20003344 	.word	0x20003344

0800d848 <_write_r>:
 800d848:	b538      	push	{r3, r4, r5, lr}
 800d84a:	4604      	mov	r4, r0
 800d84c:	4608      	mov	r0, r1
 800d84e:	4611      	mov	r1, r2
 800d850:	2200      	movs	r2, #0
 800d852:	4d05      	ldr	r5, [pc, #20]	; (800d868 <_write_r+0x20>)
 800d854:	602a      	str	r2, [r5, #0]
 800d856:	461a      	mov	r2, r3
 800d858:	f7f4 faac 	bl	8001db4 <_write>
 800d85c:	1c43      	adds	r3, r0, #1
 800d85e:	d102      	bne.n	800d866 <_write_r+0x1e>
 800d860:	682b      	ldr	r3, [r5, #0]
 800d862:	b103      	cbz	r3, 800d866 <_write_r+0x1e>
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	bd38      	pop	{r3, r4, r5, pc}
 800d868:	20003344 	.word	0x20003344

0800d86c <__errno>:
 800d86c:	4b01      	ldr	r3, [pc, #4]	; (800d874 <__errno+0x8>)
 800d86e:	6818      	ldr	r0, [r3, #0]
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	20000098 	.word	0x20000098

0800d878 <__libc_init_array>:
 800d878:	b570      	push	{r4, r5, r6, lr}
 800d87a:	2600      	movs	r6, #0
 800d87c:	4d0c      	ldr	r5, [pc, #48]	; (800d8b0 <__libc_init_array+0x38>)
 800d87e:	4c0d      	ldr	r4, [pc, #52]	; (800d8b4 <__libc_init_array+0x3c>)
 800d880:	1b64      	subs	r4, r4, r5
 800d882:	10a4      	asrs	r4, r4, #2
 800d884:	42a6      	cmp	r6, r4
 800d886:	d109      	bne.n	800d89c <__libc_init_array+0x24>
 800d888:	f000 ff2e 	bl	800e6e8 <_init>
 800d88c:	2600      	movs	r6, #0
 800d88e:	4d0a      	ldr	r5, [pc, #40]	; (800d8b8 <__libc_init_array+0x40>)
 800d890:	4c0a      	ldr	r4, [pc, #40]	; (800d8bc <__libc_init_array+0x44>)
 800d892:	1b64      	subs	r4, r4, r5
 800d894:	10a4      	asrs	r4, r4, #2
 800d896:	42a6      	cmp	r6, r4
 800d898:	d105      	bne.n	800d8a6 <__libc_init_array+0x2e>
 800d89a:	bd70      	pop	{r4, r5, r6, pc}
 800d89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8a0:	4798      	blx	r3
 800d8a2:	3601      	adds	r6, #1
 800d8a4:	e7ee      	b.n	800d884 <__libc_init_array+0xc>
 800d8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8aa:	4798      	blx	r3
 800d8ac:	3601      	adds	r6, #1
 800d8ae:	e7f2      	b.n	800d896 <__libc_init_array+0x1e>
 800d8b0:	0800ec84 	.word	0x0800ec84
 800d8b4:	0800ec84 	.word	0x0800ec84
 800d8b8:	0800ec84 	.word	0x0800ec84
 800d8bc:	0800ec88 	.word	0x0800ec88

0800d8c0 <__retarget_lock_init_recursive>:
 800d8c0:	4770      	bx	lr

0800d8c2 <__retarget_lock_acquire_recursive>:
 800d8c2:	4770      	bx	lr

0800d8c4 <__retarget_lock_release_recursive>:
 800d8c4:	4770      	bx	lr

0800d8c6 <strcpy>:
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8cc:	f803 2b01 	strb.w	r2, [r3], #1
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	d1f9      	bne.n	800d8c8 <strcpy+0x2>
 800d8d4:	4770      	bx	lr

0800d8d6 <memcpy>:
 800d8d6:	440a      	add	r2, r1
 800d8d8:	4291      	cmp	r1, r2
 800d8da:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8de:	d100      	bne.n	800d8e2 <memcpy+0xc>
 800d8e0:	4770      	bx	lr
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8e8:	4291      	cmp	r1, r2
 800d8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8ee:	d1f9      	bne.n	800d8e4 <memcpy+0xe>
 800d8f0:	bd10      	pop	{r4, pc}
	...

0800d8f4 <__assert_func>:
 800d8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8f6:	4614      	mov	r4, r2
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	4b09      	ldr	r3, [pc, #36]	; (800d920 <__assert_func+0x2c>)
 800d8fc:	4605      	mov	r5, r0
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68d8      	ldr	r0, [r3, #12]
 800d902:	b14c      	cbz	r4, 800d918 <__assert_func+0x24>
 800d904:	4b07      	ldr	r3, [pc, #28]	; (800d924 <__assert_func+0x30>)
 800d906:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d90a:	9100      	str	r1, [sp, #0]
 800d90c:	462b      	mov	r3, r5
 800d90e:	4906      	ldr	r1, [pc, #24]	; (800d928 <__assert_func+0x34>)
 800d910:	f000 fbec 	bl	800e0ec <fiprintf>
 800d914:	f000 fc0a 	bl	800e12c <abort>
 800d918:	4b04      	ldr	r3, [pc, #16]	; (800d92c <__assert_func+0x38>)
 800d91a:	461c      	mov	r4, r3
 800d91c:	e7f3      	b.n	800d906 <__assert_func+0x12>
 800d91e:	bf00      	nop
 800d920:	20000098 	.word	0x20000098
 800d924:	0800ec12 	.word	0x0800ec12
 800d928:	0800ec1f 	.word	0x0800ec1f
 800d92c:	0800ec4d 	.word	0x0800ec4d

0800d930 <_free_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4605      	mov	r5, r0
 800d934:	2900      	cmp	r1, #0
 800d936:	d040      	beq.n	800d9ba <_free_r+0x8a>
 800d938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d93c:	1f0c      	subs	r4, r1, #4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	bfb8      	it	lt
 800d942:	18e4      	addlt	r4, r4, r3
 800d944:	f7ff fc82 	bl	800d24c <__malloc_lock>
 800d948:	4a1c      	ldr	r2, [pc, #112]	; (800d9bc <_free_r+0x8c>)
 800d94a:	6813      	ldr	r3, [r2, #0]
 800d94c:	b933      	cbnz	r3, 800d95c <_free_r+0x2c>
 800d94e:	6063      	str	r3, [r4, #4]
 800d950:	6014      	str	r4, [r2, #0]
 800d952:	4628      	mov	r0, r5
 800d954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d958:	f7ff bc7e 	b.w	800d258 <__malloc_unlock>
 800d95c:	42a3      	cmp	r3, r4
 800d95e:	d908      	bls.n	800d972 <_free_r+0x42>
 800d960:	6820      	ldr	r0, [r4, #0]
 800d962:	1821      	adds	r1, r4, r0
 800d964:	428b      	cmp	r3, r1
 800d966:	bf01      	itttt	eq
 800d968:	6819      	ldreq	r1, [r3, #0]
 800d96a:	685b      	ldreq	r3, [r3, #4]
 800d96c:	1809      	addeq	r1, r1, r0
 800d96e:	6021      	streq	r1, [r4, #0]
 800d970:	e7ed      	b.n	800d94e <_free_r+0x1e>
 800d972:	461a      	mov	r2, r3
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	b10b      	cbz	r3, 800d97c <_free_r+0x4c>
 800d978:	42a3      	cmp	r3, r4
 800d97a:	d9fa      	bls.n	800d972 <_free_r+0x42>
 800d97c:	6811      	ldr	r1, [r2, #0]
 800d97e:	1850      	adds	r0, r2, r1
 800d980:	42a0      	cmp	r0, r4
 800d982:	d10b      	bne.n	800d99c <_free_r+0x6c>
 800d984:	6820      	ldr	r0, [r4, #0]
 800d986:	4401      	add	r1, r0
 800d988:	1850      	adds	r0, r2, r1
 800d98a:	4283      	cmp	r3, r0
 800d98c:	6011      	str	r1, [r2, #0]
 800d98e:	d1e0      	bne.n	800d952 <_free_r+0x22>
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	4408      	add	r0, r1
 800d996:	6010      	str	r0, [r2, #0]
 800d998:	6053      	str	r3, [r2, #4]
 800d99a:	e7da      	b.n	800d952 <_free_r+0x22>
 800d99c:	d902      	bls.n	800d9a4 <_free_r+0x74>
 800d99e:	230c      	movs	r3, #12
 800d9a0:	602b      	str	r3, [r5, #0]
 800d9a2:	e7d6      	b.n	800d952 <_free_r+0x22>
 800d9a4:	6820      	ldr	r0, [r4, #0]
 800d9a6:	1821      	adds	r1, r4, r0
 800d9a8:	428b      	cmp	r3, r1
 800d9aa:	bf01      	itttt	eq
 800d9ac:	6819      	ldreq	r1, [r3, #0]
 800d9ae:	685b      	ldreq	r3, [r3, #4]
 800d9b0:	1809      	addeq	r1, r1, r0
 800d9b2:	6021      	streq	r1, [r4, #0]
 800d9b4:	6063      	str	r3, [r4, #4]
 800d9b6:	6054      	str	r4, [r2, #4]
 800d9b8:	e7cb      	b.n	800d952 <_free_r+0x22>
 800d9ba:	bd38      	pop	{r3, r4, r5, pc}
 800d9bc:	20003200 	.word	0x20003200

0800d9c0 <__ssputs_r>:
 800d9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c4:	461f      	mov	r7, r3
 800d9c6:	688e      	ldr	r6, [r1, #8]
 800d9c8:	4682      	mov	sl, r0
 800d9ca:	42be      	cmp	r6, r7
 800d9cc:	460c      	mov	r4, r1
 800d9ce:	4690      	mov	r8, r2
 800d9d0:	680b      	ldr	r3, [r1, #0]
 800d9d2:	d82c      	bhi.n	800da2e <__ssputs_r+0x6e>
 800d9d4:	898a      	ldrh	r2, [r1, #12]
 800d9d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9da:	d026      	beq.n	800da2a <__ssputs_r+0x6a>
 800d9dc:	6965      	ldr	r5, [r4, #20]
 800d9de:	6909      	ldr	r1, [r1, #16]
 800d9e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9e4:	eba3 0901 	sub.w	r9, r3, r1
 800d9e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9ec:	1c7b      	adds	r3, r7, #1
 800d9ee:	444b      	add	r3, r9
 800d9f0:	106d      	asrs	r5, r5, #1
 800d9f2:	429d      	cmp	r5, r3
 800d9f4:	bf38      	it	cc
 800d9f6:	461d      	movcc	r5, r3
 800d9f8:	0553      	lsls	r3, r2, #21
 800d9fa:	d527      	bpl.n	800da4c <__ssputs_r+0x8c>
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	f7ff fba5 	bl	800d14c <_malloc_r>
 800da02:	4606      	mov	r6, r0
 800da04:	b360      	cbz	r0, 800da60 <__ssputs_r+0xa0>
 800da06:	464a      	mov	r2, r9
 800da08:	6921      	ldr	r1, [r4, #16]
 800da0a:	f7ff ff64 	bl	800d8d6 <memcpy>
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da18:	81a3      	strh	r3, [r4, #12]
 800da1a:	6126      	str	r6, [r4, #16]
 800da1c:	444e      	add	r6, r9
 800da1e:	6026      	str	r6, [r4, #0]
 800da20:	463e      	mov	r6, r7
 800da22:	6165      	str	r5, [r4, #20]
 800da24:	eba5 0509 	sub.w	r5, r5, r9
 800da28:	60a5      	str	r5, [r4, #8]
 800da2a:	42be      	cmp	r6, r7
 800da2c:	d900      	bls.n	800da30 <__ssputs_r+0x70>
 800da2e:	463e      	mov	r6, r7
 800da30:	4632      	mov	r2, r6
 800da32:	4641      	mov	r1, r8
 800da34:	6820      	ldr	r0, [r4, #0]
 800da36:	f7ff fdef 	bl	800d618 <memmove>
 800da3a:	2000      	movs	r0, #0
 800da3c:	68a3      	ldr	r3, [r4, #8]
 800da3e:	1b9b      	subs	r3, r3, r6
 800da40:	60a3      	str	r3, [r4, #8]
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	4433      	add	r3, r6
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da4c:	462a      	mov	r2, r5
 800da4e:	f000 fb74 	bl	800e13a <_realloc_r>
 800da52:	4606      	mov	r6, r0
 800da54:	2800      	cmp	r0, #0
 800da56:	d1e0      	bne.n	800da1a <__ssputs_r+0x5a>
 800da58:	4650      	mov	r0, sl
 800da5a:	6921      	ldr	r1, [r4, #16]
 800da5c:	f7ff ff68 	bl	800d930 <_free_r>
 800da60:	230c      	movs	r3, #12
 800da62:	f8ca 3000 	str.w	r3, [sl]
 800da66:	89a3      	ldrh	r3, [r4, #12]
 800da68:	f04f 30ff 	mov.w	r0, #4294967295
 800da6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da70:	81a3      	strh	r3, [r4, #12]
 800da72:	e7e9      	b.n	800da48 <__ssputs_r+0x88>

0800da74 <_svfiprintf_r>:
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	4698      	mov	r8, r3
 800da7a:	898b      	ldrh	r3, [r1, #12]
 800da7c:	4607      	mov	r7, r0
 800da7e:	061b      	lsls	r3, r3, #24
 800da80:	460d      	mov	r5, r1
 800da82:	4614      	mov	r4, r2
 800da84:	b09d      	sub	sp, #116	; 0x74
 800da86:	d50e      	bpl.n	800daa6 <_svfiprintf_r+0x32>
 800da88:	690b      	ldr	r3, [r1, #16]
 800da8a:	b963      	cbnz	r3, 800daa6 <_svfiprintf_r+0x32>
 800da8c:	2140      	movs	r1, #64	; 0x40
 800da8e:	f7ff fb5d 	bl	800d14c <_malloc_r>
 800da92:	6028      	str	r0, [r5, #0]
 800da94:	6128      	str	r0, [r5, #16]
 800da96:	b920      	cbnz	r0, 800daa2 <_svfiprintf_r+0x2e>
 800da98:	230c      	movs	r3, #12
 800da9a:	603b      	str	r3, [r7, #0]
 800da9c:	f04f 30ff 	mov.w	r0, #4294967295
 800daa0:	e0d0      	b.n	800dc44 <_svfiprintf_r+0x1d0>
 800daa2:	2340      	movs	r3, #64	; 0x40
 800daa4:	616b      	str	r3, [r5, #20]
 800daa6:	2300      	movs	r3, #0
 800daa8:	9309      	str	r3, [sp, #36]	; 0x24
 800daaa:	2320      	movs	r3, #32
 800daac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dab0:	2330      	movs	r3, #48	; 0x30
 800dab2:	f04f 0901 	mov.w	r9, #1
 800dab6:	f8cd 800c 	str.w	r8, [sp, #12]
 800daba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800dc5c <_svfiprintf_r+0x1e8>
 800dabe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dac2:	4623      	mov	r3, r4
 800dac4:	469a      	mov	sl, r3
 800dac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daca:	b10a      	cbz	r2, 800dad0 <_svfiprintf_r+0x5c>
 800dacc:	2a25      	cmp	r2, #37	; 0x25
 800dace:	d1f9      	bne.n	800dac4 <_svfiprintf_r+0x50>
 800dad0:	ebba 0b04 	subs.w	fp, sl, r4
 800dad4:	d00b      	beq.n	800daee <_svfiprintf_r+0x7a>
 800dad6:	465b      	mov	r3, fp
 800dad8:	4622      	mov	r2, r4
 800dada:	4629      	mov	r1, r5
 800dadc:	4638      	mov	r0, r7
 800dade:	f7ff ff6f 	bl	800d9c0 <__ssputs_r>
 800dae2:	3001      	adds	r0, #1
 800dae4:	f000 80a9 	beq.w	800dc3a <_svfiprintf_r+0x1c6>
 800dae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daea:	445a      	add	r2, fp
 800daec:	9209      	str	r2, [sp, #36]	; 0x24
 800daee:	f89a 3000 	ldrb.w	r3, [sl]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f000 80a1 	beq.w	800dc3a <_svfiprintf_r+0x1c6>
 800daf8:	2300      	movs	r3, #0
 800dafa:	f04f 32ff 	mov.w	r2, #4294967295
 800dafe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db02:	f10a 0a01 	add.w	sl, sl, #1
 800db06:	9304      	str	r3, [sp, #16]
 800db08:	9307      	str	r3, [sp, #28]
 800db0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db0e:	931a      	str	r3, [sp, #104]	; 0x68
 800db10:	4654      	mov	r4, sl
 800db12:	2205      	movs	r2, #5
 800db14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db18:	4850      	ldr	r0, [pc, #320]	; (800dc5c <_svfiprintf_r+0x1e8>)
 800db1a:	f000 faf9 	bl	800e110 <memchr>
 800db1e:	9a04      	ldr	r2, [sp, #16]
 800db20:	b9d8      	cbnz	r0, 800db5a <_svfiprintf_r+0xe6>
 800db22:	06d0      	lsls	r0, r2, #27
 800db24:	bf44      	itt	mi
 800db26:	2320      	movmi	r3, #32
 800db28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db2c:	0711      	lsls	r1, r2, #28
 800db2e:	bf44      	itt	mi
 800db30:	232b      	movmi	r3, #43	; 0x2b
 800db32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db36:	f89a 3000 	ldrb.w	r3, [sl]
 800db3a:	2b2a      	cmp	r3, #42	; 0x2a
 800db3c:	d015      	beq.n	800db6a <_svfiprintf_r+0xf6>
 800db3e:	4654      	mov	r4, sl
 800db40:	2000      	movs	r0, #0
 800db42:	f04f 0c0a 	mov.w	ip, #10
 800db46:	9a07      	ldr	r2, [sp, #28]
 800db48:	4621      	mov	r1, r4
 800db4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db4e:	3b30      	subs	r3, #48	; 0x30
 800db50:	2b09      	cmp	r3, #9
 800db52:	d94d      	bls.n	800dbf0 <_svfiprintf_r+0x17c>
 800db54:	b1b0      	cbz	r0, 800db84 <_svfiprintf_r+0x110>
 800db56:	9207      	str	r2, [sp, #28]
 800db58:	e014      	b.n	800db84 <_svfiprintf_r+0x110>
 800db5a:	eba0 0308 	sub.w	r3, r0, r8
 800db5e:	fa09 f303 	lsl.w	r3, r9, r3
 800db62:	4313      	orrs	r3, r2
 800db64:	46a2      	mov	sl, r4
 800db66:	9304      	str	r3, [sp, #16]
 800db68:	e7d2      	b.n	800db10 <_svfiprintf_r+0x9c>
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	1d19      	adds	r1, r3, #4
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	9103      	str	r1, [sp, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	bfbb      	ittet	lt
 800db76:	425b      	neglt	r3, r3
 800db78:	f042 0202 	orrlt.w	r2, r2, #2
 800db7c:	9307      	strge	r3, [sp, #28]
 800db7e:	9307      	strlt	r3, [sp, #28]
 800db80:	bfb8      	it	lt
 800db82:	9204      	strlt	r2, [sp, #16]
 800db84:	7823      	ldrb	r3, [r4, #0]
 800db86:	2b2e      	cmp	r3, #46	; 0x2e
 800db88:	d10c      	bne.n	800dba4 <_svfiprintf_r+0x130>
 800db8a:	7863      	ldrb	r3, [r4, #1]
 800db8c:	2b2a      	cmp	r3, #42	; 0x2a
 800db8e:	d134      	bne.n	800dbfa <_svfiprintf_r+0x186>
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	3402      	adds	r4, #2
 800db94:	1d1a      	adds	r2, r3, #4
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	9203      	str	r2, [sp, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	bfb8      	it	lt
 800db9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800dba2:	9305      	str	r3, [sp, #20]
 800dba4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800dc60 <_svfiprintf_r+0x1ec>
 800dba8:	2203      	movs	r2, #3
 800dbaa:	4650      	mov	r0, sl
 800dbac:	7821      	ldrb	r1, [r4, #0]
 800dbae:	f000 faaf 	bl	800e110 <memchr>
 800dbb2:	b138      	cbz	r0, 800dbc4 <_svfiprintf_r+0x150>
 800dbb4:	2240      	movs	r2, #64	; 0x40
 800dbb6:	9b04      	ldr	r3, [sp, #16]
 800dbb8:	eba0 000a 	sub.w	r0, r0, sl
 800dbbc:	4082      	lsls	r2, r0
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	3401      	adds	r4, #1
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc8:	2206      	movs	r2, #6
 800dbca:	4826      	ldr	r0, [pc, #152]	; (800dc64 <_svfiprintf_r+0x1f0>)
 800dbcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbd0:	f000 fa9e 	bl	800e110 <memchr>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d038      	beq.n	800dc4a <_svfiprintf_r+0x1d6>
 800dbd8:	4b23      	ldr	r3, [pc, #140]	; (800dc68 <_svfiprintf_r+0x1f4>)
 800dbda:	bb1b      	cbnz	r3, 800dc24 <_svfiprintf_r+0x1b0>
 800dbdc:	9b03      	ldr	r3, [sp, #12]
 800dbde:	3307      	adds	r3, #7
 800dbe0:	f023 0307 	bic.w	r3, r3, #7
 800dbe4:	3308      	adds	r3, #8
 800dbe6:	9303      	str	r3, [sp, #12]
 800dbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbea:	4433      	add	r3, r6
 800dbec:	9309      	str	r3, [sp, #36]	; 0x24
 800dbee:	e768      	b.n	800dac2 <_svfiprintf_r+0x4e>
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	2001      	movs	r0, #1
 800dbf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbf8:	e7a6      	b.n	800db48 <_svfiprintf_r+0xd4>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f04f 0c0a 	mov.w	ip, #10
 800dc00:	4619      	mov	r1, r3
 800dc02:	3401      	adds	r4, #1
 800dc04:	9305      	str	r3, [sp, #20]
 800dc06:	4620      	mov	r0, r4
 800dc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc0c:	3a30      	subs	r2, #48	; 0x30
 800dc0e:	2a09      	cmp	r2, #9
 800dc10:	d903      	bls.n	800dc1a <_svfiprintf_r+0x1a6>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d0c6      	beq.n	800dba4 <_svfiprintf_r+0x130>
 800dc16:	9105      	str	r1, [sp, #20]
 800dc18:	e7c4      	b.n	800dba4 <_svfiprintf_r+0x130>
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc22:	e7f0      	b.n	800dc06 <_svfiprintf_r+0x192>
 800dc24:	ab03      	add	r3, sp, #12
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	462a      	mov	r2, r5
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	4b0f      	ldr	r3, [pc, #60]	; (800dc6c <_svfiprintf_r+0x1f8>)
 800dc2e:	a904      	add	r1, sp, #16
 800dc30:	f3af 8000 	nop.w
 800dc34:	1c42      	adds	r2, r0, #1
 800dc36:	4606      	mov	r6, r0
 800dc38:	d1d6      	bne.n	800dbe8 <_svfiprintf_r+0x174>
 800dc3a:	89ab      	ldrh	r3, [r5, #12]
 800dc3c:	065b      	lsls	r3, r3, #25
 800dc3e:	f53f af2d 	bmi.w	800da9c <_svfiprintf_r+0x28>
 800dc42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc44:	b01d      	add	sp, #116	; 0x74
 800dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4a:	ab03      	add	r3, sp, #12
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	462a      	mov	r2, r5
 800dc50:	4638      	mov	r0, r7
 800dc52:	4b06      	ldr	r3, [pc, #24]	; (800dc6c <_svfiprintf_r+0x1f8>)
 800dc54:	a904      	add	r1, sp, #16
 800dc56:	f000 f87d 	bl	800dd54 <_printf_i>
 800dc5a:	e7eb      	b.n	800dc34 <_svfiprintf_r+0x1c0>
 800dc5c:	0800ec4e 	.word	0x0800ec4e
 800dc60:	0800ec54 	.word	0x0800ec54
 800dc64:	0800ec58 	.word	0x0800ec58
 800dc68:	00000000 	.word	0x00000000
 800dc6c:	0800d9c1 	.word	0x0800d9c1

0800dc70 <_printf_common>:
 800dc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc74:	4616      	mov	r6, r2
 800dc76:	4699      	mov	r9, r3
 800dc78:	688a      	ldr	r2, [r1, #8]
 800dc7a:	690b      	ldr	r3, [r1, #16]
 800dc7c:	4607      	mov	r7, r0
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	bfb8      	it	lt
 800dc82:	4613      	movlt	r3, r2
 800dc84:	6033      	str	r3, [r6, #0]
 800dc86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc90:	b10a      	cbz	r2, 800dc96 <_printf_common+0x26>
 800dc92:	3301      	adds	r3, #1
 800dc94:	6033      	str	r3, [r6, #0]
 800dc96:	6823      	ldr	r3, [r4, #0]
 800dc98:	0699      	lsls	r1, r3, #26
 800dc9a:	bf42      	ittt	mi
 800dc9c:	6833      	ldrmi	r3, [r6, #0]
 800dc9e:	3302      	addmi	r3, #2
 800dca0:	6033      	strmi	r3, [r6, #0]
 800dca2:	6825      	ldr	r5, [r4, #0]
 800dca4:	f015 0506 	ands.w	r5, r5, #6
 800dca8:	d106      	bne.n	800dcb8 <_printf_common+0x48>
 800dcaa:	f104 0a19 	add.w	sl, r4, #25
 800dcae:	68e3      	ldr	r3, [r4, #12]
 800dcb0:	6832      	ldr	r2, [r6, #0]
 800dcb2:	1a9b      	subs	r3, r3, r2
 800dcb4:	42ab      	cmp	r3, r5
 800dcb6:	dc2b      	bgt.n	800dd10 <_printf_common+0xa0>
 800dcb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcbc:	1e13      	subs	r3, r2, #0
 800dcbe:	6822      	ldr	r2, [r4, #0]
 800dcc0:	bf18      	it	ne
 800dcc2:	2301      	movne	r3, #1
 800dcc4:	0692      	lsls	r2, r2, #26
 800dcc6:	d430      	bmi.n	800dd2a <_printf_common+0xba>
 800dcc8:	4649      	mov	r1, r9
 800dcca:	4638      	mov	r0, r7
 800dccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcd0:	47c0      	blx	r8
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	d023      	beq.n	800dd1e <_printf_common+0xae>
 800dcd6:	6823      	ldr	r3, [r4, #0]
 800dcd8:	6922      	ldr	r2, [r4, #16]
 800dcda:	f003 0306 	and.w	r3, r3, #6
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	bf14      	ite	ne
 800dce2:	2500      	movne	r5, #0
 800dce4:	6833      	ldreq	r3, [r6, #0]
 800dce6:	f04f 0600 	mov.w	r6, #0
 800dcea:	bf08      	it	eq
 800dcec:	68e5      	ldreq	r5, [r4, #12]
 800dcee:	f104 041a 	add.w	r4, r4, #26
 800dcf2:	bf08      	it	eq
 800dcf4:	1aed      	subeq	r5, r5, r3
 800dcf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dcfa:	bf08      	it	eq
 800dcfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd00:	4293      	cmp	r3, r2
 800dd02:	bfc4      	itt	gt
 800dd04:	1a9b      	subgt	r3, r3, r2
 800dd06:	18ed      	addgt	r5, r5, r3
 800dd08:	42b5      	cmp	r5, r6
 800dd0a:	d11a      	bne.n	800dd42 <_printf_common+0xd2>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	e008      	b.n	800dd22 <_printf_common+0xb2>
 800dd10:	2301      	movs	r3, #1
 800dd12:	4652      	mov	r2, sl
 800dd14:	4649      	mov	r1, r9
 800dd16:	4638      	mov	r0, r7
 800dd18:	47c0      	blx	r8
 800dd1a:	3001      	adds	r0, #1
 800dd1c:	d103      	bne.n	800dd26 <_printf_common+0xb6>
 800dd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd26:	3501      	adds	r5, #1
 800dd28:	e7c1      	b.n	800dcae <_printf_common+0x3e>
 800dd2a:	2030      	movs	r0, #48	; 0x30
 800dd2c:	18e1      	adds	r1, r4, r3
 800dd2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd38:	4422      	add	r2, r4
 800dd3a:	3302      	adds	r3, #2
 800dd3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd40:	e7c2      	b.n	800dcc8 <_printf_common+0x58>
 800dd42:	2301      	movs	r3, #1
 800dd44:	4622      	mov	r2, r4
 800dd46:	4649      	mov	r1, r9
 800dd48:	4638      	mov	r0, r7
 800dd4a:	47c0      	blx	r8
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d0e6      	beq.n	800dd1e <_printf_common+0xae>
 800dd50:	3601      	adds	r6, #1
 800dd52:	e7d9      	b.n	800dd08 <_printf_common+0x98>

0800dd54 <_printf_i>:
 800dd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd58:	7e0f      	ldrb	r7, [r1, #24]
 800dd5a:	4691      	mov	r9, r2
 800dd5c:	2f78      	cmp	r7, #120	; 0x78
 800dd5e:	4680      	mov	r8, r0
 800dd60:	460c      	mov	r4, r1
 800dd62:	469a      	mov	sl, r3
 800dd64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd6a:	d807      	bhi.n	800dd7c <_printf_i+0x28>
 800dd6c:	2f62      	cmp	r7, #98	; 0x62
 800dd6e:	d80a      	bhi.n	800dd86 <_printf_i+0x32>
 800dd70:	2f00      	cmp	r7, #0
 800dd72:	f000 80d5 	beq.w	800df20 <_printf_i+0x1cc>
 800dd76:	2f58      	cmp	r7, #88	; 0x58
 800dd78:	f000 80c1 	beq.w	800defe <_printf_i+0x1aa>
 800dd7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd84:	e03a      	b.n	800ddfc <_printf_i+0xa8>
 800dd86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd8a:	2b15      	cmp	r3, #21
 800dd8c:	d8f6      	bhi.n	800dd7c <_printf_i+0x28>
 800dd8e:	a101      	add	r1, pc, #4	; (adr r1, 800dd94 <_printf_i+0x40>)
 800dd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd94:	0800dded 	.word	0x0800dded
 800dd98:	0800de01 	.word	0x0800de01
 800dd9c:	0800dd7d 	.word	0x0800dd7d
 800dda0:	0800dd7d 	.word	0x0800dd7d
 800dda4:	0800dd7d 	.word	0x0800dd7d
 800dda8:	0800dd7d 	.word	0x0800dd7d
 800ddac:	0800de01 	.word	0x0800de01
 800ddb0:	0800dd7d 	.word	0x0800dd7d
 800ddb4:	0800dd7d 	.word	0x0800dd7d
 800ddb8:	0800dd7d 	.word	0x0800dd7d
 800ddbc:	0800dd7d 	.word	0x0800dd7d
 800ddc0:	0800df07 	.word	0x0800df07
 800ddc4:	0800de2d 	.word	0x0800de2d
 800ddc8:	0800dec1 	.word	0x0800dec1
 800ddcc:	0800dd7d 	.word	0x0800dd7d
 800ddd0:	0800dd7d 	.word	0x0800dd7d
 800ddd4:	0800df29 	.word	0x0800df29
 800ddd8:	0800dd7d 	.word	0x0800dd7d
 800dddc:	0800de2d 	.word	0x0800de2d
 800dde0:	0800dd7d 	.word	0x0800dd7d
 800dde4:	0800dd7d 	.word	0x0800dd7d
 800dde8:	0800dec9 	.word	0x0800dec9
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	1d1a      	adds	r2, r3, #4
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	602a      	str	r2, [r5, #0]
 800ddf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e0a0      	b.n	800df42 <_printf_i+0x1ee>
 800de00:	6820      	ldr	r0, [r4, #0]
 800de02:	682b      	ldr	r3, [r5, #0]
 800de04:	0607      	lsls	r7, r0, #24
 800de06:	f103 0104 	add.w	r1, r3, #4
 800de0a:	6029      	str	r1, [r5, #0]
 800de0c:	d501      	bpl.n	800de12 <_printf_i+0xbe>
 800de0e:	681e      	ldr	r6, [r3, #0]
 800de10:	e003      	b.n	800de1a <_printf_i+0xc6>
 800de12:	0646      	lsls	r6, r0, #25
 800de14:	d5fb      	bpl.n	800de0e <_printf_i+0xba>
 800de16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	da03      	bge.n	800de26 <_printf_i+0xd2>
 800de1e:	232d      	movs	r3, #45	; 0x2d
 800de20:	4276      	negs	r6, r6
 800de22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de26:	230a      	movs	r3, #10
 800de28:	4859      	ldr	r0, [pc, #356]	; (800df90 <_printf_i+0x23c>)
 800de2a:	e012      	b.n	800de52 <_printf_i+0xfe>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	6820      	ldr	r0, [r4, #0]
 800de30:	1d19      	adds	r1, r3, #4
 800de32:	6029      	str	r1, [r5, #0]
 800de34:	0605      	lsls	r5, r0, #24
 800de36:	d501      	bpl.n	800de3c <_printf_i+0xe8>
 800de38:	681e      	ldr	r6, [r3, #0]
 800de3a:	e002      	b.n	800de42 <_printf_i+0xee>
 800de3c:	0641      	lsls	r1, r0, #25
 800de3e:	d5fb      	bpl.n	800de38 <_printf_i+0xe4>
 800de40:	881e      	ldrh	r6, [r3, #0]
 800de42:	2f6f      	cmp	r7, #111	; 0x6f
 800de44:	bf0c      	ite	eq
 800de46:	2308      	moveq	r3, #8
 800de48:	230a      	movne	r3, #10
 800de4a:	4851      	ldr	r0, [pc, #324]	; (800df90 <_printf_i+0x23c>)
 800de4c:	2100      	movs	r1, #0
 800de4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de52:	6865      	ldr	r5, [r4, #4]
 800de54:	2d00      	cmp	r5, #0
 800de56:	bfa8      	it	ge
 800de58:	6821      	ldrge	r1, [r4, #0]
 800de5a:	60a5      	str	r5, [r4, #8]
 800de5c:	bfa4      	itt	ge
 800de5e:	f021 0104 	bicge.w	r1, r1, #4
 800de62:	6021      	strge	r1, [r4, #0]
 800de64:	b90e      	cbnz	r6, 800de6a <_printf_i+0x116>
 800de66:	2d00      	cmp	r5, #0
 800de68:	d04b      	beq.n	800df02 <_printf_i+0x1ae>
 800de6a:	4615      	mov	r5, r2
 800de6c:	fbb6 f1f3 	udiv	r1, r6, r3
 800de70:	fb03 6711 	mls	r7, r3, r1, r6
 800de74:	5dc7      	ldrb	r7, [r0, r7]
 800de76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de7a:	4637      	mov	r7, r6
 800de7c:	42bb      	cmp	r3, r7
 800de7e:	460e      	mov	r6, r1
 800de80:	d9f4      	bls.n	800de6c <_printf_i+0x118>
 800de82:	2b08      	cmp	r3, #8
 800de84:	d10b      	bne.n	800de9e <_printf_i+0x14a>
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	07de      	lsls	r6, r3, #31
 800de8a:	d508      	bpl.n	800de9e <_printf_i+0x14a>
 800de8c:	6923      	ldr	r3, [r4, #16]
 800de8e:	6861      	ldr	r1, [r4, #4]
 800de90:	4299      	cmp	r1, r3
 800de92:	bfde      	ittt	le
 800de94:	2330      	movle	r3, #48	; 0x30
 800de96:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de9e:	1b52      	subs	r2, r2, r5
 800dea0:	6122      	str	r2, [r4, #16]
 800dea2:	464b      	mov	r3, r9
 800dea4:	4621      	mov	r1, r4
 800dea6:	4640      	mov	r0, r8
 800dea8:	f8cd a000 	str.w	sl, [sp]
 800deac:	aa03      	add	r2, sp, #12
 800deae:	f7ff fedf 	bl	800dc70 <_printf_common>
 800deb2:	3001      	adds	r0, #1
 800deb4:	d14a      	bne.n	800df4c <_printf_i+0x1f8>
 800deb6:	f04f 30ff 	mov.w	r0, #4294967295
 800deba:	b004      	add	sp, #16
 800debc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dec0:	6823      	ldr	r3, [r4, #0]
 800dec2:	f043 0320 	orr.w	r3, r3, #32
 800dec6:	6023      	str	r3, [r4, #0]
 800dec8:	2778      	movs	r7, #120	; 0x78
 800deca:	4832      	ldr	r0, [pc, #200]	; (800df94 <_printf_i+0x240>)
 800decc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ded0:	6823      	ldr	r3, [r4, #0]
 800ded2:	6829      	ldr	r1, [r5, #0]
 800ded4:	061f      	lsls	r7, r3, #24
 800ded6:	f851 6b04 	ldr.w	r6, [r1], #4
 800deda:	d402      	bmi.n	800dee2 <_printf_i+0x18e>
 800dedc:	065f      	lsls	r7, r3, #25
 800dede:	bf48      	it	mi
 800dee0:	b2b6      	uxthmi	r6, r6
 800dee2:	07df      	lsls	r7, r3, #31
 800dee4:	bf48      	it	mi
 800dee6:	f043 0320 	orrmi.w	r3, r3, #32
 800deea:	6029      	str	r1, [r5, #0]
 800deec:	bf48      	it	mi
 800deee:	6023      	strmi	r3, [r4, #0]
 800def0:	b91e      	cbnz	r6, 800defa <_printf_i+0x1a6>
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	f023 0320 	bic.w	r3, r3, #32
 800def8:	6023      	str	r3, [r4, #0]
 800defa:	2310      	movs	r3, #16
 800defc:	e7a6      	b.n	800de4c <_printf_i+0xf8>
 800defe:	4824      	ldr	r0, [pc, #144]	; (800df90 <_printf_i+0x23c>)
 800df00:	e7e4      	b.n	800decc <_printf_i+0x178>
 800df02:	4615      	mov	r5, r2
 800df04:	e7bd      	b.n	800de82 <_printf_i+0x12e>
 800df06:	682b      	ldr	r3, [r5, #0]
 800df08:	6826      	ldr	r6, [r4, #0]
 800df0a:	1d18      	adds	r0, r3, #4
 800df0c:	6961      	ldr	r1, [r4, #20]
 800df0e:	6028      	str	r0, [r5, #0]
 800df10:	0635      	lsls	r5, r6, #24
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	d501      	bpl.n	800df1a <_printf_i+0x1c6>
 800df16:	6019      	str	r1, [r3, #0]
 800df18:	e002      	b.n	800df20 <_printf_i+0x1cc>
 800df1a:	0670      	lsls	r0, r6, #25
 800df1c:	d5fb      	bpl.n	800df16 <_printf_i+0x1c2>
 800df1e:	8019      	strh	r1, [r3, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	4615      	mov	r5, r2
 800df24:	6123      	str	r3, [r4, #16]
 800df26:	e7bc      	b.n	800dea2 <_printf_i+0x14e>
 800df28:	682b      	ldr	r3, [r5, #0]
 800df2a:	2100      	movs	r1, #0
 800df2c:	1d1a      	adds	r2, r3, #4
 800df2e:	602a      	str	r2, [r5, #0]
 800df30:	681d      	ldr	r5, [r3, #0]
 800df32:	6862      	ldr	r2, [r4, #4]
 800df34:	4628      	mov	r0, r5
 800df36:	f000 f8eb 	bl	800e110 <memchr>
 800df3a:	b108      	cbz	r0, 800df40 <_printf_i+0x1ec>
 800df3c:	1b40      	subs	r0, r0, r5
 800df3e:	6060      	str	r0, [r4, #4]
 800df40:	6863      	ldr	r3, [r4, #4]
 800df42:	6123      	str	r3, [r4, #16]
 800df44:	2300      	movs	r3, #0
 800df46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df4a:	e7aa      	b.n	800dea2 <_printf_i+0x14e>
 800df4c:	462a      	mov	r2, r5
 800df4e:	4649      	mov	r1, r9
 800df50:	4640      	mov	r0, r8
 800df52:	6923      	ldr	r3, [r4, #16]
 800df54:	47d0      	blx	sl
 800df56:	3001      	adds	r0, #1
 800df58:	d0ad      	beq.n	800deb6 <_printf_i+0x162>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	079b      	lsls	r3, r3, #30
 800df5e:	d413      	bmi.n	800df88 <_printf_i+0x234>
 800df60:	68e0      	ldr	r0, [r4, #12]
 800df62:	9b03      	ldr	r3, [sp, #12]
 800df64:	4298      	cmp	r0, r3
 800df66:	bfb8      	it	lt
 800df68:	4618      	movlt	r0, r3
 800df6a:	e7a6      	b.n	800deba <_printf_i+0x166>
 800df6c:	2301      	movs	r3, #1
 800df6e:	4632      	mov	r2, r6
 800df70:	4649      	mov	r1, r9
 800df72:	4640      	mov	r0, r8
 800df74:	47d0      	blx	sl
 800df76:	3001      	adds	r0, #1
 800df78:	d09d      	beq.n	800deb6 <_printf_i+0x162>
 800df7a:	3501      	adds	r5, #1
 800df7c:	68e3      	ldr	r3, [r4, #12]
 800df7e:	9903      	ldr	r1, [sp, #12]
 800df80:	1a5b      	subs	r3, r3, r1
 800df82:	42ab      	cmp	r3, r5
 800df84:	dcf2      	bgt.n	800df6c <_printf_i+0x218>
 800df86:	e7eb      	b.n	800df60 <_printf_i+0x20c>
 800df88:	2500      	movs	r5, #0
 800df8a:	f104 0619 	add.w	r6, r4, #25
 800df8e:	e7f5      	b.n	800df7c <_printf_i+0x228>
 800df90:	0800ec5f 	.word	0x0800ec5f
 800df94:	0800ec70 	.word	0x0800ec70

0800df98 <__sflush_r>:
 800df98:	898a      	ldrh	r2, [r1, #12]
 800df9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9c:	4605      	mov	r5, r0
 800df9e:	0710      	lsls	r0, r2, #28
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	d457      	bmi.n	800e054 <__sflush_r+0xbc>
 800dfa4:	684b      	ldr	r3, [r1, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	dc04      	bgt.n	800dfb4 <__sflush_r+0x1c>
 800dfaa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	dc01      	bgt.n	800dfb4 <__sflush_r+0x1c>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfb6:	2e00      	cmp	r6, #0
 800dfb8:	d0fa      	beq.n	800dfb0 <__sflush_r+0x18>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfc0:	682f      	ldr	r7, [r5, #0]
 800dfc2:	6a21      	ldr	r1, [r4, #32]
 800dfc4:	602b      	str	r3, [r5, #0]
 800dfc6:	d032      	beq.n	800e02e <__sflush_r+0x96>
 800dfc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	075a      	lsls	r2, r3, #29
 800dfce:	d505      	bpl.n	800dfdc <__sflush_r+0x44>
 800dfd0:	6863      	ldr	r3, [r4, #4]
 800dfd2:	1ac0      	subs	r0, r0, r3
 800dfd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfd6:	b10b      	cbz	r3, 800dfdc <__sflush_r+0x44>
 800dfd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfda:	1ac0      	subs	r0, r0, r3
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4602      	mov	r2, r0
 800dfe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	6a21      	ldr	r1, [r4, #32]
 800dfe6:	47b0      	blx	r6
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	d106      	bne.n	800dffc <__sflush_r+0x64>
 800dfee:	6829      	ldr	r1, [r5, #0]
 800dff0:	291d      	cmp	r1, #29
 800dff2:	d82b      	bhi.n	800e04c <__sflush_r+0xb4>
 800dff4:	4a28      	ldr	r2, [pc, #160]	; (800e098 <__sflush_r+0x100>)
 800dff6:	410a      	asrs	r2, r1
 800dff8:	07d6      	lsls	r6, r2, #31
 800dffa:	d427      	bmi.n	800e04c <__sflush_r+0xb4>
 800dffc:	2200      	movs	r2, #0
 800dffe:	6062      	str	r2, [r4, #4]
 800e000:	6922      	ldr	r2, [r4, #16]
 800e002:	04d9      	lsls	r1, r3, #19
 800e004:	6022      	str	r2, [r4, #0]
 800e006:	d504      	bpl.n	800e012 <__sflush_r+0x7a>
 800e008:	1c42      	adds	r2, r0, #1
 800e00a:	d101      	bne.n	800e010 <__sflush_r+0x78>
 800e00c:	682b      	ldr	r3, [r5, #0]
 800e00e:	b903      	cbnz	r3, 800e012 <__sflush_r+0x7a>
 800e010:	6560      	str	r0, [r4, #84]	; 0x54
 800e012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e014:	602f      	str	r7, [r5, #0]
 800e016:	2900      	cmp	r1, #0
 800e018:	d0ca      	beq.n	800dfb0 <__sflush_r+0x18>
 800e01a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e01e:	4299      	cmp	r1, r3
 800e020:	d002      	beq.n	800e028 <__sflush_r+0x90>
 800e022:	4628      	mov	r0, r5
 800e024:	f7ff fc84 	bl	800d930 <_free_r>
 800e028:	2000      	movs	r0, #0
 800e02a:	6360      	str	r0, [r4, #52]	; 0x34
 800e02c:	e7c1      	b.n	800dfb2 <__sflush_r+0x1a>
 800e02e:	2301      	movs	r3, #1
 800e030:	4628      	mov	r0, r5
 800e032:	47b0      	blx	r6
 800e034:	1c41      	adds	r1, r0, #1
 800e036:	d1c8      	bne.n	800dfca <__sflush_r+0x32>
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d0c5      	beq.n	800dfca <__sflush_r+0x32>
 800e03e:	2b1d      	cmp	r3, #29
 800e040:	d001      	beq.n	800e046 <__sflush_r+0xae>
 800e042:	2b16      	cmp	r3, #22
 800e044:	d101      	bne.n	800e04a <__sflush_r+0xb2>
 800e046:	602f      	str	r7, [r5, #0]
 800e048:	e7b2      	b.n	800dfb0 <__sflush_r+0x18>
 800e04a:	89a3      	ldrh	r3, [r4, #12]
 800e04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e050:	81a3      	strh	r3, [r4, #12]
 800e052:	e7ae      	b.n	800dfb2 <__sflush_r+0x1a>
 800e054:	690f      	ldr	r7, [r1, #16]
 800e056:	2f00      	cmp	r7, #0
 800e058:	d0aa      	beq.n	800dfb0 <__sflush_r+0x18>
 800e05a:	0793      	lsls	r3, r2, #30
 800e05c:	bf18      	it	ne
 800e05e:	2300      	movne	r3, #0
 800e060:	680e      	ldr	r6, [r1, #0]
 800e062:	bf08      	it	eq
 800e064:	694b      	ldreq	r3, [r1, #20]
 800e066:	1bf6      	subs	r6, r6, r7
 800e068:	600f      	str	r7, [r1, #0]
 800e06a:	608b      	str	r3, [r1, #8]
 800e06c:	2e00      	cmp	r6, #0
 800e06e:	dd9f      	ble.n	800dfb0 <__sflush_r+0x18>
 800e070:	4633      	mov	r3, r6
 800e072:	463a      	mov	r2, r7
 800e074:	4628      	mov	r0, r5
 800e076:	6a21      	ldr	r1, [r4, #32]
 800e078:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e07c:	47e0      	blx	ip
 800e07e:	2800      	cmp	r0, #0
 800e080:	dc06      	bgt.n	800e090 <__sflush_r+0xf8>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	f04f 30ff 	mov.w	r0, #4294967295
 800e088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e08c:	81a3      	strh	r3, [r4, #12]
 800e08e:	e790      	b.n	800dfb2 <__sflush_r+0x1a>
 800e090:	4407      	add	r7, r0
 800e092:	1a36      	subs	r6, r6, r0
 800e094:	e7ea      	b.n	800e06c <__sflush_r+0xd4>
 800e096:	bf00      	nop
 800e098:	dfbffffe 	.word	0xdfbffffe

0800e09c <_fflush_r>:
 800e09c:	b538      	push	{r3, r4, r5, lr}
 800e09e:	690b      	ldr	r3, [r1, #16]
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	460c      	mov	r4, r1
 800e0a4:	b913      	cbnz	r3, 800e0ac <_fflush_r+0x10>
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	b118      	cbz	r0, 800e0b6 <_fflush_r+0x1a>
 800e0ae:	6a03      	ldr	r3, [r0, #32]
 800e0b0:	b90b      	cbnz	r3, 800e0b6 <_fflush_r+0x1a>
 800e0b2:	f7ff f9eb 	bl	800d48c <__sinit>
 800e0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d0f3      	beq.n	800e0a6 <_fflush_r+0xa>
 800e0be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0c0:	07d0      	lsls	r0, r2, #31
 800e0c2:	d404      	bmi.n	800e0ce <_fflush_r+0x32>
 800e0c4:	0599      	lsls	r1, r3, #22
 800e0c6:	d402      	bmi.n	800e0ce <_fflush_r+0x32>
 800e0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0ca:	f7ff fbfa 	bl	800d8c2 <__retarget_lock_acquire_recursive>
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	f7ff ff61 	bl	800df98 <__sflush_r>
 800e0d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0d8:	4605      	mov	r5, r0
 800e0da:	07da      	lsls	r2, r3, #31
 800e0dc:	d4e4      	bmi.n	800e0a8 <_fflush_r+0xc>
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	059b      	lsls	r3, r3, #22
 800e0e2:	d4e1      	bmi.n	800e0a8 <_fflush_r+0xc>
 800e0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0e6:	f7ff fbed 	bl	800d8c4 <__retarget_lock_release_recursive>
 800e0ea:	e7dd      	b.n	800e0a8 <_fflush_r+0xc>

0800e0ec <fiprintf>:
 800e0ec:	b40e      	push	{r1, r2, r3}
 800e0ee:	b503      	push	{r0, r1, lr}
 800e0f0:	4601      	mov	r1, r0
 800e0f2:	ab03      	add	r3, sp, #12
 800e0f4:	4805      	ldr	r0, [pc, #20]	; (800e10c <fiprintf+0x20>)
 800e0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0fa:	6800      	ldr	r0, [r0, #0]
 800e0fc:	9301      	str	r3, [sp, #4]
 800e0fe:	f000 f873 	bl	800e1e8 <_vfiprintf_r>
 800e102:	b002      	add	sp, #8
 800e104:	f85d eb04 	ldr.w	lr, [sp], #4
 800e108:	b003      	add	sp, #12
 800e10a:	4770      	bx	lr
 800e10c:	20000098 	.word	0x20000098

0800e110 <memchr>:
 800e110:	4603      	mov	r3, r0
 800e112:	b510      	push	{r4, lr}
 800e114:	b2c9      	uxtb	r1, r1
 800e116:	4402      	add	r2, r0
 800e118:	4293      	cmp	r3, r2
 800e11a:	4618      	mov	r0, r3
 800e11c:	d101      	bne.n	800e122 <memchr+0x12>
 800e11e:	2000      	movs	r0, #0
 800e120:	e003      	b.n	800e12a <memchr+0x1a>
 800e122:	7804      	ldrb	r4, [r0, #0]
 800e124:	3301      	adds	r3, #1
 800e126:	428c      	cmp	r4, r1
 800e128:	d1f6      	bne.n	800e118 <memchr+0x8>
 800e12a:	bd10      	pop	{r4, pc}

0800e12c <abort>:
 800e12c:	2006      	movs	r0, #6
 800e12e:	b508      	push	{r3, lr}
 800e130:	f000 fa32 	bl	800e598 <raise>
 800e134:	2001      	movs	r0, #1
 800e136:	f7f3 fe16 	bl	8001d66 <_exit>

0800e13a <_realloc_r>:
 800e13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e13e:	4680      	mov	r8, r0
 800e140:	4614      	mov	r4, r2
 800e142:	460e      	mov	r6, r1
 800e144:	b921      	cbnz	r1, 800e150 <_realloc_r+0x16>
 800e146:	4611      	mov	r1, r2
 800e148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e14c:	f7fe bffe 	b.w	800d14c <_malloc_r>
 800e150:	b92a      	cbnz	r2, 800e15e <_realloc_r+0x24>
 800e152:	f7ff fbed 	bl	800d930 <_free_r>
 800e156:	4625      	mov	r5, r4
 800e158:	4628      	mov	r0, r5
 800e15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15e:	f000 fa37 	bl	800e5d0 <_malloc_usable_size_r>
 800e162:	4284      	cmp	r4, r0
 800e164:	4607      	mov	r7, r0
 800e166:	d802      	bhi.n	800e16e <_realloc_r+0x34>
 800e168:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e16c:	d812      	bhi.n	800e194 <_realloc_r+0x5a>
 800e16e:	4621      	mov	r1, r4
 800e170:	4640      	mov	r0, r8
 800e172:	f7fe ffeb 	bl	800d14c <_malloc_r>
 800e176:	4605      	mov	r5, r0
 800e178:	2800      	cmp	r0, #0
 800e17a:	d0ed      	beq.n	800e158 <_realloc_r+0x1e>
 800e17c:	42bc      	cmp	r4, r7
 800e17e:	4622      	mov	r2, r4
 800e180:	4631      	mov	r1, r6
 800e182:	bf28      	it	cs
 800e184:	463a      	movcs	r2, r7
 800e186:	f7ff fba6 	bl	800d8d6 <memcpy>
 800e18a:	4631      	mov	r1, r6
 800e18c:	4640      	mov	r0, r8
 800e18e:	f7ff fbcf 	bl	800d930 <_free_r>
 800e192:	e7e1      	b.n	800e158 <_realloc_r+0x1e>
 800e194:	4635      	mov	r5, r6
 800e196:	e7df      	b.n	800e158 <_realloc_r+0x1e>

0800e198 <__sfputc_r>:
 800e198:	6893      	ldr	r3, [r2, #8]
 800e19a:	b410      	push	{r4}
 800e19c:	3b01      	subs	r3, #1
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	6093      	str	r3, [r2, #8]
 800e1a2:	da07      	bge.n	800e1b4 <__sfputc_r+0x1c>
 800e1a4:	6994      	ldr	r4, [r2, #24]
 800e1a6:	42a3      	cmp	r3, r4
 800e1a8:	db01      	blt.n	800e1ae <__sfputc_r+0x16>
 800e1aa:	290a      	cmp	r1, #10
 800e1ac:	d102      	bne.n	800e1b4 <__sfputc_r+0x1c>
 800e1ae:	bc10      	pop	{r4}
 800e1b0:	f000 b934 	b.w	800e41c <__swbuf_r>
 800e1b4:	6813      	ldr	r3, [r2, #0]
 800e1b6:	1c58      	adds	r0, r3, #1
 800e1b8:	6010      	str	r0, [r2, #0]
 800e1ba:	7019      	strb	r1, [r3, #0]
 800e1bc:	4608      	mov	r0, r1
 800e1be:	bc10      	pop	{r4}
 800e1c0:	4770      	bx	lr

0800e1c2 <__sfputs_r>:
 800e1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	460f      	mov	r7, r1
 800e1c8:	4614      	mov	r4, r2
 800e1ca:	18d5      	adds	r5, r2, r3
 800e1cc:	42ac      	cmp	r4, r5
 800e1ce:	d101      	bne.n	800e1d4 <__sfputs_r+0x12>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	e007      	b.n	800e1e4 <__sfputs_r+0x22>
 800e1d4:	463a      	mov	r2, r7
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1dc:	f7ff ffdc 	bl	800e198 <__sfputc_r>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d1f3      	bne.n	800e1cc <__sfputs_r+0xa>
 800e1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1e8 <_vfiprintf_r>:
 800e1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ec:	460d      	mov	r5, r1
 800e1ee:	4614      	mov	r4, r2
 800e1f0:	4698      	mov	r8, r3
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	b09d      	sub	sp, #116	; 0x74
 800e1f6:	b118      	cbz	r0, 800e200 <_vfiprintf_r+0x18>
 800e1f8:	6a03      	ldr	r3, [r0, #32]
 800e1fa:	b90b      	cbnz	r3, 800e200 <_vfiprintf_r+0x18>
 800e1fc:	f7ff f946 	bl	800d48c <__sinit>
 800e200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e202:	07d9      	lsls	r1, r3, #31
 800e204:	d405      	bmi.n	800e212 <_vfiprintf_r+0x2a>
 800e206:	89ab      	ldrh	r3, [r5, #12]
 800e208:	059a      	lsls	r2, r3, #22
 800e20a:	d402      	bmi.n	800e212 <_vfiprintf_r+0x2a>
 800e20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e20e:	f7ff fb58 	bl	800d8c2 <__retarget_lock_acquire_recursive>
 800e212:	89ab      	ldrh	r3, [r5, #12]
 800e214:	071b      	lsls	r3, r3, #28
 800e216:	d501      	bpl.n	800e21c <_vfiprintf_r+0x34>
 800e218:	692b      	ldr	r3, [r5, #16]
 800e21a:	b99b      	cbnz	r3, 800e244 <_vfiprintf_r+0x5c>
 800e21c:	4629      	mov	r1, r5
 800e21e:	4630      	mov	r0, r6
 800e220:	f000 f93a 	bl	800e498 <__swsetup_r>
 800e224:	b170      	cbz	r0, 800e244 <_vfiprintf_r+0x5c>
 800e226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e228:	07dc      	lsls	r4, r3, #31
 800e22a:	d504      	bpl.n	800e236 <_vfiprintf_r+0x4e>
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295
 800e230:	b01d      	add	sp, #116	; 0x74
 800e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e236:	89ab      	ldrh	r3, [r5, #12]
 800e238:	0598      	lsls	r0, r3, #22
 800e23a:	d4f7      	bmi.n	800e22c <_vfiprintf_r+0x44>
 800e23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e23e:	f7ff fb41 	bl	800d8c4 <__retarget_lock_release_recursive>
 800e242:	e7f3      	b.n	800e22c <_vfiprintf_r+0x44>
 800e244:	2300      	movs	r3, #0
 800e246:	9309      	str	r3, [sp, #36]	; 0x24
 800e248:	2320      	movs	r3, #32
 800e24a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e24e:	2330      	movs	r3, #48	; 0x30
 800e250:	f04f 0901 	mov.w	r9, #1
 800e254:	f8cd 800c 	str.w	r8, [sp, #12]
 800e258:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e408 <_vfiprintf_r+0x220>
 800e25c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e260:	4623      	mov	r3, r4
 800e262:	469a      	mov	sl, r3
 800e264:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e268:	b10a      	cbz	r2, 800e26e <_vfiprintf_r+0x86>
 800e26a:	2a25      	cmp	r2, #37	; 0x25
 800e26c:	d1f9      	bne.n	800e262 <_vfiprintf_r+0x7a>
 800e26e:	ebba 0b04 	subs.w	fp, sl, r4
 800e272:	d00b      	beq.n	800e28c <_vfiprintf_r+0xa4>
 800e274:	465b      	mov	r3, fp
 800e276:	4622      	mov	r2, r4
 800e278:	4629      	mov	r1, r5
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7ff ffa1 	bl	800e1c2 <__sfputs_r>
 800e280:	3001      	adds	r0, #1
 800e282:	f000 80a9 	beq.w	800e3d8 <_vfiprintf_r+0x1f0>
 800e286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e288:	445a      	add	r2, fp
 800e28a:	9209      	str	r2, [sp, #36]	; 0x24
 800e28c:	f89a 3000 	ldrb.w	r3, [sl]
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 80a1 	beq.w	800e3d8 <_vfiprintf_r+0x1f0>
 800e296:	2300      	movs	r3, #0
 800e298:	f04f 32ff 	mov.w	r2, #4294967295
 800e29c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2a0:	f10a 0a01 	add.w	sl, sl, #1
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	9307      	str	r3, [sp, #28]
 800e2a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2ac:	931a      	str	r3, [sp, #104]	; 0x68
 800e2ae:	4654      	mov	r4, sl
 800e2b0:	2205      	movs	r2, #5
 800e2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b6:	4854      	ldr	r0, [pc, #336]	; (800e408 <_vfiprintf_r+0x220>)
 800e2b8:	f7ff ff2a 	bl	800e110 <memchr>
 800e2bc:	9a04      	ldr	r2, [sp, #16]
 800e2be:	b9d8      	cbnz	r0, 800e2f8 <_vfiprintf_r+0x110>
 800e2c0:	06d1      	lsls	r1, r2, #27
 800e2c2:	bf44      	itt	mi
 800e2c4:	2320      	movmi	r3, #32
 800e2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2ca:	0713      	lsls	r3, r2, #28
 800e2cc:	bf44      	itt	mi
 800e2ce:	232b      	movmi	r3, #43	; 0x2b
 800e2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e2d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e2da:	d015      	beq.n	800e308 <_vfiprintf_r+0x120>
 800e2dc:	4654      	mov	r4, sl
 800e2de:	2000      	movs	r0, #0
 800e2e0:	f04f 0c0a 	mov.w	ip, #10
 800e2e4:	9a07      	ldr	r2, [sp, #28]
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ec:	3b30      	subs	r3, #48	; 0x30
 800e2ee:	2b09      	cmp	r3, #9
 800e2f0:	d94d      	bls.n	800e38e <_vfiprintf_r+0x1a6>
 800e2f2:	b1b0      	cbz	r0, 800e322 <_vfiprintf_r+0x13a>
 800e2f4:	9207      	str	r2, [sp, #28]
 800e2f6:	e014      	b.n	800e322 <_vfiprintf_r+0x13a>
 800e2f8:	eba0 0308 	sub.w	r3, r0, r8
 800e2fc:	fa09 f303 	lsl.w	r3, r9, r3
 800e300:	4313      	orrs	r3, r2
 800e302:	46a2      	mov	sl, r4
 800e304:	9304      	str	r3, [sp, #16]
 800e306:	e7d2      	b.n	800e2ae <_vfiprintf_r+0xc6>
 800e308:	9b03      	ldr	r3, [sp, #12]
 800e30a:	1d19      	adds	r1, r3, #4
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	9103      	str	r1, [sp, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	bfbb      	ittet	lt
 800e314:	425b      	neglt	r3, r3
 800e316:	f042 0202 	orrlt.w	r2, r2, #2
 800e31a:	9307      	strge	r3, [sp, #28]
 800e31c:	9307      	strlt	r3, [sp, #28]
 800e31e:	bfb8      	it	lt
 800e320:	9204      	strlt	r2, [sp, #16]
 800e322:	7823      	ldrb	r3, [r4, #0]
 800e324:	2b2e      	cmp	r3, #46	; 0x2e
 800e326:	d10c      	bne.n	800e342 <_vfiprintf_r+0x15a>
 800e328:	7863      	ldrb	r3, [r4, #1]
 800e32a:	2b2a      	cmp	r3, #42	; 0x2a
 800e32c:	d134      	bne.n	800e398 <_vfiprintf_r+0x1b0>
 800e32e:	9b03      	ldr	r3, [sp, #12]
 800e330:	3402      	adds	r4, #2
 800e332:	1d1a      	adds	r2, r3, #4
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	9203      	str	r2, [sp, #12]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	bfb8      	it	lt
 800e33c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e340:	9305      	str	r3, [sp, #20]
 800e342:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e40c <_vfiprintf_r+0x224>
 800e346:	2203      	movs	r2, #3
 800e348:	4650      	mov	r0, sl
 800e34a:	7821      	ldrb	r1, [r4, #0]
 800e34c:	f7ff fee0 	bl	800e110 <memchr>
 800e350:	b138      	cbz	r0, 800e362 <_vfiprintf_r+0x17a>
 800e352:	2240      	movs	r2, #64	; 0x40
 800e354:	9b04      	ldr	r3, [sp, #16]
 800e356:	eba0 000a 	sub.w	r0, r0, sl
 800e35a:	4082      	lsls	r2, r0
 800e35c:	4313      	orrs	r3, r2
 800e35e:	3401      	adds	r4, #1
 800e360:	9304      	str	r3, [sp, #16]
 800e362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e366:	2206      	movs	r2, #6
 800e368:	4829      	ldr	r0, [pc, #164]	; (800e410 <_vfiprintf_r+0x228>)
 800e36a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e36e:	f7ff fecf 	bl	800e110 <memchr>
 800e372:	2800      	cmp	r0, #0
 800e374:	d03f      	beq.n	800e3f6 <_vfiprintf_r+0x20e>
 800e376:	4b27      	ldr	r3, [pc, #156]	; (800e414 <_vfiprintf_r+0x22c>)
 800e378:	bb1b      	cbnz	r3, 800e3c2 <_vfiprintf_r+0x1da>
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	3307      	adds	r3, #7
 800e37e:	f023 0307 	bic.w	r3, r3, #7
 800e382:	3308      	adds	r3, #8
 800e384:	9303      	str	r3, [sp, #12]
 800e386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e388:	443b      	add	r3, r7
 800e38a:	9309      	str	r3, [sp, #36]	; 0x24
 800e38c:	e768      	b.n	800e260 <_vfiprintf_r+0x78>
 800e38e:	460c      	mov	r4, r1
 800e390:	2001      	movs	r0, #1
 800e392:	fb0c 3202 	mla	r2, ip, r2, r3
 800e396:	e7a6      	b.n	800e2e6 <_vfiprintf_r+0xfe>
 800e398:	2300      	movs	r3, #0
 800e39a:	f04f 0c0a 	mov.w	ip, #10
 800e39e:	4619      	mov	r1, r3
 800e3a0:	3401      	adds	r4, #1
 800e3a2:	9305      	str	r3, [sp, #20]
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3aa:	3a30      	subs	r2, #48	; 0x30
 800e3ac:	2a09      	cmp	r2, #9
 800e3ae:	d903      	bls.n	800e3b8 <_vfiprintf_r+0x1d0>
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d0c6      	beq.n	800e342 <_vfiprintf_r+0x15a>
 800e3b4:	9105      	str	r1, [sp, #20]
 800e3b6:	e7c4      	b.n	800e342 <_vfiprintf_r+0x15a>
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3c0:	e7f0      	b.n	800e3a4 <_vfiprintf_r+0x1bc>
 800e3c2:	ab03      	add	r3, sp, #12
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	462a      	mov	r2, r5
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	4b13      	ldr	r3, [pc, #76]	; (800e418 <_vfiprintf_r+0x230>)
 800e3cc:	a904      	add	r1, sp, #16
 800e3ce:	f3af 8000 	nop.w
 800e3d2:	4607      	mov	r7, r0
 800e3d4:	1c78      	adds	r0, r7, #1
 800e3d6:	d1d6      	bne.n	800e386 <_vfiprintf_r+0x19e>
 800e3d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3da:	07d9      	lsls	r1, r3, #31
 800e3dc:	d405      	bmi.n	800e3ea <_vfiprintf_r+0x202>
 800e3de:	89ab      	ldrh	r3, [r5, #12]
 800e3e0:	059a      	lsls	r2, r3, #22
 800e3e2:	d402      	bmi.n	800e3ea <_vfiprintf_r+0x202>
 800e3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3e6:	f7ff fa6d 	bl	800d8c4 <__retarget_lock_release_recursive>
 800e3ea:	89ab      	ldrh	r3, [r5, #12]
 800e3ec:	065b      	lsls	r3, r3, #25
 800e3ee:	f53f af1d 	bmi.w	800e22c <_vfiprintf_r+0x44>
 800e3f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3f4:	e71c      	b.n	800e230 <_vfiprintf_r+0x48>
 800e3f6:	ab03      	add	r3, sp, #12
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	462a      	mov	r2, r5
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	4b06      	ldr	r3, [pc, #24]	; (800e418 <_vfiprintf_r+0x230>)
 800e400:	a904      	add	r1, sp, #16
 800e402:	f7ff fca7 	bl	800dd54 <_printf_i>
 800e406:	e7e4      	b.n	800e3d2 <_vfiprintf_r+0x1ea>
 800e408:	0800ec4e 	.word	0x0800ec4e
 800e40c:	0800ec54 	.word	0x0800ec54
 800e410:	0800ec58 	.word	0x0800ec58
 800e414:	00000000 	.word	0x00000000
 800e418:	0800e1c3 	.word	0x0800e1c3

0800e41c <__swbuf_r>:
 800e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41e:	460e      	mov	r6, r1
 800e420:	4614      	mov	r4, r2
 800e422:	4605      	mov	r5, r0
 800e424:	b118      	cbz	r0, 800e42e <__swbuf_r+0x12>
 800e426:	6a03      	ldr	r3, [r0, #32]
 800e428:	b90b      	cbnz	r3, 800e42e <__swbuf_r+0x12>
 800e42a:	f7ff f82f 	bl	800d48c <__sinit>
 800e42e:	69a3      	ldr	r3, [r4, #24]
 800e430:	60a3      	str	r3, [r4, #8]
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	071a      	lsls	r2, r3, #28
 800e436:	d525      	bpl.n	800e484 <__swbuf_r+0x68>
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	b31b      	cbz	r3, 800e484 <__swbuf_r+0x68>
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	6922      	ldr	r2, [r4, #16]
 800e440:	b2f6      	uxtb	r6, r6
 800e442:	1a98      	subs	r0, r3, r2
 800e444:	6963      	ldr	r3, [r4, #20]
 800e446:	4637      	mov	r7, r6
 800e448:	4283      	cmp	r3, r0
 800e44a:	dc04      	bgt.n	800e456 <__swbuf_r+0x3a>
 800e44c:	4621      	mov	r1, r4
 800e44e:	4628      	mov	r0, r5
 800e450:	f7ff fe24 	bl	800e09c <_fflush_r>
 800e454:	b9e0      	cbnz	r0, 800e490 <__swbuf_r+0x74>
 800e456:	68a3      	ldr	r3, [r4, #8]
 800e458:	3b01      	subs	r3, #1
 800e45a:	60a3      	str	r3, [r4, #8]
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	1c5a      	adds	r2, r3, #1
 800e460:	6022      	str	r2, [r4, #0]
 800e462:	701e      	strb	r6, [r3, #0]
 800e464:	6962      	ldr	r2, [r4, #20]
 800e466:	1c43      	adds	r3, r0, #1
 800e468:	429a      	cmp	r2, r3
 800e46a:	d004      	beq.n	800e476 <__swbuf_r+0x5a>
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	07db      	lsls	r3, r3, #31
 800e470:	d506      	bpl.n	800e480 <__swbuf_r+0x64>
 800e472:	2e0a      	cmp	r6, #10
 800e474:	d104      	bne.n	800e480 <__swbuf_r+0x64>
 800e476:	4621      	mov	r1, r4
 800e478:	4628      	mov	r0, r5
 800e47a:	f7ff fe0f 	bl	800e09c <_fflush_r>
 800e47e:	b938      	cbnz	r0, 800e490 <__swbuf_r+0x74>
 800e480:	4638      	mov	r0, r7
 800e482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e484:	4621      	mov	r1, r4
 800e486:	4628      	mov	r0, r5
 800e488:	f000 f806 	bl	800e498 <__swsetup_r>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d0d5      	beq.n	800e43c <__swbuf_r+0x20>
 800e490:	f04f 37ff 	mov.w	r7, #4294967295
 800e494:	e7f4      	b.n	800e480 <__swbuf_r+0x64>
	...

0800e498 <__swsetup_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4b2a      	ldr	r3, [pc, #168]	; (800e544 <__swsetup_r+0xac>)
 800e49c:	4605      	mov	r5, r0
 800e49e:	6818      	ldr	r0, [r3, #0]
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	b118      	cbz	r0, 800e4ac <__swsetup_r+0x14>
 800e4a4:	6a03      	ldr	r3, [r0, #32]
 800e4a6:	b90b      	cbnz	r3, 800e4ac <__swsetup_r+0x14>
 800e4a8:	f7fe fff0 	bl	800d48c <__sinit>
 800e4ac:	89a3      	ldrh	r3, [r4, #12]
 800e4ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4b2:	0718      	lsls	r0, r3, #28
 800e4b4:	d422      	bmi.n	800e4fc <__swsetup_r+0x64>
 800e4b6:	06d9      	lsls	r1, r3, #27
 800e4b8:	d407      	bmi.n	800e4ca <__swsetup_r+0x32>
 800e4ba:	2309      	movs	r3, #9
 800e4bc:	602b      	str	r3, [r5, #0]
 800e4be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c6:	81a3      	strh	r3, [r4, #12]
 800e4c8:	e034      	b.n	800e534 <__swsetup_r+0x9c>
 800e4ca:	0758      	lsls	r0, r3, #29
 800e4cc:	d512      	bpl.n	800e4f4 <__swsetup_r+0x5c>
 800e4ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4d0:	b141      	cbz	r1, 800e4e4 <__swsetup_r+0x4c>
 800e4d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4d6:	4299      	cmp	r1, r3
 800e4d8:	d002      	beq.n	800e4e0 <__swsetup_r+0x48>
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f7ff fa28 	bl	800d930 <_free_r>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	6363      	str	r3, [r4, #52]	; 0x34
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	6063      	str	r3, [r4, #4]
 800e4f0:	6923      	ldr	r3, [r4, #16]
 800e4f2:	6023      	str	r3, [r4, #0]
 800e4f4:	89a3      	ldrh	r3, [r4, #12]
 800e4f6:	f043 0308 	orr.w	r3, r3, #8
 800e4fa:	81a3      	strh	r3, [r4, #12]
 800e4fc:	6923      	ldr	r3, [r4, #16]
 800e4fe:	b94b      	cbnz	r3, 800e514 <__swsetup_r+0x7c>
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e50a:	d003      	beq.n	800e514 <__swsetup_r+0x7c>
 800e50c:	4621      	mov	r1, r4
 800e50e:	4628      	mov	r0, r5
 800e510:	f000 f88b 	bl	800e62a <__smakebuf_r>
 800e514:	89a0      	ldrh	r0, [r4, #12]
 800e516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e51a:	f010 0301 	ands.w	r3, r0, #1
 800e51e:	d00a      	beq.n	800e536 <__swsetup_r+0x9e>
 800e520:	2300      	movs	r3, #0
 800e522:	60a3      	str	r3, [r4, #8]
 800e524:	6963      	ldr	r3, [r4, #20]
 800e526:	425b      	negs	r3, r3
 800e528:	61a3      	str	r3, [r4, #24]
 800e52a:	6923      	ldr	r3, [r4, #16]
 800e52c:	b943      	cbnz	r3, 800e540 <__swsetup_r+0xa8>
 800e52e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e532:	d1c4      	bne.n	800e4be <__swsetup_r+0x26>
 800e534:	bd38      	pop	{r3, r4, r5, pc}
 800e536:	0781      	lsls	r1, r0, #30
 800e538:	bf58      	it	pl
 800e53a:	6963      	ldrpl	r3, [r4, #20]
 800e53c:	60a3      	str	r3, [r4, #8]
 800e53e:	e7f4      	b.n	800e52a <__swsetup_r+0x92>
 800e540:	2000      	movs	r0, #0
 800e542:	e7f7      	b.n	800e534 <__swsetup_r+0x9c>
 800e544:	20000098 	.word	0x20000098

0800e548 <_raise_r>:
 800e548:	291f      	cmp	r1, #31
 800e54a:	b538      	push	{r3, r4, r5, lr}
 800e54c:	4604      	mov	r4, r0
 800e54e:	460d      	mov	r5, r1
 800e550:	d904      	bls.n	800e55c <_raise_r+0x14>
 800e552:	2316      	movs	r3, #22
 800e554:	6003      	str	r3, [r0, #0]
 800e556:	f04f 30ff 	mov.w	r0, #4294967295
 800e55a:	bd38      	pop	{r3, r4, r5, pc}
 800e55c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e55e:	b112      	cbz	r2, 800e566 <_raise_r+0x1e>
 800e560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e564:	b94b      	cbnz	r3, 800e57a <_raise_r+0x32>
 800e566:	4620      	mov	r0, r4
 800e568:	f000 f830 	bl	800e5cc <_getpid_r>
 800e56c:	462a      	mov	r2, r5
 800e56e:	4601      	mov	r1, r0
 800e570:	4620      	mov	r0, r4
 800e572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e576:	f000 b817 	b.w	800e5a8 <_kill_r>
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d00a      	beq.n	800e594 <_raise_r+0x4c>
 800e57e:	1c59      	adds	r1, r3, #1
 800e580:	d103      	bne.n	800e58a <_raise_r+0x42>
 800e582:	2316      	movs	r3, #22
 800e584:	6003      	str	r3, [r0, #0]
 800e586:	2001      	movs	r0, #1
 800e588:	e7e7      	b.n	800e55a <_raise_r+0x12>
 800e58a:	2400      	movs	r4, #0
 800e58c:	4628      	mov	r0, r5
 800e58e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e592:	4798      	blx	r3
 800e594:	2000      	movs	r0, #0
 800e596:	e7e0      	b.n	800e55a <_raise_r+0x12>

0800e598 <raise>:
 800e598:	4b02      	ldr	r3, [pc, #8]	; (800e5a4 <raise+0xc>)
 800e59a:	4601      	mov	r1, r0
 800e59c:	6818      	ldr	r0, [r3, #0]
 800e59e:	f7ff bfd3 	b.w	800e548 <_raise_r>
 800e5a2:	bf00      	nop
 800e5a4:	20000098 	.word	0x20000098

0800e5a8 <_kill_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	4d06      	ldr	r5, [pc, #24]	; (800e5c8 <_kill_r+0x20>)
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	4611      	mov	r1, r2
 800e5b4:	602b      	str	r3, [r5, #0]
 800e5b6:	f7f3 fbc6 	bl	8001d46 <_kill>
 800e5ba:	1c43      	adds	r3, r0, #1
 800e5bc:	d102      	bne.n	800e5c4 <_kill_r+0x1c>
 800e5be:	682b      	ldr	r3, [r5, #0]
 800e5c0:	b103      	cbz	r3, 800e5c4 <_kill_r+0x1c>
 800e5c2:	6023      	str	r3, [r4, #0]
 800e5c4:	bd38      	pop	{r3, r4, r5, pc}
 800e5c6:	bf00      	nop
 800e5c8:	20003344 	.word	0x20003344

0800e5cc <_getpid_r>:
 800e5cc:	f7f3 bbb4 	b.w	8001d38 <_getpid>

0800e5d0 <_malloc_usable_size_r>:
 800e5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5d4:	1f18      	subs	r0, r3, #4
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bfbc      	itt	lt
 800e5da:	580b      	ldrlt	r3, [r1, r0]
 800e5dc:	18c0      	addlt	r0, r0, r3
 800e5de:	4770      	bx	lr

0800e5e0 <__swhatbuf_r>:
 800e5e0:	b570      	push	{r4, r5, r6, lr}
 800e5e2:	460c      	mov	r4, r1
 800e5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e8:	4615      	mov	r5, r2
 800e5ea:	2900      	cmp	r1, #0
 800e5ec:	461e      	mov	r6, r3
 800e5ee:	b096      	sub	sp, #88	; 0x58
 800e5f0:	da0c      	bge.n	800e60c <__swhatbuf_r+0x2c>
 800e5f2:	89a3      	ldrh	r3, [r4, #12]
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e5fa:	bf0c      	ite	eq
 800e5fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e600:	2340      	movne	r3, #64	; 0x40
 800e602:	2000      	movs	r0, #0
 800e604:	6031      	str	r1, [r6, #0]
 800e606:	602b      	str	r3, [r5, #0]
 800e608:	b016      	add	sp, #88	; 0x58
 800e60a:	bd70      	pop	{r4, r5, r6, pc}
 800e60c:	466a      	mov	r2, sp
 800e60e:	f000 f849 	bl	800e6a4 <_fstat_r>
 800e612:	2800      	cmp	r0, #0
 800e614:	dbed      	blt.n	800e5f2 <__swhatbuf_r+0x12>
 800e616:	9901      	ldr	r1, [sp, #4]
 800e618:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e61c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e620:	4259      	negs	r1, r3
 800e622:	4159      	adcs	r1, r3
 800e624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e628:	e7eb      	b.n	800e602 <__swhatbuf_r+0x22>

0800e62a <__smakebuf_r>:
 800e62a:	898b      	ldrh	r3, [r1, #12]
 800e62c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e62e:	079d      	lsls	r5, r3, #30
 800e630:	4606      	mov	r6, r0
 800e632:	460c      	mov	r4, r1
 800e634:	d507      	bpl.n	800e646 <__smakebuf_r+0x1c>
 800e636:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e63a:	6023      	str	r3, [r4, #0]
 800e63c:	6123      	str	r3, [r4, #16]
 800e63e:	2301      	movs	r3, #1
 800e640:	6163      	str	r3, [r4, #20]
 800e642:	b002      	add	sp, #8
 800e644:	bd70      	pop	{r4, r5, r6, pc}
 800e646:	466a      	mov	r2, sp
 800e648:	ab01      	add	r3, sp, #4
 800e64a:	f7ff ffc9 	bl	800e5e0 <__swhatbuf_r>
 800e64e:	9900      	ldr	r1, [sp, #0]
 800e650:	4605      	mov	r5, r0
 800e652:	4630      	mov	r0, r6
 800e654:	f7fe fd7a 	bl	800d14c <_malloc_r>
 800e658:	b948      	cbnz	r0, 800e66e <__smakebuf_r+0x44>
 800e65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e65e:	059a      	lsls	r2, r3, #22
 800e660:	d4ef      	bmi.n	800e642 <__smakebuf_r+0x18>
 800e662:	f023 0303 	bic.w	r3, r3, #3
 800e666:	f043 0302 	orr.w	r3, r3, #2
 800e66a:	81a3      	strh	r3, [r4, #12]
 800e66c:	e7e3      	b.n	800e636 <__smakebuf_r+0xc>
 800e66e:	89a3      	ldrh	r3, [r4, #12]
 800e670:	6020      	str	r0, [r4, #0]
 800e672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e676:	81a3      	strh	r3, [r4, #12]
 800e678:	9b00      	ldr	r3, [sp, #0]
 800e67a:	6120      	str	r0, [r4, #16]
 800e67c:	6163      	str	r3, [r4, #20]
 800e67e:	9b01      	ldr	r3, [sp, #4]
 800e680:	b15b      	cbz	r3, 800e69a <__smakebuf_r+0x70>
 800e682:	4630      	mov	r0, r6
 800e684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e688:	f000 f81e 	bl	800e6c8 <_isatty_r>
 800e68c:	b128      	cbz	r0, 800e69a <__smakebuf_r+0x70>
 800e68e:	89a3      	ldrh	r3, [r4, #12]
 800e690:	f023 0303 	bic.w	r3, r3, #3
 800e694:	f043 0301 	orr.w	r3, r3, #1
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	89a3      	ldrh	r3, [r4, #12]
 800e69c:	431d      	orrs	r5, r3
 800e69e:	81a5      	strh	r5, [r4, #12]
 800e6a0:	e7cf      	b.n	800e642 <__smakebuf_r+0x18>
	...

0800e6a4 <_fstat_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4d06      	ldr	r5, [pc, #24]	; (800e6c4 <_fstat_r+0x20>)
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	602b      	str	r3, [r5, #0]
 800e6b2:	f7f3 fba6 	bl	8001e02 <_fstat>
 800e6b6:	1c43      	adds	r3, r0, #1
 800e6b8:	d102      	bne.n	800e6c0 <_fstat_r+0x1c>
 800e6ba:	682b      	ldr	r3, [r5, #0]
 800e6bc:	b103      	cbz	r3, 800e6c0 <_fstat_r+0x1c>
 800e6be:	6023      	str	r3, [r4, #0]
 800e6c0:	bd38      	pop	{r3, r4, r5, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20003344 	.word	0x20003344

0800e6c8 <_isatty_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	4d05      	ldr	r5, [pc, #20]	; (800e6e4 <_isatty_r+0x1c>)
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	4608      	mov	r0, r1
 800e6d2:	602b      	str	r3, [r5, #0]
 800e6d4:	f7f3 fba4 	bl	8001e20 <_isatty>
 800e6d8:	1c43      	adds	r3, r0, #1
 800e6da:	d102      	bne.n	800e6e2 <_isatty_r+0x1a>
 800e6dc:	682b      	ldr	r3, [r5, #0]
 800e6de:	b103      	cbz	r3, 800e6e2 <_isatty_r+0x1a>
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	bd38      	pop	{r3, r4, r5, pc}
 800e6e4:	20003344 	.word	0x20003344

0800e6e8 <_init>:
 800e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ea:	bf00      	nop
 800e6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ee:	bc08      	pop	{r3}
 800e6f0:	469e      	mov	lr, r3
 800e6f2:	4770      	bx	lr

0800e6f4 <_fini>:
 800e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f6:	bf00      	nop
 800e6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6fa:	bc08      	pop	{r3}
 800e6fc:	469e      	mov	lr, r3
 800e6fe:	4770      	bx	lr
