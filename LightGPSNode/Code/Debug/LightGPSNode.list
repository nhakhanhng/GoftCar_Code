
LightGPSNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de14  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800df24  0800df24  0001df24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3a4  0800e3a4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3a4  0800e3a4  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3a4  0800e3a4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3a4  0800e3a4  0001e3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3a8  0800e3a8  0001e3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800e3ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003544  200000b0  0800e45c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035f4  0800e45c  000235f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023ebd  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005065  00000000  00000000  00043fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca8  00000000  00000000  00049040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000163a  00000000  00000000  0004ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006f46  00000000  00000000  0004c322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025abb  00000000  00000000  00053268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e3ec  00000000  00000000  00078d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000842c  00000000  00000000  00117110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0011f53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b0 	.word	0x200000b0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800df0c 	.word	0x0800df0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b4 	.word	0x200000b4
 800014c:	0800df0c 	.word	0x0800df0c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 ff1c 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f828 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f9a2 	bl	80009ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 f972 	bl	8000950 <MX_DMA_Init>
  MX_CAN_Init();
 800066c:	f000 f868 	bl	8000740 <MX_CAN_Init>
  MX_I2C1_Init();
 8000670:	f000 f89c 	bl	80007ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000674:	f000 f918 	bl	80008a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000678:	f000 f940 	bl	80008fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800067c:	f000 f8c4 	bl	8000808 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000680:	f006 f8e2 	bl	8006848 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tDefault */
  tDefaultHandle = osThreadNew(StartDefaultTask, NULL, &tDefault_attributes);
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <main+0x4c>)
 8000686:	2100      	movs	r1, #0
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <main+0x50>)
 800068a:	f006 f96b 	bl	8006964 <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <main+0x54>)
 8000692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	SyncPrintf_Init();
 8000694:	f00b ffd0 	bl	800c638 <SyncPrintf_Init>


//	TestTaskHandle = osThreadNew(TestTask, NULL, &TestTask_attributes);

	SyncPrintf("####### LightGPS AWAKE ##### \r\n");
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <main+0x58>)
 800069a:	f00b ffdb 	bl	800c654 <SyncPrintf>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f006 f905 	bl	80068ac <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006a2:	e7fe      	b.n	80006a2 <main+0x4a>
 80006a4:	0800e0dc 	.word	0x0800e0dc
 80006a8:	08000c71 	.word	0x08000c71
 80006ac:	20000328 	.word	0x20000328
 80006b0:	0800df3c 	.word	0x0800df3c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b090      	sub	sp, #64	; 0x40
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00c fb38 	bl	800cd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 fc21 	bl	8004f44 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000708:	f000 fb2c 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2102      	movs	r1, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fe8e 	bl	8005448 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000732:	f000 fb17 	bl	8000d64 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3740      	adds	r7, #64	; 0x40
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_CAN_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_CAN_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_CAN_Init+0x64>)
 800074c:	2204      	movs	r2, #4
 800074e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_CAN_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_CAN_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_CAN_Init+0x64>)
 800075e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000762:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_CAN_Init+0x64>)
 8000766:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800076a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_CAN_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_CAN_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_CAN_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_CAN_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_CAN_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_CAN_Init+0x64>)
 800078c:	2201      	movs	r2, #1
 800078e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_CAN_Init+0x64>)
 8000792:	f000 fee3 	bl	800155c <HAL_CAN_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 fae2 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000cc 	.word	0x200000cc
 80007a8:	40006400 	.word	0x40006400

080007ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2C1_Init+0x50>)
 80007b2:	4a13      	ldr	r2, [pc, #76]	; (8000800 <MX_I2C1_Init+0x54>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_I2C1_Init+0x50>)
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_I2C1_Init+0x58>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_I2C1_Init+0x50>)
 80007ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_I2C1_Init+0x50>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_I2C1_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_I2C1_Init+0x50>)
 80007ea:	f002 fbb5 	bl	8002f58 <HAL_I2C_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f4:	f000 fab6 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000130 	.word	0x20000130
 8000800:	40005400 	.word	0x40005400
 8000804:	000186a0 	.word	0x000186a0

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <MX_TIM1_Init+0x98>)
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <MX_TIM1_Init+0x9c>)
 8000828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_TIM1_Init+0x98>)
 800082c:	2247      	movs	r2, #71	; 0x47
 800082e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <MX_TIM1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_TIM1_Init+0x98>)
 8000838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_TIM1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_TIM1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_TIM1_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000850:	4813      	ldr	r0, [pc, #76]	; (80008a0 <MX_TIM1_Init+0x98>)
 8000852:	f004 ff87 	bl	8005764 <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 fa82 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4619      	mov	r1, r3
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_TIM1_Init+0x98>)
 800086e:	f004 ffc8 	bl	8005802 <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000878:	f000 fa74 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_TIM1_Init+0x98>)
 800088a:	f005 f979 	bl	8005b80 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000894:	f000 fa66 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000184 	.word	0x20000184
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART1_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f005 f9ac 	bl	8005c3c <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 fa3b 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200001cc 	.word	0x200001cc
 80008f8:	40013800 	.word	0x40013800

080008fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART2_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x4c>)
 8000934:	f005 f982 	bl	8005c3c <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 fa11 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000214 	.word	0x20000214
 800094c:	40004400 	.word	0x40004400

08000950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_DMA_Init+0x58>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <MX_DMA_Init+0x58>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6153      	str	r3, [r2, #20]
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_DMA_Init+0x58>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2105      	movs	r1, #5
 8000972:	200e      	movs	r0, #14
 8000974:	f001 fee1 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000978:	200e      	movs	r0, #14
 800097a:	f001 fefa 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	200f      	movs	r0, #15
 8000984:	f001 fed9 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000988:	200f      	movs	r0, #15
 800098a:	f001 fef2 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	2010      	movs	r0, #16
 8000994:	f001 fed1 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000998:	2010      	movs	r0, #16
 800099a:	f001 feea 	bl	8002772 <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c0:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009c6:	f043 0320 	orr.w	r3, r3, #32
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0320 	and.w	r3, r3, #32
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_GPIO_Init+0xe4>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BEHIND_Pin|LED_FRONT_Pin|SPEAKER_Pin|LED_RIGHT_Pin
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2173      	movs	r1, #115	; 0x73
 8000a0c:	4821      	ldr	r0, [pc, #132]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a0e:	f002 fa71 	bl	8002ef4 <HAL_GPIO_WritePin>
                          |LED_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f640 4102 	movw	r1, #3074	; 0xc02
 8000a18:	481f      	ldr	r0, [pc, #124]	; (8000a98 <MX_GPIO_Init+0xec>)
 8000a1a:	f002 fa6b 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BEHIND_Pin LED_FRONT_Pin SPEAKER_Pin LED_RIGHT_Pin
                           LED_LEFT_Pin */
  GPIO_InitStruct.Pin = LED_BEHIND_Pin|LED_FRONT_Pin|SPEAKER_Pin|LED_RIGHT_Pin
 8000a1e:	2373      	movs	r3, #115	; 0x73
 8000a20:	613b      	str	r3, [r7, #16]
                          |LED_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	4817      	ldr	r0, [pc, #92]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a36:	f002 f8d9 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_2_Pin;
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_2_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a4e:	f002 f8cd 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8000a52:	2301      	movs	r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_GPIO_Init+0xec>)
 8000a66:	f002 f8c1 	bl	8002bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8000a6a:	f640 4302 	movw	r3, #3074	; 0xc02
 8000a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0xec>)
 8000a84:	f002 f8b2 	bl	8002bec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010800 	.word	0x40010800
 8000a98:	40010c00 	.word	0x40010c00

08000a9c <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_I2C_MemRxCpltCallback+0x20>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d102      	bne.n	8000ab4 <HAL_I2C_MemRxCpltCallback+0x18>
		I2C_OS_MEM_RxCpltCB(&mainI2C);
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <HAL_I2C_MemRxCpltCallback+0x20>)
 8000ab0:	f00b fda5 	bl	800c5fe <I2C_OS_MEM_RxCpltCB>
	}
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000340 	.word	0x20000340

08000ac0 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d102      	bne.n	8000ad8 <HAL_I2C_MemTxCpltCallback+0x18>
		I2C_OS_MEM_TxCpltCB(&mainI2C);
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <HAL_I2C_MemTxCpltCallback+0x20>)
 8000ad4:	f00b fda1 	bl	800c61a <I2C_OS_MEM_TxCpltCB>
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000340 	.word	0x20000340

08000ae4 <CAN_TxCallback>:
void CAN_TxCallback(CAN_HandleTypeDef *hcan) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <CAN_TxCallback+0x20>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d102      	bne.n	8000afc <CAN_TxCallback+0x18>
		CAN_OS_TxCplt_CB(&CANmain);
 8000af6:	4803      	ldr	r0, [pc, #12]	; (8000b04 <CAN_TxCallback+0x20>)
 8000af8:	f00b fc0e 	bl	800c318 <CAN_OS_TxCplt_CB>
	}
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000035c 	.word	0x2000035c

08000b08 <CAN_RxFifo0Callback>:
void CAN_RxFifo0Callback(CAN_HandleTypeDef *hcan) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <CAN_RxFifo0Callback+0x20>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d102      	bne.n	8000b20 <CAN_RxFifo0Callback+0x18>
		CAN_OS_RxFifo0Cplt_CB(&CANmain);
 8000b1a:	4803      	ldr	r0, [pc, #12]	; (8000b28 <CAN_RxFifo0Callback+0x20>)
 8000b1c:	f00b fbe4 	bl	800c2e8 <CAN_OS_RxFifo0Cplt_CB>
	}
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000035c 	.word	0x2000035c

08000b2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if (gpsUART.huart == huart) {
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_UART_RxCpltCallback+0x20>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d102      	bne.n	8000b44 <HAL_UART_RxCpltCallback+0x18>
		UART_OS_RxCplt_CB(&gpsUART);
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <HAL_UART_RxCpltCallback+0x20>)
 8000b40:	f00b fdfd 	bl	800c73e <UART_OS_RxCplt_CB>
	}
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	2000032c 	.word	0x2000032c

08000b50 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	if (gpsUART.huart == huart) {
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_UART_TxCpltCallback+0x20>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d102      	bne.n	8000b68 <HAL_UART_TxCpltCallback+0x18>
		UART_OS_TxCplt_CB(&gpsUART);
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <HAL_UART_TxCpltCallback+0x20>)
 8000b64:	f00b fdf9 	bl	800c75a <UART_OS_TxCplt_CB>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000032c 	.word	0x2000032c

08000b74 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
	if (gpsUART.huart == huart) {
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_UARTEx_RxEventCallback+0x28>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d104      	bne.n	8000b94 <HAL_UARTEx_RxEventCallback+0x20>
		UART_OS_RcvToIdle_CB(&gpsUART, Size);
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <HAL_UARTEx_RxEventCallback+0x28>)
 8000b90:	f00b fdc2 	bl	800c718 <UART_OS_RcvToIdle_CB>
	}

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000032c 	.word	0x2000032c

08000ba0 <CANFrame_RcvDoneHandler>:

void CANFrame_RcvDoneHandler(CANFrame_RxHeaderTypedef *CANFrame_RxHeader,
		uint8_t *str) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b099      	sub	sp, #100	; 0x64
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
	uint8_t strLen = CANFrame_RxHeader->DataLen;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	791b      	ldrb	r3, [r3, #4]
 8000bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t ID;
	char Data[50];
	int LeftState, RightState, FrontState, StopState;
	int SpeakerState;
	int res = 4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	653b      	str	r3, [r7, #80]	; 0x50
	if (str[0] != '#' || str[strLen - 1] != '\n') {
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b23      	cmp	r3, #35	; 0x23
 8000bbc:	d14b      	bne.n	8000c56 <CANFrame_RcvDoneHandler+0xb6>
 8000bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b0a      	cmp	r3, #10
 8000bcc:	d143      	bne.n	8000c56 <CANFrame_RcvDoneHandler+0xb6>
		return;
	}

	if (DataPack_Split((char*) str, &ID, Data) != 0) {
 8000bce:	f107 021c 	add.w	r2, r7, #28
 8000bd2:	f107 034f 	add.w	r3, r7, #79	; 0x4f
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6838      	ldr	r0, [r7, #0]
 8000bda:	f00b fe07 	bl	800c7ec <DataPack_Split>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d13a      	bne.n	8000c5a <CANFrame_RcvDoneHandler+0xba>
		return;
	}

	switch (ID) {
 8000be4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d002      	beq.n	8000bf2 <CANFrame_RcvDoneHandler+0x52>
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d020      	beq.n	8000c32 <CANFrame_RcvDoneHandler+0x92>
		if (res != 0)
			return;
		LEDSpeaker_setSpeaker(&LEDSpeaker, SpeakerState);
		break;
	default:
		break;
 8000bf0:	e038      	b.n	8000c64 <CANFrame_RcvDoneHandler+0xc4>
		res = DataPack_GetLEDState(Data, &LeftState, &RightState, &FrontState,
 8000bf2:	f107 0410 	add.w	r4, r7, #16
 8000bf6:	f107 0214 	add.w	r2, r7, #20
 8000bfa:	f107 0118 	add.w	r1, r7, #24
 8000bfe:	f107 001c 	add.w	r0, r7, #28
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4623      	mov	r3, r4
 8000c0a:	f00b fe2b 	bl	800c864 <DataPack_GetLEDState>
 8000c0e:	6538      	str	r0, [r7, #80]	; 0x50
		if (res != 0)
 8000c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d123      	bne.n	8000c5e <CANFrame_RcvDoneHandler+0xbe>
		LEDSpeaker_SetLED(&LEDSpeaker, LeftState, RightState, FrontState,
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	b2d9      	uxtb	r1, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	b2d8      	uxtb	r0, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4810      	ldr	r0, [pc, #64]	; (8000c6c <CANFrame_RcvDoneHandler+0xcc>)
 8000c2c:	f00a fd84 	bl	800b738 <LEDSpeaker_SetLED>
		break;
 8000c30:	e018      	b.n	8000c64 <CANFrame_RcvDoneHandler+0xc4>
		DataPack_GetSpeakerState(Data, &SpeakerState);
 8000c32:	f107 0208 	add.w	r2, r7, #8
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f00b fe5f 	bl	800c900 <DataPack_GetSpeakerState>
		if (res != 0)
 8000c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10c      	bne.n	8000c62 <CANFrame_RcvDoneHandler+0xc2>
		LEDSpeaker_setSpeaker(&LEDSpeaker, SpeakerState);
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <CANFrame_RcvDoneHandler+0xcc>)
 8000c50:	f00a fdbc 	bl	800b7cc <LEDSpeaker_setSpeaker>
		break;
 8000c54:	e006      	b.n	8000c64 <CANFrame_RcvDoneHandler+0xc4>
		return;
 8000c56:	bf00      	nop
 8000c58:	e004      	b.n	8000c64 <CANFrame_RcvDoneHandler+0xc4>
		return;
 8000c5a:	bf00      	nop
 8000c5c:	e002      	b.n	8000c64 <CANFrame_RcvDoneHandler+0xc4>
			return;
 8000c5e:	bf00      	nop
 8000c60:	e000      	b.n	8000c64 <CANFrame_RcvDoneHandler+0xc4>
			return;
 8000c62:	bf00      	nop
	}
}
 8000c64:	375c      	adds	r7, #92	; 0x5c
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000030 	.word	0x20000030

08000c70 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	I2C_OS_Init(&mainI2C, &hi2c1);
 8000c78:	492b      	ldr	r1, [pc, #172]	; (8000d28 <StartDefaultTask+0xb8>)
 8000c7a:	482c      	ldr	r0, [pc, #176]	; (8000d2c <StartDefaultTask+0xbc>)
 8000c7c:	f00b fbd0 	bl	800c420 <I2C_OS_Init>
	CAN_OS_Init(&CANmain, &hcan);
 8000c80:	492b      	ldr	r1, [pc, #172]	; (8000d30 <StartDefaultTask+0xc0>)
 8000c82:	482c      	ldr	r0, [pc, #176]	; (8000d34 <StartDefaultTask+0xc4>)
 8000c84:	f00b f9ee 	bl	800c064 <CAN_OS_Init>
	UART_OS_Init(&gpsUART, &huart2);
 8000c88:	492b      	ldr	r1, [pc, #172]	; (8000d38 <StartDefaultTask+0xc8>)
 8000c8a:	482c      	ldr	r0, [pc, #176]	; (8000d3c <StartDefaultTask+0xcc>)
 8000c8c:	f00b fd26 	bl	800c6dc <UART_OS_Init>
//	GPS_Init(&GPS, &gpsUART, 100);
	INA219_Init(&INA219_main, &mainI2C, INA219_ADDRESS_Default);
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	4926      	ldr	r1, [pc, #152]	; (8000d2c <StartDefaultTask+0xbc>)
 8000c94:	482a      	ldr	r0, [pc, #168]	; (8000d40 <StartDefaultTask+0xd0>)
 8000c96:	f00a fd1f 	bl	800b6d8 <INA219_Init>
	INA219_setCalibration_32V_2A(&INA219_main);
 8000c9a:	4829      	ldr	r0, [pc, #164]	; (8000d40 <StartDefaultTask+0xd0>)
 8000c9c:	f00a fcf8 	bl	800b690 <INA219_setCalibration_32V_2A>
	PowerPublisher_Init(&PowerPub, &INA219_main, &CANFrame_Handler, 20);
 8000ca0:	2314      	movs	r3, #20
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <StartDefaultTask+0xd4>)
 8000ca4:	4926      	ldr	r1, [pc, #152]	; (8000d40 <StartDefaultTask+0xd0>)
 8000ca6:	4828      	ldr	r0, [pc, #160]	; (8000d48 <StartDefaultTask+0xd8>)
 8000ca8:	f00a fbd4 	bl	800b454 <PowerPublisher_Init>

//	isotp_init_link(&g_link, CANFRAME_MASTER_ID, g_isotpSendBuf, ISOTP_BUFSIZE,
//			g_isotpRecvBuf,
//			ISOTP_BUFSIZE);
//	g_link.receive_arbitration_id = CANFRAME_LIGHT_GPS_ID;
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateTxCB_ID, CAN_TxCallback);
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <StartDefaultTask+0xdc>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4820      	ldr	r0, [pc, #128]	; (8000d34 <StartDefaultTask+0xc4>)
 8000cb2:	f00b fb3e 	bl	800c332 <CAN_OS_RegisterCB>
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateRxFifo0_ID, CAN_RxFifo0Callback);
 8000cb6:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <StartDefaultTask+0xe0>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <StartDefaultTask+0xc4>)
 8000cbc:	f00b fb39 	bl	800c332 <CAN_OS_RegisterCB>

	CANFrame_Init(&CANFrame_Handler, &CANmain, CANFRAME_MASTER_ID,
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	491b      	ldr	r1, [pc, #108]	; (8000d34 <StartDefaultTask+0xc4>)
 8000cc6:	481f      	ldr	r0, [pc, #124]	; (8000d44 <StartDefaultTask+0xd4>)
 8000cc8:	f00a ffd4 	bl	800bc74 <CANFrame_Init>
	CAN_RX_FIFO0);
	CANFrame_RegCB(&CANFrame_Handler, CANFRAME_RCVCPLT_CB_ID,
 8000ccc:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <StartDefaultTask+0xe4>)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	481c      	ldr	r0, [pc, #112]	; (8000d44 <StartDefaultTask+0xd4>)
 8000cd2:	f00b f979 	bl	800bfc8 <CANFrame_RegCB>
			CANFrame_RcvDoneHandler);
	CAN_OS_Start(&CANmain);
 8000cd6:	4817      	ldr	r0, [pc, #92]	; (8000d34 <StartDefaultTask+0xc4>)
 8000cd8:	f00b fa02 	bl	800c0e0 <CAN_OS_Start>

//	GPSPublisher_Init(&GPSPub, &GPS, &CANFrame_Handler, 10);
//	GPSPublisher_Start(&GPSPub, 1);
	PowerPublisher_Start(&PowerPub, 1);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	481a      	ldr	r0, [pc, #104]	; (8000d48 <StartDefaultTask+0xd8>)
 8000ce0:	f00a fbde 	bl	800b4a0 <PowerPublisher_Start>
	osThreadSetPriority(tDefaultHandle, osPriorityBelowNormal);
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <StartDefaultTask+0xe8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2110      	movs	r1, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f005 fee4 	bl	8006ab8 <osThreadSetPriority>
	/* Infinite loop */
	for (;;) {
		GPIO_TogglePin(Blinker);
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <StartDefaultTask+0xec>)
 8000cf2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cf6:	f00b fb70 	bl	800c3da <GPIO_TogglePin>
		SyncPrintf(
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <StartDefaultTask+0xd4>)
 8000cfc:	f8d3 1320 	ldr.w	r1, [r3, #800]	; 0x320
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <StartDefaultTask+0xd4>)
 8000d02:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <StartDefaultTask+0xd4>)
 8000d08:	f8d3 0328 	ldr.w	r0, [r3, #808]	; 0x328
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <StartDefaultTask+0xd4>)
 8000d0e:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4603      	mov	r3, r0
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <StartDefaultTask+0xf0>)
 8000d18:	f00b fc9c 	bl	800c654 <SyncPrintf>
				"Send Success %ld Send Fail %ld Rcv Success %ld Rcv Failed %ld\r\n ",
				CANFrame_Handler.SendSuccessCounter,
				CANFrame_Handler.SendFailedCounter,
				CANFrame_Handler.RcvSucessCounter,
				CANFrame_Handler.RcvFailedCounter);
		osDelay(500);
 8000d1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d20:	f005 ff6e 	bl	8006c00 <osDelay>
		GPIO_TogglePin(Blinker);
 8000d24:	e7e4      	b.n	8000cf0 <StartDefaultTask+0x80>
 8000d26:	bf00      	nop
 8000d28:	20000130 	.word	0x20000130
 8000d2c:	20000340 	.word	0x20000340
 8000d30:	200000cc 	.word	0x200000cc
 8000d34:	2000035c 	.word	0x2000035c
 8000d38:	20000214 	.word	0x20000214
 8000d3c:	2000032c 	.word	0x2000032c
 8000d40:	2000034c 	.word	0x2000034c
 8000d44:	2000036c 	.word	0x2000036c
 8000d48:	2000069c 	.word	0x2000069c
 8000d4c:	08000ae5 	.word	0x08000ae5
 8000d50:	08000b09 	.word	0x08000b09
 8000d54:	08000ba1 	.word	0x08000ba1
 8000d58:	20000328 	.word	0x20000328
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	0800df5c 	.word	0x0800df5c

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_MspInit+0x68>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <HAL_MspInit+0x68>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_MspInit+0x68>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_MspInit+0x68>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_MspInit+0x68>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_MspInit+0x68>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	210f      	movs	r1, #15
 8000daa:	f06f 0001 	mvn.w	r0, #1
 8000dae:	f001 fcc4 	bl	800273a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_MspInit+0x6c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_MspInit+0x6c>)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010000 	.word	0x40010000

08000de0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <HAL_CAN_MspInit+0xcc>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d151      	bne.n	8000ea4 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <HAL_CAN_MspInit+0xd0>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	4a2a      	ldr	r2, [pc, #168]	; (8000eb0 <HAL_CAN_MspInit+0xd0>)
 8000e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e0a:	61d3      	str	r3, [r2, #28]
 8000e0c:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <HAL_CAN_MspInit+0xd0>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <HAL_CAN_MspInit+0xd0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a24      	ldr	r2, [pc, #144]	; (8000eb0 <HAL_CAN_MspInit+0xd0>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <HAL_CAN_MspInit+0xd0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4619      	mov	r1, r3
 8000e44:	481b      	ldr	r0, [pc, #108]	; (8000eb4 <HAL_CAN_MspInit+0xd4>)
 8000e46:	f001 fed1 	bl	8002bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <HAL_CAN_MspInit+0xd4>)
 8000e60:	f001 fec4 	bl	8002bec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2105      	movs	r1, #5
 8000e68:	2013      	movs	r0, #19
 8000e6a:	f001 fc66 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000e6e:	2013      	movs	r0, #19
 8000e70:	f001 fc7f 	bl	8002772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2105      	movs	r1, #5
 8000e78:	2014      	movs	r0, #20
 8000e7a:	f001 fc5e 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f001 fc77 	bl	8002772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2105      	movs	r1, #5
 8000e88:	2015      	movs	r0, #21
 8000e8a:	f001 fc56 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e8e:	2015      	movs	r0, #21
 8000e90:	f001 fc6f 	bl	8002772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2105      	movs	r1, #5
 8000e98:	2016      	movs	r0, #22
 8000e9a:	f001 fc4e 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000e9e:	2016      	movs	r0, #22
 8000ea0:	f001 fc67 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3720      	adds	r7, #32
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40006400 	.word	0x40006400
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_I2C_MspInit+0x80>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d12b      	bne.n	8000f30 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef0:	23c0      	movs	r3, #192	; 0xc0
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <HAL_I2C_MspInit+0x88>)
 8000f04:	f001 fe72 	bl	8002bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f12:	61d3      	str	r3, [r2, #28]
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_I2C_MspInit+0x84>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2105      	movs	r1, #5
 8000f24:	201f      	movs	r0, #31
 8000f26:	f001 fc08 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f2a:	201f      	movs	r0, #31
 8000f2c:	f001 fc21 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_TIM_Base_MspInit+0x34>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_Base_MspInit+0x38>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_TIM_Base_MspInit+0x38>)
 8000f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f60:	6193      	str	r3, [r2, #24]
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_TIM_Base_MspInit+0x38>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40012c00 	.word	0x40012c00
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a79      	ldr	r2, [pc, #484]	; (8001180 <HAL_UART_MspInit+0x200>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f040 8087 	bne.w	80010b0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa2:	4b78      	ldr	r3, [pc, #480]	; (8001184 <HAL_UART_MspInit+0x204>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a77      	ldr	r2, [pc, #476]	; (8001184 <HAL_UART_MspInit+0x204>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b75      	ldr	r3, [pc, #468]	; (8001184 <HAL_UART_MspInit+0x204>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b72      	ldr	r3, [pc, #456]	; (8001184 <HAL_UART_MspInit+0x204>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a71      	ldr	r2, [pc, #452]	; (8001184 <HAL_UART_MspInit+0x204>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <HAL_UART_MspInit+0x204>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4868      	ldr	r0, [pc, #416]	; (8001188 <HAL_UART_MspInit+0x208>)
 8000fe8:	f001 fe00 	bl	8002bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4861      	ldr	r0, [pc, #388]	; (8001188 <HAL_UART_MspInit+0x208>)
 8001002:	f001 fdf3 	bl	8002bec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001006:	4b61      	ldr	r3, [pc, #388]	; (800118c <HAL_UART_MspInit+0x20c>)
 8001008:	4a61      	ldr	r2, [pc, #388]	; (8001190 <HAL_UART_MspInit+0x210>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800100c:	4b5f      	ldr	r3, [pc, #380]	; (800118c <HAL_UART_MspInit+0x20c>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001012:	4b5e      	ldr	r3, [pc, #376]	; (800118c <HAL_UART_MspInit+0x20c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <HAL_UART_MspInit+0x20c>)
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	4b5b      	ldr	r3, [pc, #364]	; (800118c <HAL_UART_MspInit+0x20c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001024:	4b59      	ldr	r3, [pc, #356]	; (800118c <HAL_UART_MspInit+0x20c>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800102a:	4b58      	ldr	r3, [pc, #352]	; (800118c <HAL_UART_MspInit+0x20c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b56      	ldr	r3, [pc, #344]	; (800118c <HAL_UART_MspInit+0x20c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001036:	4855      	ldr	r0, [pc, #340]	; (800118c <HAL_UART_MspInit+0x20c>)
 8001038:	f001 fbb6 	bl	80027a8 <HAL_DMA_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001042:	f7ff fe8f 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_UART_MspInit+0x20c>)
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_UART_MspInit+0x20c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001052:	4b50      	ldr	r3, [pc, #320]	; (8001194 <HAL_UART_MspInit+0x214>)
 8001054:	4a50      	ldr	r2, [pc, #320]	; (8001198 <HAL_UART_MspInit+0x218>)
 8001056:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001058:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <HAL_UART_MspInit+0x214>)
 800105a:	2210      	movs	r2, #16
 800105c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800105e:	4b4d      	ldr	r3, [pc, #308]	; (8001194 <HAL_UART_MspInit+0x214>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_UART_MspInit+0x214>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106a:	4b4a      	ldr	r3, [pc, #296]	; (8001194 <HAL_UART_MspInit+0x214>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001070:	4b48      	ldr	r3, [pc, #288]	; (8001194 <HAL_UART_MspInit+0x214>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_UART_MspInit+0x214>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800107c:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HAL_UART_MspInit+0x214>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001082:	4844      	ldr	r0, [pc, #272]	; (8001194 <HAL_UART_MspInit+0x214>)
 8001084:	f001 fb90 	bl	80027a8 <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800108e:	f7ff fe69 	bl	8000d64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <HAL_UART_MspInit+0x214>)
 8001096:	639a      	str	r2, [r3, #56]	; 0x38
 8001098:	4a3e      	ldr	r2, [pc, #248]	; (8001194 <HAL_UART_MspInit+0x214>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2105      	movs	r1, #5
 80010a2:	2025      	movs	r0, #37	; 0x25
 80010a4:	f001 fb49 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010a8:	2025      	movs	r0, #37	; 0x25
 80010aa:	f001 fb62 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ae:	e063      	b.n	8001178 <HAL_UART_MspInit+0x1f8>
  else if(huart->Instance==USART2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a39      	ldr	r2, [pc, #228]	; (800119c <HAL_UART_MspInit+0x21c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d15e      	bne.n	8001178 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ba:	4b32      	ldr	r3, [pc, #200]	; (8001184 <HAL_UART_MspInit+0x204>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a31      	ldr	r2, [pc, #196]	; (8001184 <HAL_UART_MspInit+0x204>)
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <HAL_UART_MspInit+0x204>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <HAL_UART_MspInit+0x204>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a2b      	ldr	r2, [pc, #172]	; (8001184 <HAL_UART_MspInit+0x204>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6193      	str	r3, [r2, #24]
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_UART_MspInit+0x204>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <HAL_UART_MspInit+0x208>)
 80010fe:	f001 fd75 	bl	8002bec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001102:	2308      	movs	r3, #8
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	4619      	mov	r1, r3
 8001114:	481c      	ldr	r0, [pc, #112]	; (8001188 <HAL_UART_MspInit+0x208>)
 8001116:	f001 fd69 	bl	8002bec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800111a:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <HAL_UART_MspInit+0x220>)
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_UART_MspInit+0x224>)
 800111e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_UART_MspInit+0x220>)
 8001122:	2200      	movs	r2, #0
 8001124:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <HAL_UART_MspInit+0x220>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_UART_MspInit+0x220>)
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_UART_MspInit+0x220>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_UART_MspInit+0x220>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0x220>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_UART_MspInit+0x220>)
 8001146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800114a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <HAL_UART_MspInit+0x220>)
 800114e:	f001 fb2b 	bl	80027a8 <HAL_DMA_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001158:	f7ff fe04 	bl	8000d64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_UART_MspInit+0x220>)
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_UART_MspInit+0x220>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2105      	movs	r1, #5
 800116c:	2026      	movs	r0, #38	; 0x26
 800116e:	f001 fae4 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001172:	2026      	movs	r0, #38	; 0x26
 8001174:	f001 fafd 	bl	8002772 <HAL_NVIC_EnableIRQ>
}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40013800 	.word	0x40013800
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800
 800118c:	2000025c 	.word	0x2000025c
 8001190:	40020058 	.word	0x40020058
 8001194:	200002a0 	.word	0x200002a0
 8001198:	40020044 	.word	0x40020044
 800119c:	40004400 	.word	0x40004400
 80011a0:	200002e4 	.word	0x200002e4
 80011a4:	4002006c 	.word	0x4002006c

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>
	...

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SyncPrintf("HardFault Handler\r\n");
 80011b4:	4801      	ldr	r0, [pc, #4]	; (80011bc <HardFault_Handler+0xc>)
 80011b6:	f00b fa4d 	bl	800c654 <SyncPrintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0xa>
 80011bc:	0800dfa0 	.word	0x0800dfa0

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e2:	f000 f99f 	bl	8001524 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011e6:	f008 ffd7 	bl	800a198 <xTaskGetSchedulerState>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d001      	beq.n	80011f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011f0:	f009 fe72 	bl	800aed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA1_Channel4_IRQHandler+0x10>)
 80011fe:	f001 fbe1 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002a0 	.word	0x200002a0

0800120c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA1_Channel5_IRQHandler+0x10>)
 8001212:	f001 fbd7 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000025c 	.word	0x2000025c

08001220 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <DMA1_Channel6_IRQHandler+0x10>)
 8001226:	f001 fbcd 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002e4 	.word	0x200002e4

08001234 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800123a:	f000 ff6c 	bl	8002116 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000cc 	.word	0x200000cc

08001248 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800124e:	f000 ff62 	bl	8002116 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000cc 	.word	0x200000cc

0800125c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <CAN1_RX1_IRQHandler+0x10>)
 8001262:	f000 ff58 	bl	8002116 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000cc 	.word	0x200000cc

08001270 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <CAN1_SCE_IRQHandler+0x10>)
 8001276:	f000 ff4e 	bl	8002116 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000cc 	.word	0x200000cc

08001284 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <I2C1_EV_IRQHandler+0x10>)
 800128a:	f002 fa4f 	bl	800372c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000130 	.word	0x20000130

08001298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART1_IRQHandler+0x10>)
 800129e:	f004 fda1 	bl	8005de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001cc 	.word	0x200001cc

080012ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <USART2_IRQHandler+0x10>)
 80012b2:	f004 fd97 	bl	8005de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000214 	.word	0x20000214

080012c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <_kill>:

int _kill(int pid, int sig)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d8:	f00b fe2e 	bl	800cf38 <__errno>
 80012dc:	4603      	mov	r3, r0
 80012de:	2216      	movs	r2, #22
 80012e0:	601a      	str	r2, [r3, #0]
  return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_exit>:

void _exit (int status)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f6:	f04f 31ff 	mov.w	r1, #4294967295
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffe7 	bl	80012ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001300:	e7fe      	b.n	8001300 <_exit+0x12>

08001302 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e00a      	b.n	800132a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001314:	f3af 8000 	nop.w
 8001318:	4601      	mov	r1, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	b2ca      	uxtb	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbf0      	blt.n	8001314 <_read+0x12>
  }

  return len;
 8001332:	687b      	ldr	r3, [r7, #4]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e009      	b.n	8001362 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	dbf1      	blt.n	800134e <_write+0x12>
  }
  return len;
 800136a:	687b      	ldr	r3, [r7, #4]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_close>:

int _close(int file)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_isatty>:

int _isatty(int file)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f00b fd98 	bl	800cf38 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20005000 	.word	0x20005000
 8001434:	00000400 	.word	0x00000400
 8001438:	200006bc 	.word	0x200006bc
 800143c:	200035f8 	.word	0x200035f8

08001440 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800144c:	f7ff fff8 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001452:	490c      	ldr	r1, [pc, #48]	; (8001484 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001468:	4c09      	ldr	r4, [pc, #36]	; (8001490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001476:	f00b fd65 	bl	800cf44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147a:	f7ff f8ed 	bl	8000658 <main>
  bx lr
 800147e:	4770      	bx	lr
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001488:	0800e3ac 	.word	0x0800e3ac
  ldr r2, =_sbss
 800148c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001490:	200035f4 	.word	0x200035f4

08001494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_2_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f001 f93b 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fc5c 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 f953 	bl	800278e <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f001 f91b 	bl	800273a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000044 	.word	0x20000044
 800151c:	2000004c 	.word	0x2000004c
 8001520:	20000048 	.word	0x20000048

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x1c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x20>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a03      	ldr	r2, [pc, #12]	; (8001544 <HAL_IncTick+0x20>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	2000004c 	.word	0x2000004c
 8001544:	200006c0 	.word	0x200006c0

08001548 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b02      	ldr	r3, [pc, #8]	; (8001558 <HAL_GetTick+0x10>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	200006c0 	.word	0x200006c0

0800155c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e11c      	b.n	80017a8 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d131      	bne.n	80015de <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a8c      	ldr	r2, [pc, #560]	; (80017b0 <HAL_CAN_Init+0x254>)
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a8c      	ldr	r2, [pc, #560]	; (80017b4 <HAL_CAN_Init+0x258>)
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a8b      	ldr	r2, [pc, #556]	; (80017b8 <HAL_CAN_Init+0x25c>)
 800158a:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a8b      	ldr	r2, [pc, #556]	; (80017bc <HAL_CAN_Init+0x260>)
 8001590:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a8a      	ldr	r2, [pc, #552]	; (80017c0 <HAL_CAN_Init+0x264>)
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a8a      	ldr	r2, [pc, #552]	; (80017c4 <HAL_CAN_Init+0x268>)
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a89      	ldr	r2, [pc, #548]	; (80017c8 <HAL_CAN_Init+0x26c>)
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a89      	ldr	r2, [pc, #548]	; (80017cc <HAL_CAN_Init+0x270>)
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a88      	ldr	r2, [pc, #544]	; (80017d0 <HAL_CAN_Init+0x274>)
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a88      	ldr	r2, [pc, #544]	; (80017d4 <HAL_CAN_Init+0x278>)
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a87      	ldr	r2, [pc, #540]	; (80017d8 <HAL_CAN_Init+0x27c>)
 80015ba:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a87      	ldr	r2, [pc, #540]	; (80017dc <HAL_CAN_Init+0x280>)
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a86      	ldr	r2, [pc, #536]	; (80017e0 <HAL_CAN_Init+0x284>)
 80015c6:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a84      	ldr	r2, [pc, #528]	; (80017e4 <HAL_CAN_Init+0x288>)
 80015d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0201 	orr.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ee:	f7ff ffab 	bl	8001548 <HAL_GetTick>
 80015f2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015f4:	e012      	b.n	800161c <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f6:	f7ff ffa7 	bl	8001548 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b0a      	cmp	r3, #10
 8001602:	d90b      	bls.n	800161c <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2205      	movs	r2, #5
 8001614:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0c5      	b.n	80017a8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0e5      	beq.n	80015f6 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0202 	bic.w	r2, r2, #2
 8001638:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163a:	f7ff ff85 	bl	8001548 <HAL_GetTick>
 800163e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001640:	e012      	b.n	8001668 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001642:	f7ff ff81 	bl	8001548 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b0a      	cmp	r3, #10
 800164e:	d90b      	bls.n	8001668 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2205      	movs	r2, #5
 8001660:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e09f      	b.n	80017a8 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e5      	bne.n	8001642 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7e1b      	ldrb	r3, [r3, #24]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e007      	b.n	80016a0 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800169e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e5b      	ldrb	r3, [r3, #25]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7e9b      	ldrb	r3, [r3, #26]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0220 	orr.w	r2, r2, #32
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0220 	bic.w	r2, r2, #32
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7edb      	ldrb	r3, [r3, #27]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0210 	bic.w	r2, r2, #16
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0210 	orr.w	r2, r2, #16
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7f1b      	ldrb	r3, [r3, #28]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0208 	orr.w	r2, r2, #8
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e007      	b.n	8001748 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0208 	bic.w	r2, r2, #8
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7f5b      	ldrb	r3, [r3, #29]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0204 	orr.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e007      	b.n	8001772 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0204 	bic.w	r2, r2, #4
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	ea42 0103 	orr.w	r1, r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	1e5a      	subs	r2, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	0800250d 	.word	0x0800250d
 80017b4:	0800251f 	.word	0x0800251f
 80017b8:	08002531 	.word	0x08002531
 80017bc:	08002543 	.word	0x08002543
 80017c0:	080024a1 	.word	0x080024a1
 80017c4:	080024b3 	.word	0x080024b3
 80017c8:	080024c5 	.word	0x080024c5
 80017cc:	080024d7 	.word	0x080024d7
 80017d0:	080024e9 	.word	0x080024e9
 80017d4:	080024fb 	.word	0x080024fb
 80017d8:	08002555 	.word	0x08002555
 80017dc:	08002567 	.word	0x08002567
 80017e0:	08002579 	.word	0x08002579
 80017e4:	08000de1 	.word	0x08000de1

080017e8 <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	460b      	mov	r3, r1
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d107      	bne.n	8001810 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e094      	b.n	800193a <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d168      	bne.n	80018ee <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 800181c:	7afb      	ldrb	r3, [r7, #11]
 800181e:	2b0e      	cmp	r3, #14
 8001820:	d85c      	bhi.n	80018dc <HAL_CAN_RegisterCallback+0xf4>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_CAN_RegisterCallback+0x40>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	08001865 	.word	0x08001865
 800182c:	0800186d 	.word	0x0800186d
 8001830:	08001875 	.word	0x08001875
 8001834:	0800187d 	.word	0x0800187d
 8001838:	08001885 	.word	0x08001885
 800183c:	0800188d 	.word	0x0800188d
 8001840:	08001895 	.word	0x08001895
 8001844:	0800189d 	.word	0x0800189d
 8001848:	080018a5 	.word	0x080018a5
 800184c:	080018ad 	.word	0x080018ad
 8001850:	080018b5 	.word	0x080018b5
 8001854:	080018bd 	.word	0x080018bd
 8001858:	080018c5 	.word	0x080018c5
 800185c:	080018cd 	.word	0x080018cd
 8001860:	080018d5 	.word	0x080018d5
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800186a:	e065      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8001872:	e061      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800187a:	e05d      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 8001882:	e059      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800188a:	e055      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8001892:	e051      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800189a:	e04d      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80018a2:	e049      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80018aa:	e045      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80018b2:	e041      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80018ba:	e03d      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80018c2:	e039      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80018ca:	e035      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80018d2:	e031      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80018da:	e02d      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	75fb      	strb	r3, [r7, #23]
        break;
 80018ec:	e024      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d116      	bne.n	8001928 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	2b0d      	cmp	r3, #13
 80018fe:	d002      	beq.n	8001906 <HAL_CAN_RegisterCallback+0x11e>
 8001900:	2b0e      	cmp	r3, #14
 8001902:	d004      	beq.n	800190e <HAL_CAN_RegisterCallback+0x126>
 8001904:	e007      	b.n	8001916 <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800190c:	e014      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8001914:	e010      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
        break;
 8001926:	e007      	b.n	8001938 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001938:	7dfb      	ldrb	r3, [r7, #23]
}
 800193a:	4618      	mov	r0, r3
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800195c:	7cfb      	ldrb	r3, [r7, #19]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d003      	beq.n	800196a <HAL_CAN_ConfigFilter+0x26>
 8001962:	7cfb      	ldrb	r3, [r7, #19]
 8001964:	2b02      	cmp	r3, #2
 8001966:	f040 80aa 	bne.w	8001abe <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2201      	movs	r2, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d123      	bne.n	80019ec <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3248      	adds	r2, #72	; 0x48
 80019cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019e2:	6979      	ldr	r1, [r7, #20]
 80019e4:	3348      	adds	r3, #72	; 0x48
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d122      	bne.n	8001a3a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3248      	adds	r2, #72	; 0x48
 8001a1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a30:	6979      	ldr	r1, [r7, #20]
 8001a32:	3348      	adds	r3, #72	; 0x48
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a80:	e007      	b.n	8001a92 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ab0:	f023 0201 	bic.w	r2, r3, #1
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e006      	b.n	8001acc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
  }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d12e      	bne.n	8001b48 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b02:	f7ff fd21 	bl	8001548 <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b08:	e012      	b.n	8001b30 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b0a:	f7ff fd1d 	bl	8001548 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b0a      	cmp	r3, #10
 8001b16:	d90b      	bls.n	8001b30 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2205      	movs	r2, #5
 8001b28:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e012      	b.n	8001b56 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e5      	bne.n	8001b0a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e006      	b.n	8001b56 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d133      	bne.n	8001bda <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0201 	orr.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b82:	f7ff fce1 	bl	8001548 <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b88:	e012      	b.n	8001bb0 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b8a:	f7ff fcdd 	bl	8001548 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b0a      	cmp	r3, #10
 8001b96:	d90b      	bls.n	8001bb0 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e01b      	b.n	8001be8 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0e5      	beq.n	8001b8a <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0202 	bic.w	r2, r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	e006      	b.n	8001be8 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c0e:	7ffb      	ldrb	r3, [r7, #31]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d003      	beq.n	8001c1c <HAL_CAN_AddTxMessage+0x2c>
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 80ad 	bne.w	8001d76 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10a      	bne.n	8001c3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8095 	beq.w	8001d66 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	0e1b      	lsrs	r3, r3, #24
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c46:	2201      	movs	r2, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10d      	bne.n	8001c74 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c62:	68f9      	ldr	r1, [r7, #12]
 8001c64:	6809      	ldr	r1, [r1, #0]
 8001c66:	431a      	orrs	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3318      	adds	r3, #24
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	440b      	add	r3, r1
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e00f      	b.n	8001c94 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c7e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c88:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	440b      	add	r3, r1
 8001c92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3318      	adds	r3, #24
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	7d1b      	ldrb	r3, [r3, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d111      	bne.n	8001cd4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3318      	adds	r3, #24
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4413      	add	r3, r2
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6811      	ldr	r1, [r2, #0]
 8001cc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3318      	adds	r3, #24
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	061a      	lsls	r2, r3, #24
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3306      	adds	r3, #6
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	041b      	lsls	r3, r3, #16
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3305      	adds	r3, #5
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	3204      	adds	r2, #4
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	ea43 0200 	orr.w	r2, r3, r0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	440b      	add	r3, r1
 8001d06:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3303      	adds	r3, #3
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	061a      	lsls	r2, r3, #24
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3302      	adds	r3, #2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	041b      	lsls	r3, r3, #16
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3301      	adds	r3, #1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	4313      	orrs	r3, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	6811      	ldr	r1, [r2, #0]
 8001d32:	ea43 0200 	orr.w	r2, r3, r0
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3318      	adds	r3, #24
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6811      	ldr	r1, [r2, #0]
 8001d54:	f043 0201 	orr.w	r2, r3, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3318      	adds	r3, #24
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	440b      	add	r3, r1
 8001d60:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e00e      	b.n	8001d84 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e006      	b.n	8001d84 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
  }
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3724      	adds	r7, #36	; 0x24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr

08001d8e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001da8:	7afb      	ldrb	r3, [r7, #11]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d11d      	bne.n	8001dea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e0c:	7afb      	ldrb	r3, [r7, #11]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d002      	beq.n	8001e18 <HAL_CAN_IsTxMessagePending+0x22>
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d10b      	bne.n	8001e30 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	069b      	lsls	r3, r3, #26
 8001e22:	401a      	ands	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	069b      	lsls	r3, r3, #26
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001e30:	68fb      	ldr	r3, [r7, #12]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e50:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d003      	beq.n	8001e60 <HAL_CAN_GetRxMessage+0x24>
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	f040 8103 	bne.w	8002066 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10e      	bne.n	8001e84 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d116      	bne.n	8001ea2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0f7      	b.n	8002074 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0e8      	b.n	8002074 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	331b      	adds	r3, #27
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	4413      	add	r3, r2
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0204 	and.w	r2, r3, #4
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10c      	bne.n	8001eda <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	331b      	adds	r3, #27
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	4413      	add	r3, r2
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	0d5b      	lsrs	r3, r3, #21
 8001ed0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	331b      	adds	r3, #27
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	08db      	lsrs	r3, r3, #3
 8001eea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	331b      	adds	r3, #27
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0202 	and.w	r2, r3, #2
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	331b      	adds	r3, #27
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2208      	movs	r2, #8
 8001f24:	611a      	str	r2, [r3, #16]
 8001f26:	e00b      	b.n	8001f40 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	331b      	adds	r3, #27
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	331b      	adds	r3, #27
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	331b      	adds	r3, #27
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	4413      	add	r3, r2
 8001f64:	3304      	adds	r3, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0a1a      	lsrs	r2, r3, #8
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0c1a      	lsrs	r2, r3, #16
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	0e1a      	lsrs	r2, r3, #24
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3303      	adds	r3, #3
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0a1a      	lsrs	r2, r3, #8
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3305      	adds	r3, #5
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0c1a      	lsrs	r2, r3, #16
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	3306      	adds	r3, #6
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	4413      	add	r3, r2
 800202a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	0e1a      	lsrs	r2, r3, #24
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3307      	adds	r3, #7
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d108      	bne.n	8002052 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0220 	orr.w	r2, r2, #32
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	e007      	b.n	8002062 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e006      	b.n	8002074 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
  }
}
 8002074:	4618      	mov	r0, r3
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002092:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d002      	beq.n	80020a0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800209a:	7afb      	ldrb	r3, [r7, #11]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d10f      	bne.n	80020c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e005      	b.n	80020c0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80020c0:	68fb      	ldr	r3, [r7, #12]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d002      	beq.n	80020ea <HAL_CAN_ActivateNotification+0x1e>
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d109      	bne.n	80020fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6959      	ldr	r1, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e006      	b.n	800210c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b08a      	sub	sp, #40	; 0x28
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8083 	beq.w	8002264 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d025      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2201      	movs	r2, #1
 800216e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
 8002182:	e017      	b.n	80021b4 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e00d      	b.n	80021b4 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	e003      	b.n	80021b4 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d026      	beq.n	800220c <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
 80021da:	e017      	b.n	800220c <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e00d      	b.n	800220c <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e003      	b.n	800220c <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d026      	beq.n	8002264 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
 8002232:	e017      	b.n	8002264 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e00d      	b.n	8002264 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
 800225a:	e003      	b.n	8002264 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2210      	movs	r2, #16
 8002286:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2208      	movs	r2, #8
 80022a2:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2208      	movs	r2, #8
 800230a:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2208      	movs	r2, #8
 8002372:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d07b      	beq.n	800247e <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d072      	beq.n	8002476 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d008      	beq.n	80023ac <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d043      	beq.n	8002476 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d03e      	beq.n	8002476 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023fe:	2b60      	cmp	r3, #96	; 0x60
 8002400:	d02b      	beq.n	800245a <HAL_CAN_IRQHandler+0x344>
 8002402:	2b60      	cmp	r3, #96	; 0x60
 8002404:	d82e      	bhi.n	8002464 <HAL_CAN_IRQHandler+0x34e>
 8002406:	2b50      	cmp	r3, #80	; 0x50
 8002408:	d022      	beq.n	8002450 <HAL_CAN_IRQHandler+0x33a>
 800240a:	2b50      	cmp	r3, #80	; 0x50
 800240c:	d82a      	bhi.n	8002464 <HAL_CAN_IRQHandler+0x34e>
 800240e:	2b40      	cmp	r3, #64	; 0x40
 8002410:	d019      	beq.n	8002446 <HAL_CAN_IRQHandler+0x330>
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d826      	bhi.n	8002464 <HAL_CAN_IRQHandler+0x34e>
 8002416:	2b30      	cmp	r3, #48	; 0x30
 8002418:	d010      	beq.n	800243c <HAL_CAN_IRQHandler+0x326>
 800241a:	2b30      	cmp	r3, #48	; 0x30
 800241c:	d822      	bhi.n	8002464 <HAL_CAN_IRQHandler+0x34e>
 800241e:	2b10      	cmp	r3, #16
 8002420:	d002      	beq.n	8002428 <HAL_CAN_IRQHandler+0x312>
 8002422:	2b20      	cmp	r3, #32
 8002424:	d005      	beq.n	8002432 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002426:	e01d      	b.n	8002464 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002430:	e019      	b.n	8002466 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	f043 0310 	orr.w	r3, r3, #16
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800243a:	e014      	b.n	8002466 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	f043 0320 	orr.w	r3, r3, #32
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002444:	e00f      	b.n	8002466 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800244e:	e00a      	b.n	8002466 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002458:	e005      	b.n	8002466 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002462:	e000      	b.n	8002466 <HAL_CAN_IRQHandler+0x350>
            break;
 8002464:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002474:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr

0800251e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
	...

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4906      	ldr	r1, [pc, #24]	; (8002624 <__NVIC_EnableIRQ+0x34>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
         );
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f0:	d301      	bcc.n	80026f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00f      	b.n	8002716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <SysTick_Config+0x40>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fe:	210f      	movs	r1, #15
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7ff ff90 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <SysTick_Config+0x40>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <SysTick_Config+0x40>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000e010 	.word	0xe000e010

08002724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff2d 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff42 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff90 	bl	800267c <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5f 	bl	8002628 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff35 	bl	80025f0 <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa2 	bl	80026e0 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e043      	b.n	8002846 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <HAL_DMA_Init+0xa8>)
 80027c6:	4413      	add	r3, r2
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <HAL_DMA_Init+0xac>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	009a      	lsls	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_DMA_Init+0xb0>)
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	bffdfff8 	.word	0xbffdfff8
 8002854:	cccccccd 	.word	0xcccccccd
 8002858:	40020000 	.word	0x40020000

0800285c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d008      	beq.n	8002886 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2204      	movs	r2, #4
 8002878:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e020      	b.n	80028c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 020e 	bic.w	r2, r2, #14
 8002894:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	2101      	movs	r1, #1
 80028b0:	fa01 f202 	lsl.w	r2, r1, r2
 80028b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d005      	beq.n	80028f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2204      	movs	r2, #4
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e051      	b.n	800299c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 020e 	bic.w	r2, r2, #14
 8002906:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_DMA_Abort_IT+0xd4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d029      	beq.n	8002976 <HAL_DMA_Abort_IT+0xa2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <HAL_DMA_Abort_IT+0xd8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort_IT+0x9e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_DMA_Abort_IT+0xdc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01a      	beq.n	800296c <HAL_DMA_Abort_IT+0x98>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_DMA_Abort_IT+0xe0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d012      	beq.n	8002966 <HAL_DMA_Abort_IT+0x92>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <HAL_DMA_Abort_IT+0xe4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00a      	beq.n	8002960 <HAL_DMA_Abort_IT+0x8c>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_DMA_Abort_IT+0xe8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d102      	bne.n	800295a <HAL_DMA_Abort_IT+0x86>
 8002954:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002958:	e00e      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 800295a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800295e:	e00b      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002964:	e008      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296a:	e005      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 800296c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002970:	e002      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002972:	2310      	movs	r3, #16
 8002974:	e000      	b.n	8002978 <HAL_DMA_Abort_IT+0xa4>
 8002976:	2301      	movs	r3, #1
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <HAL_DMA_Abort_IT+0xec>)
 800297a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
    } 
  }
  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40020008 	.word	0x40020008
 80029ac:	4002001c 	.word	0x4002001c
 80029b0:	40020030 	.word	0x40020030
 80029b4:	40020044 	.word	0x40020044
 80029b8:	40020058 	.word	0x40020058
 80029bc:	4002006c 	.word	0x4002006c
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2204      	movs	r2, #4
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d04f      	beq.n	8002a8c <HAL_DMA_IRQHandler+0xc8>
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d04a      	beq.n	8002a8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d029      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xae>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a65      	ldr	r2, [pc, #404]	; (8002bb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xaa>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a63      	ldr	r2, [pc, #396]	; (8002bbc <HAL_DMA_IRQHandler+0x1f8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01a      	beq.n	8002a68 <HAL_DMA_IRQHandler+0xa4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a62      	ldr	r2, [pc, #392]	; (8002bc0 <HAL_DMA_IRQHandler+0x1fc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d012      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x9e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a60      	ldr	r2, [pc, #384]	; (8002bc4 <HAL_DMA_IRQHandler+0x200>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00a      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x98>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a5f      	ldr	r2, [pc, #380]	; (8002bc8 <HAL_DMA_IRQHandler+0x204>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d102      	bne.n	8002a56 <HAL_DMA_IRQHandler+0x92>
 8002a50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a54:	e00e      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a5a:	e00b      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a60:	e008      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a66:	e005      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6c:	e002      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a6e:	2340      	movs	r3, #64	; 0x40
 8002a70:	e000      	b.n	8002a74 <HAL_DMA_IRQHandler+0xb0>
 8002a72:	2304      	movs	r3, #4
 8002a74:	4a55      	ldr	r2, [pc, #340]	; (8002bcc <HAL_DMA_IRQHandler+0x208>)
 8002a76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8094 	beq.w	8002baa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a8a:	e08e      	b.n	8002baa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2202      	movs	r2, #2
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d056      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x186>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d051      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 020a 	bic.w	r2, r2, #10
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d029      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x166>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a37      	ldr	r2, [pc, #220]	; (8002bb8 <HAL_DMA_IRQHandler+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x162>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a35      	ldr	r2, [pc, #212]	; (8002bbc <HAL_DMA_IRQHandler+0x1f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01a      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x15c>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a34      	ldr	r2, [pc, #208]	; (8002bc0 <HAL_DMA_IRQHandler+0x1fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x156>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <HAL_DMA_IRQHandler+0x200>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x150>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a31      	ldr	r2, [pc, #196]	; (8002bc8 <HAL_DMA_IRQHandler+0x204>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x14a>
 8002b08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b0c:	e00e      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b12:	e00b      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b18:	e008      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1e:	e005      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b24:	e002      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b26:	2320      	movs	r3, #32
 8002b28:	e000      	b.n	8002b2c <HAL_DMA_IRQHandler+0x168>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_DMA_IRQHandler+0x208>)
 8002b2e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d034      	beq.n	8002baa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b48:	e02f      	b.n	8002baa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2208      	movs	r2, #8
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d028      	beq.n	8002bac <HAL_DMA_IRQHandler+0x1e8>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d023      	beq.n	8002bac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
    }
  }
  return;
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
}
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40020008 	.word	0x40020008
 8002bb8:	4002001c 	.word	0x4002001c
 8002bbc:	40020030 	.word	0x40020030
 8002bc0:	40020044 	.word	0x40020044
 8002bc4:	40020058 	.word	0x40020058
 8002bc8:	4002006c 	.word	0x4002006c
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bde:	b2db      	uxtb	r3, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b08b      	sub	sp, #44	; 0x2c
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfe:	e169      	b.n	8002ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c00:	2201      	movs	r2, #1
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f040 8158 	bne.w	8002ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4a9a      	ldr	r2, [pc, #616]	; (8002e8c <HAL_GPIO_Init+0x2a0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d05e      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c28:	4a98      	ldr	r2, [pc, #608]	; (8002e8c <HAL_GPIO_Init+0x2a0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d875      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c2e:	4a98      	ldr	r2, [pc, #608]	; (8002e90 <HAL_GPIO_Init+0x2a4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d058      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c34:	4a96      	ldr	r2, [pc, #600]	; (8002e90 <HAL_GPIO_Init+0x2a4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d86f      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c3a:	4a96      	ldr	r2, [pc, #600]	; (8002e94 <HAL_GPIO_Init+0x2a8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d052      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c40:	4a94      	ldr	r2, [pc, #592]	; (8002e94 <HAL_GPIO_Init+0x2a8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d869      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c46:	4a94      	ldr	r2, [pc, #592]	; (8002e98 <HAL_GPIO_Init+0x2ac>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d04c      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c4c:	4a92      	ldr	r2, [pc, #584]	; (8002e98 <HAL_GPIO_Init+0x2ac>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d863      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c52:	4a92      	ldr	r2, [pc, #584]	; (8002e9c <HAL_GPIO_Init+0x2b0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d046      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
 8002c58:	4a90      	ldr	r2, [pc, #576]	; (8002e9c <HAL_GPIO_Init+0x2b0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d85d      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c5e:	2b12      	cmp	r3, #18
 8002c60:	d82a      	bhi.n	8002cb8 <HAL_GPIO_Init+0xcc>
 8002c62:	2b12      	cmp	r3, #18
 8002c64:	d859      	bhi.n	8002d1a <HAL_GPIO_Init+0x12e>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <HAL_GPIO_Init+0x80>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002ce7 	.word	0x08002ce7
 8002c70:	08002cc1 	.word	0x08002cc1
 8002c74:	08002cd3 	.word	0x08002cd3
 8002c78:	08002d15 	.word	0x08002d15
 8002c7c:	08002d1b 	.word	0x08002d1b
 8002c80:	08002d1b 	.word	0x08002d1b
 8002c84:	08002d1b 	.word	0x08002d1b
 8002c88:	08002d1b 	.word	0x08002d1b
 8002c8c:	08002d1b 	.word	0x08002d1b
 8002c90:	08002d1b 	.word	0x08002d1b
 8002c94:	08002d1b 	.word	0x08002d1b
 8002c98:	08002d1b 	.word	0x08002d1b
 8002c9c:	08002d1b 	.word	0x08002d1b
 8002ca0:	08002d1b 	.word	0x08002d1b
 8002ca4:	08002d1b 	.word	0x08002d1b
 8002ca8:	08002d1b 	.word	0x08002d1b
 8002cac:	08002d1b 	.word	0x08002d1b
 8002cb0:	08002cc9 	.word	0x08002cc9
 8002cb4:	08002cdd 	.word	0x08002cdd
 8002cb8:	4a79      	ldr	r2, [pc, #484]	; (8002ea0 <HAL_GPIO_Init+0x2b4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cbe:	e02c      	b.n	8002d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	623b      	str	r3, [r7, #32]
          break;
 8002cc6:	e029      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	623b      	str	r3, [r7, #32]
          break;
 8002cd0:	e024      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	623b      	str	r3, [r7, #32]
          break;
 8002cda:	e01f      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	623b      	str	r3, [r7, #32]
          break;
 8002ce4:	e01a      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	623b      	str	r3, [r7, #32]
          break;
 8002cf2:	e013      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	611a      	str	r2, [r3, #16]
          break;
 8002d06:	e009      	b.n	8002d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	615a      	str	r2, [r3, #20]
          break;
 8002d12:	e003      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d14:	2300      	movs	r3, #0
 8002d16:	623b      	str	r3, [r7, #32]
          break;
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_Init+0x130>
          break;
 8002d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2bff      	cmp	r3, #255	; 0xff
 8002d20:	d801      	bhi.n	8002d26 <HAL_GPIO_Init+0x13a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	e001      	b.n	8002d2a <HAL_GPIO_Init+0x13e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2bff      	cmp	r3, #255	; 0xff
 8002d30:	d802      	bhi.n	8002d38 <HAL_GPIO_Init+0x14c>
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	e002      	b.n	8002d3e <HAL_GPIO_Init+0x152>
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	3b08      	subs	r3, #8
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	210f      	movs	r1, #15
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80b1 	beq.w	8002ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <HAL_GPIO_Init+0x2b8>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_GPIO_Init+0x2b8>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6193      	str	r3, [r2, #24]
 8002d78:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <HAL_GPIO_Init+0x2b8>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d84:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <HAL_GPIO_Init+0x2bc>)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <HAL_GPIO_Init+0x2c0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_GPIO_Init+0x1ec>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3f      	ldr	r2, [pc, #252]	; (8002eb0 <HAL_GPIO_Init+0x2c4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00d      	beq.n	8002dd4 <HAL_GPIO_Init+0x1e8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3e      	ldr	r2, [pc, #248]	; (8002eb4 <HAL_GPIO_Init+0x2c8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <HAL_GPIO_Init+0x1e4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3d      	ldr	r2, [pc, #244]	; (8002eb8 <HAL_GPIO_Init+0x2cc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_GPIO_Init+0x1e0>
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e006      	b.n	8002dda <HAL_GPIO_Init+0x1ee>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	e004      	b.n	8002dda <HAL_GPIO_Init+0x1ee>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e002      	b.n	8002dda <HAL_GPIO_Init+0x1ee>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_GPIO_Init+0x1ee>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	f002 0203 	and.w	r2, r2, #3
 8002de0:	0092      	lsls	r2, r2, #2
 8002de2:	4093      	lsls	r3, r2
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dea:	492f      	ldr	r1, [pc, #188]	; (8002ea8 <HAL_GPIO_Init+0x2bc>)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d006      	beq.n	8002e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	492c      	ldr	r1, [pc, #176]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e12:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4928      	ldr	r1, [pc, #160]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	4922      	ldr	r1, [pc, #136]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	491e      	ldr	r1, [pc, #120]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4918      	ldr	r1, [pc, #96]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
 8002e60:	e006      	b.n	8002e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	4914      	ldr	r1, [pc, #80]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d021      	beq.n	8002ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	490e      	ldr	r1, [pc, #56]	; (8002ebc <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	e021      	b.n	8002ece <HAL_GPIO_Init+0x2e2>
 8002e8a:	bf00      	nop
 8002e8c:	10320000 	.word	0x10320000
 8002e90:	10310000 	.word	0x10310000
 8002e94:	10220000 	.word	0x10220000
 8002e98:	10210000 	.word	0x10210000
 8002e9c:	10120000 	.word	0x10120000
 8002ea0:	10110000 	.word	0x10110000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40010800 	.word	0x40010800
 8002eb0:	40010c00 	.word	0x40010c00
 8002eb4:	40011000 	.word	0x40011000
 8002eb8:	40011400 	.word	0x40011400
 8002ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_GPIO_Init+0x304>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	4909      	ldr	r1, [pc, #36]	; (8002ef0 <HAL_GPIO_Init+0x304>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f47f ae8e 	bne.w	8002c00 <HAL_GPIO_Init+0x14>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	372c      	adds	r7, #44	; 0x2c
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
 8002f00:	4613      	mov	r3, r2
 8002f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f04:	787b      	ldrb	r3, [r7, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f10:	e003      	b.n	8002f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f36:	887a      	ldrh	r2, [r7, #2]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	43d9      	mvns	r1, r3
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	400b      	ands	r3, r1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	611a      	str	r2, [r3, #16]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e12b      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd ff9a 	bl	8000eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fbc:	f002 fb8c 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 8002fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a81      	ldr	r2, [pc, #516]	; (80031cc <HAL_I2C_Init+0x274>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d807      	bhi.n	8002fdc <HAL_I2C_Init+0x84>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a80      	ldr	r2, [pc, #512]	; (80031d0 <HAL_I2C_Init+0x278>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e006      	b.n	8002fea <HAL_I2C_Init+0x92>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a7d      	ldr	r2, [pc, #500]	; (80031d4 <HAL_I2C_Init+0x27c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bf94      	ite	ls
 8002fe4:	2301      	movls	r3, #1
 8002fe6:	2300      	movhi	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0e7      	b.n	80031c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a78      	ldr	r2, [pc, #480]	; (80031d8 <HAL_I2C_Init+0x280>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9b      	lsrs	r3, r3, #18
 8002ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a6a      	ldr	r2, [pc, #424]	; (80031cc <HAL_I2C_Init+0x274>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d802      	bhi.n	800302c <HAL_I2C_Init+0xd4>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	e009      	b.n	8003040 <HAL_I2C_Init+0xe8>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	4a69      	ldr	r2, [pc, #420]	; (80031dc <HAL_I2C_Init+0x284>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	3301      	adds	r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	495c      	ldr	r1, [pc, #368]	; (80031cc <HAL_I2C_Init+0x274>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d819      	bhi.n	8003094 <HAL_I2C_Init+0x13c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e59      	subs	r1, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fbb1 f3f3 	udiv	r3, r1, r3
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003074:	400b      	ands	r3, r1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_I2C_Init+0x138>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e59      	subs	r1, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fbb1 f3f3 	udiv	r3, r1, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	e051      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003090:	2304      	movs	r3, #4
 8003092:	e04f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d111      	bne.n	80030c0 <HAL_I2C_Init+0x168>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e58      	subs	r0, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e012      	b.n	80030e6 <HAL_I2C_Init+0x18e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf0c      	ite	eq
 80030e0:	2301      	moveq	r3, #1
 80030e2:	2300      	movne	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Init+0x196>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e022      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10e      	bne.n	8003114 <HAL_I2C_Init+0x1bc>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e58      	subs	r0, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	fbb0 f3f3 	udiv	r3, r0, r3
 8003108:	3301      	adds	r3, #1
 800310a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003112:	e00f      	b.n	8003134 <HAL_I2C_Init+0x1dc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1e58      	subs	r0, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	0099      	lsls	r1, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	fbb0 f3f3 	udiv	r3, r0, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	6809      	ldr	r1, [r1, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6911      	ldr	r1, [r2, #16]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68d2      	ldr	r2, [r2, #12]
 800316e:	4311      	orrs	r1, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	000186a0 	.word	0x000186a0
 80031d0:	001e847f 	.word	0x001e847f
 80031d4:	003d08ff 	.word	0x003d08ff
 80031d8:	431bde83 	.word	0x431bde83
 80031dc:	10624dd3 	.word	0x10624dd3

080031e0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b80      	cmp	r3, #128	; 0x80
 80031f4:	d103      	bne.n	80031fe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4603      	mov	r3, r0
 8003218:	817b      	strh	r3, [r7, #10]
 800321a:	460b      	mov	r3, r1
 800321c:	813b      	strh	r3, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	f040 808a 	bne.w	8003348 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_I2C_Mem_Write_IT+0x14c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	4a47      	ldr	r2, [pc, #284]	; (8003358 <HAL_I2C_Mem_Write_IT+0x150>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	0a1a      	lsrs	r2, r3, #8
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009a      	lsls	r2, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3b01      	subs	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d112      	bne.n	8003280 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	e064      	b.n	800334a <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d0df      	beq.n	800324e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_I2C_Mem_Write_IT+0x94>
 8003298:	2302      	movs	r3, #2
 800329a:	e056      	b.n	800334a <HAL_I2C_Mem_Write_IT+0x142>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d007      	beq.n	80032c2 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032d0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2221      	movs	r2, #33	; 0x21
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2240      	movs	r2, #64	; 0x40
 80032de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_I2C_Mem_Write_IT+0x154>)
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003304:	897a      	ldrh	r2, [r7, #10]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800330a:	893a      	ldrh	r2, [r7, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003342:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000044 	.word	0x20000044
 8003358:	14f8b589 	.word	0x14f8b589
 800335c:	ffff0000 	.word	0xffff0000

08003360 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	f040 8096 	bne.w	80034b8 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800338c:	4b4d      	ldr	r3, [pc, #308]	; (80034c4 <HAL_I2C_Mem_Read_IT+0x164>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	4a4d      	ldr	r2, [pc, #308]	; (80034c8 <HAL_I2C_Mem_Read_IT+0x168>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0a1a      	lsrs	r2, r3, #8
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009a      	lsls	r2, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d112      	bne.n	80033d8 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
 80033d6:	e070      	b.n	80034ba <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d0df      	beq.n	80033a6 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2C_Mem_Read_IT+0x94>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e062      	b.n	80034ba <HAL_I2C_Mem_Read_IT+0x15a>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d007      	beq.n	800341a <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003428:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2222      	movs	r2, #34	; 0x22
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_I2C_Mem_Read_IT+0x16c>)
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800345c:	897a      	ldrh	r2, [r7, #10]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003462:	893a      	ldrh	r2, [r7, #8]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003468:	88fa      	ldrh	r2, [r7, #6]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003482:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003492:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80034b2:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	20000044 	.word	0x20000044
 80034c8:	14f8b589 	.word	0x14f8b589
 80034cc:	ffff0000 	.word	0xffff0000

080034d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80034e0:	f7fe f832 	bl	8001548 <HAL_GetTick>
 80034e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	f040 8111 	bne.w	800371a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2319      	movs	r3, #25
 80034fe:	2201      	movs	r2, #1
 8003500:	4988      	ldr	r1, [pc, #544]	; (8003724 <HAL_I2C_IsDeviceReady+0x254>)
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f001 fc58 	bl	8004db8 <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	e104      	b.n	800371c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_I2C_IsDeviceReady+0x50>
 800351c:	2302      	movs	r3, #2
 800351e:	e0fd      	b.n	800371c <HAL_I2C_IsDeviceReady+0x24c>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d007      	beq.n	8003546 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2224      	movs	r2, #36	; 0x24
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a70      	ldr	r2, [pc, #448]	; (8003728 <HAL_I2C_IsDeviceReady+0x258>)
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003578:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f001 fc16 	bl	8004db8 <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a0:	d103      	bne.n	80035aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e0b6      	b.n	800371c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035be:	f7fd ffc3 	bl	8001548 <HAL_GetTick>
 80035c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035f2:	e025      	b.n	8003640 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035f4:	f7fd ffa8 	bl	8001548 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d302      	bcc.n	800360a <HAL_I2C_IsDeviceReady+0x13a>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	22a0      	movs	r2, #160	; 0xa0
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2ba0      	cmp	r3, #160	; 0xa0
 800364a:	d005      	beq.n	8003658 <HAL_I2C_IsDeviceReady+0x188>
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <HAL_I2C_IsDeviceReady+0x188>
 8003652:	7dbb      	ldrb	r3, [r7, #22]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0cd      	beq.n	80035f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d129      	bne.n	80036c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2319      	movs	r3, #25
 800369a:	2201      	movs	r2, #1
 800369c:	4921      	ldr	r1, [pc, #132]	; (8003724 <HAL_I2C_IsDeviceReady+0x254>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f001 fb8a 	bl	8004db8 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e036      	b.n	800371c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e02c      	b.n	800371c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2319      	movs	r3, #25
 80036e2:	2201      	movs	r2, #1
 80036e4:	490f      	ldr	r1, [pc, #60]	; (8003724 <HAL_I2C_IsDeviceReady+0x254>)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f001 fb66 	bl	8004db8 <I2C_WaitOnFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e012      	b.n	800371c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	f4ff af32 	bcc.w	800356a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800371a:	2302      	movs	r3, #2
  }
}
 800371c:	4618      	mov	r0, r3
 800371e:	3720      	adds	r7, #32
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	00100002 	.word	0x00100002
 8003728:	ffff0000 	.word	0xffff0000

0800372c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b10      	cmp	r3, #16
 800375a:	d003      	beq.n	8003764 <HAL_I2C_EV_IRQHandler+0x38>
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	f040 80b1 	bne.w	80038c6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <HAL_I2C_EV_IRQHandler+0x6e>
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003784:	d003      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x62>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800378c:	d101      	bne.n	8003792 <HAL_I2C_EV_IRQHandler+0x66>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <HAL_I2C_EV_IRQHandler+0x68>
 8003792:	2300      	movs	r3, #0
 8003794:	2b01      	cmp	r3, #1
 8003796:	f000 8114 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_I2C_EV_IRQHandler+0x90>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f001 fbae 	bl	8004f10 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fca7 	bl	8004108 <I2C_Master_SB>
 80037ba:	e083      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0xac>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fd1e 	bl	8004212 <I2C_Master_ADD10>
 80037d6:	e075      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_I2C_EV_IRQHandler+0xc8>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fd39 	bl	8004264 <I2C_Master_ADDR>
 80037f2:	e067      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d036      	beq.n	800386c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	f000 80db 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <HAL_I2C_EV_IRQHandler+0x10a>
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_I2C_EV_IRQHandler+0x10a>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f91b 	bl	8003a6a <I2C_MasterTransmit_TXE>
 8003834:	e046      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80c2 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80bc 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800384e:	7bbb      	ldrb	r3, [r7, #14]
 8003850:	2b21      	cmp	r3, #33	; 0x21
 8003852:	d103      	bne.n	800385c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f9a4 	bl	8003ba2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385a:	e0b4      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	f040 80b1 	bne.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa12 	bl	8003c8e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800386a:	e0ac      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387a:	f000 80a4 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <HAL_I2C_EV_IRQHandler+0x178>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_I2C_EV_IRQHandler+0x178>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fa8e 	bl	8003dbe <I2C_MasterReceive_RXNE>
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 808b 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8085 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fb39 	bl	8003f34 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c2:	e080      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
 80038c4:	e07f      	b.n	80039c6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	e007      	b.n	80038e8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x1ea>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 feff 	bl	8004712 <I2C_Slave_ADDR>
 8003914:	e05a      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_I2C_EV_IRQHandler+0x206>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff3a 	bl	80047a4 <I2C_Slave_STOPF>
 8003930:	e04c      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003932:	7bbb      	ldrb	r3, [r7, #14]
 8003934:	2b21      	cmp	r3, #33	; 0x21
 8003936:	d002      	beq.n	800393e <HAL_I2C_EV_IRQHandler+0x212>
 8003938:	7bbb      	ldrb	r3, [r7, #14]
 800393a:	2b29      	cmp	r3, #41	; 0x29
 800393c:	d120      	bne.n	8003980 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <HAL_I2C_EV_IRQHandler+0x238>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_I2C_EV_IRQHandler+0x238>
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fe1c 	bl	800459a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003962:	e032      	b.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02d      	beq.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003974:	2b00      	cmp	r3, #0
 8003976:	d028      	beq.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fe4b 	bl	8004614 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800397e:	e024      	b.n	80039ca <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00d      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x27a>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fe58 	bl	8004654 <I2C_SlaveReceive_RXNE>
 80039a4:	e012      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fe88 	bl	80046d0 <I2C_SlaveReceive_BTF>
 80039c0:	e004      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80039c2:	bf00      	nop
 80039c4:	e002      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c6:	bf00      	nop
 80039c8:	e000      	b.n	80039cc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
 8003a26:	4613      	mov	r3, r2
 8003a28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a80:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d150      	bne.n	8003b32 <I2C_MasterTransmit_TXE+0xc8>
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	2b21      	cmp	r3, #33	; 0x21
 8003a94:	d14d      	bne.n	8003b32 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d01d      	beq.n	8003ad8 <I2C_MasterTransmit_TXE+0x6e>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d01a      	beq.n	8003ad8 <I2C_MasterTransmit_TXE+0x6e>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa8:	d016      	beq.n	8003ad8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ab8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2211      	movs	r2, #17
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff7e 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ad6:	e060      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ae6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d107      	bne.n	8003b22 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fc ffd0 	bl	8000ac0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b20:	e03b      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ff51 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b30:	e033      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b21      	cmp	r3, #33	; 0x21
 8003b36:	d005      	beq.n	8003b44 <I2C_MasterTransmit_TXE+0xda>
 8003b38:	7bbb      	ldrb	r3, [r7, #14]
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	d12d      	bne.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b22      	cmp	r3, #34	; 0x22
 8003b42:	d12a      	bne.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b5e:	e01c      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d103      	bne.n	8003b74 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f88e 	bl	8003c8e <I2C_MemoryTransmit_TXE_BTF>
}
 8003b72:	e012      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	781a      	ldrb	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b98:	e7ff      	b.n	8003b9a <I2C_MasterTransmit_TXE+0x130>
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b21      	cmp	r3, #33	; 0x21
 8003bba:	d164      	bne.n	8003c86 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bea:	e04c      	b.n	8003c86 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d01d      	beq.n	8003c2e <I2C_MasterTransmit_BTF+0x8c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d01a      	beq.n	8003c2e <I2C_MasterTransmit_BTF+0x8c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bfe:	d016      	beq.n	8003c2e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c0e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2211      	movs	r2, #17
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fed3 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
}
 8003c2c:	e02b      	b.n	8003c86 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c3c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b40      	cmp	r3, #64	; 0x40
 8003c66:	d107      	bne.n	8003c78 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fc ff25 	bl	8000ac0 <HAL_I2C_MemTxCpltCallback>
}
 8003c76:	e006      	b.n	8003c86 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fea6 	bl	80039d2 <HAL_I2C_MasterTxCpltCallback>
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11d      	bne.n	8003ce2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10b      	bne.n	8003cc6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	1c9a      	adds	r2, r3, #2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003cc4:	e077      	b.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	121b      	asrs	r3, r3, #8
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ce0:	e069      	b.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10b      	bne.n	8003d02 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d00:	e059      	b.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d152      	bne.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b22      	cmp	r3, #34	; 0x22
 8003d0e:	d10d      	bne.n	8003d2c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d2a:	e044      	b.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d015      	beq.n	8003d62 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b21      	cmp	r3, #33	; 0x21
 8003d3a:	d112      	bne.n	8003d62 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d60:	e029      	b.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d124      	bne.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b21      	cmp	r3, #33	; 0x21
 8003d70:	d121      	bne.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d80:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d90:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fc fe89 	bl	8000ac0 <HAL_I2C_MemTxCpltCallback>
}
 8003dae:	e002      	b.n	8003db6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fa15 	bl	80031e0 <I2C_Flush_DR>
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b22      	cmp	r3, #34	; 0x22
 8003dd0:	f040 80ac 	bne.w	8003f2c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d921      	bls.n	8003e26 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	f040 808c 	bne.w	8003f2c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e22:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e24:	e082      	b.n	8003f2c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d075      	beq.n	8003f1a <I2C_MasterReceive_RXNE+0x15c>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d002      	beq.n	8003e3a <I2C_MasterReceive_RXNE+0x7c>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d16f      	bne.n	8003f1a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 f836 	bl	8004eac <I2C_WaitOnSTOPRequestThroughIT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d142      	bne.n	8003ecc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e54:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d10a      	bne.n	8003eb6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fdf4 	bl	8000a9c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eb4:	e03a      	b.n	8003f2c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2212      	movs	r2, #18
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fd8d 	bl	80039e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eca:	e02f      	b.n	8003f2c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eda:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fd97 	bl	8003a46 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f18:	e008      	b.n	8003f2c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	605a      	str	r2, [r3, #4]
}
 8003f2a:	e7ff      	b.n	8003f2c <I2C_MasterReceive_RXNE+0x16e>
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d11b      	bne.n	8003f84 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f82:	e0bd      	b.n	8004100 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d129      	bne.n	8003fe2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d00a      	beq.n	8003fba <I2C_MasterReceive_BTF+0x86>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d007      	beq.n	8003fba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fe0:	e08e      	b.n	8004100 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d176      	bne.n	80040da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d002      	beq.n	8003ff8 <I2C_MasterReceive_BTF+0xc4>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d108      	bne.n	800400a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e019      	b.n	800403e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b04      	cmp	r3, #4
 800400e:	d002      	beq.n	8004016 <I2C_MasterReceive_BTF+0xe2>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d108      	bne.n	8004028 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e00a      	b.n	800403e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b10      	cmp	r3, #16
 800402c:	d007      	beq.n	800403e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004098:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d10a      	bne.n	80040c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fc fced 	bl	8000a9c <HAL_I2C_MemRxCpltCallback>
}
 80040c2:	e01d      	b.n	8004100 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2212      	movs	r2, #18
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fc86 	bl	80039e4 <HAL_I2C_MasterRxCpltCallback>
}
 80040d8:	e012      	b.n	8004100 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d117      	bne.n	800414c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004134:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004136:	e067      	b.n	8004208 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	b2db      	uxtb	r3, r3
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]
}
 800414a:	e05d      	b.n	8004208 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004154:	d133      	bne.n	80041be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b21      	cmp	r3, #33	; 0x21
 8004160:	d109      	bne.n	8004176 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004172:	611a      	str	r2, [r3, #16]
 8004174:	e008      	b.n	8004188 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	b2da      	uxtb	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <I2C_Master_SB+0x92>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d032      	beq.n	8004208 <I2C_Master_SB+0x100>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02d      	beq.n	8004208 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ba:	605a      	str	r2, [r3, #4]
}
 80041bc:	e024      	b.n	8004208 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	11db      	asrs	r3, r3, #7
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 0306 	and.w	r3, r3, #6
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f063 030f 	orn	r3, r3, #15
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	611a      	str	r2, [r3, #16]
}
 80041e2:	e011      	b.n	8004208 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10d      	bne.n	8004208 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	11db      	asrs	r3, r3, #7
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 0306 	and.w	r3, r3, #6
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f063 030e 	orn	r3, r3, #14
 8004200:	b2da      	uxtb	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	611a      	str	r2, [r3, #16]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	b2da      	uxtb	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <I2C_Master_ADD10+0x26>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d108      	bne.n	800424a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <I2C_Master_ADD10+0x48>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004258:	605a      	str	r2, [r3, #4]
  }
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004264:	b480      	push	{r7}
 8004266:	b091      	sub	sp, #68	; 0x44
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004272:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b22      	cmp	r3, #34	; 0x22
 800428c:	f040 8174 	bne.w	8004578 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10f      	bne.n	80042b8 <I2C_Master_ADDR+0x54>
 8004298:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d10b      	bne.n	80042b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a0:	2300      	movs	r3, #0
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	633b      	str	r3, [r7, #48]	; 0x30
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	e16b      	b.n	8004590 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11d      	bne.n	80042fc <I2C_Master_ADDR+0x98>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042c8:	d118      	bne.n	80042fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50
 80042fa:	e149      	b.n	8004590 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d113      	bne.n	800432e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e120      	b.n	8004570 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 808a 	bne.w	800444e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004340:	d137      	bne.n	80043b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004350:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004360:	d113      	bne.n	800438a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004370:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	e0f2      	b.n	8004570 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e0de      	b.n	8004570 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d02e      	beq.n	8004416 <I2C_Master_ADDR+0x1b2>
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d02b      	beq.n	8004416 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c0:	2b12      	cmp	r3, #18
 80043c2:	d102      	bne.n	80043ca <I2C_Master_ADDR+0x166>
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d125      	bne.n	8004416 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d00e      	beq.n	80043ee <I2C_Master_ADDR+0x18a>
 80043d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d00b      	beq.n	80043ee <I2C_Master_ADDR+0x18a>
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d008      	beq.n	80043ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	e0ac      	b.n	8004570 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004424:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e090      	b.n	8004570 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d158      	bne.n	800450a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	2b04      	cmp	r3, #4
 800445c:	d021      	beq.n	80044a2 <I2C_Master_ADDR+0x23e>
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	2b02      	cmp	r3, #2
 8004462:	d01e      	beq.n	80044a2 <I2C_Master_ADDR+0x23e>
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	2b10      	cmp	r3, #16
 8004468:	d01b      	beq.n	80044a2 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004478:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e012      	b.n	80044c8 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d6:	d14b      	bne.n	8004570 <I2C_Master_ADDR+0x30c>
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044de:	d00b      	beq.n	80044f8 <I2C_Master_ADDR+0x294>
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d008      	beq.n	80044f8 <I2C_Master_ADDR+0x294>
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d005      	beq.n	80044f8 <I2C_Master_ADDR+0x294>
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d002      	beq.n	80044f8 <I2C_Master_ADDR+0x294>
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d13b      	bne.n	8004570 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	e032      	b.n	8004570 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004518:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004528:	d117      	bne.n	800455a <I2C_Master_ADDR+0x2f6>
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004530:	d00b      	beq.n	800454a <I2C_Master_ADDR+0x2e6>
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	2b01      	cmp	r3, #1
 8004536:	d008      	beq.n	800454a <I2C_Master_ADDR+0x2e6>
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	2b08      	cmp	r3, #8
 800453c:	d005      	beq.n	800454a <I2C_Master_ADDR+0x2e6>
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	2b10      	cmp	r3, #16
 8004542:	d002      	beq.n	800454a <I2C_Master_ADDR+0x2e6>
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	2b20      	cmp	r3, #32
 8004548:	d107      	bne.n	800455a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004558:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004576:	e00b      	b.n	8004590 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004578:	2300      	movs	r3, #0
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	68bb      	ldr	r3, [r7, #8]
}
 800458e:	e7ff      	b.n	8004590 <I2C_Master_ADDR+0x32c>
 8004590:	bf00      	nop
 8004592:	3744      	adds	r7, #68	; 0x44
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d02b      	beq.n	800460c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d114      	bne.n	800460c <I2C_SlaveTransmit_TXE+0x72>
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b29      	cmp	r3, #41	; 0x29
 80045e6:	d111      	bne.n	800460c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2221      	movs	r2, #33	; 0x21
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2228      	movs	r2, #40	; 0x28
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff f9f5 	bl	80039f6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d011      	beq.n	800464a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004662:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d02c      	beq.n	80046c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d114      	bne.n	80046c8 <I2C_SlaveReceive_RXNE+0x74>
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b2a      	cmp	r3, #42	; 0x2a
 80046a2:	d111      	bne.n	80046c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2222      	movs	r2, #34	; 0x22
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2228      	movs	r2, #40	; 0x28
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff f9a0 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d012      	beq.n	8004708 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800471c:	2300      	movs	r3, #0
 800471e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800472c:	2b28      	cmp	r3, #40	; 0x28
 800472e:	d125      	bne.n	800477c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	81bb      	strh	r3, [r7, #12]
 800475e:	e002      	b.n	8004766 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800476e:	89ba      	ldrh	r2, [r7, #12]
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff f950 	bl	8003a1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800477a:	e00e      	b.n	800479a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477c:	2300      	movs	r3, #0
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004800:	d172      	bne.n	80048e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b22      	cmp	r3, #34	; 0x22
 8004806:	d002      	beq.n	800480e <I2C_Slave_STOPF+0x6a>
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b2a      	cmp	r3, #42	; 0x2a
 800480c:	d135      	bne.n	800487a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004840:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe f9c2 	bl	8002bd0 <HAL_DMA_GetState>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d049      	beq.n	80048e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4a69      	ldr	r2, [pc, #420]	; (80049fc <I2C_Slave_STOPF+0x258>)
 8004858:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe f838 	bl	80028d4 <HAL_DMA_Abort_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d03d      	beq.n	80048e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004874:	4610      	mov	r0, r2
 8004876:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004878:	e035      	b.n	80048e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe f98c 	bl	8002bd0 <HAL_DMA_GetState>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d014      	beq.n	80048e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	4a4e      	ldr	r2, [pc, #312]	; (80049fc <I2C_Slave_STOPF+0x258>)
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe f802 	bl	80028d4 <HAL_DMA_Abort_IT>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048e0:	4610      	mov	r0, r2
 80048e2:	4798      	blx	r3
 80048e4:	e000      	b.n	80048e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d03e      	beq.n	8004970 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d112      	bne.n	8004926 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b40      	cmp	r3, #64	; 0x40
 8004932:	d112      	bne.n	800495a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f043 0204 	orr.w	r2, r3, #4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f843 	bl	8004a04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800497e:	e039      	b.n	80049f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b2a      	cmp	r3, #42	; 0x2a
 8004984:	d109      	bne.n	800499a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2228      	movs	r2, #40	; 0x28
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff f837 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b28      	cmp	r3, #40	; 0x28
 80049a4:	d111      	bne.n	80049ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	; (8004a00 <I2C_Slave_STOPF+0x25c>)
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff f836 	bl	8003a34 <HAL_I2C_ListenCpltCallback>
}
 80049c8:	e014      	b.n	80049f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	2b22      	cmp	r3, #34	; 0x22
 80049d0:	d002      	beq.n	80049d8 <I2C_Slave_STOPF+0x234>
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b22      	cmp	r3, #34	; 0x22
 80049d6:	d10d      	bne.n	80049f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff f80a 	bl	8003a08 <HAL_I2C_SlaveRxCpltCallback>
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	08004c69 	.word	0x08004c69
 8004a00:	ffff0000 	.word	0xffff0000

08004a04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a1c:	7bbb      	ldrb	r3, [r7, #14]
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d002      	beq.n	8004a28 <I2C_ITError+0x24>
 8004a22:	7bbb      	ldrb	r3, [r7, #14]
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d10a      	bne.n	8004a3e <I2C_ITError+0x3a>
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b22      	cmp	r3, #34	; 0x22
 8004a2c:	d107      	bne.n	8004a3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a44:	2b28      	cmp	r3, #40	; 0x28
 8004a46:	d107      	bne.n	8004a58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2228      	movs	r2, #40	; 0x28
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a56:	e015      	b.n	8004a84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a66:	d00a      	beq.n	8004a7e <I2C_ITError+0x7a>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b60      	cmp	r3, #96	; 0x60
 8004a6c:	d007      	beq.n	8004a7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a92:	d162      	bne.n	8004b5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d020      	beq.n	8004af4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab6:	4a6a      	ldr	r2, [pc, #424]	; (8004c60 <I2C_ITError+0x25c>)
 8004ab8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fd ff08 	bl	80028d4 <HAL_DMA_Abort_IT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8089 	beq.w	8004bde <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aee:	4610      	mov	r0, r2
 8004af0:	4798      	blx	r3
 8004af2:	e074      	b.n	8004bde <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	4a59      	ldr	r2, [pc, #356]	; (8004c60 <I2C_ITError+0x25c>)
 8004afa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd fee7 	bl	80028d4 <HAL_DMA_Abort_IT>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d068      	beq.n	8004bde <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d10b      	bne.n	8004b32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b54:	4610      	mov	r0, r2
 8004b56:	4798      	blx	r3
 8004b58:	e041      	b.n	8004bde <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b60      	cmp	r3, #96	; 0x60
 8004b64:	d125      	bne.n	8004bb2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d10b      	bne.n	8004b9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fe ff54 	bl	8003a58 <HAL_I2C_AbortCpltCallback>
 8004bb0:	e015      	b.n	8004bde <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d10b      	bne.n	8004bd8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fe ff34 	bl	8003a46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10e      	bne.n	8004c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d113      	bne.n	8004c58 <I2C_ITError+0x254>
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b28      	cmp	r3, #40	; 0x28
 8004c34:	d110      	bne.n	8004c58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <I2C_ITError+0x260>)
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fe feee 	bl	8003a34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	08004c69 	.word	0x08004c69
 8004c64:	ffff0000 	.word	0xffff0000

08004c68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c82:	4b4b      	ldr	r3, [pc, #300]	; (8004db0 <I2C_DMAAbort+0x148>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	08db      	lsrs	r3, r3, #3
 8004c88:	4a4a      	ldr	r2, [pc, #296]	; (8004db4 <I2C_DMAAbort+0x14c>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	0a1a      	lsrs	r2, r3, #8
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	00da      	lsls	r2, r3, #3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0220 	orr.w	r2, r3, #32
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004cae:	e00a      	b.n	8004cc6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc4:	d0ea      	beq.n	8004c9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d08:	2200      	movs	r2, #0
 8004d0a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	2200      	movs	r2, #0
 8004d1a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b60      	cmp	r3, #96	; 0x60
 8004d36:	d10e      	bne.n	8004d56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7fe fe82 	bl	8003a58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d54:	e027      	b.n	8004da6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d5c:	2b28      	cmp	r3, #40	; 0x28
 8004d5e:	d117      	bne.n	8004d90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2228      	movs	r2, #40	; 0x28
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d8e:	e007      	b.n	8004da0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004da0:	6978      	ldr	r0, [r7, #20]
 8004da2:	f7fe fe50 	bl	8003a46 <HAL_I2C_ErrorCallback>
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000044 	.word	0x20000044
 8004db4:	14f8b589 	.word	0x14f8b589

08004db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dc8:	e048      	b.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d044      	beq.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fc fbb9 	bl	8001548 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d139      	bne.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d10d      	bne.n	8004e0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	43da      	mvns	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	e00c      	b.n	8004e28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	43da      	mvns	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d116      	bne.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e023      	b.n	8004ea4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10d      	bne.n	8004e82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	e00c      	b.n	8004e9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d093      	beq.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004eb8:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	0a1a      	lsrs	r2, r3, #8
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f043 0220 	orr.w	r2, r3, #32
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e008      	b.n	8004efc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef8:	d0e9      	beq.n	8004ece <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000044 	.word	0x20000044
 8004f0c:	14f8b589 	.word	0x14f8b589

08004f10 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f20:	d103      	bne.n	8004f2a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f28:	e007      	b.n	8004f3a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f32:	d102      	bne.n	8004f3a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2208      	movs	r2, #8
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e272      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8087 	beq.w	8005072 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f64:	4b92      	ldr	r3, [pc, #584]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d00c      	beq.n	8004f8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f70:	4b8f      	ldr	r3, [pc, #572]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 030c 	and.w	r3, r3, #12
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d112      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x5e>
 8004f7c:	4b8c      	ldr	r3, [pc, #560]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f88:	d10b      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8a:	4b89      	ldr	r3, [pc, #548]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d06c      	beq.n	8005070 <HAL_RCC_OscConfig+0x12c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d168      	bne.n	8005070 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e24c      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004faa:	d106      	bne.n	8004fba <HAL_RCC_OscConfig+0x76>
 8004fac:	4b80      	ldr	r3, [pc, #512]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7f      	ldr	r2, [pc, #508]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e02e      	b.n	8005018 <HAL_RCC_OscConfig+0xd4>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCC_OscConfig+0x98>
 8004fc2:	4b7b      	ldr	r3, [pc, #492]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7a      	ldr	r2, [pc, #488]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	4b78      	ldr	r3, [pc, #480]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a77      	ldr	r2, [pc, #476]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e01d      	b.n	8005018 <HAL_RCC_OscConfig+0xd4>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0xbc>
 8004fe6:	4b72      	ldr	r3, [pc, #456]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a71      	ldr	r2, [pc, #452]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b6f      	ldr	r3, [pc, #444]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a6e      	ldr	r2, [pc, #440]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0xd4>
 8005000:	4b6b      	ldr	r3, [pc, #428]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a6a      	ldr	r2, [pc, #424]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b68      	ldr	r3, [pc, #416]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a67      	ldr	r2, [pc, #412]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005016:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d013      	beq.n	8005048 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fc fa92 	bl	8001548 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005028:	f7fc fa8e 	bl	8001548 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e200      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0xe4>
 8005046:	e014      	b.n	8005072 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fc fa7e 	bl	8001548 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005050:	f7fc fa7a 	bl	8001548 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1ec      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x10c>
 800506e:	e000      	b.n	8005072 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d063      	beq.n	8005146 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800507e:	4b4c      	ldr	r3, [pc, #304]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00b      	beq.n	80050a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800508a:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	2b08      	cmp	r3, #8
 8005094:	d11c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x18c>
 8005096:	4b46      	ldr	r3, [pc, #280]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d116      	bne.n	80050d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a2:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x176>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d001      	beq.n	80050ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e1c0      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4939      	ldr	r1, [pc, #228]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	e03a      	b.n	8005146 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d8:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <HAL_RCC_OscConfig+0x270>)
 80050da:	2201      	movs	r2, #1
 80050dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050de:	f7fc fa33 	bl	8001548 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e6:	f7fc fa2f 	bl	8001548 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e1a1      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005104:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4927      	ldr	r1, [pc, #156]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 8005114:	4313      	orrs	r3, r2
 8005116:	600b      	str	r3, [r1, #0]
 8005118:	e015      	b.n	8005146 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800511a:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <HAL_RCC_OscConfig+0x270>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fc fa12 	bl	8001548 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005128:	f7fc fa0e 	bl	8001548 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e180      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f0      	bne.n	8005128 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d03a      	beq.n	80051c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d019      	beq.n	800518e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800515a:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <HAL_RCC_OscConfig+0x274>)
 800515c:	2201      	movs	r2, #1
 800515e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005160:	f7fc f9f2 	bl	8001548 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005168:	f7fc f9ee 	bl	8001548 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e160      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <HAL_RCC_OscConfig+0x26c>)
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005186:	2001      	movs	r0, #1
 8005188:	f000 face 	bl	8005728 <RCC_Delay>
 800518c:	e01c      	b.n	80051c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <HAL_RCC_OscConfig+0x274>)
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fc f9d8 	bl	8001548 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519a:	e00f      	b.n	80051bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800519c:	f7fc f9d4 	bl	8001548 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d908      	bls.n	80051bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e146      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
 80051ae:	bf00      	nop
 80051b0:	40021000 	.word	0x40021000
 80051b4:	42420000 	.word	0x42420000
 80051b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051bc:	4b92      	ldr	r3, [pc, #584]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e9      	bne.n	800519c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80a6 	beq.w	8005322 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051da:	4b8b      	ldr	r3, [pc, #556]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10d      	bne.n	8005202 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e6:	4b88      	ldr	r3, [pc, #544]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	4a87      	ldr	r2, [pc, #540]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f0:	61d3      	str	r3, [r2, #28]
 80051f2:	4b85      	ldr	r3, [pc, #532]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051fe:	2301      	movs	r3, #1
 8005200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	4b82      	ldr	r3, [pc, #520]	; (800540c <HAL_RCC_OscConfig+0x4c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d118      	bne.n	8005240 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800520e:	4b7f      	ldr	r3, [pc, #508]	; (800540c <HAL_RCC_OscConfig+0x4c8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7e      	ldr	r2, [pc, #504]	; (800540c <HAL_RCC_OscConfig+0x4c8>)
 8005214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521a:	f7fc f995 	bl	8001548 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005222:	f7fc f991 	bl	8001548 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b64      	cmp	r3, #100	; 0x64
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e103      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	4b75      	ldr	r3, [pc, #468]	; (800540c <HAL_RCC_OscConfig+0x4c8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <HAL_RCC_OscConfig+0x312>
 8005248:	4b6f      	ldr	r3, [pc, #444]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4a6e      	ldr	r2, [pc, #440]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6213      	str	r3, [r2, #32]
 8005254:	e02d      	b.n	80052b2 <HAL_RCC_OscConfig+0x36e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10c      	bne.n	8005278 <HAL_RCC_OscConfig+0x334>
 800525e:	4b6a      	ldr	r3, [pc, #424]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	4a69      	ldr	r2, [pc, #420]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	6213      	str	r3, [r2, #32]
 800526a:	4b67      	ldr	r3, [pc, #412]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	4a66      	ldr	r2, [pc, #408]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	6213      	str	r3, [r2, #32]
 8005276:	e01c      	b.n	80052b2 <HAL_RCC_OscConfig+0x36e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b05      	cmp	r3, #5
 800527e:	d10c      	bne.n	800529a <HAL_RCC_OscConfig+0x356>
 8005280:	4b61      	ldr	r3, [pc, #388]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	4a60      	ldr	r2, [pc, #384]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005286:	f043 0304 	orr.w	r3, r3, #4
 800528a:	6213      	str	r3, [r2, #32]
 800528c:	4b5e      	ldr	r3, [pc, #376]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	4a5d      	ldr	r2, [pc, #372]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	6213      	str	r3, [r2, #32]
 8005298:	e00b      	b.n	80052b2 <HAL_RCC_OscConfig+0x36e>
 800529a:	4b5b      	ldr	r3, [pc, #364]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	4a5a      	ldr	r2, [pc, #360]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	6213      	str	r3, [r2, #32]
 80052a6:	4b58      	ldr	r3, [pc, #352]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	4a57      	ldr	r2, [pc, #348]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80052ac:	f023 0304 	bic.w	r3, r3, #4
 80052b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d015      	beq.n	80052e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ba:	f7fc f945 	bl	8001548 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c0:	e00a      	b.n	80052d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c2:	f7fc f941 	bl	8001548 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e0b1      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	4b4b      	ldr	r3, [pc, #300]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0ee      	beq.n	80052c2 <HAL_RCC_OscConfig+0x37e>
 80052e4:	e014      	b.n	8005310 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e6:	f7fc f92f 	bl	8001548 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ec:	e00a      	b.n	8005304 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fc f92b 	bl	8001548 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e09b      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005304:	4b40      	ldr	r3, [pc, #256]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ee      	bne.n	80052ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005316:	4b3c      	ldr	r3, [pc, #240]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4a3b      	ldr	r2, [pc, #236]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800531c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005320:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8087 	beq.w	800543a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800532c:	4b36      	ldr	r3, [pc, #216]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 030c 	and.w	r3, r3, #12
 8005334:	2b08      	cmp	r3, #8
 8005336:	d061      	beq.n	80053fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d146      	bne.n	80053ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005340:	4b33      	ldr	r3, [pc, #204]	; (8005410 <HAL_RCC_OscConfig+0x4cc>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005346:	f7fc f8ff 	bl	8001548 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534e:	f7fc f8fb 	bl	8001548 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e06d      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005360:	4b29      	ldr	r3, [pc, #164]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005374:	d108      	bne.n	8005388 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005376:	4b24      	ldr	r3, [pc, #144]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4921      	ldr	r1, [pc, #132]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005388:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a19      	ldr	r1, [r3, #32]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	430b      	orrs	r3, r1
 800539a:	491b      	ldr	r1, [pc, #108]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 800539c:	4313      	orrs	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCC_OscConfig+0x4cc>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fc f8cf 	bl	8001548 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ae:	f7fc f8cb 	bl	8001548 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e03d      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x46a>
 80053cc:	e035      	b.n	800543a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b10      	ldr	r3, [pc, #64]	; (8005410 <HAL_RCC_OscConfig+0x4cc>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc f8b8 	bl	8001548 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc f8b4 	bl	8001548 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e026      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCC_OscConfig+0x4c4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x498>
 80053fa:	e01e      	b.n	800543a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e019      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
 8005408:	40021000 	.word	0x40021000
 800540c:	40007000 	.word	0x40007000
 8005410:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <HAL_RCC_OscConfig+0x500>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	429a      	cmp	r2, r3
 8005426:	d106      	bne.n	8005436 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000

08005448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e0d0      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d910      	bls.n	800548c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b67      	ldr	r3, [pc, #412]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 0207 	bic.w	r2, r3, #7
 8005472:	4965      	ldr	r1, [pc, #404]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	4313      	orrs	r3, r2
 8005478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b63      	ldr	r3, [pc, #396]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0b8      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d020      	beq.n	80054da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a4:	4b59      	ldr	r3, [pc, #356]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4a58      	ldr	r2, [pc, #352]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054bc:	4b53      	ldr	r3, [pc, #332]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a52      	ldr	r2, [pc, #328]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054c8:	4b50      	ldr	r3, [pc, #320]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	494d      	ldr	r1, [pc, #308]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d040      	beq.n	8005568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d115      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e07f      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005506:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e073      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005516:	4b3d      	ldr	r3, [pc, #244]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e06b      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005526:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f023 0203 	bic.w	r2, r3, #3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	4936      	ldr	r1, [pc, #216]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	4313      	orrs	r3, r2
 8005536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005538:	f7fc f806 	bl	8001548 <HAL_GetTick>
 800553c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	e00a      	b.n	8005556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005540:	f7fc f802 	bl	8001548 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	f241 3288 	movw	r2, #5000	; 0x1388
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e053      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	4b2d      	ldr	r3, [pc, #180]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 020c 	and.w	r2, r3, #12
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	429a      	cmp	r2, r3
 8005566:	d1eb      	bne.n	8005540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005568:	4b27      	ldr	r3, [pc, #156]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d210      	bcs.n	8005598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005576:	4b24      	ldr	r3, [pc, #144]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 0207 	bic.w	r2, r3, #7
 800557e:	4922      	ldr	r1, [pc, #136]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b20      	ldr	r3, [pc, #128]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e032      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	4916      	ldr	r1, [pc, #88]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	490e      	ldr	r1, [pc, #56]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055d6:	f000 f821 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b0b      	ldr	r3, [pc, #44]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	490a      	ldr	r1, [pc, #40]	; (8005610 <HAL_RCC_ClockConfig+0x1c8>)
 80055e8:	5ccb      	ldrb	r3, [r1, r3]
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	4a09      	ldr	r2, [pc, #36]	; (8005614 <HAL_RCC_ClockConfig+0x1cc>)
 80055f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055f2:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_RCC_ClockConfig+0x1d0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fb ff64 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40022000 	.word	0x40022000
 800560c:	40021000 	.word	0x40021000
 8005610:	0800e100 	.word	0x0800e100
 8005614:	20000044 	.word	0x20000044
 8005618:	20000048 	.word	0x20000048

0800561c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005636:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	2b04      	cmp	r3, #4
 8005644:	d002      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0x30>
 8005646:	2b08      	cmp	r3, #8
 8005648:	d003      	beq.n	8005652 <HAL_RCC_GetSysClockFreq+0x36>
 800564a:	e027      	b.n	800569c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800564c:	4b19      	ldr	r3, [pc, #100]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800564e:	613b      	str	r3, [r7, #16]
      break;
 8005650:	e027      	b.n	80056a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	0c9b      	lsrs	r3, r3, #18
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800565c:	5cd3      	ldrb	r3, [r2, r3]
 800565e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	0c5b      	lsrs	r3, r3, #17
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	4a11      	ldr	r2, [pc, #68]	; (80056bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005676:	5cd3      	ldrb	r3, [r2, r3]
 8005678:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800567e:	fb03 f202 	mul.w	r2, r3, r2
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e004      	b.n	8005696 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005690:	fb02 f303 	mul.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	613b      	str	r3, [r7, #16]
      break;
 800569a:	e002      	b.n	80056a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800569e:	613b      	str	r3, [r7, #16]
      break;
 80056a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a2:	693b      	ldr	r3, [r7, #16]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000
 80056b4:	007a1200 	.word	0x007a1200
 80056b8:	0800e118 	.word	0x0800e118
 80056bc:	0800e128 	.word	0x0800e128
 80056c0:	003d0900 	.word	0x003d0900

080056c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c8:	4b02      	ldr	r3, [pc, #8]	; (80056d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	20000044 	.word	0x20000044

080056d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056dc:	f7ff fff2 	bl	80056c4 <HAL_RCC_GetHCLKFreq>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4903      	ldr	r1, [pc, #12]	; (80056fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056ee:	5ccb      	ldrb	r3, [r1, r3]
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021000 	.word	0x40021000
 80056fc:	0800e110 	.word	0x0800e110

08005700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005704:	f7ff ffde 	bl	80056c4 <HAL_RCC_GetHCLKFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	0adb      	lsrs	r3, r3, #11
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	4903      	ldr	r1, [pc, #12]	; (8005724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40021000 	.word	0x40021000
 8005724:	0800e110 	.word	0x0800e110

08005728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <RCC_Delay+0x34>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <RCC_Delay+0x38>)
 8005736:	fba2 2303 	umull	r2, r3, r2, r3
 800573a:	0a5b      	lsrs	r3, r3, #9
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005744:	bf00      	nop
  }
  while (Delay --);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	60fa      	str	r2, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f9      	bne.n	8005744 <RCC_Delay+0x1c>
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr
 800575c:	20000044 	.word	0x20000044
 8005760:	10624dd3 	.word	0x10624dd3

08005764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e041      	b.n	80057fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fb fbda 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 f8f4 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_TIM_ConfigClockSource+0x1c>
 800581a:	2302      	movs	r3, #2
 800581c:	e0b4      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x186>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800583c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005844:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005856:	d03e      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0xd4>
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585c:	f200 8087 	bhi.w	800596e <HAL_TIM_ConfigClockSource+0x16c>
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005864:	f000 8086 	beq.w	8005974 <HAL_TIM_ConfigClockSource+0x172>
 8005868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586c:	d87f      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
 800586e:	2b70      	cmp	r3, #112	; 0x70
 8005870:	d01a      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0xa6>
 8005872:	2b70      	cmp	r3, #112	; 0x70
 8005874:	d87b      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
 8005876:	2b60      	cmp	r3, #96	; 0x60
 8005878:	d050      	beq.n	800591c <HAL_TIM_ConfigClockSource+0x11a>
 800587a:	2b60      	cmp	r3, #96	; 0x60
 800587c:	d877      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
 800587e:	2b50      	cmp	r3, #80	; 0x50
 8005880:	d03c      	beq.n	80058fc <HAL_TIM_ConfigClockSource+0xfa>
 8005882:	2b50      	cmp	r3, #80	; 0x50
 8005884:	d873      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d058      	beq.n	800593c <HAL_TIM_ConfigClockSource+0x13a>
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d86f      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
 800588e:	2b30      	cmp	r3, #48	; 0x30
 8005890:	d064      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15a>
 8005892:	2b30      	cmp	r3, #48	; 0x30
 8005894:	d86b      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
 8005896:	2b20      	cmp	r3, #32
 8005898:	d060      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15a>
 800589a:	2b20      	cmp	r3, #32
 800589c:	d867      	bhi.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d05c      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15a>
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d05a      	beq.n	800595c <HAL_TIM_ConfigClockSource+0x15a>
 80058a6:	e062      	b.n	800596e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	f000 f943 	bl	8005b42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	609a      	str	r2, [r3, #8]
      break;
 80058d4:	e04f      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058e6:	f000 f92c 	bl	8005b42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058f8:	609a      	str	r2, [r3, #8]
      break;
 80058fa:	e03c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005908:	461a      	mov	r2, r3
 800590a:	f000 f8a3 	bl	8005a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2150      	movs	r1, #80	; 0x50
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f8fa 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 800591a:	e02c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005928:	461a      	mov	r2, r3
 800592a:	f000 f8c1 	bl	8005ab0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2160      	movs	r1, #96	; 0x60
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f8ea 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 800593a:	e01c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005948:	461a      	mov	r2, r3
 800594a:	f000 f883 	bl	8005a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2140      	movs	r1, #64	; 0x40
 8005954:	4618      	mov	r0, r3
 8005956:	f000 f8da 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 800595a:	e00c      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f000 f8d1 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 800596c:	e003      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
      break;
 8005972:	e000      	b.n	8005976 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005974:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <TIM_Base_SetConfig+0xb8>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_Base_SetConfig+0x30>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d007      	beq.n	80059c0 <TIM_Base_SetConfig+0x30>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a26      	ldr	r2, [pc, #152]	; (8005a4c <TIM_Base_SetConfig+0xbc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_Base_SetConfig+0x30>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a25      	ldr	r2, [pc, #148]	; (8005a50 <TIM_Base_SetConfig+0xc0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d108      	bne.n	80059d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <TIM_Base_SetConfig+0xb8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <TIM_Base_SetConfig+0x62>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e0:	d007      	beq.n	80059f2 <TIM_Base_SetConfig+0x62>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a19      	ldr	r2, [pc, #100]	; (8005a4c <TIM_Base_SetConfig+0xbc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_Base_SetConfig+0x62>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <TIM_Base_SetConfig+0xc0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d108      	bne.n	8005a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a07      	ldr	r2, [pc, #28]	; (8005a48 <TIM_Base_SetConfig+0xb8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800

08005a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 030a 	bic.w	r3, r3, #10
 8005a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0210 	bic.w	r2, r3, #16
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	031b      	lsls	r3, r3, #12
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f043 0307 	orr.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	021a      	lsls	r2, r3, #8
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	609a      	str	r2, [r3, #8]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e046      	b.n	8005c26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d009      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10c      	bne.n	8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800

08005c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e042      	b.n	8005cd4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fb f98c 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fd53 	bl	800672c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d16d      	bne.n	8005dd8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Transmit+0x2c>
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e066      	b.n	8005dda <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2221      	movs	r2, #33	; 0x21
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d1a:	f7fb fc15 	bl	8001548 <HAL_GetTick>
 8005d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	88fa      	ldrh	r2, [r7, #6]
 8005d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d34:	d108      	bne.n	8005d48 <HAL_UART_Transmit+0x6c>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e003      	b.n	8005d50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d50:	e02a      	b.n	8005da8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2180      	movs	r1, #128	; 0x80
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fadc 	bl	800631a <UART_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e036      	b.n	8005dda <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	3302      	adds	r3, #2
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	e007      	b.n	8005d9a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	3301      	adds	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1cf      	bne.n	8005d52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	2140      	movs	r1, #64	; 0x40
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 faac 	bl	800631a <UART_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e006      	b.n	8005dda <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b0ba      	sub	sp, #232	; 0xe8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10f      	bne.n	8005e4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_UART_IRQHandler+0x66>
 8005e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fbb4 	bl	80065b0 <UART_Receive_IT>
      return;
 8005e48:	e25b      	b.n	8006302 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80de 	beq.w	8006010 <HAL_UART_IRQHandler+0x22c>
 8005e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80d1 	beq.w	8006010 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <HAL_UART_IRQHandler+0xae>
 8005e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f043 0201 	orr.w	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00b      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xd2>
 8005e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f043 0202 	orr.w	r2, r3, #2
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_UART_IRQHandler+0xf6>
 8005ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	f043 0204 	orr.w	r2, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d011      	beq.n	8005f0a <HAL_UART_IRQHandler+0x126>
 8005ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d105      	bne.n	8005efe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d005      	beq.n	8005f0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f043 0208 	orr.w	r2, r3, #8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 81f2 	beq.w	80062f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <HAL_UART_IRQHandler+0x14e>
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fb3f 	bl	80065b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d103      	bne.n	8005f5e <HAL_UART_IRQHandler+0x17a>
 8005f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d04f      	beq.n	8005ffe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa49 	bl	80063f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d041      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3314      	adds	r3, #20
 8005f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1d9      	bne.n	8005f72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d013      	beq.n	8005fee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	4a7e      	ldr	r2, [pc, #504]	; (80061c4 <HAL_UART_IRQHandler+0x3e0>)
 8005fcc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fc fc7e 	bl	80028d4 <HAL_DMA_Abort_IT>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d016      	beq.n	800600c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fe8:	4610      	mov	r0, r2
 8005fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	e00e      	b.n	800600c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f98a 	bl	8006308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	e00a      	b.n	800600c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f986 	bl	8006308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffc:	e006      	b.n	800600c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f982 	bl	8006308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800600a:	e175      	b.n	80062f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	bf00      	nop
    return;
 800600e:	e173      	b.n	80062f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	2b01      	cmp	r3, #1
 8006016:	f040 814f 	bne.w	80062b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601e:	f003 0310 	and.w	r3, r3, #16
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8148 	beq.w	80062b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8141 	beq.w	80062b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006036:	2300      	movs	r3, #0
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80b6 	beq.w	80061c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006068:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8145 	beq.w	80062fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800607a:	429a      	cmp	r2, r3
 800607c:	f080 813e 	bcs.w	80062fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006086:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b20      	cmp	r3, #32
 8006090:	f000 8088 	beq.w	80061a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	330c      	adds	r3, #12
 80060bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1d9      	bne.n	8006094 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006104:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006108:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800610c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e1      	bne.n	80060e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800612c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800612e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006132:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3314      	adds	r3, #20
 800613c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006140:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006142:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006146:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800614e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e3      	bne.n	800611c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	f023 0310 	bic.w	r3, r3, #16
 8006178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006186:	65ba      	str	r2, [r7, #88]	; 0x58
 8006188:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800618c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e3      	bne.n	8006162 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fc fb5c 	bl	800285c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7fa fcda 	bl	8000b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061c0:	e09c      	b.n	80062fc <HAL_UART_IRQHandler+0x518>
 80061c2:	bf00      	nop
 80061c4:	080064bb 	.word	0x080064bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 808e 	beq.w	8006300 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8089 	beq.w	8006300 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006212:	647a      	str	r2, [r7, #68]	; 0x44
 8006214:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e3      	bne.n	80061ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3314      	adds	r3, #20
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	623b      	str	r3, [r7, #32]
   return(result);
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f023 0301 	bic.w	r3, r3, #1
 800623c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3314      	adds	r3, #20
 8006246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800624a:	633a      	str	r2, [r7, #48]	; 0x30
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e3      	bne.n	8006226 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	60fb      	str	r3, [r7, #12]
   return(result);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0310 	bic.w	r3, r3, #16
 8006282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006290:	61fa      	str	r2, [r7, #28]
 8006292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	e841 2300 	strex	r3, r2, [r1]
 800629c:	617b      	str	r3, [r7, #20]
   return(result);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1e3      	bne.n	800626c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fa fc5f 	bl	8000b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062b6:	e023      	b.n	8006300 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d009      	beq.n	80062d8 <HAL_UART_IRQHandler+0x4f4>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f906 	bl	80064e2 <UART_Transmit_IT>
    return;
 80062d6:	e014      	b.n	8006302 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00e      	beq.n	8006302 <HAL_UART_IRQHandler+0x51e>
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f945 	bl	8006580 <UART_EndTransmit_IT>
    return;
 80062f6:	e004      	b.n	8006302 <HAL_UART_IRQHandler+0x51e>
    return;
 80062f8:	bf00      	nop
 80062fa:	e002      	b.n	8006302 <HAL_UART_IRQHandler+0x51e>
      return;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <HAL_UART_IRQHandler+0x51e>
      return;
 8006300:	bf00      	nop
  }
}
 8006302:	37e8      	adds	r7, #232	; 0xe8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr

0800631a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b090      	sub	sp, #64	; 0x40
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4613      	mov	r3, r2
 8006328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632a:	e050      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d04c      	beq.n	80063ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <UART_WaitOnFlagUntilTimeout+0x30>
 800633a:	f7fb f905 	bl	8001548 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006346:	429a      	cmp	r2, r3
 8006348:	d241      	bcs.n	80063ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800636a:	637a      	str	r2, [r7, #52]	; 0x34
 800636c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1e5      	bne.n	800634a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	3314      	adds	r3, #20
 8006384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	613b      	str	r3, [r7, #16]
   return(result);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f023 0301 	bic.w	r3, r3, #1
 8006394:	63bb      	str	r3, [r7, #56]	; 0x38
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3314      	adds	r3, #20
 800639c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800639e:	623a      	str	r2, [r7, #32]
 80063a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	69f9      	ldr	r1, [r7, #28]
 80063a4:	6a3a      	ldr	r2, [r7, #32]
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e5      	bne.n	800637e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e00f      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4013      	ands	r3, r2
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d09f      	beq.n	800632c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3740      	adds	r7, #64	; 0x40
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b095      	sub	sp, #84	; 0x54
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800641e:	643a      	str	r2, [r7, #64]	; 0x40
 8006420:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3314      	adds	r3, #20
 8006438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	61fb      	str	r3, [r7, #28]
   return(result);
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	64bb      	str	r3, [r7, #72]	; 0x48
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3314      	adds	r3, #20
 8006450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e5      	bne.n	8006432 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	2b01      	cmp	r3, #1
 800646c:	d119      	bne.n	80064a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	60bb      	str	r3, [r7, #8]
   return(result);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f023 0310 	bic.w	r3, r3, #16
 8006484:	647b      	str	r3, [r7, #68]	; 0x44
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	330c      	adds	r3, #12
 800648c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800648e:	61ba      	str	r2, [r7, #24]
 8006490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6979      	ldr	r1, [r7, #20]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	613b      	str	r3, [r7, #16]
   return(result);
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e5      	bne.n	800646e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064b0:	bf00      	nop
 80064b2:	3754      	adds	r7, #84	; 0x54
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff ff17 	bl	8006308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b21      	cmp	r3, #33	; 0x21
 80064f4:	d13e      	bne.n	8006574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d114      	bne.n	800652a <UART_Transmit_IT+0x48>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d110      	bne.n	800652a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800651c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	1c9a      	adds	r2, r3, #2
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	621a      	str	r2, [r3, #32]
 8006528:	e008      	b.n	800653c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	1c59      	adds	r1, r3, #1
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6211      	str	r1, [r2, #32]
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29b      	uxth	r3, r3
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4619      	mov	r1, r3
 800654a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800655e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800656e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	e000      	b.n	8006576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006574:	2302      	movs	r3, #2
  }
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006596:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fa fad5 	bl	8000b50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b22      	cmp	r3, #34	; 0x22
 80065c2:	f040 80ae 	bne.w	8006722 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d117      	bne.n	8006600 <UART_Receive_IT+0x50>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d113      	bne.n	8006600 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	1c9a      	adds	r2, r3, #2
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	629a      	str	r2, [r3, #40]	; 0x28
 80065fe:	e026      	b.n	800664e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006612:	d007      	beq.n	8006624 <UART_Receive_IT+0x74>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <UART_Receive_IT+0x82>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	e008      	b.n	8006644 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29b      	uxth	r3, r3
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4619      	mov	r1, r3
 800665c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800665e:	2b00      	cmp	r3, #0
 8006660:	d15d      	bne.n	800671e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0220 	bic.w	r2, r2, #32
 8006670:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006680:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d135      	bne.n	8006714 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	613b      	str	r3, [r7, #16]
   return(result);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ce:	623a      	str	r2, [r7, #32]
 80066d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	69f9      	ldr	r1, [r7, #28]
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	61bb      	str	r3, [r7, #24]
   return(result);
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e5      	bne.n	80066ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0310 	and.w	r3, r3, #16
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d10a      	bne.n	8006706 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fa fa31 	bl	8000b74 <HAL_UARTEx_RxEventCallback>
 8006712:	e002      	b.n	800671a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fa fa09 	bl	8000b2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e002      	b.n	8006724 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
  }
}
 8006724:	4618      	mov	r0, r3
 8006726:	3730      	adds	r7, #48	; 0x30
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006766:	f023 030c 	bic.w	r3, r3, #12
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6812      	ldr	r2, [r2, #0]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	430b      	orrs	r3, r1
 8006772:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <UART_SetConfig+0x114>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d103      	bne.n	800679c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006794:	f7fe ffb4 	bl	8005700 <HAL_RCC_GetPCLK2Freq>
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	e002      	b.n	80067a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fe ff9c 	bl	80056d8 <HAL_RCC_GetPCLK1Freq>
 80067a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009a      	lsls	r2, r3, #2
 80067ac:	441a      	add	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	4a22      	ldr	r2, [pc, #136]	; (8006844 <UART_SetConfig+0x118>)
 80067ba:	fba2 2303 	umull	r2, r3, r2, r3
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	0119      	lsls	r1, r3, #4
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009a      	lsls	r2, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067d8:	4b1a      	ldr	r3, [pc, #104]	; (8006844 <UART_SetConfig+0x118>)
 80067da:	fba3 0302 	umull	r0, r3, r3, r2
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	2064      	movs	r0, #100	; 0x64
 80067e2:	fb00 f303 	mul.w	r3, r0, r3
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	3332      	adds	r3, #50	; 0x32
 80067ec:	4a15      	ldr	r2, [pc, #84]	; (8006844 <UART_SetConfig+0x118>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067f8:	4419      	add	r1, r3
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009a      	lsls	r2, r3, #2
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006810:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <UART_SetConfig+0x118>)
 8006812:	fba3 0302 	umull	r0, r3, r3, r2
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	2064      	movs	r0, #100	; 0x64
 800681a:	fb00 f303 	mul.w	r3, r0, r3
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	3332      	adds	r3, #50	; 0x32
 8006824:	4a07      	ldr	r2, [pc, #28]	; (8006844 <UART_SetConfig+0x118>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	f003 020f 	and.w	r2, r3, #15
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	440a      	add	r2, r1
 8006836:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40013800 	.word	0x40013800
 8006844:	51eb851f 	.word	0x51eb851f

08006848 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684e:	f3ef 8305 	mrs	r3, IPSR
 8006852:	60bb      	str	r3, [r7, #8]
  return(result);
 8006854:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10f      	bne.n	800687a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800685a:	f3ef 8310 	mrs	r3, PRIMASK
 800685e:	607b      	str	r3, [r7, #4]
  return(result);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <osKernelInitialize+0x32>
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <osKernelInitialize+0x60>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d109      	bne.n	8006882 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800686e:	f3ef 8311 	mrs	r3, BASEPRI
 8006872:	603b      	str	r3, [r7, #0]
  return(result);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800687a:	f06f 0305 	mvn.w	r3, #5
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	e00c      	b.n	800689c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <osKernelInitialize+0x60>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <osKernelInitialize+0x60>)
 800688c:	2201      	movs	r2, #1
 800688e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e002      	b.n	800689c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006896:	f04f 33ff 	mov.w	r3, #4294967295
 800689a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800689c:	68fb      	ldr	r3, [r7, #12]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr
 80068a8:	200006c4 	.word	0x200006c4

080068ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b2:	f3ef 8305 	mrs	r3, IPSR
 80068b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10f      	bne.n	80068de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068be:	f3ef 8310 	mrs	r3, PRIMASK
 80068c2:	607b      	str	r3, [r7, #4]
  return(result);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <osKernelStart+0x32>
 80068ca:	4b11      	ldr	r3, [pc, #68]	; (8006910 <osKernelStart+0x64>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d109      	bne.n	80068e6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d2:	f3ef 8311 	mrs	r3, BASEPRI
 80068d6:	603b      	str	r3, [r7, #0]
  return(result);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80068de:	f06f 0305 	mvn.w	r3, #5
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e00e      	b.n	8006904 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80068e6:	4b0a      	ldr	r3, [pc, #40]	; (8006910 <osKernelStart+0x64>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d107      	bne.n	80068fe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80068ee:	4b08      	ldr	r3, [pc, #32]	; (8006910 <osKernelStart+0x64>)
 80068f0:	2202      	movs	r2, #2
 80068f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80068f4:	f002 ff30 	bl	8009758 <vTaskStartScheduler>
      stat = osOK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e002      	b.n	8006904 <osKernelStart+0x58>
    } else {
      stat = osError;
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006902:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006904:	68fb      	ldr	r3, [r7, #12]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200006c4 	.word	0x200006c4

08006914 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800691a:	f3ef 8305 	mrs	r3, IPSR
 800691e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006920:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006926:	f3ef 8310 	mrs	r3, PRIMASK
 800692a:	607b      	str	r3, [r7, #4]
  return(result);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <osKernelGetTickCount+0x32>
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <osKernelGetTickCount+0x4c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d109      	bne.n	800694e <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800693a:	f3ef 8311 	mrs	r3, BASEPRI
 800693e:	603b      	str	r3, [r7, #0]
  return(result);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006946:	f003 f831 	bl	80099ac <xTaskGetTickCountFromISR>
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	e002      	b.n	8006954 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800694e:	f003 f81f 	bl	8009990 <xTaskGetTickCount>
 8006952:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006954:	68fb      	ldr	r3, [r7, #12]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	200006c4 	.word	0x200006c4

08006964 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b092      	sub	sp, #72	; 0x48
 8006968:	af04      	add	r7, sp, #16
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006974:	f3ef 8305 	mrs	r3, IPSR
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8094 	bne.w	8006aaa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006982:	f3ef 8310 	mrs	r3, PRIMASK
 8006986:	623b      	str	r3, [r7, #32]
  return(result);
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 808d 	bne.w	8006aaa <osThreadNew+0x146>
 8006990:	4b48      	ldr	r3, [pc, #288]	; (8006ab4 <osThreadNew+0x150>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d106      	bne.n	80069a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006998:	f3ef 8311 	mrs	r3, BASEPRI
 800699c:	61fb      	str	r3, [r7, #28]
  return(result);
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 8082 	bne.w	8006aaa <osThreadNew+0x146>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d07e      	beq.n	8006aaa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80069ac:	2340      	movs	r3, #64	; 0x40
 80069ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80069b0:	2318      	movs	r3, #24
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80069b4:	2300      	movs	r3, #0
 80069b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80069b8:	f107 031b 	add.w	r3, r7, #27
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d045      	beq.n	8006a56 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <osThreadNew+0x74>
        name = attr->name;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <osThreadNew+0x9a>
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	2b38      	cmp	r3, #56	; 0x38
 80069f0:	d805      	bhi.n	80069fe <osThreadNew+0x9a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <osThreadNew+0x9e>
        return (NULL);
 80069fe:	2300      	movs	r3, #0
 8006a00:	e054      	b.n	8006aac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	089b      	lsrs	r3, r3, #2
 8006a10:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00e      	beq.n	8006a38 <osThreadNew+0xd4>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2ba7      	cmp	r3, #167	; 0xa7
 8006a20:	d90a      	bls.n	8006a38 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <osThreadNew+0xd4>
        mem = 1;
 8006a32:	2301      	movs	r3, #1
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a36:	e010      	b.n	8006a5a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <osThreadNew+0xf6>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d108      	bne.n	8006a5a <osThreadNew+0xf6>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <osThreadNew+0xf6>
          mem = 0;
 8006a50:	2300      	movs	r3, #0
 8006a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a54:	e001      	b.n	8006a5a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d110      	bne.n	8006a82 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a68:	9202      	str	r2, [sp, #8]
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f002 fada 	bl	8009030 <xTaskCreateStatic>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e013      	b.n	8006aaa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d110      	bne.n	8006aaa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	f107 0314 	add.w	r3, r7, #20
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f002 fb24 	bl	80090e8 <xTaskCreate>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d001      	beq.n	8006aaa <osThreadNew+0x146>
          hTask = NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006aaa:	697b      	ldr	r3, [r7, #20]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3738      	adds	r7, #56	; 0x38
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	200006c4 	.word	0x200006c4

08006ab8 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ac6:	f3ef 8305 	mrs	r3, IPSR
 8006aca:	617b      	str	r3, [r7, #20]
  return(result);
 8006acc:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10f      	bne.n	8006af2 <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad6:	613b      	str	r3, [r7, #16]
  return(result);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <osThreadSetPriority+0x3a>
 8006ade:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <osThreadSetPriority+0x74>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d109      	bne.n	8006afa <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <osThreadSetPriority+0x42>
    stat = osErrorISR;
 8006af2:	f06f 0305 	mvn.w	r3, #5
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e013      	b.n	8006b22 <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <osThreadSetPriority+0x54>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dd02      	ble.n	8006b0c <osThreadSetPriority+0x54>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b38      	cmp	r3, #56	; 0x38
 8006b0a:	dd03      	ble.n	8006b14 <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 8006b0c:	f06f 0303 	mvn.w	r3, #3
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e006      	b.n	8006b22 <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	69b8      	ldr	r0, [r7, #24]
 8006b1e:	f002 fc6b 	bl	80093f8 <vTaskPrioritySet>
  }

  return (stat);
 8006b22:	69fb      	ldr	r3, [r7, #28]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200006c4 	.word	0x200006c4

08006b30 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b3c:	f3ef 8305 	mrs	r3, IPSR
 8006b40:	617b      	str	r3, [r7, #20]
  return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10f      	bne.n	8006b68 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b48:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4c:	613b      	str	r3, [r7, #16]
  return(result);
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <osThreadSuspend+0x38>
 8006b54:	4b0f      	ldr	r3, [pc, #60]	; (8006b94 <osThreadSuspend+0x64>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d109      	bne.n	8006b70 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b60:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8006b68:	f06f 0305 	mvn.w	r3, #5
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	e00b      	b.n	8006b88 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8006b76:	f06f 0303 	mvn.w	r3, #3
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e004      	b.n	8006b88 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8006b82:	69b8      	ldr	r0, [r7, #24]
 8006b84:	f002 fcda 	bl	800953c <vTaskSuspend>
  }

  return (stat);
 8006b88:	69fb      	ldr	r3, [r7, #28]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200006c4 	.word	0x200006c4

08006b98 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ba4:	f3ef 8305 	mrs	r3, IPSR
 8006ba8:	617b      	str	r3, [r7, #20]
  return(result);
 8006baa:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10f      	bne.n	8006bd0 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb4:	613b      	str	r3, [r7, #16]
  return(result);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <osThreadResume+0x38>
 8006bbc:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <osThreadResume+0x64>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d109      	bne.n	8006bd8 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <osThreadResume+0x40>
    stat = osErrorISR;
 8006bd0:	f06f 0305 	mvn.w	r3, #5
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	e00b      	b.n	8006bf0 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8006bde:	f06f 0303 	mvn.w	r3, #3
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	e004      	b.n	8006bf0 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8006bea:	69b8      	ldr	r0, [r7, #24]
 8006bec:	f002 fd56 	bl	800969c <vTaskResume>
  }

  return (stat);
 8006bf0:	69fb      	ldr	r3, [r7, #28]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	200006c4 	.word	0x200006c4

08006c00 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c08:	f3ef 8305 	mrs	r3, IPSR
 8006c0c:	613b      	str	r3, [r7, #16]
  return(result);
 8006c0e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10f      	bne.n	8006c34 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c14:	f3ef 8310 	mrs	r3, PRIMASK
 8006c18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <osDelay+0x34>
 8006c20:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <osDelay+0x58>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d109      	bne.n	8006c3c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c28:	f3ef 8311 	mrs	r3, BASEPRI
 8006c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <osDelay+0x3c>
    stat = osErrorISR;
 8006c34:	f06f 0305 	mvn.w	r3, #5
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e007      	b.n	8006c4c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f002 fba2 	bl	8009390 <vTaskDelay>
    }
  }

  return (stat);
 8006c4c:	697b      	ldr	r3, [r7, #20]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200006c4 	.word	0x200006c4

08006c5c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c68:	f3ef 8305 	mrs	r3, IPSR
 8006c6c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d13d      	bne.n	8006cf0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c74:	f3ef 8310 	mrs	r3, PRIMASK
 8006c78:	613b      	str	r3, [r7, #16]
  return(result);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d137      	bne.n	8006cf0 <osEventFlagsNew+0x94>
 8006c80:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <osEventFlagsNew+0xa0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d105      	bne.n	8006c94 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c88:	f3ef 8311 	mrs	r3, BASEPRI
 8006c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d12d      	bne.n	8006cf0 <osEventFlagsNew+0x94>
    mem = -1;
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295
 8006c98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d015      	beq.n	8006ccc <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <osEventFlagsNew+0x5a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b1f      	cmp	r3, #31
 8006cae:	d902      	bls.n	8006cb6 <osEventFlagsNew+0x5a>
        mem = 1;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	e00c      	b.n	8006cd0 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <osEventFlagsNew+0x74>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d104      	bne.n	8006cd0 <osEventFlagsNew+0x74>
          mem = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e001      	b.n	8006cd0 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d106      	bne.n	8006ce4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fd92 	bl	8007804 <xEventGroupCreateStatic>
 8006ce0:	61f8      	str	r0, [r7, #28]
 8006ce2:	e005      	b.n	8006cf0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8006cea:	f000 fdc2 	bl	8007872 <xEventGroupCreate>
 8006cee:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006cf0:	69fb      	ldr	r3, [r7, #28]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3720      	adds	r7, #32
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200006c4 	.word	0x200006c4

08006d00 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <osEventFlagsSet+0x1e>
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006d1e:	f06f 0303 	mvn.w	r3, #3
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e03a      	b.n	8006d9c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d26:	f3ef 8305 	mrs	r3, IPSR
 8006d2a:	617b      	str	r3, [r7, #20]
  return(result);
 8006d2c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10f      	bne.n	8006d52 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d32:	f3ef 8310 	mrs	r3, PRIMASK
 8006d36:	613b      	str	r3, [r7, #16]
  return(result);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <osEventFlagsSet+0x52>
 8006d3e:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <osEventFlagsSet+0xa8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d123      	bne.n	8006d8e <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d46:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d01d      	beq.n	8006d8e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	69b8      	ldr	r0, [r7, #24]
 8006d60:	f000 ffa6 	bl	8007cb0 <xEventGroupSetBitsFromISR>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006d6a:	f06f 0302 	mvn.w	r3, #2
 8006d6e:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006d70:	e013      	b.n	8006d9a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00e      	beq.n	8006d9a <osEventFlagsSet+0x9a>
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <osEventFlagsSet+0xac>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006d8c:	e005      	b.n	8006d9a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	69b8      	ldr	r0, [r7, #24]
 8006d92:	f000 fec6 	bl	8007b22 <xEventGroupSetBits>
 8006d96:	61f8      	str	r0, [r7, #28]
 8006d98:	e000      	b.n	8006d9c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006d9a:	bf00      	nop
  }

  return (rflags);
 8006d9c:	69fb      	ldr	r3, [r7, #28]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3720      	adds	r7, #32
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200006c4 	.word	0x200006c4
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <osEventFlagsClear+0x1e>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006dce:	f06f 0303 	mvn.w	r3, #3
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	e029      	b.n	8006e2a <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd6:	f3ef 8305 	mrs	r3, IPSR
 8006dda:	617b      	str	r3, [r7, #20]
  return(result);
 8006ddc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10f      	bne.n	8006e02 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de2:	f3ef 8310 	mrs	r3, PRIMASK
 8006de6:	613b      	str	r3, [r7, #16]
  return(result);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <osEventFlagsClear+0x52>
 8006dee:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <osEventFlagsClear+0x84>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d114      	bne.n	8006e20 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006df6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00e      	beq.n	8006e20 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8006e02:	69b8      	ldr	r0, [r7, #24]
 8006e04:	f000 fe6a 	bl	8007adc <xEventGroupGetBitsFromISR>
 8006e08:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	69b8      	ldr	r0, [r7, #24]
 8006e0e:	f000 fe51 	bl	8007ab4 <xEventGroupClearBitsFromISR>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8006e18:	f06f 0302 	mvn.w	r3, #2
 8006e1c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8006e1e:	e004      	b.n	8006e2a <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	69b8      	ldr	r0, [r7, #24]
 8006e24:	f000 fe0e 	bl	8007a44 <xEventGroupClearBits>
 8006e28:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8006e2a:	69fb      	ldr	r3, [r7, #28]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	200006c4 	.word	0x200006c4

08006e38 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08e      	sub	sp, #56	; 0x38
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <osEventFlagsWait+0x22>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006e5a:	f06f 0303 	mvn.w	r3, #3
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e60:	e059      	b.n	8006f16 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e62:	f3ef 8305 	mrs	r3, IPSR
 8006e66:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e68:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10f      	bne.n	8006e8e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e72:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <osEventFlagsWait+0x56>
 8006e7a:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <osEventFlagsWait+0xe8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d109      	bne.n	8006e96 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e82:	f3ef 8311 	mrs	r3, BASEPRI
 8006e86:	617b      	str	r3, [r7, #20]
  return(result);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8006e8e:	f06f 0305 	mvn.w	r3, #5
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
 8006e94:	e03f      	b.n	8006f16 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea4:	e001      	b.n	8006eaa <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb8:	e001      	b.n	8006ebe <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	6a38      	ldr	r0, [r7, #32]
 8006eca:	f000 fced 	bl	80078a8 <xEventGroupWaitBits>
 8006ece:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00e      	beq.n	8006ef8 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d019      	beq.n	8006f16 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8006ee8:	f06f 0301 	mvn.w	r3, #1
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
 8006eee:	e012      	b.n	8006f16 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006ef0:	f06f 0302 	mvn.w	r3, #2
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef6:	e00e      	b.n	8006f16 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d109      	bne.n	8006f16 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8006f08:	f06f 0301 	mvn.w	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	e002      	b.n	8006f16 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006f10:	f06f 0302 	mvn.w	r3, #2
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3730      	adds	r7, #48	; 0x30
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	200006c4 	.word	0x200006c4

08006f24 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b08a      	sub	sp, #40	; 0x28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f30:	f3ef 8305 	mrs	r3, IPSR
 8006f34:	613b      	str	r3, [r7, #16]
  return(result);
 8006f36:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 8085 	bne.w	8007048 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f42:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d17e      	bne.n	8007048 <osMutexNew+0x124>
 8006f4a:	4b42      	ldr	r3, [pc, #264]	; (8007054 <osMutexNew+0x130>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d105      	bne.n	8006f5e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f52:	f3ef 8311 	mrs	r3, BASEPRI
 8006f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d174      	bne.n	8007048 <osMutexNew+0x124>
    if (attr != NULL) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	623b      	str	r3, [r7, #32]
 8006f6a:	e001      	b.n	8006f70 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <osMutexNew+0x5c>
      rmtx = 1U;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	e001      	b.n	8006f84 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d15c      	bne.n	8007048 <osMutexNew+0x124>
      mem = -1;
 8006f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f92:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d015      	beq.n	8006fc6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d006      	beq.n	8006fb0 <osMutexNew+0x8c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2b4f      	cmp	r3, #79	; 0x4f
 8006fa8:	d902      	bls.n	8006fb0 <osMutexNew+0x8c>
          mem = 1;
 8006faa:	2301      	movs	r3, #1
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	e00c      	b.n	8006fca <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d108      	bne.n	8006fca <osMutexNew+0xa6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <osMutexNew+0xa6>
            mem = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	e001      	b.n	8006fca <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d112      	bne.n	8006ff6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	2004      	movs	r0, #4
 8006fde:	f001 f89d 	bl	800811c <xQueueCreateMutexStatic>
 8006fe2:	6278      	str	r0, [r7, #36]	; 0x24
 8006fe4:	e016      	b.n	8007014 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	4619      	mov	r1, r3
 8006fec:	2001      	movs	r0, #1
 8006fee:	f001 f895 	bl	800811c <xQueueCreateMutexStatic>
 8006ff2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ff4:	e00e      	b.n	8007014 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007002:	2004      	movs	r0, #4
 8007004:	f001 f872 	bl	80080ec <xQueueCreateMutex>
 8007008:	6278      	str	r0, [r7, #36]	; 0x24
 800700a:	e003      	b.n	8007014 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800700c:	2001      	movs	r0, #1
 800700e:	f001 f86d 	bl	80080ec <xQueueCreateMutex>
 8007012:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <osMutexNew+0x110>
        if (attr != NULL) {
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <osMutexNew+0x104>
          name = attr->name;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	e001      	b.n	800702c <osMutexNew+0x108>
        } else {
          name = NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800702c:	6979      	ldr	r1, [r7, #20]
 800702e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007030:	f001 ff78 	bl	8008f24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	d006      	beq.n	8007048 <osMutexNew+0x124>
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800704a:	4618      	mov	r0, r3
 800704c:	3728      	adds	r7, #40	; 0x28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	200006c4 	.word	0x200006c4

08007058 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007072:	2300      	movs	r3, #0
 8007074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007076:	f3ef 8305 	mrs	r3, IPSR
 800707a:	613b      	str	r3, [r7, #16]
  return(result);
 800707c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10f      	bne.n	80070a2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007082:	f3ef 8310 	mrs	r3, PRIMASK
 8007086:	60fb      	str	r3, [r7, #12]
  return(result);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <osMutexAcquire+0x4a>
 800708e:	4b20      	ldr	r3, [pc, #128]	; (8007110 <osMutexAcquire+0xb8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d109      	bne.n	80070aa <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007096:	f3ef 8311 	mrs	r3, BASEPRI
 800709a:	60bb      	str	r3, [r7, #8]
  return(result);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <osMutexAcquire+0x52>
    stat = osErrorISR;
 80070a2:	f06f 0305 	mvn.w	r3, #5
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	e02c      	b.n	8007104 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80070b0:	f06f 0303 	mvn.w	r3, #3
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	e025      	b.n	8007104 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d011      	beq.n	80070e2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	69b8      	ldr	r0, [r7, #24]
 80070c2:	f001 f87a 	bl	80081ba <xQueueTakeMutexRecursive>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d01b      	beq.n	8007104 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80070d2:	f06f 0301 	mvn.w	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	e014      	b.n	8007104 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80070da:	f06f 0302 	mvn.w	r3, #2
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e010      	b.n	8007104 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	69b8      	ldr	r0, [r7, #24]
 80070e6:	f001 fc0d 	bl	8008904 <xQueueSemaphoreTake>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d009      	beq.n	8007104 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80070f6:	f06f 0301 	mvn.w	r3, #1
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	e002      	b.n	8007104 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80070fe:	f06f 0302 	mvn.w	r3, #2
 8007102:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007104:	69fb      	ldr	r3, [r7, #28]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	200006c4 	.word	0x200006c4

08007114 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f023 0301 	bic.w	r3, r3, #1
 8007122:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800712c:	2300      	movs	r3, #0
 800712e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007130:	f3ef 8305 	mrs	r3, IPSR
 8007134:	613b      	str	r3, [r7, #16]
  return(result);
 8007136:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10f      	bne.n	800715c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800713c:	f3ef 8310 	mrs	r3, PRIMASK
 8007140:	60fb      	str	r3, [r7, #12]
  return(result);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d109      	bne.n	800715c <osMutexRelease+0x48>
 8007148:	4b19      	ldr	r3, [pc, #100]	; (80071b0 <osMutexRelease+0x9c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d109      	bne.n	8007164 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007150:	f3ef 8311 	mrs	r3, BASEPRI
 8007154:	60bb      	str	r3, [r7, #8]
  return(result);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <osMutexRelease+0x50>
    stat = osErrorISR;
 800715c:	f06f 0305 	mvn.w	r3, #5
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e01f      	b.n	80071a4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d103      	bne.n	8007172 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800716a:	f06f 0303 	mvn.w	r3, #3
 800716e:	61fb      	str	r3, [r7, #28]
 8007170:	e018      	b.n	80071a4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d009      	beq.n	800718c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007178:	69b8      	ldr	r0, [r7, #24]
 800717a:	f000 ffea 	bl	8008152 <xQueueGiveMutexRecursive>
 800717e:	4603      	mov	r3, r0
 8007180:	2b01      	cmp	r3, #1
 8007182:	d00f      	beq.n	80071a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007184:	f06f 0302 	mvn.w	r3, #2
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	e00b      	b.n	80071a4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800718c:	2300      	movs	r3, #0
 800718e:	2200      	movs	r2, #0
 8007190:	2100      	movs	r1, #0
 8007192:	69b8      	ldr	r0, [r7, #24]
 8007194:	f001 f8b2 	bl	80082fc <xQueueGenericSend>
 8007198:	4603      	mov	r3, r0
 800719a:	2b01      	cmp	r3, #1
 800719c:	d002      	beq.n	80071a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800719e:	f06f 0302 	mvn.w	r3, #2
 80071a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80071a4:	69fb      	ldr	r3, [r7, #28]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200006c4 	.word	0x200006c4

080071b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	; 0x30
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c4:	f3ef 8305 	mrs	r3, IPSR
 80071c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80071ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8086 	bne.w	80072de <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d2:	f3ef 8310 	mrs	r3, PRIMASK
 80071d6:	617b      	str	r3, [r7, #20]
  return(result);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d17f      	bne.n	80072de <osSemaphoreNew+0x12a>
 80071de:	4b42      	ldr	r3, [pc, #264]	; (80072e8 <osSemaphoreNew+0x134>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d105      	bne.n	80071f2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071e6:	f3ef 8311 	mrs	r3, BASEPRI
 80071ea:	613b      	str	r3, [r7, #16]
  return(result);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d175      	bne.n	80072de <osSemaphoreNew+0x12a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d072      	beq.n	80072de <osSemaphoreNew+0x12a>
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d86e      	bhi.n	80072de <osSemaphoreNew+0x12a>
    mem = -1;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295
 8007204:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d006      	beq.n	8007222 <osSemaphoreNew+0x6e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b4f      	cmp	r3, #79	; 0x4f
 800721a:	d902      	bls.n	8007222 <osSemaphoreNew+0x6e>
        mem = 1;
 800721c:	2301      	movs	r3, #1
 800721e:	623b      	str	r3, [r7, #32]
 8007220:	e00c      	b.n	800723c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d108      	bne.n	800723c <osSemaphoreNew+0x88>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <osSemaphoreNew+0x88>
          mem = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	e001      	b.n	800723c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d04c      	beq.n	80072de <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d128      	bne.n	800729c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10a      	bne.n	8007266 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	2203      	movs	r2, #3
 8007256:	9200      	str	r2, [sp, #0]
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	2001      	movs	r0, #1
 800725e:	f000 fe53 	bl	8007f08 <xQueueGenericCreateStatic>
 8007262:	6278      	str	r0, [r7, #36]	; 0x24
 8007264:	e005      	b.n	8007272 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007266:	2203      	movs	r2, #3
 8007268:	2100      	movs	r1, #0
 800726a:	2001      	movs	r0, #1
 800726c:	f000 fec3 	bl	8007ff6 <xQueueGenericCreate>
 8007270:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d022      	beq.n	80072be <osSemaphoreNew+0x10a>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01f      	beq.n	80072be <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800727e:	2300      	movs	r3, #0
 8007280:	2200      	movs	r2, #0
 8007282:	2100      	movs	r1, #0
 8007284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007286:	f001 f839 	bl	80082fc <xQueueGenericSend>
 800728a:	4603      	mov	r3, r0
 800728c:	2b01      	cmp	r3, #1
 800728e:	d016      	beq.n	80072be <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007292:	f001 fcfc 	bl	8008c8e <vQueueDelete>
            hSemaphore = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
 800729a:	e010      	b.n	80072be <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d108      	bne.n	80072b4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	461a      	mov	r2, r3
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 ffbb 	bl	8008226 <xQueueCreateCountingSemaphoreStatic>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24
 80072b2:	e004      	b.n	80072be <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 ffec 	bl	8008294 <xQueueCreateCountingSemaphore>
 80072bc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00c      	beq.n	80072de <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e001      	b.n	80072d6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80072d6:	69f9      	ldr	r1, [r7, #28]
 80072d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072da:	f001 fe23 	bl	8008f24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3728      	adds	r7, #40	; 0x28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	200006c4 	.word	0x200006c4

080072ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d103      	bne.n	800730c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007304:	f06f 0303 	mvn.w	r3, #3
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	e04b      	b.n	80073a4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800730c:	f3ef 8305 	mrs	r3, IPSR
 8007310:	617b      	str	r3, [r7, #20]
  return(result);
 8007312:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10f      	bne.n	8007338 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007318:	f3ef 8310 	mrs	r3, PRIMASK
 800731c:	613b      	str	r3, [r7, #16]
  return(result);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d109      	bne.n	8007338 <osSemaphoreAcquire+0x4c>
 8007324:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <osSemaphoreAcquire+0xc4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d128      	bne.n	800737e <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800732c:	f3ef 8311 	mrs	r3, BASEPRI
 8007330:	60fb      	str	r3, [r7, #12]
  return(result);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d022      	beq.n	800737e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800733e:	f06f 0303 	mvn.w	r3, #3
 8007342:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007344:	e02d      	b.n	80073a2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800734a:	f107 0308 	add.w	r3, r7, #8
 800734e:	461a      	mov	r2, r3
 8007350:	2100      	movs	r1, #0
 8007352:	69b8      	ldr	r0, [r7, #24]
 8007354:	f001 fbe2 	bl	8008b1c <xQueueReceiveFromISR>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	d003      	beq.n	8007366 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800735e:	f06f 0302 	mvn.w	r3, #2
 8007362:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007364:	e01d      	b.n	80073a2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01a      	beq.n	80073a2 <osSemaphoreAcquire+0xb6>
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <osSemaphoreAcquire+0xc8>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800737c:	e011      	b.n	80073a2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	69b8      	ldr	r0, [r7, #24]
 8007382:	f001 fabf 	bl	8008904 <xQueueSemaphoreTake>
 8007386:	4603      	mov	r3, r0
 8007388:	2b01      	cmp	r3, #1
 800738a:	d00b      	beq.n	80073a4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007392:	f06f 0301 	mvn.w	r3, #1
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	e004      	b.n	80073a4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800739a:	f06f 0302 	mvn.w	r3, #2
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	e000      	b.n	80073a4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80073a2:	bf00      	nop
      }
    }
  }

  return (stat);
 80073a4:	69fb      	ldr	r3, [r7, #28]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3720      	adds	r7, #32
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200006c4 	.word	0x200006c4
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80073ce:	f06f 0303 	mvn.w	r3, #3
 80073d2:	61fb      	str	r3, [r7, #28]
 80073d4:	e03e      	b.n	8007454 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d6:	f3ef 8305 	mrs	r3, IPSR
 80073da:	617b      	str	r3, [r7, #20]
  return(result);
 80073dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10f      	bne.n	8007402 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e2:	f3ef 8310 	mrs	r3, PRIMASK
 80073e6:	613b      	str	r3, [r7, #16]
  return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <osSemaphoreRelease+0x4a>
 80073ee:	4b1c      	ldr	r3, [pc, #112]	; (8007460 <osSemaphoreRelease+0xa8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d120      	bne.n	8007438 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073f6:	f3ef 8311 	mrs	r3, BASEPRI
 80073fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01a      	beq.n	8007438 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	4619      	mov	r1, r3
 800740c:	69b8      	ldr	r0, [r7, #24]
 800740e:	f001 f90b 	bl	8008628 <xQueueGiveFromISR>
 8007412:	4603      	mov	r3, r0
 8007414:	2b01      	cmp	r3, #1
 8007416:	d003      	beq.n	8007420 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007418:	f06f 0302 	mvn.w	r3, #2
 800741c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800741e:	e018      	b.n	8007452 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d015      	beq.n	8007452 <osSemaphoreRelease+0x9a>
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <osSemaphoreRelease+0xac>)
 8007428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007436:	e00c      	b.n	8007452 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007438:	2300      	movs	r3, #0
 800743a:	2200      	movs	r2, #0
 800743c:	2100      	movs	r1, #0
 800743e:	69b8      	ldr	r0, [r7, #24]
 8007440:	f000 ff5c 	bl	80082fc <xQueueGenericSend>
 8007444:	4603      	mov	r3, r0
 8007446:	2b01      	cmp	r3, #1
 8007448:	d004      	beq.n	8007454 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800744a:	f06f 0302 	mvn.w	r3, #2
 800744e:	61fb      	str	r3, [r7, #28]
 8007450:	e000      	b.n	8007454 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007452:	bf00      	nop
    }
  }

  return (stat);
 8007454:	69fb      	ldr	r3, [r7, #28]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	200006c4 	.word	0x200006c4
 8007464:	e000ed04 	.word	0xe000ed04

08007468 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d102      	bne.n	8007480 <osSemaphoreGetCount+0x18>
    count = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	e01e      	b.n	80074be <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007480:	f3ef 8305 	mrs	r3, IPSR
 8007484:	617b      	str	r3, [r7, #20]
  return(result);
 8007486:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10f      	bne.n	80074ac <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800748c:	f3ef 8310 	mrs	r3, PRIMASK
 8007490:	613b      	str	r3, [r7, #16]
  return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d109      	bne.n	80074ac <osSemaphoreGetCount+0x44>
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <osSemaphoreGetCount+0x60>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d10a      	bne.n	80074b6 <osSemaphoreGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074a0:	f3ef 8311 	mrs	r3, BASEPRI
 80074a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80074ac:	69b8      	ldr	r0, [r7, #24]
 80074ae:	f001 fbd3 	bl	8008c58 <uxQueueMessagesWaitingFromISR>
 80074b2:	61f8      	str	r0, [r7, #28]
 80074b4:	e003      	b.n	80074be <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80074b6:	69b8      	ldr	r0, [r7, #24]
 80074b8:	f001 fbb0 	bl	8008c1c <uxQueueMessagesWaiting>
 80074bc:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 80074be:	69fb      	ldr	r3, [r7, #28]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3720      	adds	r7, #32
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	200006c4 	.word	0x200006c4

080074cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08c      	sub	sp, #48	; 0x30
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074dc:	f3ef 8305 	mrs	r3, IPSR
 80074e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80074e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d16f      	bne.n	80075c8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e8:	f3ef 8310 	mrs	r3, PRIMASK
 80074ec:	617b      	str	r3, [r7, #20]
  return(result);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d169      	bne.n	80075c8 <osMessageQueueNew+0xfc>
 80074f4:	4b37      	ldr	r3, [pc, #220]	; (80075d4 <osMessageQueueNew+0x108>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d105      	bne.n	8007508 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007500:	613b      	str	r3, [r7, #16]
  return(result);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d15f      	bne.n	80075c8 <osMessageQueueNew+0xfc>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d05c      	beq.n	80075c8 <osMessageQueueNew+0xfc>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d059      	beq.n	80075c8 <osMessageQueueNew+0xfc>
    mem = -1;
 8007514:	f04f 33ff 	mov.w	r3, #4294967295
 8007518:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d029      	beq.n	8007574 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d012      	beq.n	800754e <osMessageQueueNew+0x82>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b4f      	cmp	r3, #79	; 0x4f
 800752e:	d90e      	bls.n	800754e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695a      	ldr	r2, [r3, #20]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	429a      	cmp	r2, r3
 8007546:	d302      	bcc.n	800754e <osMessageQueueNew+0x82>
        mem = 1;
 8007548:	2301      	movs	r3, #1
 800754a:	623b      	str	r3, [r7, #32]
 800754c:	e014      	b.n	8007578 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d110      	bne.n	8007578 <osMessageQueueNew+0xac>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10c      	bne.n	8007578 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007562:	2b00      	cmp	r3, #0
 8007564:	d108      	bne.n	8007578 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d104      	bne.n	8007578 <osMessageQueueNew+0xac>
          mem = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	623b      	str	r3, [r7, #32]
 8007572:	e001      	b.n	8007578 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d10b      	bne.n	8007596 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2100      	movs	r1, #0
 8007588:	9100      	str	r1, [sp, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 fcbb 	bl	8007f08 <xQueueGenericCreateStatic>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24
 8007594:	e008      	b.n	80075a8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800759c:	2200      	movs	r2, #0
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fd28 	bl	8007ff6 <xQueueGenericCreate>
 80075a6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00c      	beq.n	80075c8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <osMessageQueueNew+0xf0>
        name = attr->name;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e001      	b.n	80075c0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80075c0:	69f9      	ldr	r1, [r7, #28]
 80075c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075c4:	f001 fcae 	bl	8008f24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3728      	adds	r7, #40	; 0x28
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200006c4 	.word	0x200006c4

080075d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	4613      	mov	r3, r2
 80075e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f0:	f3ef 8305 	mrs	r3, IPSR
 80075f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80075f6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10f      	bne.n	800761c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007600:	61bb      	str	r3, [r7, #24]
  return(result);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <osMessageQueuePut+0x44>
 8007608:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <osMessageQueuePut+0xe0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d12e      	bne.n	800766e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007610:	f3ef 8311 	mrs	r3, BASEPRI
 8007614:	617b      	str	r3, [r7, #20]
  return(result);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d028      	beq.n	800766e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <osMessageQueuePut+0x56>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <osMessageQueuePut+0x56>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800762e:	f06f 0303 	mvn.w	r3, #3
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007634:	e039      	b.n	80076aa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800763a:	f107 0210 	add.w	r2, r7, #16
 800763e:	2300      	movs	r3, #0
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	6a38      	ldr	r0, [r7, #32]
 8007644:	f000 ff58 	bl	80084f8 <xQueueGenericSendFromISR>
 8007648:	4603      	mov	r3, r0
 800764a:	2b01      	cmp	r3, #1
 800764c:	d003      	beq.n	8007656 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800764e:	f06f 0302 	mvn.w	r3, #2
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007654:	e029      	b.n	80076aa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d026      	beq.n	80076aa <osMessageQueuePut+0xd2>
 800765c:	4b17      	ldr	r3, [pc, #92]	; (80076bc <osMessageQueuePut+0xe4>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800766c:	e01d      	b.n	80076aa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <osMessageQueuePut+0xa2>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800767a:	f06f 0303 	mvn.w	r3, #3
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
 8007680:	e014      	b.n	80076ac <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007682:	2300      	movs	r3, #0
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	6a38      	ldr	r0, [r7, #32]
 800768a:	f000 fe37 	bl	80082fc <xQueueGenericSend>
 800768e:	4603      	mov	r3, r0
 8007690:	2b01      	cmp	r3, #1
 8007692:	d00b      	beq.n	80076ac <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800769a:	f06f 0301 	mvn.w	r3, #1
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
 80076a0:	e004      	b.n	80076ac <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80076a2:	f06f 0302 	mvn.w	r3, #2
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
 80076a8:	e000      	b.n	80076ac <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80076aa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3728      	adds	r7, #40	; 0x28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200006c4 	.word	0x200006c4
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	; 0x28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076d6:	f3ef 8305 	mrs	r3, IPSR
 80076da:	61fb      	str	r3, [r7, #28]
  return(result);
 80076dc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10f      	bne.n	8007702 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e2:	f3ef 8310 	mrs	r3, PRIMASK
 80076e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <osMessageQueueGet+0x42>
 80076ee:	4b2b      	ldr	r3, [pc, #172]	; (800779c <osMessageQueueGet+0xdc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d12e      	bne.n	8007754 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076f6:	f3ef 8311 	mrs	r3, BASEPRI
 80076fa:	617b      	str	r3, [r7, #20]
  return(result);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d028      	beq.n	8007754 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <osMessageQueueGet+0x54>
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <osMessageQueueGet+0x54>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007714:	f06f 0303 	mvn.w	r3, #3
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800771a:	e038      	b.n	800778e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007720:	f107 0310 	add.w	r3, r7, #16
 8007724:	461a      	mov	r2, r3
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	6a38      	ldr	r0, [r7, #32]
 800772a:	f001 f9f7 	bl	8008b1c <xQueueReceiveFromISR>
 800772e:	4603      	mov	r3, r0
 8007730:	2b01      	cmp	r3, #1
 8007732:	d003      	beq.n	800773c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007734:	f06f 0302 	mvn.w	r3, #2
 8007738:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800773a:	e028      	b.n	800778e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d025      	beq.n	800778e <osMessageQueueGet+0xce>
 8007742:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <osMessageQueueGet+0xe0>)
 8007744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007752:	e01c      	b.n	800778e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <osMessageQueueGet+0xa0>
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007760:	f06f 0303 	mvn.w	r3, #3
 8007764:	627b      	str	r3, [r7, #36]	; 0x24
 8007766:	e013      	b.n	8007790 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	6a38      	ldr	r0, [r7, #32]
 800776e:	f000 ffe9 	bl	8008744 <xQueueReceive>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d00b      	beq.n	8007790 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800777e:	f06f 0301 	mvn.w	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
 8007784:	e004      	b.n	8007790 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007786:	f06f 0302 	mvn.w	r3, #2
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
 800778c:	e000      	b.n	8007790 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800778e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007792:	4618      	mov	r0, r3
 8007794:	3728      	adds	r7, #40	; 0x28
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200006c4 	.word	0x200006c4
 80077a0:	e000ed04 	.word	0xe000ed04

080077a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4a06      	ldr	r2, [pc, #24]	; (80077cc <vApplicationGetIdleTaskMemory+0x28>)
 80077b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	4a05      	ldr	r2, [pc, #20]	; (80077d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80077ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2240      	movs	r2, #64	; 0x40
 80077c0:	601a      	str	r2, [r3, #0]
}
 80077c2:	bf00      	nop
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr
 80077cc:	200006c8 	.word	0x200006c8
 80077d0:	20000770 	.word	0x20000770

080077d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4a06      	ldr	r2, [pc, #24]	; (80077fc <vApplicationGetTimerTaskMemory+0x28>)
 80077e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	4a05      	ldr	r2, [pc, #20]	; (8007800 <vApplicationGetTimerTaskMemory+0x2c>)
 80077ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2240      	movs	r2, #64	; 0x40
 80077f0:	601a      	str	r2, [r3, #0]
}
 80077f2:	bf00      	nop
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr
 80077fc:	20000870 	.word	0x20000870
 8007800:	20000918 	.word	0x20000918

08007804 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8007828:	2320      	movs	r3, #32
 800782a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b20      	cmp	r3, #32
 8007830:	d00a      	beq.n	8007848 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60fb      	str	r3, [r7, #12]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	3304      	adds	r3, #4
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fa3b 	bl	8007cd8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2201      	movs	r2, #1
 8007866:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8007868:	697b      	ldr	r3, [r7, #20]
	}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8007878:	2020      	movs	r0, #32
 800787a:	f003 fbaf 	bl	800afdc <pvPortMalloc>
 800787e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3304      	adds	r3, #4
 8007890:	4618      	mov	r0, r3
 8007892:	f000 fa21 	bl	8007cd8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800789c:	687b      	ldr	r3, [r7, #4]
	}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b090      	sub	sp, #64	; 0x40
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <xEventGroupWaitBits+0x36>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	623b      	str	r3, [r7, #32]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <xEventGroupWaitBits+0x56>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	61fb      	str	r3, [r7, #28]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <xEventGroupWaitBits+0x72>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	61bb      	str	r3, [r7, #24]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800791a:	f002 fc3d 	bl	800a198 <xTaskGetSchedulerState>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <xEventGroupWaitBits+0x82>
 8007924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <xEventGroupWaitBits+0x86>
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <xEventGroupWaitBits+0x88>
 800792e:	2300      	movs	r3, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	617b      	str	r3, [r7, #20]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800794a:	f001 ff75 	bl	8009838 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800795a:	f000 f987 	bl	8007c6c <prvTestWaitCondition>
 800795e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800796a:	2300      	movs	r3, #0
 800796c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d028      	beq.n	80079c6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	43db      	mvns	r3, r3
 800797c:	401a      	ands	r2, r3
 800797e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e020      	b.n	80079c6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007986:	2b00      	cmp	r3, #0
 8007988:	d104      	bne.n	8007994 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	633b      	str	r3, [r7, #48]	; 0x30
 8007992:	e018      	b.n	80079c6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079a0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079ae:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b2:	1d18      	adds	r0, r3, #4
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	4313      	orrs	r3, r2
 80079ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079bc:	4619      	mov	r1, r3
 80079be:	f002 f94d 	bl	8009c5c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80079c6:	f001 ff45 	bl	8009854 <xTaskResumeAll>
 80079ca:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80079cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d031      	beq.n	8007a36 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d107      	bne.n	80079e8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80079d8:	4b19      	ldr	r3, [pc, #100]	; (8007a40 <xEventGroupWaitBits+0x198>)
 80079da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80079e8:	f002 fd56 	bl	800a498 <uxTaskResetEventItemValue>
 80079ec:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80079ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11a      	bne.n	8007a2e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80079f8:	f003 f9f0 	bl	800addc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a08:	f000 f930 	bl	8007c6c <prvTestWaitCondition>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d006      	beq.n	8007a26 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	401a      	ands	r2, r3
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007a26:	2301      	movs	r3, #1
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8007a2a:	f003 fa07 	bl	800ae3c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3740      	adds	r7, #64	; 0x40
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <xEventGroupClearBits+0x2a>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	60fb      	str	r3, [r7, #12]
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <xEventGroupClearBits+0x4a>
	__asm volatile
 8007a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7c:	f383 8811 	msr	BASEPRI, r3
 8007a80:	f3bf 8f6f 	isb	sy
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	60bb      	str	r3, [r7, #8]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8007a8e:	f003 f9a5 	bl	800addc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	401a      	ands	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007aa6:	f003 f9c9 	bl	800ae3c <vPortExitCritical>

	return uxReturn;
 8007aaa:	693b      	ldr	r3, [r7, #16]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8007abe:	2300      	movs	r3, #0
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4804      	ldr	r0, [pc, #16]	; (8007ad8 <xEventGroupClearBitsFromISR+0x24>)
 8007ac6:	f003 f879 	bl	800abbc <xTimerPendFunctionCallFromISR>
 8007aca:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8007acc:	68fb      	ldr	r3, [r7, #12]
	}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08007c53 	.word	0x08007c53

08007adc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b089      	sub	sp, #36	; 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ae8:	f3ef 8211 	mrs	r2, BASEPRI
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60fa      	str	r2, [r7, #12]
 8007afe:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b00:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b02:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b14:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8007b16:	697b      	ldr	r3, [r7, #20]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3724      	adds	r7, #36	; 0x24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b08e      	sub	sp, #56	; 0x38
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <xEventGroupSetBits+0x32>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	613b      	str	r3, [r7, #16]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <xEventGroupSetBits+0x52>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	60fb      	str	r3, [r7, #12]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	3304      	adds	r3, #4
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007b80:	f001 fe5a 	bl	8009838 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	431a      	orrs	r2, r3
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007b96:	e03c      	b.n	8007c12 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007bae:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bb6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d108      	bne.n	8007bd4 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd2:	e008      	b.n	8007be6 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d101      	bne.n	8007be6 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007be2:	2301      	movs	r3, #1
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d010      	beq.n	8007c0e <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8007bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007c06:	4619      	mov	r1, r3
 8007c08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007c0a:	f002 f8f3 	bl	8009df4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d1be      	bne.n	8007b98 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	43db      	mvns	r3, r3
 8007c22:	401a      	ands	r2, r3
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8007c28:	f001 fe14 	bl	8009854 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	681b      	ldr	r3, [r3, #0]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3738      	adds	r7, #56	; 0x38
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff6c 	bl	8007b22 <xEventGroupSetBits>
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fef0 	bl	8007a44 <xEventGroupClearBits>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d107      	bne.n	8007c92 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00a      	beq.n	8007ca2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e007      	b.n	8007ca2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4013      	ands	r3, r2
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d101      	bne.n	8007ca2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007ca2:	697b      	ldr	r3, [r7, #20]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr
	...

08007cb0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	68f9      	ldr	r1, [r7, #12]
 8007cc2:	4804      	ldr	r0, [pc, #16]	; (8007cd4 <xEventGroupSetBitsFromISR+0x24>)
 8007cc4:	f002 ff7a 	bl	800abbc <xTimerPendFunctionCallFromISR>
 8007cc8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007cca:	697b      	ldr	r3, [r7, #20]
	}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	08007c39 	.word	0x08007c39

08007cd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f103 0208 	add.w	r2, r3, #8
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f103 0208 	add.w	r2, r3, #8
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f103 0208 	add.w	r2, r3, #8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc80      	pop	{r7}
 8007d2c:	4770      	bx	lr

08007d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr

08007d74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d103      	bne.n	8007d94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e00c      	b.n	8007dae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3308      	adds	r3, #8
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	e002      	b.n	8007da2 <vListInsert+0x2e>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d2f6      	bcs.n	8007d9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	601a      	str	r2, [r3, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr

08007de4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6892      	ldr	r2, [r2, #8]
 8007dfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6852      	ldr	r2, [r2, #4]
 8007e04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d103      	bne.n	8007e18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	1e5a      	subs	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr
	...

08007e38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xQueueGenericReset+0x2a>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60bb      	str	r3, [r7, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e62:	f002 ffbb 	bl	800addc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e72:	fb01 f303 	mul.w	r3, r1, r3
 8007e76:	441a      	add	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	3b01      	subs	r3, #1
 8007e94:	68f9      	ldr	r1, [r7, #12]
 8007e96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e98:	fb01 f303 	mul.w	r3, r1, r3
 8007e9c:	441a      	add	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	22ff      	movs	r2, #255	; 0xff
 8007ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	22ff      	movs	r2, #255	; 0xff
 8007eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d114      	bne.n	8007ee2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01a      	beq.n	8007ef6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3310      	adds	r3, #16
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 ff31 	bl	8009d2c <xTaskRemoveFromEventList>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d012      	beq.n	8007ef6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ed0:	4b0c      	ldr	r3, [pc, #48]	; (8007f04 <xQueueGenericReset+0xcc>)
 8007ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	e009      	b.n	8007ef6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3310      	adds	r3, #16
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fef6 	bl	8007cd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3324      	adds	r3, #36	; 0x24
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff fef1 	bl	8007cd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ef6:	f002 ffa1 	bl	800ae3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007efa:	2301      	movs	r3, #1
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08e      	sub	sp, #56	; 0x38
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <xQueueGenericCreateStatic+0x52>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <xQueueGenericCreateStatic+0x56>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e000      	b.n	8007f60 <xQueueGenericCreateStatic+0x58>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	623b      	str	r3, [r7, #32]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <xQueueGenericCreateStatic+0x7e>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <xQueueGenericCreateStatic+0x82>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <xQueueGenericCreateStatic+0x84>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	61fb      	str	r3, [r7, #28]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fa6:	2350      	movs	r3, #80	; 0x50
 8007fa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b50      	cmp	r3, #80	; 0x50
 8007fae:	d00a      	beq.n	8007fc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	61bb      	str	r3, [r7, #24]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00d      	beq.n	8007fec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fd8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f843 	bl	8008072 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3730      	adds	r7, #48	; 0x30
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b08a      	sub	sp, #40	; 0x28
 8007ffa:	af02      	add	r7, sp, #8
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	4613      	mov	r3, r2
 8008002:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10a      	bne.n	8008020 <xQueueGenericCreate+0x2a>
	__asm volatile
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	f383 8811 	msr	BASEPRI, r3
 8008012:	f3bf 8f6f 	isb	sy
 8008016:	f3bf 8f4f 	dsb	sy
 800801a:	613b      	str	r3, [r7, #16]
}
 800801c:	bf00      	nop
 800801e:	e7fe      	b.n	800801e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d102      	bne.n	800802c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008026:	2300      	movs	r3, #0
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	e004      	b.n	8008036 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	fb02 f303 	mul.w	r3, r2, r3
 8008034:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	3350      	adds	r3, #80	; 0x50
 800803a:	4618      	mov	r0, r3
 800803c:	f002 ffce 	bl	800afdc <pvPortMalloc>
 8008040:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00f      	beq.n	8008068 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	3350      	adds	r3, #80	; 0x50
 800804c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008056:	79fa      	ldrb	r2, [r7, #7]
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4613      	mov	r3, r2
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	68b9      	ldr	r1, [r7, #8]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 f805 	bl	8008072 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008068:	69bb      	ldr	r3, [r7, #24]
	}
 800806a:	4618      	mov	r0, r3
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	e002      	b.n	8008094 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080a0:	2101      	movs	r1, #1
 80080a2:	69b8      	ldr	r0, [r7, #24]
 80080a4:	f7ff fec8 	bl	8007e38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00e      	beq.n	80080e4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80080d8:	2300      	movs	r3, #0
 80080da:	2200      	movs	r2, #0
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f90c 	bl	80082fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080f6:	2301      	movs	r3, #1
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	2300      	movs	r3, #0
 80080fc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	461a      	mov	r2, r3
 8008102:	6939      	ldr	r1, [r7, #16]
 8008104:	6978      	ldr	r0, [r7, #20]
 8008106:	f7ff ff76 	bl	8007ff6 <xQueueGenericCreate>
 800810a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7ff ffd3 	bl	80080b8 <prvInitialiseMutex>

		return pxNewQueue;
 8008112:	68fb      	ldr	r3, [r7, #12]
	}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af02      	add	r7, sp, #8
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008128:	2301      	movs	r3, #1
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	2300      	movs	r3, #0
 800812e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2200      	movs	r2, #0
 8008138:	6939      	ldr	r1, [r7, #16]
 800813a:	6978      	ldr	r0, [r7, #20]
 800813c:	f7ff fee4 	bl	8007f08 <xQueueGenericCreateStatic>
 8008140:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff ffb8 	bl	80080b8 <prvInitialiseMutex>

		return pxNewQueue;
 8008148:	68fb      	ldr	r3, [r7, #12]
	}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008152:	b590      	push	{r4, r7, lr}
 8008154:	b087      	sub	sp, #28
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	60fb      	str	r3, [r7, #12]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	685c      	ldr	r4, [r3, #4]
 800817e:	f001 fffd 	bl	800a17c <xTaskGetCurrentTaskHandle>
 8008182:	4603      	mov	r3, r0
 8008184:	429c      	cmp	r4, r3
 8008186:	d111      	bne.n	80081ac <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	1e5a      	subs	r2, r3, #1
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d105      	bne.n	80081a6 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800819a:	2300      	movs	r3, #0
 800819c:	2200      	movs	r2, #0
 800819e:	2100      	movs	r1, #0
 80081a0:	6938      	ldr	r0, [r7, #16]
 80081a2:	f000 f8ab 	bl	80082fc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	e001      	b.n	80081b0 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80081b0:	697b      	ldr	r3, [r7, #20]
	}
 80081b2:	4618      	mov	r0, r3
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd90      	pop	{r4, r7, pc}

080081ba <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80081ba:	b590      	push	{r4, r7, lr}
 80081bc:	b087      	sub	sp, #28
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	60fb      	str	r3, [r7, #12]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	685c      	ldr	r4, [r3, #4]
 80081e8:	f001 ffc8 	bl	800a17c <xTaskGetCurrentTaskHandle>
 80081ec:	4603      	mov	r3, r0
 80081ee:	429c      	cmp	r4, r3
 80081f0:	d107      	bne.n	8008202 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	e00c      	b.n	800821c <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6938      	ldr	r0, [r7, #16]
 8008206:	f000 fb7d 	bl	8008904 <xQueueSemaphoreTake>
 800820a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800821c:	697b      	ldr	r3, [r7, #20]
	}
 800821e:	4618      	mov	r0, r3
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	bd90      	pop	{r4, r7, pc}

08008226 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008226:	b580      	push	{r7, lr}
 8008228:	b08a      	sub	sp, #40	; 0x28
 800822a:	af02      	add	r7, sp, #8
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	61bb      	str	r3, [r7, #24]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	429a      	cmp	r2, r3
 8008254:	d90a      	bls.n	800826c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	617b      	str	r3, [r7, #20]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800826c:	2302      	movs	r3, #2
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	2100      	movs	r1, #0
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7ff fe46 	bl	8007f08 <xQueueGenericCreateStatic>
 800827c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800828a:	69fb      	ldr	r3, [r7, #28]
	}
 800828c:	4618      	mov	r0, r3
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	613b      	str	r3, [r7, #16]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d90a      	bls.n	80082d8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	60fb      	str	r3, [r7, #12]
}
 80082d4:	bf00      	nop
 80082d6:	e7fe      	b.n	80082d6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80082d8:	2202      	movs	r2, #2
 80082da:	2100      	movs	r1, #0
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff fe8a 	bl	8007ff6 <xQueueGenericCreate>
 80082e2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80082f0:	697b      	ldr	r3, [r7, #20]
	}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b08e      	sub	sp, #56	; 0x38
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800830a:	2300      	movs	r3, #0
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xQueueGenericSend+0x32>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <xQueueGenericSend+0x40>
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <xQueueGenericSend+0x44>
 800833c:	2301      	movs	r3, #1
 800833e:	e000      	b.n	8008342 <xQueueGenericSend+0x46>
 8008340:	2300      	movs	r3, #0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <xQueueGenericSend+0x60>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008358:	bf00      	nop
 800835a:	e7fe      	b.n	800835a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b02      	cmp	r3, #2
 8008360:	d103      	bne.n	800836a <xQueueGenericSend+0x6e>
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008366:	2b01      	cmp	r3, #1
 8008368:	d101      	bne.n	800836e <xQueueGenericSend+0x72>
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <xQueueGenericSend+0x74>
 800836e:	2300      	movs	r3, #0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <xQueueGenericSend+0x8e>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	623b      	str	r3, [r7, #32]
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800838a:	f001 ff05 	bl	800a198 <xTaskGetSchedulerState>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <xQueueGenericSend+0x9e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <xQueueGenericSend+0xa2>
 800839a:	2301      	movs	r3, #1
 800839c:	e000      	b.n	80083a0 <xQueueGenericSend+0xa4>
 800839e:	2300      	movs	r3, #0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <xQueueGenericSend+0xbe>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61fb      	str	r3, [r7, #28]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083ba:	f002 fd0f 	bl	800addc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d302      	bcc.n	80083d0 <xQueueGenericSend+0xd4>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d129      	bne.n	8008424 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	68b9      	ldr	r1, [r7, #8]
 80083d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083d6:	f000 fc94 	bl	8008d02 <prvCopyDataToQueue>
 80083da:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	3324      	adds	r3, #36	; 0x24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fc9f 	bl	8009d2c <xTaskRemoveFromEventList>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d013      	beq.n	800841c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80083f4:	4b3f      	ldr	r3, [pc, #252]	; (80084f4 <xQueueGenericSend+0x1f8>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	e00a      	b.n	800841c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d007      	beq.n	800841c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800840c:	4b39      	ldr	r3, [pc, #228]	; (80084f4 <xQueueGenericSend+0x1f8>)
 800840e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800841c:	f002 fd0e 	bl	800ae3c <vPortExitCritical>
				return pdPASS;
 8008420:	2301      	movs	r3, #1
 8008422:	e063      	b.n	80084ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d103      	bne.n	8008432 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800842a:	f002 fd07 	bl	800ae3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800842e:	2300      	movs	r3, #0
 8008430:	e05c      	b.n	80084ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008438:	f107 0314 	add.w	r3, r7, #20
 800843c:	4618      	mov	r0, r3
 800843e:	f001 fd3b 	bl	8009eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008442:	2301      	movs	r3, #1
 8008444:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008446:	f002 fcf9 	bl	800ae3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800844a:	f001 f9f5 	bl	8009838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800844e:	f002 fcc5 	bl	800addc <vPortEnterCritical>
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008458:	b25b      	sxtb	r3, r3
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d103      	bne.n	8008468 <xQueueGenericSend+0x16c>
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800846e:	b25b      	sxtb	r3, r3
 8008470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008474:	d103      	bne.n	800847e <xQueueGenericSend+0x182>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847e:	f002 fcdd 	bl	800ae3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008482:	1d3a      	adds	r2, r7, #4
 8008484:	f107 0314 	add.w	r3, r7, #20
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f001 fd2a 	bl	8009ee4 <xTaskCheckForTimeOut>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d124      	bne.n	80084e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008498:	f000 fd2b 	bl	8008ef2 <prvIsQueueFull>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d018      	beq.n	80084d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	3310      	adds	r3, #16
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fbb2 	bl	8009c14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80084b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b2:	f000 fcb6 	bl	8008e22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80084b6:	f001 f9cd 	bl	8009854 <xTaskResumeAll>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f47f af7c 	bne.w	80083ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80084c2:	4b0c      	ldr	r3, [pc, #48]	; (80084f4 <xQueueGenericSend+0x1f8>)
 80084c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	e772      	b.n	80083ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80084d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084d6:	f000 fca4 	bl	8008e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084da:	f001 f9bb 	bl	8009854 <xTaskResumeAll>
 80084de:	e76c      	b.n	80083ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80084e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084e2:	f000 fc9e 	bl	8008e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e6:	f001 f9b5 	bl	8009854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80084ea:	2300      	movs	r3, #0
		}
	}
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3738      	adds	r7, #56	; 0x38
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08e      	sub	sp, #56	; 0x38
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <xQueueGenericSendFromISR+0x3c>
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <xQueueGenericSendFromISR+0x40>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <xQueueGenericSendFromISR+0x42>
 8008538:	2300      	movs	r3, #0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10a      	bne.n	8008554 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	623b      	str	r3, [r7, #32]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d103      	bne.n	8008562 <xQueueGenericSendFromISR+0x6a>
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	2b01      	cmp	r3, #1
 8008560:	d101      	bne.n	8008566 <xQueueGenericSendFromISR+0x6e>
 8008562:	2301      	movs	r3, #1
 8008564:	e000      	b.n	8008568 <xQueueGenericSendFromISR+0x70>
 8008566:	2300      	movs	r3, #0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	61fb      	str	r3, [r7, #28]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008582:	f002 fced 	bl	800af60 <vPortValidateInterruptPriority>
	__asm volatile
 8008586:	f3ef 8211 	mrs	r2, BASEPRI
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	61ba      	str	r2, [r7, #24]
 800859c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800859e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d302      	bcc.n	80085b4 <xQueueGenericSendFromISR+0xbc>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d12c      	bne.n	800860e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085c4:	f000 fb9d 	bl	8008d02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085c8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80085cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d0:	d112      	bne.n	80085f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d016      	beq.n	8008608 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	3324      	adds	r3, #36	; 0x24
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 fba4 	bl	8009d2c <xTaskRemoveFromEventList>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00e      	beq.n	8008608 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	e007      	b.n	8008608 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085fc:	3301      	adds	r3, #1
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	b25a      	sxtb	r2, r3
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008608:	2301      	movs	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800860c:	e001      	b.n	8008612 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800860e:	2300      	movs	r3, #0
 8008610:	637b      	str	r3, [r7, #52]	; 0x34
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	f383 8811 	msr	BASEPRI, r3
}
 800861c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800861e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008620:	4618      	mov	r0, r3
 8008622:	3738      	adds	r7, #56	; 0x38
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08e      	sub	sp, #56	; 0x38
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	623b      	str	r3, [r7, #32]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <xQueueGiveFromISR+0x48>
	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	61fb      	str	r3, [r7, #28]
}
 800866c:	bf00      	nop
 800866e:	e7fe      	b.n	800866e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d103      	bne.n	8008680 <xQueueGiveFromISR+0x58>
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <xQueueGiveFromISR+0x5c>
 8008680:	2301      	movs	r3, #1
 8008682:	e000      	b.n	8008686 <xQueueGiveFromISR+0x5e>
 8008684:	2300      	movs	r3, #0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	61bb      	str	r3, [r7, #24]
}
 800869c:	bf00      	nop
 800869e:	e7fe      	b.n	800869e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086a0:	f002 fc5e 	bl	800af60 <vPortValidateInterruptPriority>
	__asm volatile
 80086a4:	f3ef 8211 	mrs	r2, BASEPRI
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	617a      	str	r2, [r7, #20]
 80086ba:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80086bc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d22b      	bcs.n	8008728 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ea:	d112      	bne.n	8008712 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d016      	beq.n	8008722 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	3324      	adds	r3, #36	; 0x24
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 fb17 	bl	8009d2c <xTaskRemoveFromEventList>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00e      	beq.n	8008722 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00b      	beq.n	8008722 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e007      	b.n	8008722 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008716:	3301      	adds	r3, #1
 8008718:	b2db      	uxtb	r3, r3
 800871a:	b25a      	sxtb	r2, r3
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008722:	2301      	movs	r3, #1
 8008724:	637b      	str	r3, [r7, #52]	; 0x34
 8008726:	e001      	b.n	800872c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008728:	2300      	movs	r3, #0
 800872a:	637b      	str	r3, [r7, #52]	; 0x34
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f383 8811 	msr	BASEPRI, r3
}
 8008736:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800873a:	4618      	mov	r0, r3
 800873c:	3738      	adds	r7, #56	; 0x38
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08c      	sub	sp, #48	; 0x30
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008750:	2300      	movs	r3, #0
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <xQueueReceive+0x30>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	623b      	str	r3, [r7, #32]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d103      	bne.n	8008782 <xQueueReceive+0x3e>
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <xQueueReceive+0x42>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <xQueueReceive+0x44>
 8008786:	2300      	movs	r3, #0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <xQueueReceive+0x5e>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	61fb      	str	r3, [r7, #28]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087a2:	f001 fcf9 	bl	800a198 <xTaskGetSchedulerState>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d102      	bne.n	80087b2 <xQueueReceive+0x6e>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <xQueueReceive+0x72>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <xQueueReceive+0x74>
 80087b6:	2300      	movs	r3, #0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <xQueueReceive+0x8e>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	61bb      	str	r3, [r7, #24]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80087d2:	f002 fb03 	bl	800addc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01f      	beq.n	8008822 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e6:	f000 faf6 	bl	8008dd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	1e5a      	subs	r2, r3, #1
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00f      	beq.n	800881a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	3310      	adds	r3, #16
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 fa94 	bl	8009d2c <xTaskRemoveFromEventList>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d007      	beq.n	800881a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800880a:	4b3d      	ldr	r3, [pc, #244]	; (8008900 <xQueueReceive+0x1bc>)
 800880c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800881a:	f002 fb0f 	bl	800ae3c <vPortExitCritical>
				return pdPASS;
 800881e:	2301      	movs	r3, #1
 8008820:	e069      	b.n	80088f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d103      	bne.n	8008830 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008828:	f002 fb08 	bl	800ae3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800882c:	2300      	movs	r3, #0
 800882e:	e062      	b.n	80088f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008836:	f107 0310 	add.w	r3, r7, #16
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fb3c 	bl	8009eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008840:	2301      	movs	r3, #1
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008844:	f002 fafa 	bl	800ae3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008848:	f000 fff6 	bl	8009838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800884c:	f002 fac6 	bl	800addc <vPortEnterCritical>
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008856:	b25b      	sxtb	r3, r3
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d103      	bne.n	8008866 <xQueueReceive+0x122>
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800886c:	b25b      	sxtb	r3, r3
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008872:	d103      	bne.n	800887c <xQueueReceive+0x138>
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800887c:	f002 fade 	bl	800ae3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008880:	1d3a      	adds	r2, r7, #4
 8008882:	f107 0310 	add.w	r3, r7, #16
 8008886:	4611      	mov	r1, r2
 8008888:	4618      	mov	r0, r3
 800888a:	f001 fb2b 	bl	8009ee4 <xTaskCheckForTimeOut>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d123      	bne.n	80088dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008896:	f000 fb16 	bl	8008ec6 <prvIsQueueEmpty>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d017      	beq.n	80088d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	3324      	adds	r3, #36	; 0x24
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 f9b3 	bl	8009c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b0:	f000 fab7 	bl	8008e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088b4:	f000 ffce 	bl	8009854 <xTaskResumeAll>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d189      	bne.n	80087d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80088be:	4b10      	ldr	r3, [pc, #64]	; (8008900 <xQueueReceive+0x1bc>)
 80088c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	e780      	b.n	80087d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d2:	f000 faa6 	bl	8008e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088d6:	f000 ffbd 	bl	8009854 <xTaskResumeAll>
 80088da:	e77a      	b.n	80087d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088de:	f000 faa0 	bl	8008e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088e2:	f000 ffb7 	bl	8009854 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e8:	f000 faed 	bl	8008ec6 <prvIsQueueEmpty>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f43f af6f 	beq.w	80087d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3730      	adds	r7, #48	; 0x30
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08e      	sub	sp, #56	; 0x38
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	623b      	str	r3, [r7, #32]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	61fb      	str	r3, [r7, #28]
}
 8008950:	bf00      	nop
 8008952:	e7fe      	b.n	8008952 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008954:	f001 fc20 	bl	800a198 <xTaskGetSchedulerState>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d102      	bne.n	8008964 <xQueueSemaphoreTake+0x60>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <xQueueSemaphoreTake+0x64>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <xQueueSemaphoreTake+0x66>
 8008968:	2300      	movs	r3, #0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10a      	bne.n	8008984 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	61bb      	str	r3, [r7, #24]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008984:	f002 fa2a 	bl	800addc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	2b00      	cmp	r3, #0
 8008992:	d024      	beq.n	80089de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	1e5a      	subs	r2, r3, #1
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80089a4:	f001 fd90 	bl	800a4c8 <pvTaskIncrementMutexHeldCount>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ac:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00f      	beq.n	80089d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	3310      	adds	r3, #16
 80089ba:	4618      	mov	r0, r3
 80089bc:	f001 f9b6 	bl	8009d2c <xTaskRemoveFromEventList>
 80089c0:	4603      	mov	r3, r0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d007      	beq.n	80089d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089c6:	4b54      	ldr	r3, [pc, #336]	; (8008b18 <xQueueSemaphoreTake+0x214>)
 80089c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089d6:	f002 fa31 	bl	800ae3c <vPortExitCritical>
				return pdPASS;
 80089da:	2301      	movs	r3, #1
 80089dc:	e097      	b.n	8008b0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d111      	bne.n	8008a08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	617b      	str	r3, [r7, #20]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a00:	f002 fa1c 	bl	800ae3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a04:	2300      	movs	r3, #0
 8008a06:	e082      	b.n	8008b0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a0e:	f107 030c 	add.w	r3, r7, #12
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 fa50 	bl	8009eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a1c:	f002 fa0e 	bl	800ae3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a20:	f000 ff0a 	bl	8009838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a24:	f002 f9da 	bl	800addc <vPortEnterCritical>
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a34:	d103      	bne.n	8008a3e <xQueueSemaphoreTake+0x13a>
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a44:	b25b      	sxtb	r3, r3
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d103      	bne.n	8008a54 <xQueueSemaphoreTake+0x150>
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a54:	f002 f9f2 	bl	800ae3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a58:	463a      	mov	r2, r7
 8008a5a:	f107 030c 	add.w	r3, r7, #12
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fa3f 	bl	8009ee4 <xTaskCheckForTimeOut>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d132      	bne.n	8008ad2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a6e:	f000 fa2a 	bl	8008ec6 <prvIsQueueEmpty>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d026      	beq.n	8008ac6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008a80:	f002 f9ac 	bl	800addc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 fba3 	bl	800a1d4 <xTaskPriorityInherit>
 8008a8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008a90:	f002 f9d4 	bl	800ae3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a96:	3324      	adds	r3, #36	; 0x24
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f001 f8b9 	bl	8009c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aa4:	f000 f9bd 	bl	8008e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008aa8:	f000 fed4 	bl	8009854 <xTaskResumeAll>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f47f af68 	bne.w	8008984 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008ab4:	4b18      	ldr	r3, [pc, #96]	; (8008b18 <xQueueSemaphoreTake+0x214>)
 8008ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	e75e      	b.n	8008984 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ac8:	f000 f9ab 	bl	8008e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008acc:	f000 fec2 	bl	8009854 <xTaskResumeAll>
 8008ad0:	e758      	b.n	8008984 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ad4:	f000 f9a5 	bl	8008e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ad8:	f000 febc 	bl	8009854 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008adc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ade:	f000 f9f2 	bl	8008ec6 <prvIsQueueEmpty>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f43f af4d 	beq.w	8008984 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00d      	beq.n	8008b0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008af0:	f002 f974 	bl	800addc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008af6:	f000 f8ed 	bl	8008cd4 <prvGetDisinheritPriorityAfterTimeout>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 fc42 	bl	800a38c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b08:	f002 f998 	bl	800ae3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3738      	adds	r7, #56	; 0x38
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08e      	sub	sp, #56	; 0x38
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	623b      	str	r3, [r7, #32]
}
 8008b44:	bf00      	nop
 8008b46:	e7fe      	b.n	8008b46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d103      	bne.n	8008b56 <xQueueReceiveFromISR+0x3a>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <xQueueReceiveFromISR+0x3e>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <xQueueReceiveFromISR+0x40>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	61fb      	str	r3, [r7, #28]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b76:	f002 f9f3 	bl	800af60 <vPortValidateInterruptPriority>
	__asm volatile
 8008b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	61ba      	str	r2, [r7, #24]
 8008b90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008b92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d02f      	beq.n	8008c02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bb0:	f000 f911 	bl	8008dd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	1e5a      	subs	r2, r3, #1
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008bbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc4:	d112      	bne.n	8008bec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d016      	beq.n	8008bfc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	3310      	adds	r3, #16
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 f8aa 	bl	8009d2c <xTaskRemoveFromEventList>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00e      	beq.n	8008bfc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	e007      	b.n	8008bfc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	b25a      	sxtb	r2, r3
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008c00:	e001      	b.n	8008c06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f383 8811 	msr	BASEPRI, r3
}
 8008c10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3738      	adds	r7, #56	; 0x38
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10a      	bne.n	8008c40 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	60bb      	str	r3, [r7, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008c40:	f002 f8cc 	bl	800addc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008c4a:	f002 f8f7 	bl	800ae3c <vPortExitCritical>

	return uxReturn;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10a      	bne.n	8008c7c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	60bb      	str	r3, [r7, #8]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8008c82:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr

08008c8e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <vQueueDelete+0x28>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	60bb      	str	r3, [r7, #8]
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 f95c 	bl	8008f74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f002 fa4c 	bl	800b164 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008ccc:	bf00      	nop
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d006      	beq.n	8008cf2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	e001      	b.n	8008cf6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10d      	bne.n	8008d3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d14d      	bne.n	8008dc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fabf 	bl	800a2b0 <xTaskPriorityDisinherit>
 8008d32:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	605a      	str	r2, [r3, #4]
 8008d3a:	e043      	b.n	8008dc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d119      	bne.n	8008d76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6898      	ldr	r0, [r3, #8]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	68b9      	ldr	r1, [r7, #8]
 8008d4e:	f004 f927 	bl	800cfa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	441a      	add	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d32b      	bcc.n	8008dc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	609a      	str	r2, [r3, #8]
 8008d74:	e026      	b.n	8008dc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68d8      	ldr	r0, [r3, #12]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	461a      	mov	r2, r3
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	f004 f90d 	bl	800cfa0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	425b      	negs	r3, r3
 8008d90:	441a      	add	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d207      	bcs.n	8008db2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	425b      	negs	r3, r3
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d105      	bne.n	8008dc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008dcc:	697b      	ldr	r3, [r7, #20]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d018      	beq.n	8008e1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	441a      	add	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d303      	bcc.n	8008e0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68d9      	ldr	r1, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	461a      	mov	r2, r3
 8008e14:	6838      	ldr	r0, [r7, #0]
 8008e16:	f004 f8c3 	bl	800cfa0 <memcpy>
	}
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e2a:	f001 ffd7 	bl	800addc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e36:	e011      	b.n	8008e5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d012      	beq.n	8008e66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3324      	adds	r3, #36	; 0x24
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 ff71 	bl	8009d2c <xTaskRemoveFromEventList>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e50:	f001 f8aa 	bl	8009fa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	dce9      	bgt.n	8008e38 <prvUnlockQueue+0x16>
 8008e64:	e000      	b.n	8008e68 <prvUnlockQueue+0x46>
					break;
 8008e66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	22ff      	movs	r2, #255	; 0xff
 8008e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e70:	f001 ffe4 	bl	800ae3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e74:	f001 ffb2 	bl	800addc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e80:	e011      	b.n	8008ea6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d012      	beq.n	8008eb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3310      	adds	r3, #16
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 ff4c 	bl	8009d2c <xTaskRemoveFromEventList>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e9a:	f001 f885 	bl	8009fa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	dce9      	bgt.n	8008e82 <prvUnlockQueue+0x60>
 8008eae:	e000      	b.n	8008eb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008eb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	22ff      	movs	r2, #255	; 0xff
 8008eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008eba:	f001 ffbf 	bl	800ae3c <vPortExitCritical>
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ece:	f001 ff85 	bl	800addc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	e001      	b.n	8008ee4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ee4:	f001 ffaa 	bl	800ae3c <vPortExitCritical>

	return xReturn;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008efa:	f001 ff6f 	bl	800addc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d102      	bne.n	8008f10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	e001      	b.n	8008f14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f14:	f001 ff92 	bl	800ae3c <vPortExitCritical>

	return xReturn;
 8008f18:	68fb      	ldr	r3, [r7, #12]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	e014      	b.n	8008f5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f34:	4a0e      	ldr	r2, [pc, #56]	; (8008f70 <vQueueAddToRegistry+0x4c>)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10b      	bne.n	8008f58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f40:	490b      	ldr	r1, [pc, #44]	; (8008f70 <vQueueAddToRegistry+0x4c>)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f4a:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <vQueueAddToRegistry+0x4c>)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	4413      	add	r3, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f56:	e006      	b.n	8008f66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b07      	cmp	r3, #7
 8008f62:	d9e7      	bls.n	8008f34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bc80      	pop	{r7}
 8008f6e:	4770      	bx	lr
 8008f70:	20000a18 	.word	0x20000a18

08008f74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	e016      	b.n	8008fb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008f82:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <vQueueUnregisterQueue+0x50>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	4413      	add	r3, r2
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d10b      	bne.n	8008faa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008f92:	4a0c      	ldr	r2, [pc, #48]	; (8008fc4 <vQueueUnregisterQueue+0x50>)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2100      	movs	r1, #0
 8008f98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008f9c:	4a09      	ldr	r2, [pc, #36]	; (8008fc4 <vQueueUnregisterQueue+0x50>)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	605a      	str	r2, [r3, #4]
				break;
 8008fa8:	e006      	b.n	8008fb8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b07      	cmp	r3, #7
 8008fb4:	d9e5      	bls.n	8008f82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bc80      	pop	{r7}
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000a18 	.word	0x20000a18

08008fc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fd8:	f001 ff00 	bl	800addc <vPortEnterCritical>
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fe2:	b25b      	sxtb	r3, r3
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe8:	d103      	bne.n	8008ff2 <vQueueWaitForMessageRestricted+0x2a>
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ff8:	b25b      	sxtb	r3, r3
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d103      	bne.n	8009008 <vQueueWaitForMessageRestricted+0x40>
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009008:	f001 ff18 	bl	800ae3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d106      	bne.n	8009022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	3324      	adds	r3, #36	; 0x24
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68b9      	ldr	r1, [r7, #8]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fe59 	bl	8009cd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009022:	6978      	ldr	r0, [r7, #20]
 8009024:	f7ff fefd 	bl	8008e22 <prvUnlockQueue>
	}
 8009028:	bf00      	nop
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08e      	sub	sp, #56	; 0x38
 8009034:	af04      	add	r7, sp, #16
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800903e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	623b      	str	r3, [r7, #32]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xTaskCreateStatic+0x46>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	61fb      	str	r3, [r7, #28]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009076:	23a8      	movs	r3, #168	; 0xa8
 8009078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2ba8      	cmp	r3, #168	; 0xa8
 800907e:	d00a      	beq.n	8009096 <xTaskCreateStatic+0x66>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	61bb      	str	r3, [r7, #24]
}
 8009092:	bf00      	nop
 8009094:	e7fe      	b.n	8009094 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01e      	beq.n	80090da <xTaskCreateStatic+0xaa>
 800909c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01b      	beq.n	80090da <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090b4:	2300      	movs	r3, #0
 80090b6:	9303      	str	r3, [sp, #12]
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	9302      	str	r3, [sp, #8]
 80090bc:	f107 0314 	add.w	r3, r7, #20
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	68b9      	ldr	r1, [r7, #8]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 f851 	bl	8009174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090d4:	f000 f8ec 	bl	80092b0 <prvAddNewTaskToReadyList>
 80090d8:	e001      	b.n	80090de <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090de:	697b      	ldr	r3, [r7, #20]
	}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3728      	adds	r7, #40	; 0x28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08c      	sub	sp, #48	; 0x30
 80090ec:	af04      	add	r7, sp, #16
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 ff6d 	bl	800afdc <pvPortMalloc>
 8009102:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800910a:	20a8      	movs	r0, #168	; 0xa8
 800910c:	f001 ff66 	bl	800afdc <pvPortMalloc>
 8009110:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	631a      	str	r2, [r3, #48]	; 0x30
 800911e:	e005      	b.n	800912c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009120:	6978      	ldr	r0, [r7, #20]
 8009122:	f002 f81f 	bl	800b164 <vPortFree>
 8009126:	e001      	b.n	800912c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009128:	2300      	movs	r3, #0
 800912a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d017      	beq.n	8009162 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800913a:	88fa      	ldrh	r2, [r7, #6]
 800913c:	2300      	movs	r3, #0
 800913e:	9303      	str	r3, [sp, #12]
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	9302      	str	r3, [sp, #8]
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f80f 	bl	8009174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009156:	69f8      	ldr	r0, [r7, #28]
 8009158:	f000 f8aa 	bl	80092b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800915c:	2301      	movs	r3, #1
 800915e:	61bb      	str	r3, [r7, #24]
 8009160:	e002      	b.n	8009168 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009162:	f04f 33ff 	mov.w	r3, #4294967295
 8009166:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009168:	69bb      	ldr	r3, [r7, #24]
	}
 800916a:	4618      	mov	r0, r3
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	461a      	mov	r2, r3
 800918c:	21a5      	movs	r1, #165	; 0xa5
 800918e:	f003 fdd3 	bl	800cd38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800919c:	3b01      	subs	r3, #1
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f023 0307 	bic.w	r3, r3, #7
 80091aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	f003 0307 	and.w	r3, r3, #7
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	617b      	str	r3, [r7, #20]
}
 80091c8:	bf00      	nop
 80091ca:	e7fe      	b.n	80091ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091cc:	2300      	movs	r3, #0
 80091ce:	61fb      	str	r3, [r7, #28]
 80091d0:	e012      	b.n	80091f8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	4413      	add	r3, r2
 80091d8:	7819      	ldrb	r1, [r3, #0]
 80091da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	4413      	add	r3, r2
 80091e0:	3334      	adds	r3, #52	; 0x34
 80091e2:	460a      	mov	r2, r1
 80091e4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	4413      	add	r3, r2
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d006      	beq.n	8009200 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	3301      	adds	r3, #1
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2b0f      	cmp	r3, #15
 80091fc:	d9e9      	bls.n	80091d2 <prvInitialiseNewTask+0x5e>
 80091fe:	e000      	b.n	8009202 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009200:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	2b37      	cmp	r3, #55	; 0x37
 800920e:	d901      	bls.n	8009214 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009210:	2337      	movs	r3, #55	; 0x37
 8009212:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009218:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800921e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009222:	2200      	movs	r2, #0
 8009224:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	3304      	adds	r3, #4
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe fd73 	bl	8007d16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	3318      	adds	r3, #24
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fd6e 	bl	8007d16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	2200      	movs	r2, #0
 8009254:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	2200      	movs	r2, #0
 800925c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009262:	3354      	adds	r3, #84	; 0x54
 8009264:	224c      	movs	r2, #76	; 0x4c
 8009266:	2100      	movs	r1, #0
 8009268:	4618      	mov	r0, r3
 800926a:	f003 fd65 	bl	800cd38 <memset>
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	4a0c      	ldr	r2, [pc, #48]	; (80092a4 <prvInitialiseNewTask+0x130>)
 8009272:	659a      	str	r2, [r3, #88]	; 0x58
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	4a0c      	ldr	r2, [pc, #48]	; (80092a8 <prvInitialiseNewTask+0x134>)
 8009278:	65da      	str	r2, [r3, #92]	; 0x5c
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	4a0b      	ldr	r2, [pc, #44]	; (80092ac <prvInitialiseNewTask+0x138>)
 800927e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	69b8      	ldr	r0, [r7, #24]
 8009286:	f001 fcb9 	bl	800abfc <pxPortInitialiseStack>
 800928a:	4602      	mov	r2, r0
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d002      	beq.n	800929c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800929c:	bf00      	nop
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	200034a8 	.word	0x200034a8
 80092a8:	20003510 	.word	0x20003510
 80092ac:	20003578 	.word	0x20003578

080092b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092b8:	f001 fd90 	bl	800addc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092bc:	4b2d      	ldr	r3, [pc, #180]	; (8009374 <prvAddNewTaskToReadyList+0xc4>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	3301      	adds	r3, #1
 80092c2:	4a2c      	ldr	r2, [pc, #176]	; (8009374 <prvAddNewTaskToReadyList+0xc4>)
 80092c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092c6:	4b2c      	ldr	r3, [pc, #176]	; (8009378 <prvAddNewTaskToReadyList+0xc8>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d109      	bne.n	80092e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092ce:	4a2a      	ldr	r2, [pc, #168]	; (8009378 <prvAddNewTaskToReadyList+0xc8>)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092d4:	4b27      	ldr	r3, [pc, #156]	; (8009374 <prvAddNewTaskToReadyList+0xc4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d110      	bne.n	80092fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092dc:	f000 fe88 	bl	8009ff0 <prvInitialiseTaskLists>
 80092e0:	e00d      	b.n	80092fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092e2:	4b26      	ldr	r3, [pc, #152]	; (800937c <prvAddNewTaskToReadyList+0xcc>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092ea:	4b23      	ldr	r3, [pc, #140]	; (8009378 <prvAddNewTaskToReadyList+0xc8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d802      	bhi.n	80092fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092f8:	4a1f      	ldr	r2, [pc, #124]	; (8009378 <prvAddNewTaskToReadyList+0xc8>)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092fe:	4b20      	ldr	r3, [pc, #128]	; (8009380 <prvAddNewTaskToReadyList+0xd0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	4a1e      	ldr	r2, [pc, #120]	; (8009380 <prvAddNewTaskToReadyList+0xd0>)
 8009306:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009308:	4b1d      	ldr	r3, [pc, #116]	; (8009380 <prvAddNewTaskToReadyList+0xd0>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4b1b      	ldr	r3, [pc, #108]	; (8009384 <prvAddNewTaskToReadyList+0xd4>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d903      	bls.n	8009324 <prvAddNewTaskToReadyList+0x74>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4a18      	ldr	r2, [pc, #96]	; (8009384 <prvAddNewTaskToReadyList+0xd4>)
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4a15      	ldr	r2, [pc, #84]	; (8009388 <prvAddNewTaskToReadyList+0xd8>)
 8009332:	441a      	add	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f7fe fcf7 	bl	8007d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009340:	f001 fd7c 	bl	800ae3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009344:	4b0d      	ldr	r3, [pc, #52]	; (800937c <prvAddNewTaskToReadyList+0xcc>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00e      	beq.n	800936a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800934c:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <prvAddNewTaskToReadyList+0xc8>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009356:	429a      	cmp	r2, r3
 8009358:	d207      	bcs.n	800936a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800935a:	4b0c      	ldr	r3, [pc, #48]	; (800938c <prvAddNewTaskToReadyList+0xdc>)
 800935c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800936a:	bf00      	nop
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000f2c 	.word	0x20000f2c
 8009378:	20000a58 	.word	0x20000a58
 800937c:	20000f38 	.word	0x20000f38
 8009380:	20000f48 	.word	0x20000f48
 8009384:	20000f34 	.word	0x20000f34
 8009388:	20000a5c 	.word	0x20000a5c
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009398:	2300      	movs	r3, #0
 800939a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d017      	beq.n	80093d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093a2:	4b13      	ldr	r3, [pc, #76]	; (80093f0 <vTaskDelay+0x60>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00a      	beq.n	80093c0 <vTaskDelay+0x30>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	60bb      	str	r3, [r7, #8]
}
 80093bc:	bf00      	nop
 80093be:	e7fe      	b.n	80093be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093c0:	f000 fa3a 	bl	8009838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093c4:	2100      	movs	r1, #0
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 f892 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093cc:	f000 fa42 	bl	8009854 <xTaskResumeAll>
 80093d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d107      	bne.n	80093e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80093d8:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <vTaskDelay+0x64>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093e8:	bf00      	nop
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	20000f54 	.word	0x20000f54
 80093f4:	e000ed04 	.word	0xe000ed04

080093f8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8009402:	2300      	movs	r3, #0
 8009404:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b37      	cmp	r3, #55	; 0x37
 800940a:	d90a      	bls.n	8009422 <vTaskPrioritySet+0x2a>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	60fb      	str	r3, [r7, #12]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b37      	cmp	r3, #55	; 0x37
 8009426:	d901      	bls.n	800942c <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009428:	2337      	movs	r3, #55	; 0x37
 800942a:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800942c:	f001 fcd6 	bl	800addc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d102      	bne.n	800943c <vTaskPrioritySet+0x44>
 8009436:	4b3d      	ldr	r3, [pc, #244]	; (800952c <vTaskPrioritySet+0x134>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	e000      	b.n	800943e <vTaskPrioritySet+0x46>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009444:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d068      	beq.n	8009520 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	429a      	cmp	r2, r3
 8009454:	d90d      	bls.n	8009472 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8009456:	4b35      	ldr	r3, [pc, #212]	; (800952c <vTaskPrioritySet+0x134>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	429a      	cmp	r2, r3
 800945e:	d00f      	beq.n	8009480 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8009460:	4b32      	ldr	r3, [pc, #200]	; (800952c <vTaskPrioritySet+0x134>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	429a      	cmp	r2, r3
 800946a:	d309      	bcc.n	8009480 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 800946c:	2301      	movs	r3, #1
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	e006      	b.n	8009480 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8009472:	4b2e      	ldr	r3, [pc, #184]	; (800952c <vTaskPrioritySet+0x134>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	429a      	cmp	r2, r3
 800947a:	d101      	bne.n	8009480 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009484:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	429a      	cmp	r2, r3
 8009490:	d102      	bne.n	8009498 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	db04      	blt.n	80094b0 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6959      	ldr	r1, [r3, #20]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4a1c      	ldr	r2, [pc, #112]	; (8009530 <vTaskPrioritySet+0x138>)
 80094c0:	4413      	add	r3, r2
 80094c2:	4299      	cmp	r1, r3
 80094c4:	d101      	bne.n	80094ca <vTaskPrioritySet+0xd2>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e000      	b.n	80094cc <vTaskPrioritySet+0xd4>
 80094ca:	2300      	movs	r3, #0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d01c      	beq.n	800950a <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe fc85 	bl	8007de4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094de:	4b15      	ldr	r3, [pc, #84]	; (8009534 <vTaskPrioritySet+0x13c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d903      	bls.n	80094ee <vTaskPrioritySet+0xf6>
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ea:	4a12      	ldr	r2, [pc, #72]	; (8009534 <vTaskPrioritySet+0x13c>)
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4a0d      	ldr	r2, [pc, #52]	; (8009530 <vTaskPrioritySet+0x138>)
 80094fc:	441a      	add	r2, r3
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	3304      	adds	r3, #4
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f7fe fc12 	bl	8007d2e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d007      	beq.n	8009520 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8009510:	4b09      	ldr	r3, [pc, #36]	; (8009538 <vTaskPrioritySet+0x140>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8009520:	f001 fc8c 	bl	800ae3c <vPortExitCritical>
	}
 8009524:	bf00      	nop
 8009526:	3720      	adds	r7, #32
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20000a58 	.word	0x20000a58
 8009530:	20000a5c 	.word	0x20000a5c
 8009534:	20000f34 	.word	0x20000f34
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009544:	f001 fc4a 	bl	800addc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <vTaskSuspend+0x18>
 800954e:	4b30      	ldr	r3, [pc, #192]	; (8009610 <vTaskSuspend+0xd4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	e000      	b.n	8009556 <vTaskSuspend+0x1a>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3304      	adds	r3, #4
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fc41 	bl	8007de4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3318      	adds	r3, #24
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fc38 	bl	8007de4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4826      	ldr	r0, [pc, #152]	; (8009614 <vTaskSuspend+0xd8>)
 800957c:	f7fe fbd7 	bl	8007d2e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b01      	cmp	r3, #1
 800958a:	d103      	bne.n	8009594 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009594:	f001 fc52 	bl	800ae3c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009598:	4b1f      	ldr	r3, [pc, #124]	; (8009618 <vTaskSuspend+0xdc>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80095a0:	f001 fc1c 	bl	800addc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80095a4:	f000 fdc6 	bl	800a134 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80095a8:	f001 fc48 	bl	800ae3c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80095ac:	4b18      	ldr	r3, [pc, #96]	; (8009610 <vTaskSuspend+0xd4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d127      	bne.n	8009606 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80095b6:	4b18      	ldr	r3, [pc, #96]	; (8009618 <vTaskSuspend+0xdc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d017      	beq.n	80095ee <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80095be:	4b17      	ldr	r3, [pc, #92]	; (800961c <vTaskSuspend+0xe0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <vTaskSuspend+0xa0>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60bb      	str	r3, [r7, #8]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80095dc:	4b10      	ldr	r3, [pc, #64]	; (8009620 <vTaskSuspend+0xe4>)
 80095de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095ec:	e00b      	b.n	8009606 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <vTaskSuspend+0xd8>)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b0c      	ldr	r3, [pc, #48]	; (8009624 <vTaskSuspend+0xe8>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d103      	bne.n	8009602 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <vTaskSuspend+0xd4>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	601a      	str	r2, [r3, #0]
	}
 8009600:	e001      	b.n	8009606 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009602:	f000 faa3 	bl	8009b4c <vTaskSwitchContext>
	}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000a58 	.word	0x20000a58
 8009614:	20000f18 	.word	0x20000f18
 8009618:	20000f38 	.word	0x20000f38
 800961c:	20000f54 	.word	0x20000f54
 8009620:	e000ed04 	.word	0xe000ed04
 8009624:	20000f2c 	.word	0x20000f2c

08009628 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009630:	2300      	movs	r3, #0
 8009632:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	60fb      	str	r3, [r7, #12]
}
 8009650:	bf00      	nop
 8009652:	e7fe      	b.n	8009652 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	4a0e      	ldr	r2, [pc, #56]	; (8009694 <prvTaskIsTaskSuspended+0x6c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d101      	bne.n	8009662 <prvTaskIsTaskSuspended+0x3a>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <prvTaskIsTaskSuspended+0x3c>
 8009662:	2300      	movs	r3, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00f      	beq.n	8009688 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966c:	4a0a      	ldr	r2, [pc, #40]	; (8009698 <prvTaskIsTaskSuspended+0x70>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00a      	beq.n	8009688 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <prvTaskIsTaskSuspended+0x56>
 800967a:	2301      	movs	r3, #1
 800967c:	e000      	b.n	8009680 <prvTaskIsTaskSuspended+0x58>
 800967e:	2300      	movs	r3, #0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8009684:	2301      	movs	r3, #1
 8009686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009688:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800968a:	4618      	mov	r0, r3
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	bc80      	pop	{r7}
 8009692:	4770      	bx	lr
 8009694:	20000f18 	.word	0x20000f18
 8009698:	20000eec 	.word	0x20000eec

0800969c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <vTaskResume+0x28>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60bb      	str	r3, [r7, #8]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d03a      	beq.n	8009740 <vTaskResume+0xa4>
 80096ca:	4b1f      	ldr	r3, [pc, #124]	; (8009748 <vTaskResume+0xac>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d035      	beq.n	8009740 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80096d4:	f001 fb82 	bl	800addc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff ffa5 	bl	8009628 <prvTaskIsTaskSuspended>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d02b      	beq.n	800973c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3304      	adds	r3, #4
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe fb7b 	bl	8007de4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f2:	4b16      	ldr	r3, [pc, #88]	; (800974c <vTaskResume+0xb0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d903      	bls.n	8009702 <vTaskResume+0x66>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	4a13      	ldr	r2, [pc, #76]	; (800974c <vTaskResume+0xb0>)
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009706:	4613      	mov	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4a10      	ldr	r2, [pc, #64]	; (8009750 <vTaskResume+0xb4>)
 8009710:	441a      	add	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3304      	adds	r3, #4
 8009716:	4619      	mov	r1, r3
 8009718:	4610      	mov	r0, r2
 800971a:	f7fe fb08 	bl	8007d2e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009722:	4b09      	ldr	r3, [pc, #36]	; (8009748 <vTaskResume+0xac>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	429a      	cmp	r2, r3
 800972a:	d307      	bcc.n	800973c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800972c:	4b09      	ldr	r3, [pc, #36]	; (8009754 <vTaskResume+0xb8>)
 800972e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800973c:	f001 fb7e 	bl	800ae3c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20000a58 	.word	0x20000a58
 800974c:	20000f34 	.word	0x20000f34
 8009750:	20000a5c 	.word	0x20000a5c
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08a      	sub	sp, #40	; 0x28
 800975c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800975e:	2300      	movs	r3, #0
 8009760:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009766:	463a      	mov	r2, r7
 8009768:	1d39      	adds	r1, r7, #4
 800976a:	f107 0308 	add.w	r3, r7, #8
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe f818 	bl	80077a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	9202      	str	r2, [sp, #8]
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	2300      	movs	r3, #0
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	2300      	movs	r3, #0
 8009784:	460a      	mov	r2, r1
 8009786:	4924      	ldr	r1, [pc, #144]	; (8009818 <vTaskStartScheduler+0xc0>)
 8009788:	4824      	ldr	r0, [pc, #144]	; (800981c <vTaskStartScheduler+0xc4>)
 800978a:	f7ff fc51 	bl	8009030 <xTaskCreateStatic>
 800978e:	4603      	mov	r3, r0
 8009790:	4a23      	ldr	r2, [pc, #140]	; (8009820 <vTaskStartScheduler+0xc8>)
 8009792:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009794:	4b22      	ldr	r3, [pc, #136]	; (8009820 <vTaskStartScheduler+0xc8>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800979c:	2301      	movs	r3, #1
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e001      	b.n	80097a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d102      	bne.n	80097b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80097ac:	f000 fef4 	bl	800a598 <xTimerCreateTimerTask>
 80097b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d11b      	bne.n	80097f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	613b      	str	r3, [r7, #16]
}
 80097ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097cc:	4b15      	ldr	r3, [pc, #84]	; (8009824 <vTaskStartScheduler+0xcc>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3354      	adds	r3, #84	; 0x54
 80097d2:	4a15      	ldr	r2, [pc, #84]	; (8009828 <vTaskStartScheduler+0xd0>)
 80097d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097d6:	4b15      	ldr	r3, [pc, #84]	; (800982c <vTaskStartScheduler+0xd4>)
 80097d8:	f04f 32ff 	mov.w	r2, #4294967295
 80097dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097de:	4b14      	ldr	r3, [pc, #80]	; (8009830 <vTaskStartScheduler+0xd8>)
 80097e0:	2201      	movs	r2, #1
 80097e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80097e4:	4b13      	ldr	r3, [pc, #76]	; (8009834 <vTaskStartScheduler+0xdc>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097ea:	f001 fa85 	bl	800acf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097ee:	e00e      	b.n	800980e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d10a      	bne.n	800980e <vTaskStartScheduler+0xb6>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	60fb      	str	r3, [r7, #12]
}
 800980a:	bf00      	nop
 800980c:	e7fe      	b.n	800980c <vTaskStartScheduler+0xb4>
}
 800980e:	bf00      	nop
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	0800dfb4 	.word	0x0800dfb4
 800981c:	08009fc1 	.word	0x08009fc1
 8009820:	20000f50 	.word	0x20000f50
 8009824:	20000a58 	.word	0x20000a58
 8009828:	200000ac 	.word	0x200000ac
 800982c:	20000f4c 	.word	0x20000f4c
 8009830:	20000f38 	.word	0x20000f38
 8009834:	20000f30 	.word	0x20000f30

08009838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <vTaskSuspendAll+0x18>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	4a03      	ldr	r2, [pc, #12]	; (8009850 <vTaskSuspendAll+0x18>)
 8009844:	6013      	str	r3, [r2, #0]
}
 8009846:	bf00      	nop
 8009848:	46bd      	mov	sp, r7
 800984a:	bc80      	pop	{r7}
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	20000f54 	.word	0x20000f54

08009854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800985e:	2300      	movs	r3, #0
 8009860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009862:	4b42      	ldr	r3, [pc, #264]	; (800996c <xTaskResumeAll+0x118>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10a      	bne.n	8009880 <xTaskResumeAll+0x2c>
	__asm volatile
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	603b      	str	r3, [r7, #0]
}
 800987c:	bf00      	nop
 800987e:	e7fe      	b.n	800987e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009880:	f001 faac 	bl	800addc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009884:	4b39      	ldr	r3, [pc, #228]	; (800996c <xTaskResumeAll+0x118>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3b01      	subs	r3, #1
 800988a:	4a38      	ldr	r2, [pc, #224]	; (800996c <xTaskResumeAll+0x118>)
 800988c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800988e:	4b37      	ldr	r3, [pc, #220]	; (800996c <xTaskResumeAll+0x118>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d162      	bne.n	800995c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009896:	4b36      	ldr	r3, [pc, #216]	; (8009970 <xTaskResumeAll+0x11c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d05e      	beq.n	800995c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800989e:	e02f      	b.n	8009900 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80098a0:	4b34      	ldr	r3, [pc, #208]	; (8009974 <xTaskResumeAll+0x120>)
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3318      	adds	r3, #24
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fa99 	bl	8007de4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fe fa94 	bl	8007de4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c0:	4b2d      	ldr	r3, [pc, #180]	; (8009978 <xTaskResumeAll+0x124>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d903      	bls.n	80098d0 <xTaskResumeAll+0x7c>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098cc:	4a2a      	ldr	r2, [pc, #168]	; (8009978 <xTaskResumeAll+0x124>)
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4a27      	ldr	r2, [pc, #156]	; (800997c <xTaskResumeAll+0x128>)
 80098de:	441a      	add	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f7fe fa21 	bl	8007d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f0:	4b23      	ldr	r3, [pc, #140]	; (8009980 <xTaskResumeAll+0x12c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d302      	bcc.n	8009900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80098fa:	4b22      	ldr	r3, [pc, #136]	; (8009984 <xTaskResumeAll+0x130>)
 80098fc:	2201      	movs	r2, #1
 80098fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009900:	4b1c      	ldr	r3, [pc, #112]	; (8009974 <xTaskResumeAll+0x120>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1cb      	bne.n	80098a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800990e:	f000 fc11 	bl	800a134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009912:	4b1d      	ldr	r3, [pc, #116]	; (8009988 <xTaskResumeAll+0x134>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d010      	beq.n	8009940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800991e:	f000 f857 	bl	80099d0 <xTaskIncrementTick>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009928:	4b16      	ldr	r3, [pc, #88]	; (8009984 <xTaskResumeAll+0x130>)
 800992a:	2201      	movs	r2, #1
 800992c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3b01      	subs	r3, #1
 8009932:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1f1      	bne.n	800991e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <xTaskResumeAll+0x134>)
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009940:	4b10      	ldr	r3, [pc, #64]	; (8009984 <xTaskResumeAll+0x130>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d009      	beq.n	800995c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009948:	2301      	movs	r3, #1
 800994a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800994c:	4b0f      	ldr	r3, [pc, #60]	; (800998c <xTaskResumeAll+0x138>)
 800994e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800995c:	f001 fa6e 	bl	800ae3c <vPortExitCritical>

	return xAlreadyYielded;
 8009960:	68bb      	ldr	r3, [r7, #8]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20000f54 	.word	0x20000f54
 8009970:	20000f2c 	.word	0x20000f2c
 8009974:	20000eec 	.word	0x20000eec
 8009978:	20000f34 	.word	0x20000f34
 800997c:	20000a5c 	.word	0x20000a5c
 8009980:	20000a58 	.word	0x20000a58
 8009984:	20000f40 	.word	0x20000f40
 8009988:	20000f3c 	.word	0x20000f3c
 800998c:	e000ed04 	.word	0xe000ed04

08009990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009996:	4b04      	ldr	r3, [pc, #16]	; (80099a8 <xTaskGetTickCount+0x18>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800999c:	687b      	ldr	r3, [r7, #4]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bc80      	pop	{r7}
 80099a6:	4770      	bx	lr
 80099a8:	20000f30 	.word	0x20000f30

080099ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099b2:	f001 fad5 	bl	800af60 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80099ba:	4b04      	ldr	r3, [pc, #16]	; (80099cc <xTaskGetTickCountFromISR+0x20>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099c0:	683b      	ldr	r3, [r7, #0]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20000f30 	.word	0x20000f30

080099d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099da:	4b51      	ldr	r3, [pc, #324]	; (8009b20 <xTaskIncrementTick+0x150>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f040 808e 	bne.w	8009b00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099e4:	4b4f      	ldr	r3, [pc, #316]	; (8009b24 <xTaskIncrementTick+0x154>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3301      	adds	r3, #1
 80099ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099ec:	4a4d      	ldr	r2, [pc, #308]	; (8009b24 <xTaskIncrementTick+0x154>)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d120      	bne.n	8009a3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80099f8:	4b4b      	ldr	r3, [pc, #300]	; (8009b28 <xTaskIncrementTick+0x158>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <xTaskIncrementTick+0x48>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	603b      	str	r3, [r7, #0]
}
 8009a14:	bf00      	nop
 8009a16:	e7fe      	b.n	8009a16 <xTaskIncrementTick+0x46>
 8009a18:	4b43      	ldr	r3, [pc, #268]	; (8009b28 <xTaskIncrementTick+0x158>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	4b43      	ldr	r3, [pc, #268]	; (8009b2c <xTaskIncrementTick+0x15c>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a41      	ldr	r2, [pc, #260]	; (8009b28 <xTaskIncrementTick+0x158>)
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	4a41      	ldr	r2, [pc, #260]	; (8009b2c <xTaskIncrementTick+0x15c>)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	4b40      	ldr	r3, [pc, #256]	; (8009b30 <xTaskIncrementTick+0x160>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3301      	adds	r3, #1
 8009a32:	4a3f      	ldr	r2, [pc, #252]	; (8009b30 <xTaskIncrementTick+0x160>)
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	f000 fb7d 	bl	800a134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a3a:	4b3e      	ldr	r3, [pc, #248]	; (8009b34 <xTaskIncrementTick+0x164>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d34e      	bcc.n	8009ae2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a44:	4b38      	ldr	r3, [pc, #224]	; (8009b28 <xTaskIncrementTick+0x158>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <xTaskIncrementTick+0x82>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e000      	b.n	8009a54 <xTaskIncrementTick+0x84>
 8009a52:	2300      	movs	r3, #0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d004      	beq.n	8009a62 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a58:	4b36      	ldr	r3, [pc, #216]	; (8009b34 <xTaskIncrementTick+0x164>)
 8009a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5e:	601a      	str	r2, [r3, #0]
					break;
 8009a60:	e03f      	b.n	8009ae2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a62:	4b31      	ldr	r3, [pc, #196]	; (8009b28 <xTaskIncrementTick+0x158>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d203      	bcs.n	8009a82 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a7a:	4a2e      	ldr	r2, [pc, #184]	; (8009b34 <xTaskIncrementTick+0x164>)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6013      	str	r3, [r2, #0]
						break;
 8009a80:	e02f      	b.n	8009ae2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	3304      	adds	r3, #4
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe f9ac 	bl	8007de4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d004      	beq.n	8009a9e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	3318      	adds	r3, #24
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe f9a3 	bl	8007de4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa2:	4b25      	ldr	r3, [pc, #148]	; (8009b38 <xTaskIncrementTick+0x168>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d903      	bls.n	8009ab2 <xTaskIncrementTick+0xe2>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aae:	4a22      	ldr	r2, [pc, #136]	; (8009b38 <xTaskIncrementTick+0x168>)
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4a1f      	ldr	r2, [pc, #124]	; (8009b3c <xTaskIncrementTick+0x16c>)
 8009ac0:	441a      	add	r2, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7fe f930 	bl	8007d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad2:	4b1b      	ldr	r3, [pc, #108]	; (8009b40 <xTaskIncrementTick+0x170>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d3b3      	bcc.n	8009a44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009adc:	2301      	movs	r3, #1
 8009ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ae0:	e7b0      	b.n	8009a44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ae2:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <xTaskIncrementTick+0x170>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae8:	4914      	ldr	r1, [pc, #80]	; (8009b3c <xTaskIncrementTick+0x16c>)
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	440b      	add	r3, r1
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d907      	bls.n	8009b0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009afa:	2301      	movs	r3, #1
 8009afc:	617b      	str	r3, [r7, #20]
 8009afe:	e004      	b.n	8009b0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b00:	4b10      	ldr	r3, [pc, #64]	; (8009b44 <xTaskIncrementTick+0x174>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3301      	adds	r3, #1
 8009b06:	4a0f      	ldr	r2, [pc, #60]	; (8009b44 <xTaskIncrementTick+0x174>)
 8009b08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <xTaskIncrementTick+0x178>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009b12:	2301      	movs	r3, #1
 8009b14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b16:	697b      	ldr	r3, [r7, #20]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20000f54 	.word	0x20000f54
 8009b24:	20000f30 	.word	0x20000f30
 8009b28:	20000ee4 	.word	0x20000ee4
 8009b2c:	20000ee8 	.word	0x20000ee8
 8009b30:	20000f44 	.word	0x20000f44
 8009b34:	20000f4c 	.word	0x20000f4c
 8009b38:	20000f34 	.word	0x20000f34
 8009b3c:	20000a5c 	.word	0x20000a5c
 8009b40:	20000a58 	.word	0x20000a58
 8009b44:	20000f3c 	.word	0x20000f3c
 8009b48:	20000f40 	.word	0x20000f40

08009b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b52:	4b2a      	ldr	r3, [pc, #168]	; (8009bfc <vTaskSwitchContext+0xb0>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b5a:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <vTaskSwitchContext+0xb4>)
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b60:	e046      	b.n	8009bf0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009b62:	4b27      	ldr	r3, [pc, #156]	; (8009c00 <vTaskSwitchContext+0xb4>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009b68:	4b26      	ldr	r3, [pc, #152]	; (8009c04 <vTaskSwitchContext+0xb8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	e010      	b.n	8009b92 <vTaskSwitchContext+0x46>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10a      	bne.n	8009b8c <vTaskSwitchContext+0x40>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	607b      	str	r3, [r7, #4]
}
 8009b88:	bf00      	nop
 8009b8a:	e7fe      	b.n	8009b8a <vTaskSwitchContext+0x3e>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	491d      	ldr	r1, [pc, #116]	; (8009c08 <vTaskSwitchContext+0xbc>)
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0e4      	beq.n	8009b70 <vTaskSwitchContext+0x24>
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4a15      	ldr	r2, [pc, #84]	; (8009c08 <vTaskSwitchContext+0xbc>)
 8009bb2:	4413      	add	r3, r2
 8009bb4:	60bb      	str	r3, [r7, #8]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	605a      	str	r2, [r3, #4]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d104      	bne.n	8009bd6 <vTaskSwitchContext+0x8a>
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	605a      	str	r2, [r3, #4]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	4a0b      	ldr	r2, [pc, #44]	; (8009c0c <vTaskSwitchContext+0xc0>)
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	4a08      	ldr	r2, [pc, #32]	; (8009c04 <vTaskSwitchContext+0xb8>)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <vTaskSwitchContext+0xc0>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3354      	adds	r3, #84	; 0x54
 8009bec:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <vTaskSwitchContext+0xc4>)
 8009bee:	6013      	str	r3, [r2, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bc80      	pop	{r7}
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	20000f54 	.word	0x20000f54
 8009c00:	20000f40 	.word	0x20000f40
 8009c04:	20000f34 	.word	0x20000f34
 8009c08:	20000a5c 	.word	0x20000a5c
 8009c0c:	20000a58 	.word	0x20000a58
 8009c10:	200000ac 	.word	0x200000ac

08009c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10a      	bne.n	8009c3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60fb      	str	r3, [r7, #12]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c3a:	4b07      	ldr	r3, [pc, #28]	; (8009c58 <vTaskPlaceOnEventList+0x44>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3318      	adds	r3, #24
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7fe f896 	bl	8007d74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c48:	2101      	movs	r1, #1
 8009c4a:	6838      	ldr	r0, [r7, #0]
 8009c4c:	f000 fc50 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
}
 8009c50:	bf00      	nop
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20000a58 	.word	0x20000a58

08009c5c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	617b      	str	r3, [r7, #20]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009c84:	4b11      	ldr	r3, [pc, #68]	; (8009ccc <vTaskPlaceOnUnorderedEventList+0x70>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10a      	bne.n	8009ca2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	613b      	str	r3, [r7, #16]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009ca2:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009cac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cae:	4b08      	ldr	r3, [pc, #32]	; (8009cd0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3318      	adds	r3, #24
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f7fe f839 	bl	8007d2e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fc16 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
}
 8009cc4:	bf00      	nop
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20000f54 	.word	0x20000f54
 8009cd0:	20000a58 	.word	0x20000a58

08009cd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10a      	bne.n	8009cfc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	617b      	str	r3, [r7, #20]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <vTaskPlaceOnEventListRestricted+0x54>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3318      	adds	r3, #24
 8009d02:	4619      	mov	r1, r3
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7fe f812 	bl	8007d2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009d10:	f04f 33ff 	mov.w	r3, #4294967295
 8009d14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	68b8      	ldr	r0, [r7, #8]
 8009d1a:	f000 fbe9 	bl	800a4f0 <prvAddCurrentTaskToDelayedList>
	}
 8009d1e:	bf00      	nop
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000a58 	.word	0x20000a58

08009d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10a      	bne.n	8009d58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	60fb      	str	r3, [r7, #12]
}
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	3318      	adds	r3, #24
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fe f841 	bl	8007de4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d62:	4b1e      	ldr	r3, [pc, #120]	; (8009ddc <xTaskRemoveFromEventList+0xb0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d11d      	bne.n	8009da6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe f838 	bl	8007de4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d78:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <xTaskRemoveFromEventList+0xb4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d903      	bls.n	8009d88 <xTaskRemoveFromEventList+0x5c>
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	4a16      	ldr	r2, [pc, #88]	; (8009de0 <xTaskRemoveFromEventList+0xb4>)
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4a13      	ldr	r2, [pc, #76]	; (8009de4 <xTaskRemoveFromEventList+0xb8>)
 8009d96:	441a      	add	r2, r3
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7fd ffc5 	bl	8007d2e <vListInsertEnd>
 8009da4:	e005      	b.n	8009db2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	3318      	adds	r3, #24
 8009daa:	4619      	mov	r1, r3
 8009dac:	480e      	ldr	r0, [pc, #56]	; (8009de8 <xTaskRemoveFromEventList+0xbc>)
 8009dae:	f7fd ffbe 	bl	8007d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db6:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <xTaskRemoveFromEventList+0xc0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d905      	bls.n	8009dcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009dc4:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <xTaskRemoveFromEventList+0xc4>)
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	e001      	b.n	8009dd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009dd0:	697b      	ldr	r3, [r7, #20]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000f54 	.word	0x20000f54
 8009de0:	20000f34 	.word	0x20000f34
 8009de4:	20000a5c 	.word	0x20000a5c
 8009de8:	20000eec 	.word	0x20000eec
 8009dec:	20000a58 	.word	0x20000a58
 8009df0:	20000f40 	.word	0x20000f40

08009df4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009dfe:	4b29      	ldr	r3, [pc, #164]	; (8009ea4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	613b      	str	r3, [r7, #16]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60fb      	str	r3, [r7, #12]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7fd ffcb 	bl	8007de4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	3304      	adds	r3, #4
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fd ffc6 	bl	8007de4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5c:	4b12      	ldr	r3, [pc, #72]	; (8009ea8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d903      	bls.n	8009e6c <vTaskRemoveFromUnorderedEventList+0x78>
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a0f      	ldr	r2, [pc, #60]	; (8009ea8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4a0c      	ldr	r2, [pc, #48]	; (8009eac <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009e7a:	441a      	add	r2, r3
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	4619      	mov	r1, r3
 8009e82:	4610      	mov	r0, r2
 8009e84:	f7fd ff53 	bl	8007d2e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8c:	4b08      	ldr	r3, [pc, #32]	; (8009eb0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d902      	bls.n	8009e9c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009e96:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009e98:	2201      	movs	r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]
	}
}
 8009e9c:	bf00      	nop
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20000f54 	.word	0x20000f54
 8009ea8:	20000f34 	.word	0x20000f34
 8009eac:	20000a5c 	.word	0x20000a5c
 8009eb0:	20000a58 	.word	0x20000a58
 8009eb4:	20000f40 	.word	0x20000f40

08009eb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ec0:	4b06      	ldr	r3, [pc, #24]	; (8009edc <vTaskInternalSetTimeOutState+0x24>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ec8:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <vTaskInternalSetTimeOutState+0x28>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	605a      	str	r2, [r3, #4]
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000f44 	.word	0x20000f44
 8009ee0:	20000f30 	.word	0x20000f30

08009ee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	613b      	str	r3, [r7, #16]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009f26:	f000 ff59 	bl	800addc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f2a:	4b1d      	ldr	r3, [pc, #116]	; (8009fa0 <xTaskCheckForTimeOut+0xbc>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	69ba      	ldr	r2, [r7, #24]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f42:	d102      	bne.n	8009f4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	61fb      	str	r3, [r7, #28]
 8009f48:	e023      	b.n	8009f92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	4b15      	ldr	r3, [pc, #84]	; (8009fa4 <xTaskCheckForTimeOut+0xc0>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d007      	beq.n	8009f66 <xTaskCheckForTimeOut+0x82>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d302      	bcc.n	8009f66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f60:	2301      	movs	r3, #1
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e015      	b.n	8009f92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d20b      	bcs.n	8009f88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff ff9b 	bl	8009eb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	61fb      	str	r3, [r7, #28]
 8009f86:	e004      	b.n	8009f92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f92:	f000 ff53 	bl	800ae3c <vPortExitCritical>

	return xReturn;
 8009f96:	69fb      	ldr	r3, [r7, #28]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3720      	adds	r7, #32
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000f30 	.word	0x20000f30
 8009fa4:	20000f44 	.word	0x20000f44

08009fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fac:	4b03      	ldr	r3, [pc, #12]	; (8009fbc <vTaskMissedYield+0x14>)
 8009fae:	2201      	movs	r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]
}
 8009fb2:	bf00      	nop
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bc80      	pop	{r7}
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	20000f40 	.word	0x20000f40

08009fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fc8:	f000 f852 	bl	800a070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fcc:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <prvIdleTask+0x28>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d9f9      	bls.n	8009fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <prvIdleTask+0x2c>)
 8009fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fe4:	e7f0      	b.n	8009fc8 <prvIdleTask+0x8>
 8009fe6:	bf00      	nop
 8009fe8:	20000a5c 	.word	0x20000a5c
 8009fec:	e000ed04 	.word	0xe000ed04

08009ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	607b      	str	r3, [r7, #4]
 8009ffa:	e00c      	b.n	800a016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4a12      	ldr	r2, [pc, #72]	; (800a050 <prvInitialiseTaskLists+0x60>)
 800a008:	4413      	add	r3, r2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fd fe64 	bl	8007cd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3301      	adds	r3, #1
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b37      	cmp	r3, #55	; 0x37
 800a01a:	d9ef      	bls.n	8009ffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a01c:	480d      	ldr	r0, [pc, #52]	; (800a054 <prvInitialiseTaskLists+0x64>)
 800a01e:	f7fd fe5b 	bl	8007cd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a022:	480d      	ldr	r0, [pc, #52]	; (800a058 <prvInitialiseTaskLists+0x68>)
 800a024:	f7fd fe58 	bl	8007cd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a028:	480c      	ldr	r0, [pc, #48]	; (800a05c <prvInitialiseTaskLists+0x6c>)
 800a02a:	f7fd fe55 	bl	8007cd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a02e:	480c      	ldr	r0, [pc, #48]	; (800a060 <prvInitialiseTaskLists+0x70>)
 800a030:	f7fd fe52 	bl	8007cd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a034:	480b      	ldr	r0, [pc, #44]	; (800a064 <prvInitialiseTaskLists+0x74>)
 800a036:	f7fd fe4f 	bl	8007cd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a03a:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <prvInitialiseTaskLists+0x78>)
 800a03c:	4a05      	ldr	r2, [pc, #20]	; (800a054 <prvInitialiseTaskLists+0x64>)
 800a03e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a040:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <prvInitialiseTaskLists+0x7c>)
 800a042:	4a05      	ldr	r2, [pc, #20]	; (800a058 <prvInitialiseTaskLists+0x68>)
 800a044:	601a      	str	r2, [r3, #0]
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000a5c 	.word	0x20000a5c
 800a054:	20000ebc 	.word	0x20000ebc
 800a058:	20000ed0 	.word	0x20000ed0
 800a05c:	20000eec 	.word	0x20000eec
 800a060:	20000f00 	.word	0x20000f00
 800a064:	20000f18 	.word	0x20000f18
 800a068:	20000ee4 	.word	0x20000ee4
 800a06c:	20000ee8 	.word	0x20000ee8

0800a070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a076:	e019      	b.n	800a0ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a078:	f000 feb0 	bl	800addc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <prvCheckTasksWaitingTermination+0x50>)
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3304      	adds	r3, #4
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fd feab 	bl	8007de4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a08e:	4b0d      	ldr	r3, [pc, #52]	; (800a0c4 <prvCheckTasksWaitingTermination+0x54>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3b01      	subs	r3, #1
 800a094:	4a0b      	ldr	r2, [pc, #44]	; (800a0c4 <prvCheckTasksWaitingTermination+0x54>)
 800a096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a098:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <prvCheckTasksWaitingTermination+0x58>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	4a0a      	ldr	r2, [pc, #40]	; (800a0c8 <prvCheckTasksWaitingTermination+0x58>)
 800a0a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0a2:	f000 fecb 	bl	800ae3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f810 	bl	800a0cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0ac:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <prvCheckTasksWaitingTermination+0x58>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e1      	bne.n	800a078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000f00 	.word	0x20000f00
 800a0c4:	20000f2c 	.word	0x20000f2c
 800a0c8:	20000f14 	.word	0x20000f14

0800a0cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3354      	adds	r3, #84	; 0x54
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f002 fea1 	bl	800ce20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d108      	bne.n	800a0fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f001 f839 	bl	800b164 <vPortFree>
				vPortFree( pxTCB );
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f001 f836 	bl	800b164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0f8:	e018      	b.n	800a12c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a100:	2b01      	cmp	r3, #1
 800a102:	d103      	bne.n	800a10c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f82d 	bl	800b164 <vPortFree>
	}
 800a10a:	e00f      	b.n	800a12c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a112:	2b02      	cmp	r3, #2
 800a114:	d00a      	beq.n	800a12c <prvDeleteTCB+0x60>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	60fb      	str	r3, [r7, #12]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <prvDeleteTCB+0x5e>
	}
 800a12c:	bf00      	nop
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a13a:	4b0e      	ldr	r3, [pc, #56]	; (800a174 <prvResetNextTaskUnblockTime+0x40>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <prvResetNextTaskUnblockTime+0x14>
 800a144:	2301      	movs	r3, #1
 800a146:	e000      	b.n	800a14a <prvResetNextTaskUnblockTime+0x16>
 800a148:	2300      	movs	r3, #0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d004      	beq.n	800a158 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a14e:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <prvResetNextTaskUnblockTime+0x44>)
 800a150:	f04f 32ff 	mov.w	r2, #4294967295
 800a154:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a156:	e008      	b.n	800a16a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <prvResetNextTaskUnblockTime+0x40>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	4a04      	ldr	r2, [pc, #16]	; (800a178 <prvResetNextTaskUnblockTime+0x44>)
 800a168:	6013      	str	r3, [r2, #0]
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	bc80      	pop	{r7}
 800a172:	4770      	bx	lr
 800a174:	20000ee4 	.word	0x20000ee4
 800a178:	20000f4c 	.word	0x20000f4c

0800a17c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a182:	4b04      	ldr	r3, [pc, #16]	; (800a194 <xTaskGetCurrentTaskHandle+0x18>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a188:	687b      	ldr	r3, [r7, #4]
	}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	bc80      	pop	{r7}
 800a192:	4770      	bx	lr
 800a194:	20000a58 	.word	0x20000a58

0800a198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a19e:	4b0b      	ldr	r3, [pc, #44]	; (800a1cc <xTaskGetSchedulerState+0x34>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	607b      	str	r3, [r7, #4]
 800a1aa:	e008      	b.n	800a1be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ac:	4b08      	ldr	r3, [pc, #32]	; (800a1d0 <xTaskGetSchedulerState+0x38>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	607b      	str	r3, [r7, #4]
 800a1b8:	e001      	b.n	800a1be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1be:	687b      	ldr	r3, [r7, #4]
	}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20000f38 	.word	0x20000f38
 800a1d0:	20000f54 	.word	0x20000f54

0800a1d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d056      	beq.n	800a298 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ee:	4b2d      	ldr	r3, [pc, #180]	; (800a2a4 <xTaskPriorityInherit+0xd0>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d246      	bcs.n	800a286 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	db06      	blt.n	800a20e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a200:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <xTaskPriorityInherit+0xd0>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6959      	ldr	r1, [r3, #20]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4a22      	ldr	r2, [pc, #136]	; (800a2a8 <xTaskPriorityInherit+0xd4>)
 800a220:	4413      	add	r3, r2
 800a222:	4299      	cmp	r1, r3
 800a224:	d101      	bne.n	800a22a <xTaskPriorityInherit+0x56>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <xTaskPriorityInherit+0x58>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d022      	beq.n	800a276 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	3304      	adds	r3, #4
 800a234:	4618      	mov	r0, r3
 800a236:	f7fd fdd5 	bl	8007de4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a23a:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <xTaskPriorityInherit+0xd0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a248:	4b18      	ldr	r3, [pc, #96]	; (800a2ac <xTaskPriorityInherit+0xd8>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d903      	bls.n	800a258 <xTaskPriorityInherit+0x84>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a254:	4a15      	ldr	r2, [pc, #84]	; (800a2ac <xTaskPriorityInherit+0xd8>)
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a25c:	4613      	mov	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4a10      	ldr	r2, [pc, #64]	; (800a2a8 <xTaskPriorityInherit+0xd4>)
 800a266:	441a      	add	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	3304      	adds	r3, #4
 800a26c:	4619      	mov	r1, r3
 800a26e:	4610      	mov	r0, r2
 800a270:	f7fd fd5d 	bl	8007d2e <vListInsertEnd>
 800a274:	e004      	b.n	800a280 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a276:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <xTaskPriorityInherit+0xd0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	e008      	b.n	800a298 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a28a:	4b06      	ldr	r3, [pc, #24]	; (800a2a4 <xTaskPriorityInherit+0xd0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	429a      	cmp	r2, r3
 800a292:	d201      	bcs.n	800a298 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a294:	2301      	movs	r3, #1
 800a296:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a298:	68fb      	ldr	r3, [r7, #12]
	}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000a58 	.word	0x20000a58
 800a2a8:	20000a5c 	.word	0x20000a5c
 800a2ac:	20000f34 	.word	0x20000f34

0800a2b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d056      	beq.n	800a374 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2c6:	4b2e      	ldr	r3, [pc, #184]	; (800a380 <xTaskPriorityDisinherit+0xd0>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d00a      	beq.n	800a2e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	60fb      	str	r3, [r7, #12]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10a      	bne.n	800a304 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	60bb      	str	r3, [r7, #8]
}
 800a300:	bf00      	nop
 800a302:	e7fe      	b.n	800a302 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a308:	1e5a      	subs	r2, r3, #1
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a316:	429a      	cmp	r2, r3
 800a318:	d02c      	beq.n	800a374 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d128      	bne.n	800a374 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	3304      	adds	r3, #4
 800a326:	4618      	mov	r0, r3
 800a328:	f7fd fd5c 	bl	8007de4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <xTaskPriorityDisinherit+0xd4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d903      	bls.n	800a354 <xTaskPriorityDisinherit+0xa4>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	4a0c      	ldr	r2, [pc, #48]	; (800a384 <xTaskPriorityDisinherit+0xd4>)
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a358:	4613      	mov	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4a09      	ldr	r2, [pc, #36]	; (800a388 <xTaskPriorityDisinherit+0xd8>)
 800a362:	441a      	add	r2, r3
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4610      	mov	r0, r2
 800a36c:	f7fd fcdf 	bl	8007d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a374:	697b      	ldr	r3, [r7, #20]
	}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20000a58 	.word	0x20000a58
 800a384:	20000f34 	.word	0x20000f34
 800a388:	20000a5c 	.word	0x20000a5c

0800a38c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b088      	sub	sp, #32
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a39a:	2301      	movs	r3, #1
 800a39c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d06f      	beq.n	800a484 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10a      	bne.n	800a3c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	60fb      	str	r3, [r7, #12]
}
 800a3be:	bf00      	nop
 800a3c0:	e7fe      	b.n	800a3c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d902      	bls.n	800a3d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	e002      	b.n	800a3d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	69fa      	ldr	r2, [r7, #28]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d050      	beq.n	800a484 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d14b      	bne.n	800a484 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a3ec:	4b27      	ldr	r3, [pc, #156]	; (800a48c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d10a      	bne.n	800a40c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	60bb      	str	r3, [r7, #8]
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a418:	69bb      	ldr	r3, [r7, #24]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	db04      	blt.n	800a42a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	6959      	ldr	r1, [r3, #20]
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4613      	mov	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	4413      	add	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4a15      	ldr	r2, [pc, #84]	; (800a490 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a43a:	4413      	add	r3, r2
 800a43c:	4299      	cmp	r1, r3
 800a43e:	d101      	bne.n	800a444 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800a440:	2301      	movs	r3, #1
 800a442:	e000      	b.n	800a446 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800a444:	2300      	movs	r3, #0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d01c      	beq.n	800a484 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	3304      	adds	r3, #4
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fd fcc8 	bl	8007de4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a458:	4b0e      	ldr	r3, [pc, #56]	; (800a494 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d903      	bls.n	800a468 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a464:	4a0b      	ldr	r2, [pc, #44]	; (800a494 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46c:	4613      	mov	r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4a06      	ldr	r2, [pc, #24]	; (800a490 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a476:	441a      	add	r2, r3
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	3304      	adds	r3, #4
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7fd fc55 	bl	8007d2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a484:	bf00      	nop
 800a486:	3720      	adds	r7, #32
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20000a58 	.word	0x20000a58
 800a490:	20000a5c 	.word	0x20000a5c
 800a494:	20000f34 	.word	0x20000f34

0800a498 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a49e:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <uxTaskResetEventItemValue+0x2c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <uxTaskResetEventItemValue+0x2c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <uxTaskResetEventItemValue+0x2c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800a4b4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a4b6:	687b      	ldr	r3, [r7, #4]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bc80      	pop	{r7}
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	20000a58 	.word	0x20000a58

0800a4c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4cc:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d004      	beq.n	800a4de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4da:	3201      	adds	r2, #1
 800a4dc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a4de:	4b03      	ldr	r3, [pc, #12]	; (800a4ec <pvTaskIncrementMutexHeldCount+0x24>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
	}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bc80      	pop	{r7}
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	20000a58 	.word	0x20000a58

0800a4f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4fa:	4b21      	ldr	r3, [pc, #132]	; (800a580 <prvAddCurrentTaskToDelayedList+0x90>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a500:	4b20      	ldr	r3, [pc, #128]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3304      	adds	r3, #4
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd fc6c 	bl	8007de4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a512:	d10a      	bne.n	800a52a <prvAddCurrentTaskToDelayedList+0x3a>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d007      	beq.n	800a52a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a51a:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4819      	ldr	r0, [pc, #100]	; (800a588 <prvAddCurrentTaskToDelayedList+0x98>)
 800a524:	f7fd fc03 	bl	8007d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a528:	e026      	b.n	800a578 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4413      	add	r3, r2
 800a530:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a532:	4b14      	ldr	r3, [pc, #80]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d209      	bcs.n	800a556 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4619      	mov	r1, r3
 800a54e:	4610      	mov	r0, r2
 800a550:	f7fd fc10 	bl	8007d74 <vListInsert>
}
 800a554:	e010      	b.n	800a578 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a556:	4b0e      	ldr	r3, [pc, #56]	; (800a590 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <prvAddCurrentTaskToDelayedList+0x94>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3304      	adds	r3, #4
 800a560:	4619      	mov	r1, r3
 800a562:	4610      	mov	r0, r2
 800a564:	f7fd fc06 	bl	8007d74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d202      	bcs.n	800a578 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a572:	4a08      	ldr	r2, [pc, #32]	; (800a594 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	6013      	str	r3, [r2, #0]
}
 800a578:	bf00      	nop
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000f30 	.word	0x20000f30
 800a584:	20000a58 	.word	0x20000a58
 800a588:	20000f18 	.word	0x20000f18
 800a58c:	20000ee8 	.word	0x20000ee8
 800a590:	20000ee4 	.word	0x20000ee4
 800a594:	20000f4c 	.word	0x20000f4c

0800a598 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08a      	sub	sp, #40	; 0x28
 800a59c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5a2:	f000 facb 	bl	800ab3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5a6:	4b1c      	ldr	r3, [pc, #112]	; (800a618 <xTimerCreateTimerTask+0x80>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d021      	beq.n	800a5f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5b6:	1d3a      	adds	r2, r7, #4
 800a5b8:	f107 0108 	add.w	r1, r7, #8
 800a5bc:	f107 030c 	add.w	r3, r7, #12
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fd f907 	bl	80077d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	9202      	str	r2, [sp, #8]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	460a      	mov	r2, r1
 800a5d8:	4910      	ldr	r1, [pc, #64]	; (800a61c <xTimerCreateTimerTask+0x84>)
 800a5da:	4811      	ldr	r0, [pc, #68]	; (800a620 <xTimerCreateTimerTask+0x88>)
 800a5dc:	f7fe fd28 	bl	8009030 <xTaskCreateStatic>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	4a10      	ldr	r2, [pc, #64]	; (800a624 <xTimerCreateTimerTask+0x8c>)
 800a5e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5e6:	4b0f      	ldr	r3, [pc, #60]	; (800a624 <xTimerCreateTimerTask+0x8c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	613b      	str	r3, [r7, #16]
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a60e:	697b      	ldr	r3, [r7, #20]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000f88 	.word	0x20000f88
 800a61c:	0800dfbc 	.word	0x0800dfbc
 800a620:	0800a745 	.word	0x0800a745
 800a624:	20000f8c 	.word	0x20000f8c

0800a628 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08a      	sub	sp, #40	; 0x28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a636:	2300      	movs	r3, #0
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	623b      	str	r3, [r7, #32]
}
 800a652:	bf00      	nop
 800a654:	e7fe      	b.n	800a654 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a656:	4b1a      	ldr	r3, [pc, #104]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d02a      	beq.n	800a6b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b05      	cmp	r3, #5
 800a66e:	dc18      	bgt.n	800a6a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a670:	f7ff fd92 	bl	800a198 <xTaskGetSchedulerState>
 800a674:	4603      	mov	r3, r0
 800a676:	2b02      	cmp	r3, #2
 800a678:	d109      	bne.n	800a68e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	f107 0110 	add.w	r1, r7, #16
 800a682:	2300      	movs	r3, #0
 800a684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a686:	f7fd fe39 	bl	80082fc <xQueueGenericSend>
 800a68a:	6278      	str	r0, [r7, #36]	; 0x24
 800a68c:	e012      	b.n	800a6b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a68e:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a690:	6818      	ldr	r0, [r3, #0]
 800a692:	f107 0110 	add.w	r1, r7, #16
 800a696:	2300      	movs	r3, #0
 800a698:	2200      	movs	r2, #0
 800a69a:	f7fd fe2f 	bl	80082fc <xQueueGenericSend>
 800a69e:	6278      	str	r0, [r7, #36]	; 0x24
 800a6a0:	e008      	b.n	800a6b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <xTimerGenericCommand+0x98>)
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	f107 0110 	add.w	r1, r7, #16
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	f7fd ff23 	bl	80084f8 <xQueueGenericSendFromISR>
 800a6b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3728      	adds	r7, #40	; 0x28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20000f88 	.word	0x20000f88

0800a6c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6ce:	4b1c      	ldr	r3, [pc, #112]	; (800a740 <prvProcessExpiredTimer+0x7c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fd fb81 	bl	8007de4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	69db      	ldr	r3, [r3, #28]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d122      	bne.n	800a730 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	18d1      	adds	r1, r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	6978      	ldr	r0, [r7, #20]
 800a6f8:	f000 f8c8 	bl	800a88c <prvInsertTimerInActiveList>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d016      	beq.n	800a730 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a702:	2300      	movs	r3, #0
 800a704:	9300      	str	r3, [sp, #0]
 800a706:	2300      	movs	r3, #0
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	2100      	movs	r1, #0
 800a70c:	6978      	ldr	r0, [r7, #20]
 800a70e:	f7ff ff8b 	bl	800a628 <xTimerGenericCommand>
 800a712:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d10a      	bne.n	800a730 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	f383 8811 	msr	BASEPRI, r3
 800a722:	f3bf 8f6f 	isb	sy
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	60fb      	str	r3, [r7, #12]
}
 800a72c:	bf00      	nop
 800a72e:	e7fe      	b.n	800a72e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	6978      	ldr	r0, [r7, #20]
 800a736:	4798      	blx	r3
}
 800a738:	bf00      	nop
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20000f80 	.word	0x20000f80

0800a744 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a74c:	f107 0308 	add.w	r3, r7, #8
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f857 	bl	800a804 <prvGetNextExpireTime>
 800a756:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	4619      	mov	r1, r3
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 f803 	bl	800a768 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a762:	f000 f8d5 	bl	800a910 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a766:	e7f1      	b.n	800a74c <prvTimerTask+0x8>

0800a768 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a772:	f7ff f861 	bl	8009838 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a776:	f107 0308 	add.w	r3, r7, #8
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 f866 	bl	800a84c <prvSampleTimeNow>
 800a780:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d130      	bne.n	800a7ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10a      	bne.n	800a7a4 <prvProcessTimerOrBlockTask+0x3c>
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	429a      	cmp	r2, r3
 800a794:	d806      	bhi.n	800a7a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a796:	f7ff f85d 	bl	8009854 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a79a:	68f9      	ldr	r1, [r7, #12]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff ff91 	bl	800a6c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7a2:	e024      	b.n	800a7ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d008      	beq.n	800a7bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7aa:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <prvProcessTimerOrBlockTask+0x90>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bf0c      	ite	eq
 800a7b4:	2301      	moveq	r3, #1
 800a7b6:	2300      	movne	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <prvProcessTimerOrBlockTask+0x94>)
 800a7be:	6818      	ldr	r0, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f7fe fbfd 	bl	8008fc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7ce:	f7ff f841 	bl	8009854 <xTaskResumeAll>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10a      	bne.n	800a7ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7d8:	4b09      	ldr	r3, [pc, #36]	; (800a800 <prvProcessTimerOrBlockTask+0x98>)
 800a7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7de:	601a      	str	r2, [r3, #0]
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	f3bf 8f6f 	isb	sy
}
 800a7e8:	e001      	b.n	800a7ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7ea:	f7ff f833 	bl	8009854 <xTaskResumeAll>
}
 800a7ee:	bf00      	nop
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	20000f84 	.word	0x20000f84
 800a7fc:	20000f88 	.word	0x20000f88
 800a800:	e000ed04 	.word	0xe000ed04

0800a804 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a80c:	4b0e      	ldr	r3, [pc, #56]	; (800a848 <prvGetNextExpireTime+0x44>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	bf0c      	ite	eq
 800a816:	2301      	moveq	r3, #1
 800a818:	2300      	movne	r3, #0
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d105      	bne.n	800a836 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a82a:	4b07      	ldr	r3, [pc, #28]	; (800a848 <prvGetNextExpireTime+0x44>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	e001      	b.n	800a83a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a83a:	68fb      	ldr	r3, [r7, #12]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	bc80      	pop	{r7}
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	20000f80 	.word	0x20000f80

0800a84c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a854:	f7ff f89c 	bl	8009990 <xTaskGetTickCount>
 800a858:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <prvSampleTimeNow+0x3c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	429a      	cmp	r2, r3
 800a862:	d205      	bcs.n	800a870 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a864:	f000 f908 	bl	800aa78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e002      	b.n	800a876 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a876:	4a04      	ldr	r2, [pc, #16]	; (800a888 <prvSampleTimeNow+0x3c>)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a87c:	68fb      	ldr	r3, [r7, #12]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000f90 	.word	0x20000f90

0800a88c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	68fa      	ldr	r2, [r7, #12]
 800a8a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d812      	bhi.n	800a8d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	1ad2      	subs	r2, r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d302      	bcc.n	800a8c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	e01b      	b.n	800a8fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8c6:	4b10      	ldr	r3, [pc, #64]	; (800a908 <prvInsertTimerInActiveList+0x7c>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4610      	mov	r0, r2
 800a8d2:	f7fd fa4f 	bl	8007d74 <vListInsert>
 800a8d6:	e012      	b.n	800a8fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d206      	bcs.n	800a8ee <prvInsertTimerInActiveList+0x62>
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d302      	bcc.n	800a8ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	e007      	b.n	800a8fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8ee:	4b07      	ldr	r3, [pc, #28]	; (800a90c <prvInsertTimerInActiveList+0x80>)
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3304      	adds	r3, #4
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	f7fd fa3b 	bl	8007d74 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8fe:	697b      	ldr	r3, [r7, #20]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20000f84 	.word	0x20000f84
 800a90c:	20000f80 	.word	0x20000f80

0800a910 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08e      	sub	sp, #56	; 0x38
 800a914:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a916:	e09d      	b.n	800aa54 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	da18      	bge.n	800a950 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a91e:	1d3b      	adds	r3, r7, #4
 800a920:	3304      	adds	r3, #4
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	61fb      	str	r3, [r7, #28]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a946:	6850      	ldr	r0, [r2, #4]
 800a948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a94a:	6892      	ldr	r2, [r2, #8]
 800a94c:	4611      	mov	r1, r2
 800a94e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	db7e      	blt.n	800aa54 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a964:	3304      	adds	r3, #4
 800a966:	4618      	mov	r0, r3
 800a968:	f7fd fa3c 	bl	8007de4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a96c:	463b      	mov	r3, r7
 800a96e:	4618      	mov	r0, r3
 800a970:	f7ff ff6c 	bl	800a84c <prvSampleTimeNow>
 800a974:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b09      	cmp	r3, #9
 800a97a:	d86a      	bhi.n	800aa52 <prvProcessReceivedCommands+0x142>
 800a97c:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <prvProcessReceivedCommands+0x74>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800a9ad 	.word	0x0800a9ad
 800a988:	0800a9ad 	.word	0x0800a9ad
 800a98c:	0800a9ad 	.word	0x0800a9ad
 800a990:	0800aa55 	.word	0x0800aa55
 800a994:	0800aa09 	.word	0x0800aa09
 800a998:	0800aa41 	.word	0x0800aa41
 800a99c:	0800a9ad 	.word	0x0800a9ad
 800a9a0:	0800a9ad 	.word	0x0800a9ad
 800a9a4:	0800aa55 	.word	0x0800aa55
 800a9a8:	0800aa09 	.word	0x0800aa09
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	18d1      	adds	r1, r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ba:	f7ff ff67 	bl	800a88c <prvInsertTimerInActiveList>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d047      	beq.n	800aa54 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d13f      	bne.n	800aa54 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	441a      	add	r2, r3
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e6:	f7ff fe1f 	bl	800a628 <xTimerGenericCommand>
 800a9ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d130      	bne.n	800aa54 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f6:	f383 8811 	msr	BASEPRI, r3
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	f3bf 8f4f 	dsb	sy
 800aa02:	61bb      	str	r3, [r7, #24]
}
 800aa04:	bf00      	nop
 800aa06:	e7fe      	b.n	800aa06 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	617b      	str	r3, [r7, #20]
}
 800aa28:	bf00      	nop
 800aa2a:	e7fe      	b.n	800aa2a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	699a      	ldr	r2, [r3, #24]
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	18d1      	adds	r1, r2, r3
 800aa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3a:	f7ff ff27 	bl	800a88c <prvInsertTimerInActiveList>
					break;
 800aa3e:	e009      	b.n	800aa54 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d104      	bne.n	800aa54 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800aa4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4c:	f000 fb8a 	bl	800b164 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa50:	e000      	b.n	800aa54 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800aa52:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa54:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <prvProcessReceivedCommands+0x164>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	1d39      	adds	r1, r7, #4
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fd fe71 	bl	8008744 <xQueueReceive>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f47f af57 	bne.w	800a918 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aa6a:	bf00      	nop
 800aa6c:	bf00      	nop
 800aa6e:	3730      	adds	r7, #48	; 0x30
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20000f88 	.word	0x20000f88

0800aa78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa7e:	e045      	b.n	800ab0c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa80:	4b2c      	ldr	r3, [pc, #176]	; (800ab34 <prvSwitchTimerLists+0xbc>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa8a:	4b2a      	ldr	r3, [pc, #168]	; (800ab34 <prvSwitchTimerLists+0xbc>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3304      	adds	r3, #4
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fd f9a3 	bl	8007de4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d12e      	bne.n	800ab0c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	4413      	add	r3, r2
 800aab6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d90e      	bls.n	800aade <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aacc:	4b19      	ldr	r3, [pc, #100]	; (800ab34 <prvSwitchTimerLists+0xbc>)
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4619      	mov	r1, r3
 800aad6:	4610      	mov	r0, r2
 800aad8:	f7fd f94c 	bl	8007d74 <vListInsert>
 800aadc:	e016      	b.n	800ab0c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aade:	2300      	movs	r3, #0
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	2300      	movs	r3, #0
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	2100      	movs	r1, #0
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fd9d 	bl	800a628 <xTimerGenericCommand>
 800aaee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10a      	bne.n	800ab0c <prvSwitchTimerLists+0x94>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	603b      	str	r3, [r7, #0]
}
 800ab08:	bf00      	nop
 800ab0a:	e7fe      	b.n	800ab0a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab0c:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <prvSwitchTimerLists+0xbc>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1b4      	bne.n	800aa80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab16:	4b07      	ldr	r3, [pc, #28]	; (800ab34 <prvSwitchTimerLists+0xbc>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab1c:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a04      	ldr	r2, [pc, #16]	; (800ab34 <prvSwitchTimerLists+0xbc>)
 800ab22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab24:	4a04      	ldr	r2, [pc, #16]	; (800ab38 <prvSwitchTimerLists+0xc0>)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	6013      	str	r3, [r2, #0]
}
 800ab2a:	bf00      	nop
 800ab2c:	3718      	adds	r7, #24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20000f80 	.word	0x20000f80
 800ab38:	20000f84 	.word	0x20000f84

0800ab3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab42:	f000 f94b 	bl	800addc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <prvCheckForValidListAndQueue+0x60>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d120      	bne.n	800ab90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab4e:	4814      	ldr	r0, [pc, #80]	; (800aba0 <prvCheckForValidListAndQueue+0x64>)
 800ab50:	f7fd f8c2 	bl	8007cd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab54:	4813      	ldr	r0, [pc, #76]	; (800aba4 <prvCheckForValidListAndQueue+0x68>)
 800ab56:	f7fd f8bf 	bl	8007cd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab5a:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <prvCheckForValidListAndQueue+0x6c>)
 800ab5c:	4a10      	ldr	r2, [pc, #64]	; (800aba0 <prvCheckForValidListAndQueue+0x64>)
 800ab5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab60:	4b12      	ldr	r3, [pc, #72]	; (800abac <prvCheckForValidListAndQueue+0x70>)
 800ab62:	4a10      	ldr	r2, [pc, #64]	; (800aba4 <prvCheckForValidListAndQueue+0x68>)
 800ab64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab66:	2300      	movs	r3, #0
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	4b11      	ldr	r3, [pc, #68]	; (800abb0 <prvCheckForValidListAndQueue+0x74>)
 800ab6c:	4a11      	ldr	r2, [pc, #68]	; (800abb4 <prvCheckForValidListAndQueue+0x78>)
 800ab6e:	2110      	movs	r1, #16
 800ab70:	200a      	movs	r0, #10
 800ab72:	f7fd f9c9 	bl	8007f08 <xQueueGenericCreateStatic>
 800ab76:	4603      	mov	r3, r0
 800ab78:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <prvCheckForValidListAndQueue+0x60>)
 800ab7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab7c:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <prvCheckForValidListAndQueue+0x60>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d005      	beq.n	800ab90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab84:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <prvCheckForValidListAndQueue+0x60>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	490b      	ldr	r1, [pc, #44]	; (800abb8 <prvCheckForValidListAndQueue+0x7c>)
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe f9ca 	bl	8008f24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab90:	f000 f954 	bl	800ae3c <vPortExitCritical>
}
 800ab94:	bf00      	nop
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000f88 	.word	0x20000f88
 800aba0:	20000f58 	.word	0x20000f58
 800aba4:	20000f6c 	.word	0x20000f6c
 800aba8:	20000f80 	.word	0x20000f80
 800abac:	20000f84 	.word	0x20000f84
 800abb0:	20001034 	.word	0x20001034
 800abb4:	20000f94 	.word	0x20000f94
 800abb8:	0800dfc4 	.word	0x0800dfc4

0800abbc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08a      	sub	sp, #40	; 0x28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800abca:	f06f 0301 	mvn.w	r3, #1
 800abce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abdc:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <xTimerPendFunctionCallFromISR+0x3c>)
 800abde:	6818      	ldr	r0, [r3, #0]
 800abe0:	f107 0114 	add.w	r1, r7, #20
 800abe4:	2300      	movs	r3, #0
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	f7fd fc86 	bl	80084f8 <xQueueGenericSendFromISR>
 800abec:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800abee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3728      	adds	r7, #40	; 0x28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20000f88 	.word	0x20000f88

0800abfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3b04      	subs	r3, #4
 800ac0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3b04      	subs	r3, #4
 800ac1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f023 0201 	bic.w	r2, r3, #1
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3b04      	subs	r3, #4
 800ac2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac2c:	4a08      	ldr	r2, [pc, #32]	; (800ac50 <pxPortInitialiseStack+0x54>)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3b14      	subs	r3, #20
 800ac36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3b20      	subs	r3, #32
 800ac42:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac44:	68fb      	ldr	r3, [r7, #12]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bc80      	pop	{r7}
 800ac4e:	4770      	bx	lr
 800ac50:	0800ac55 	.word	0x0800ac55

0800ac54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac5e:	4b12      	ldr	r3, [pc, #72]	; (800aca8 <prvTaskExitError+0x54>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac66:	d00a      	beq.n	800ac7e <prvTaskExitError+0x2a>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	60fb      	str	r3, [r7, #12]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <prvTaskExitError+0x28>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60bb      	str	r3, [r7, #8]
}
 800ac90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac92:	bf00      	nop
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d0fc      	beq.n	800ac94 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac9a:	bf00      	nop
 800ac9c:	bf00      	nop
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bc80      	pop	{r7}
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	20000050 	.word	0x20000050
 800acac:	00000000 	.word	0x00000000

0800acb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <pxCurrentTCBConst2>)
 800acb2:	6819      	ldr	r1, [r3, #0]
 800acb4:	6808      	ldr	r0, [r1, #0]
 800acb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800acba:	f380 8809 	msr	PSP, r0
 800acbe:	f3bf 8f6f 	isb	sy
 800acc2:	f04f 0000 	mov.w	r0, #0
 800acc6:	f380 8811 	msr	BASEPRI, r0
 800acca:	f04e 0e0d 	orr.w	lr, lr, #13
 800acce:	4770      	bx	lr

0800acd0 <pxCurrentTCBConst2>:
 800acd0:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop

0800acd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800acd8:	4806      	ldr	r0, [pc, #24]	; (800acf4 <prvPortStartFirstTask+0x1c>)
 800acda:	6800      	ldr	r0, [r0, #0]
 800acdc:	6800      	ldr	r0, [r0, #0]
 800acde:	f380 8808 	msr	MSP, r0
 800ace2:	b662      	cpsie	i
 800ace4:	b661      	cpsie	f
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	df00      	svc	0
 800acf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acf2:	bf00      	nop
 800acf4:	e000ed08 	.word	0xe000ed08

0800acf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acfe:	4b32      	ldr	r3, [pc, #200]	; (800adc8 <xPortStartScheduler+0xd0>)
 800ad00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	22ff      	movs	r2, #255	; 0xff
 800ad0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad18:	78fb      	ldrb	r3, [r7, #3]
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	4b2a      	ldr	r3, [pc, #168]	; (800adcc <xPortStartScheduler+0xd4>)
 800ad24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad26:	4b2a      	ldr	r3, [pc, #168]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad28:	2207      	movs	r2, #7
 800ad2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad2c:	e009      	b.n	800ad42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ad2e:	4b28      	ldr	r3, [pc, #160]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	4a26      	ldr	r2, [pc, #152]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad38:	78fb      	ldrb	r3, [r7, #3]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4a:	2b80      	cmp	r3, #128	; 0x80
 800ad4c:	d0ef      	beq.n	800ad2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad4e:	4b20      	ldr	r3, [pc, #128]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f1c3 0307 	rsb	r3, r3, #7
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d00a      	beq.n	800ad70 <xPortStartScheduler+0x78>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	60bb      	str	r3, [r7, #8]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad70:	4b17      	ldr	r3, [pc, #92]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	4a16      	ldr	r2, [pc, #88]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad7a:	4b15      	ldr	r3, [pc, #84]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad82:	4a13      	ldr	r2, [pc, #76]	; (800add0 <xPortStartScheduler+0xd8>)
 800ad84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad8e:	4b11      	ldr	r3, [pc, #68]	; (800add4 <xPortStartScheduler+0xdc>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a10      	ldr	r2, [pc, #64]	; (800add4 <xPortStartScheduler+0xdc>)
 800ad94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad9a:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <xPortStartScheduler+0xdc>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a0d      	ldr	r2, [pc, #52]	; (800add4 <xPortStartScheduler+0xdc>)
 800ada0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ada4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ada6:	f000 f8b9 	bl	800af1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adaa:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <xPortStartScheduler+0xe0>)
 800adac:	2200      	movs	r2, #0
 800adae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800adb0:	f7ff ff92 	bl	800acd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800adb4:	f7fe feca 	bl	8009b4c <vTaskSwitchContext>
	prvTaskExitError();
 800adb8:	f7ff ff4c 	bl	800ac54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	e000e400 	.word	0xe000e400
 800adcc:	20001084 	.word	0x20001084
 800add0:	20001088 	.word	0x20001088
 800add4:	e000ed20 	.word	0xe000ed20
 800add8:	20000050 	.word	0x20000050

0800addc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	607b      	str	r3, [r7, #4]
}
 800adf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adf6:	4b0f      	ldr	r3, [pc, #60]	; (800ae34 <vPortEnterCritical+0x58>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3301      	adds	r3, #1
 800adfc:	4a0d      	ldr	r2, [pc, #52]	; (800ae34 <vPortEnterCritical+0x58>)
 800adfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae00:	4b0c      	ldr	r3, [pc, #48]	; (800ae34 <vPortEnterCritical+0x58>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d10f      	bne.n	800ae28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae08:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <vPortEnterCritical+0x5c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00a      	beq.n	800ae28 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	603b      	str	r3, [r7, #0]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <vPortEnterCritical+0x4a>
	}
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bc80      	pop	{r7}
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	20000050 	.word	0x20000050
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae42:	4b11      	ldr	r3, [pc, #68]	; (800ae88 <vPortExitCritical+0x4c>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <vPortExitCritical+0x24>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	607b      	str	r3, [r7, #4]
}
 800ae5c:	bf00      	nop
 800ae5e:	e7fe      	b.n	800ae5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae60:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <vPortExitCritical+0x4c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	4a08      	ldr	r2, [pc, #32]	; (800ae88 <vPortExitCritical+0x4c>)
 800ae68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae6a:	4b07      	ldr	r3, [pc, #28]	; (800ae88 <vPortExitCritical+0x4c>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d105      	bne.n	800ae7e <vPortExitCritical+0x42>
 800ae72:	2300      	movs	r3, #0
 800ae74:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	f383 8811 	msr	BASEPRI, r3
}
 800ae7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bc80      	pop	{r7}
 800ae86:	4770      	bx	lr
 800ae88:	20000050 	.word	0x20000050
 800ae8c:	00000000 	.word	0x00000000

0800ae90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae90:	f3ef 8009 	mrs	r0, PSP
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	4b0d      	ldr	r3, [pc, #52]	; (800aed0 <pxCurrentTCBConst>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aea0:	6010      	str	r0, [r2, #0]
 800aea2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800aea6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aeaa:	f380 8811 	msr	BASEPRI, r0
 800aeae:	f7fe fe4d 	bl	8009b4c <vTaskSwitchContext>
 800aeb2:	f04f 0000 	mov.w	r0, #0
 800aeb6:	f380 8811 	msr	BASEPRI, r0
 800aeba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aebe:	6819      	ldr	r1, [r3, #0]
 800aec0:	6808      	ldr	r0, [r1, #0]
 800aec2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aec6:	f380 8809 	msr	PSP, r0
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	4770      	bx	lr

0800aed0 <pxCurrentTCBConst>:
 800aed0:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop

0800aed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	607b      	str	r3, [r7, #4]
}
 800aef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aef2:	f7fe fd6d 	bl	80099d0 <xTaskIncrementTick>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aefc:	4b06      	ldr	r3, [pc, #24]	; (800af18 <xPortSysTickHandler+0x40>)
 800aefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	2300      	movs	r3, #0
 800af06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	f383 8811 	msr	BASEPRI, r3
}
 800af0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	e000ed04 	.word	0xe000ed04

0800af1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af1c:	b480      	push	{r7}
 800af1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af20:	4b0a      	ldr	r3, [pc, #40]	; (800af4c <vPortSetupTimerInterrupt+0x30>)
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af26:	4b0a      	ldr	r3, [pc, #40]	; (800af50 <vPortSetupTimerInterrupt+0x34>)
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af2c:	4b09      	ldr	r3, [pc, #36]	; (800af54 <vPortSetupTimerInterrupt+0x38>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a09      	ldr	r2, [pc, #36]	; (800af58 <vPortSetupTimerInterrupt+0x3c>)
 800af32:	fba2 2303 	umull	r2, r3, r2, r3
 800af36:	099b      	lsrs	r3, r3, #6
 800af38:	4a08      	ldr	r2, [pc, #32]	; (800af5c <vPortSetupTimerInterrupt+0x40>)
 800af3a:	3b01      	subs	r3, #1
 800af3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af3e:	4b03      	ldr	r3, [pc, #12]	; (800af4c <vPortSetupTimerInterrupt+0x30>)
 800af40:	2207      	movs	r2, #7
 800af42:	601a      	str	r2, [r3, #0]
}
 800af44:	bf00      	nop
 800af46:	46bd      	mov	sp, r7
 800af48:	bc80      	pop	{r7}
 800af4a:	4770      	bx	lr
 800af4c:	e000e010 	.word	0xe000e010
 800af50:	e000e018 	.word	0xe000e018
 800af54:	20000044 	.word	0x20000044
 800af58:	10624dd3 	.word	0x10624dd3
 800af5c:	e000e014 	.word	0xe000e014

0800af60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af66:	f3ef 8305 	mrs	r3, IPSR
 800af6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b0f      	cmp	r3, #15
 800af70:	d914      	bls.n	800af9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af72:	4a16      	ldr	r2, [pc, #88]	; (800afcc <vPortValidateInterruptPriority+0x6c>)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af7c:	4b14      	ldr	r3, [pc, #80]	; (800afd0 <vPortValidateInterruptPriority+0x70>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	7afa      	ldrb	r2, [r7, #11]
 800af82:	429a      	cmp	r2, r3
 800af84:	d20a      	bcs.n	800af9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	607b      	str	r3, [r7, #4]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af9c:	4b0d      	ldr	r3, [pc, #52]	; (800afd4 <vPortValidateInterruptPriority+0x74>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afa4:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <vPortValidateInterruptPriority+0x78>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d90a      	bls.n	800afc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	603b      	str	r3, [r7, #0]
}
 800afbe:	bf00      	nop
 800afc0:	e7fe      	b.n	800afc0 <vPortValidateInterruptPriority+0x60>
	}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bc80      	pop	{r7}
 800afca:	4770      	bx	lr
 800afcc:	e000e3f0 	.word	0xe000e3f0
 800afd0:	20001084 	.word	0x20001084
 800afd4:	e000ed0c 	.word	0xe000ed0c
 800afd8:	20001088 	.word	0x20001088

0800afdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08a      	sub	sp, #40	; 0x28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800afe4:	2300      	movs	r3, #0
 800afe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800afe8:	f7fe fc26 	bl	8009838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800afec:	4b58      	ldr	r3, [pc, #352]	; (800b150 <pvPortMalloc+0x174>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d101      	bne.n	800aff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aff4:	f000 f910 	bl	800b218 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aff8:	4b56      	ldr	r3, [pc, #344]	; (800b154 <pvPortMalloc+0x178>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4013      	ands	r3, r2
 800b000:	2b00      	cmp	r3, #0
 800b002:	f040 808e 	bne.w	800b122 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d01d      	beq.n	800b048 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b00c:	2208      	movs	r2, #8
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4413      	add	r3, r2
 800b012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d014      	beq.n	800b048 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f023 0307 	bic.w	r3, r3, #7
 800b024:	3308      	adds	r3, #8
 800b026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f003 0307 	and.w	r3, r3, #7
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <pvPortMalloc+0x6c>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	617b      	str	r3, [r7, #20]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d069      	beq.n	800b122 <pvPortMalloc+0x146>
 800b04e:	4b42      	ldr	r3, [pc, #264]	; (800b158 <pvPortMalloc+0x17c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	429a      	cmp	r2, r3
 800b056:	d864      	bhi.n	800b122 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b058:	4b40      	ldr	r3, [pc, #256]	; (800b15c <pvPortMalloc+0x180>)
 800b05a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b05c:	4b3f      	ldr	r3, [pc, #252]	; (800b15c <pvPortMalloc+0x180>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b062:	e004      	b.n	800b06e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d903      	bls.n	800b080 <pvPortMalloc+0xa4>
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1f1      	bne.n	800b064 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b080:	4b33      	ldr	r3, [pc, #204]	; (800b150 <pvPortMalloc+0x174>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b086:	429a      	cmp	r2, r3
 800b088:	d04b      	beq.n	800b122 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2208      	movs	r2, #8
 800b090:	4413      	add	r3, r2
 800b092:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	1ad2      	subs	r2, r2, r3
 800b0a4:	2308      	movs	r3, #8
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d91f      	bls.n	800b0ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	f003 0307 	and.w	r3, r3, #7
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <pvPortMalloc+0xf8>
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	613b      	str	r3, [r7, #16]
}
 800b0d0:	bf00      	nop
 800b0d2:	e7fe      	b.n	800b0d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	1ad2      	subs	r2, r2, r3
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0e6:	69b8      	ldr	r0, [r7, #24]
 800b0e8:	f000 f8f8 	bl	800b2dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0ec:	4b1a      	ldr	r3, [pc, #104]	; (800b158 <pvPortMalloc+0x17c>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	4a18      	ldr	r2, [pc, #96]	; (800b158 <pvPortMalloc+0x17c>)
 800b0f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0fa:	4b17      	ldr	r3, [pc, #92]	; (800b158 <pvPortMalloc+0x17c>)
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	4b18      	ldr	r3, [pc, #96]	; (800b160 <pvPortMalloc+0x184>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d203      	bcs.n	800b10e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b106:	4b14      	ldr	r3, [pc, #80]	; (800b158 <pvPortMalloc+0x17c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a15      	ldr	r2, [pc, #84]	; (800b160 <pvPortMalloc+0x184>)
 800b10c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	685a      	ldr	r2, [r3, #4]
 800b112:	4b10      	ldr	r3, [pc, #64]	; (800b154 <pvPortMalloc+0x178>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	431a      	orrs	r2, r3
 800b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b122:	f7fe fb97 	bl	8009854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f003 0307 	and.w	r3, r3, #7
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00a      	beq.n	800b146 <pvPortMalloc+0x16a>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	60fb      	str	r3, [r7, #12]
}
 800b142:	bf00      	nop
 800b144:	e7fe      	b.n	800b144 <pvPortMalloc+0x168>
	return pvReturn;
 800b146:	69fb      	ldr	r3, [r7, #28]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3728      	adds	r7, #40	; 0x28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20003494 	.word	0x20003494
 800b154:	200034a0 	.word	0x200034a0
 800b158:	20003498 	.word	0x20003498
 800b15c:	2000348c 	.word	0x2000348c
 800b160:	2000349c 	.word	0x2000349c

0800b164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d048      	beq.n	800b208 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b176:	2308      	movs	r3, #8
 800b178:	425b      	negs	r3, r3
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	4413      	add	r3, r2
 800b17e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	4b21      	ldr	r3, [pc, #132]	; (800b210 <vPortFree+0xac>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4013      	ands	r3, r2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <vPortFree+0x44>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	60fb      	str	r3, [r7, #12]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00a      	beq.n	800b1c6 <vPortFree+0x62>
	__asm volatile
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	f383 8811 	msr	BASEPRI, r3
 800b1b8:	f3bf 8f6f 	isb	sy
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	60bb      	str	r3, [r7, #8]
}
 800b1c2:	bf00      	nop
 800b1c4:	e7fe      	b.n	800b1c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	4b11      	ldr	r3, [pc, #68]	; (800b210 <vPortFree+0xac>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d019      	beq.n	800b208 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d115      	bne.n	800b208 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	685a      	ldr	r2, [r3, #4]
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	; (800b210 <vPortFree+0xac>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	43db      	mvns	r3, r3
 800b1e6:	401a      	ands	r2, r3
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1ec:	f7fe fb24 	bl	8009838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	4b07      	ldr	r3, [pc, #28]	; (800b214 <vPortFree+0xb0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	4a06      	ldr	r2, [pc, #24]	; (800b214 <vPortFree+0xb0>)
 800b1fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1fe:	6938      	ldr	r0, [r7, #16]
 800b200:	f000 f86c 	bl	800b2dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b204:	f7fe fb26 	bl	8009854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b208:	bf00      	nop
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	200034a0 	.word	0x200034a0
 800b214:	20003498 	.word	0x20003498

0800b218 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b21e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b222:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b224:	4b27      	ldr	r3, [pc, #156]	; (800b2c4 <prvHeapInit+0xac>)
 800b226:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f003 0307 	and.w	r3, r3, #7
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00c      	beq.n	800b24c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3307      	adds	r3, #7
 800b236:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	4a1f      	ldr	r2, [pc, #124]	; (800b2c4 <prvHeapInit+0xac>)
 800b248:	4413      	add	r3, r2
 800b24a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b250:	4a1d      	ldr	r2, [pc, #116]	; (800b2c8 <prvHeapInit+0xb0>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b256:	4b1c      	ldr	r3, [pc, #112]	; (800b2c8 <prvHeapInit+0xb0>)
 800b258:	2200      	movs	r2, #0
 800b25a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b264:	2208      	movs	r2, #8
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	1a9b      	subs	r3, r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	4a15      	ldr	r2, [pc, #84]	; (800b2cc <prvHeapInit+0xb4>)
 800b278:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b27a:	4b14      	ldr	r3, [pc, #80]	; (800b2cc <prvHeapInit+0xb4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2200      	movs	r2, #0
 800b280:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b282:	4b12      	ldr	r3, [pc, #72]	; (800b2cc <prvHeapInit+0xb4>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	1ad2      	subs	r2, r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b298:	4b0c      	ldr	r3, [pc, #48]	; (800b2cc <prvHeapInit+0xb4>)
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	4a0a      	ldr	r2, [pc, #40]	; (800b2d0 <prvHeapInit+0xb8>)
 800b2a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4a09      	ldr	r2, [pc, #36]	; (800b2d4 <prvHeapInit+0xbc>)
 800b2ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2b0:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <prvHeapInit+0xc0>)
 800b2b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2b6:	601a      	str	r2, [r3, #0]
}
 800b2b8:	bf00      	nop
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bc80      	pop	{r7}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	2000108c 	.word	0x2000108c
 800b2c8:	2000348c 	.word	0x2000348c
 800b2cc:	20003494 	.word	0x20003494
 800b2d0:	2000349c 	.word	0x2000349c
 800b2d4:	20003498 	.word	0x20003498
 800b2d8:	200034a0 	.word	0x200034a0

0800b2dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2e4:	4b27      	ldr	r3, [pc, #156]	; (800b384 <prvInsertBlockIntoFreeList+0xa8>)
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	e002      	b.n	800b2f0 <prvInsertBlockIntoFreeList+0x14>
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	60fb      	str	r3, [r7, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d8f7      	bhi.n	800b2ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	4413      	add	r3, r2
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d108      	bne.n	800b31e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	441a      	add	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	441a      	add	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d118      	bne.n	800b364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <prvInsertBlockIntoFreeList+0xac>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d00d      	beq.n	800b35a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	441a      	add	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	e008      	b.n	800b36c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b35a:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <prvInsertBlockIntoFreeList+0xac>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	e003      	b.n	800b36c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d002      	beq.n	800b37a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b37a:	bf00      	nop
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	bc80      	pop	{r7}
 800b382:	4770      	bx	lr
 800b384:	2000348c 	.word	0x2000348c
 800b388:	20003494 	.word	0x20003494

0800b38c <PowerPublisher_Task>:
  .priority = (osPriority_t) osPriorityNormal,
};
extern TIM_HandleTypeDef htim1;

void PowerPublisher_Task(void* arg)
{
 800b38c:	b590      	push	{r4, r7, lr}
 800b38e:	b09d      	sub	sp, #116	; 0x74
 800b390:	af02      	add	r7, sp, #8
 800b392:	6078      	str	r0, [r7, #4]
	PowerPublisher_HandlerStruct* publisher = (PowerPublisher_HandlerStruct*) arg;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	667b      	str	r3, [r7, #100]	; 0x64
	CANFrame_TxHeaderTypedef txHeader;
	txHeader.MessageType = CANFRAME_MSGTYPE_DATA_FRAME;
 800b398:	2304      	movs	r3, #4
 800b39a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	txHeader.TargetNode = CANFRAME_DISTANCE_ID;
 800b39e:	2305      	movs	r3, #5
 800b3a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	char Name[] = "PWRLGPS";
 800b3a4:	4a29      	ldr	r2, [pc, #164]	; (800b44c <PowerPublisher_Task+0xc0>)
 800b3a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b3aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3ae:	e883 0003 	stmia.w	r3, {r0, r1}
	char txbuff[55];
	uint32_t startTime;
	int32_t delayTime;
	while(1)
	{
		if(!publisher->isEnable)
 800b3b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3b4:	7e1b      	ldrb	r3, [r3, #24]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d104      	bne.n	800b3c4 <PowerPublisher_Task+0x38>
		{
			osThreadSuspend(publisher->Thread);
 800b3ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fb fbb6 	bl	8006b30 <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 800b3c4:	f7fb faa6 	bl	8006914 <osKernelGetTickCount>
 800b3c8:	6638      	str	r0, [r7, #96]	; 0x60
		Power = INA219_ReadPower(publisher->INA219);
 800b3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 f90d 	bl	800b5ee <INA219_ReadPower>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	65fb      	str	r3, [r7, #92]	; 0x5c
		Current = INA219_ReadCurrent(publisher->INA219);
 800b3d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f000 f8e7 	bl	800b5b0 <INA219_ReadCurrent>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	65bb      	str	r3, [r7, #88]	; 0x58
		Voltage = INA219_ReadBusVoltage(publisher->INA219);
 800b3e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 f8bd 	bl	800b56a <INA219_ReadBusVoltage>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	657b      	str	r3, [r7, #84]	; 0x54
		txHeader.DataLen = sprintf(txbuff, "#12=%s;%d;%d;%d\r\n",Name, Power,Voltage, Current);
 800b3f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b3f8:	f107 0008 	add.w	r0, r7, #8
 800b3fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b406:	4912      	ldr	r1, [pc, #72]	; (800b450 <PowerPublisher_Task+0xc4>)
 800b408:	f001 fbf6 	bl	800cbf8 <siprintf>
 800b40c:	4603      	mov	r3, r0
 800b40e:	b29b      	uxth	r3, r3
 800b410:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
//		txHeader.DataLen = sprintf(txbuff, "856896358568963585689635856896358568963585689635\r\n");
//		SyncPrintf("Len %d: %s",txHeader.DataLen, txbuff);
//		__HAL_TIM_SET_COUNTER(&htim1,0);
//		HAL_TIM_Base_Start(&htim1);
		CANFrame_Send(publisher->CANFrame, &txHeader,(uint8_t*) txbuff, 20);
 800b414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b416:	6818      	ldr	r0, [r3, #0]
 800b418:	f107 0208 	add.w	r2, r7, #8
 800b41c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b420:	2314      	movs	r3, #20
 800b422:	f000 fc7f 	bl	800bd24 <CANFrame_Send>
//		uint32_t cnt =__HAL_TIM_GET_COUNTER(&htim1);
//		SyncPrintf("SendTime %ld ", cnt);
		delayTime = publisher->Interval - (osKernelGetTickCount() - startTime);
 800b426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b428:	69dc      	ldr	r4, [r3, #28]
 800b42a:	f7fb fa73 	bl	8006914 <osKernelGetTickCount>
 800b42e:	4602      	mov	r2, r0
 800b430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	4423      	add	r3, r4
 800b436:	653b      	str	r3, [r7, #80]	; 0x50
		delayTime = delayTime < 0? 0 : delayTime;
 800b438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b43e:	653b      	str	r3, [r7, #80]	; 0x50
		osDelay(delayTime);
 800b440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b442:	4618      	mov	r0, r3
 800b444:	f7fb fbdc 	bl	8006c00 <osDelay>
		if(!publisher->isEnable)
 800b448:	e7b3      	b.n	800b3b2 <PowerPublisher_Task+0x26>
 800b44a:	bf00      	nop
 800b44c:	0800dfec 	.word	0x0800dfec
 800b450:	0800dfd8 	.word	0x0800dfd8

0800b454 <PowerPublisher_Init>:
	}
}


int PowerPublisher_Init(PowerPublisher_HandlerStruct* Publisher, INA219_t* ina219,CANFrame_HandlerStruct* CANFrame, uint32_t Interval)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	60f8      	str	r0, [r7, #12]
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	603b      	str	r3, [r7, #0]
	memset(Publisher, 0, sizeof(PowerPublisher_HandlerStruct));
 800b462:	2220      	movs	r2, #32
 800b464:	2100      	movs	r1, #0
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f001 fc66 	bl	800cd38 <memset>
	Publisher->INA219 = ina219;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	605a      	str	r2, [r3, #4]
	Publisher->Interval = Interval;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	683a      	ldr	r2, [r7, #0]
 800b476:	61da      	str	r2, [r3, #28]
	Publisher->CANFrame = CANFrame;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]
	Publisher->Thread = osThreadNew(PowerPublisher_Task, Publisher, &PowerPubTask_attributes);
 800b47e:	4a06      	ldr	r2, [pc, #24]	; (800b498 <PowerPublisher_Init+0x44>)
 800b480:	68f9      	ldr	r1, [r7, #12]
 800b482:	4806      	ldr	r0, [pc, #24]	; (800b49c <PowerPublisher_Init+0x48>)
 800b484:	f7fb fa6e 	bl	8006964 <osThreadNew>
 800b488:	4602      	mov	r2, r0
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	615a      	str	r2, [r3, #20]
	return 0;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	0800e12c 	.word	0x0800e12c
 800b49c:	0800b38d 	.word	0x0800b38d

0800b4a0 <PowerPublisher_Start>:

int PowerPublisher_Start(PowerPublisher_HandlerStruct* Publisher, uint8_t State)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70fb      	strb	r3, [r7, #3]
	Publisher->isEnable = State;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	78fa      	ldrb	r2, [r7, #3]
 800b4b0:	761a      	strb	r2, [r3, #24]
	if(State)
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d004      	beq.n	800b4c2 <PowerPublisher_Start+0x22>
	{
		osThreadResume(Publisher->Thread);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fb fb6b 	bl	8006b98 <osThreadResume>
	}
	return 0;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <Read16>:
#include "INA219.h"
//#include "math.h"


uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af04      	add	r7, sp, #16
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2] = {0};
 800b4d8:	2300      	movs	r3, #0
 800b4da:	81bb      	strh	r3, [r7, #12]
	INA219_Mem_Read(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, Value, 2, 1000);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6818      	ldr	r0, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	791b      	ldrb	r3, [r3, #4]
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	005b      	lsls	r3, r3, #1
 800b4e8:	b299      	uxth	r1, r3
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4f2:	9302      	str	r3, [sp, #8]
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	9301      	str	r3, [sp, #4]
 800b4f8:	f107 030c 	add.w	r3, r7, #12
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	2301      	movs	r3, #1
 800b500:	f000 fffa 	bl	800c4f8 <I2C_OS_MEM_Read_IT>
	return ((Value[0] << 8) | Value[1]);
 800b504:	7b3b      	ldrb	r3, [r7, #12]
 800b506:	021b      	lsls	r3, r3, #8
 800b508:	b21a      	sxth	r2, r3
 800b50a:	7b7b      	ldrb	r3, [r7, #13]
 800b50c:	b21b      	sxth	r3, r3
 800b50e:	4313      	orrs	r3, r2
 800b510:	b21b      	sxth	r3, r3
 800b512:	b29b      	uxth	r3, r3
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b088      	sub	sp, #32
 800b520:	af04      	add	r7, sp, #16
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
 800b528:	4613      	mov	r3, r2
 800b52a:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800b52c:	883b      	ldrh	r3, [r7, #0]
 800b52e:	0a1b      	lsrs	r3, r3, #8
 800b530:	b29b      	uxth	r3, r3
 800b532:	b2db      	uxtb	r3, r3
 800b534:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800b536:	883b      	ldrh	r3, [r7, #0]
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	737b      	strb	r3, [r7, #13]
	INA219_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, (uint8_t*)addr, 2, 100);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	791b      	ldrb	r3, [r3, #4]
 800b544:	b29b      	uxth	r3, r3
 800b546:	005b      	lsls	r3, r3, #1
 800b548:	b299      	uxth	r1, r3
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	2364      	movs	r3, #100	; 0x64
 800b550:	9302      	str	r3, [sp, #8]
 800b552:	2302      	movs	r3, #2
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	f107 030c 	add.w	r3, r7, #12
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	2301      	movs	r3, #1
 800b55e:	f000 ff7a 	bl	800c456 <I2C_OS_MEM_Write_IT>
}
 800b562:	bf00      	nop
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b084      	sub	sp, #16
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);\
 800b572:	2102      	movs	r1, #2
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7ff ffa9 	bl	800b4cc <Read16>
 800b57a:	4603      	mov	r3, r0
 800b57c:	81fb      	strh	r3, [r7, #14]
	return ((result >> 3  ) * 4);
 800b57e:	89fb      	ldrh	r3, [r7, #14]
 800b580:	08db      	lsrs	r3, r3, #3
 800b582:	b29b      	uxth	r3, r3
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	b29b      	uxth	r3, r3

}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 800b598:	2104      	movs	r1, #4
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff ff96 	bl	800b4cc <Read16>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	81fb      	strh	r3, [r7, #14]

	return (result );
 800b5a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff ffe9 	bl	800b590 <INA219_ReadCurrent_raw>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	81fb      	strh	r3, [r7, #14]

	return result/ ina219->currentDivider_mA;
 800b5c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f4 fe7c 	bl	80002c4 <__aeabi_i2f>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	f7f4 ff7d 	bl	80004d4 <__aeabi_fdiv>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7f5 f815 	bl	800060c <__aeabi_f2iz>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	b21b      	sxth	r3, r3
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <INA219_ReadPower>:
	return (result * 0.01 );
}


int16_t INA219_ReadPower(INA219_t *ina219)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b084      	sub	sp, #16
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_POWER);
 800b5f6:	2103      	movs	r1, #3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f7ff ff67 	bl	800b4cc <Read16>
 800b5fe:	4603      	mov	r3, r0
 800b600:	81fb      	strh	r3, [r7, #14]

	return (result * ina219->powerMultiplier_mW );
 800b602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b606:	4618      	mov	r0, r3
 800b608:	f7f4 fe5c 	bl	80002c4 <__aeabi_i2f>
 800b60c:	4602      	mov	r2, r0
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	4619      	mov	r1, r3
 800b614:	4610      	mov	r0, r2
 800b616:	f7f4 fea9 	bl	800036c <__aeabi_fmul>
 800b61a:	4603      	mov	r3, r0
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7f4 fff5 	bl	800060c <__aeabi_f2iz>
 800b622:	4603      	mov	r3, r0
 800b624:	b21b      	sxth	r3, r3
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <INA219_Reset>:
void INA219_Reset(INA219_t *ina219)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800b636:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b63a:	2100      	movs	r1, #0
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff ff6d 	bl	800b51c <Write16>
	osDelay(1);
 800b642:	2001      	movs	r0, #1
 800b644:	f7fb fadc 	bl	8006c00 <osDelay>
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800b65c:	887b      	ldrh	r3, [r7, #2]
 800b65e:	461a      	mov	r2, r3
 800b660:	2105      	movs	r1, #5
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff ff5a 	bl	800b51c <Write16>
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800b67c:	887b      	ldrh	r3, [r7, #2]
 800b67e:	461a      	mov	r2, r3
 800b680:	2100      	movs	r1, #0
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff ff4a 	bl	800b51c <Write16>
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <INA219_setCalibration_32V_2A>:
/**
 *	Calib for 0.1 Ohm Shunt Resistor
 */
void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800b698:	f643 139f 	movw	r3, #14751	; 0x399f
 800b69c:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219->calibrationValue = 4096;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b6a4:	80da      	strh	r2, [r3, #6]
//	ina219->calibrationValue = 6710<<1;

	ina219->currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a0a      	ldr	r2, [pc, #40]	; (800b6d4 <INA219_setCalibration_32V_2A+0x44>)
 800b6aa:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b6b2:	60da      	str	r2, [r3, #12]


	INA219_setCalibration(ina219, ina219->calibrationValue);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	88db      	ldrh	r3, [r3, #6]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff ffc8 	bl	800b650 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800b6c0:	89fb      	ldrh	r3, [r7, #14]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7ff ffd3 	bl	800b670 <INA219_setConfig>
}
 800b6ca:	bf00      	nop
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	41200000 	.word	0x41200000

0800b6d8 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, INA219_I2C_Handle *i2c, uint8_t Address)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	79fa      	ldrb	r2, [r7, #7]
 800b6f0:	711a      	strb	r2, [r3, #4]

	ina219->currentDivider_mA = 0;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f04f 0200 	mov.w	r2, #0
 800b6f8:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 0;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f04f 0200 	mov.w	r2, #0
 800b700:	60da      	str	r2, [r3, #12]

	uint8_t ina219_isReady = INA219_DeviceReady(i2c, (Address << 1), 3, 2);
 800b702:	79fb      	ldrb	r3, [r7, #7]
 800b704:	b29b      	uxth	r3, r3
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	b299      	uxth	r1, r3
 800b70a:	2302      	movs	r3, #2
 800b70c:	2203      	movs	r2, #3
 800b70e:	68b8      	ldr	r0, [r7, #8]
 800b710:	f000 ff43 	bl	800c59a <I2C_OS_IsDeviceReady>
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d107      	bne.n	800b72e <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff ff85 	bl	800b62e <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f7ff ffb3 	bl	800b690 <INA219_setCalibration_32V_2A>

		return HAL_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	e000      	b.n	800b730 <INA219_Init+0x58>
	}

	else
	{
		return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
	}
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <LEDSpeaker_SetLED>:
 */
#include "LEDSpeakerControl.h"

int LEDSpeaker_SetLED(LEDSpeaker_HandleStruct* handler, uint8_t LeftState, uint8_t RightState,
						uint8_t FrontState, uint8_t StopState)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	4608      	mov	r0, r1
 800b742:	4611      	mov	r1, r2
 800b744:	461a      	mov	r2, r3
 800b746:	4603      	mov	r3, r0
 800b748:	70fb      	strb	r3, [r7, #3]
 800b74a:	460b      	mov	r3, r1
 800b74c:	70bb      	strb	r3, [r7, #2]
 800b74e:	4613      	mov	r3, r2
 800b750:	707b      	strb	r3, [r7, #1]
	uint8_t GPIOLevel;
	GPIOLevel = LeftState ? LED_LEFT_ON_GPIOLEVEL : !LED_LEFT_ON_GPIOLEVEL;
 800b752:	78fb      	ldrb	r3, [r7, #3]
 800b754:	2b00      	cmp	r3, #0
 800b756:	bf14      	ite	ne
 800b758:	2301      	movne	r3, #1
 800b75a:	2300      	moveq	r3, #0
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->LeftPin, GPIOLevel);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	7bfa      	ldrb	r2, [r7, #15]
 800b766:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b76a:	f000 fe46 	bl	800c3fa <GPIO_WritePin>

	GPIOLevel = RightState ? LED_RIGHT_ON_GPIOLEVEL : !LED_RIGHT_ON_GPIOLEVEL;
 800b76e:	78bb      	ldrb	r3, [r7, #2]
 800b770:	2b00      	cmp	r3, #0
 800b772:	bf14      	ite	ne
 800b774:	2301      	movne	r3, #1
 800b776:	2300      	moveq	r3, #0
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->RightPin, GPIOLevel);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	7bfa      	ldrb	r2, [r7, #15]
 800b782:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b786:	f000 fe38 	bl	800c3fa <GPIO_WritePin>

	GPIOLevel = FrontState ? LED_FRONT_ON_GPIOLEVEL : !LED_FRONT_ON_GPIOLEVEL;
 800b78a:	787b      	ldrb	r3, [r7, #1]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bf14      	ite	ne
 800b790:	2301      	movne	r3, #1
 800b792:	2300      	moveq	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->FrontPin, GPIOLevel);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	7bfa      	ldrb	r2, [r7, #15]
 800b79e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7a2:	f000 fe2a 	bl	800c3fa <GPIO_WritePin>

	GPIOLevel = StopState ? LED_STOP_ON_GPIOLEVEL : !LED_STOP_ON_GPIOLEVEL;
 800b7a6:	7e3b      	ldrb	r3, [r7, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	bf14      	ite	ne
 800b7ac:	2301      	movne	r3, #1
 800b7ae:	2300      	moveq	r3, #0
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->StopPin, GPIOLevel);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	7bfa      	ldrb	r2, [r7, #15]
 800b7ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7be:	f000 fe1c 	bl	800c3fa <GPIO_WritePin>
	return 0;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <LEDSpeaker_setSpeaker>:

int LEDSpeaker_setSpeaker(LEDSpeaker_HandleStruct* handler, uint8_t SpeakerState)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
	uint8_t GPIOLevel = SpeakerState ? SPEAKER_ON_GPIOLEVEL : !SPEAKER_ON_GPIOLEVEL;
 800b7d8:	78fb      	ldrb	r3, [r7, #3]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	bf14      	ite	ne
 800b7de:	2301      	movne	r3, #1
 800b7e0:	2300      	moveq	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	73fb      	strb	r3, [r7, #15]
	GPIO_WritePin(*handler->SpeakerPin, GPIOLevel);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	7bfa      	ldrb	r2, [r7, #15]
 800b7ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7f0:	f000 fe03 	bl	800c3fa <GPIO_WritePin>
	return 0;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <CANFrame_ClearRcvInfo>:
const osThreadAttr_t CANPrcsTask_attributes = { .name = "CanProcessHandler",
		.stack_size = 500 * 4, .priority = (osPriority_t) osPriorityHigh2, };

const osMessageQueueAttr_t CANRxQueue_attributes = { .name = "CanRxQueue", };

static inline void CANFrame_ClearRcvInfo(CANFrame_RcvInfoTypedef *rcvinfo) {
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b082      	sub	sp, #8
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
	memset(rcvinfo, 0, sizeof(CANFrame_RcvInfoTypedef));
 800b806:	223b      	movs	r2, #59	; 0x3b
 800b808:	2100      	movs	r1, #0
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f001 fa94 	bl	800cd38 <memset>
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <CANFrame_ProcessData>:

static CANFrame_RcvInfoTypedef* CANFrame_ProcessData(
		CANFrame_HandlerStruct *CANHandler, CAN_RxHeaderTypeDef *RxHeader,
		uint8_t *RxData) {
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]
	uint8_t senderID = RxData[0];
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	77fb      	strb	r3, [r7, #31]
	CANFrame_RcvInfoTypedef *RcvInfo = &CANHandler->_RxRcvInfo[senderID];
 800b82a:	7ffa      	ldrb	r2, [r7, #31]
 800b82c:	4613      	mov	r3, r2
 800b82e:	011b      	lsls	r3, r3, #4
 800b830:	1a9b      	subs	r3, r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	1a9b      	subs	r3, r3, r2
 800b836:	3320      	adds	r3, #32
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	61bb      	str	r3, [r7, #24]
	uint8_t CpyLen;
	uint8_t RcvFrameType = CANFRAME_GETFRAMETYPE_FROMID(RxHeader->StdId);
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	f003 0307 	and.w	r3, r3, #7
 800b848:	75fb      	strb	r3, [r7, #23]
	uint8_t MsgType = CANFRAME_GETMSGTYPE_FROMID(RxHeader->StdId);
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	09db      	lsrs	r3, r3, #7
 800b850:	b2db      	uxtb	r3, r3
 800b852:	f003 030f 	and.w	r3, r3, #15
 800b856:	75bb      	strb	r3, [r7, #22]
	uint8_t CurrentFrameType = RcvInfo->CurrentFrameType;
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b85e:	757b      	strb	r3, [r7, #21]
//		break;
//	default:
//		break;
//	}

	if (RcvInfo->needFirstFrame && RcvFrameType != CANFRAME_FRAMETYPE_FIRST) {
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b866:	2b00      	cmp	r3, #0
 800b868:	d004      	beq.n	800b874 <CANFrame_ProcessData+0x5c>
 800b86a:	7dfb      	ldrb	r3, [r7, #23]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d001      	beq.n	800b874 <CANFrame_ProcessData+0x5c>
		return NULL;
 800b870:	2300      	movs	r3, #0
 800b872:	e12b      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
	}
	if (CurrentFrameType == 0) {
 800b874:	7d7b      	ldrb	r3, [r7, #21]
 800b876:	2b00      	cmp	r3, #0
 800b878:	f040 8083 	bne.w	800b982 <CANFrame_ProcessData+0x16a>
		// Empty buffer not receive any frame
		if (RxData[1] > CANFRAME_MAX_BUFFER_SIZE) {
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3301      	adds	r3, #1
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b36      	cmp	r3, #54	; 0x36
 800b884:	d901      	bls.n	800b88a <CANFrame_ProcessData+0x72>
			return NULL;
 800b886:	2300      	movs	r3, #0
 800b888:	e120      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
		}
		CANFrame_ClearRcvInfo(RcvInfo);
 800b88a:	69b8      	ldr	r0, [r7, #24]
 800b88c:	f7ff ffb7 	bl	800b7fe <CANFrame_ClearRcvInfo>
		RcvInfo->ExpectedLen = RxData[1];
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	785a      	ldrb	r2, [r3, #1]
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	701a      	strb	r2, [r3, #0]
		RcvInfo->MsgType = MsgType;
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	7dba      	ldrb	r2, [r7, #22]
 800b89c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		RcvInfo->CurrentFrameType = RcvFrameType;
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	7dfa      	ldrb	r2, [r7, #23]
 800b8a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		switch (RcvFrameType) {
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01e      	beq.n	800b8ec <CANFrame_ProcessData+0xd4>
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d164      	bne.n	800b97c <CANFrame_ProcessData+0x164>
		case CANFRAME_FRAMETYPE_FIRST:
			CpyLen = 6;
 800b8b2:	2306      	movs	r3, #6
 800b8b4:	753b      	strb	r3, [r7, #20]
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 2, CpyLen);
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800b8c0:	1898      	adds	r0, r3, r2
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3302      	adds	r3, #2
 800b8c6:	7d3a      	ldrb	r2, [r7, #20]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	f001 fb69 	bl	800cfa0 <memcpy>
			RcvInfo->ReceivedLen += CpyLen;
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800b8d4:	7d3b      	ldrb	r3, [r7, #20]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			RcvInfo->needFirstFrame = 0;
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			return NULL;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e0ef      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
		case CANFRAME_FRAMETYPE_END:
			CpyLen = RcvInfo->ExpectedLen;
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	753b      	strb	r3, [r7, #20]
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 2, CpyLen);
 800b8f2:	69bb      	ldr	r3, [r7, #24]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	69ba      	ldr	r2, [r7, #24]
 800b8f8:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800b8fc:	1898      	adds	r0, r3, r2
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3302      	adds	r3, #2
 800b902:	7d3a      	ldrb	r2, [r7, #20]
 800b904:	4619      	mov	r1, r3
 800b906:	f001 fb4b 	bl	800cfa0 <memcpy>
			RcvInfo->ReceivedLen += CpyLen;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800b910:	7d3b      	ldrb	r3, [r7, #20]
 800b912:	4413      	add	r3, r2
 800b914:	b2da      	uxtb	r2, r3
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#ifdef CANFRAME_ENABLE_COUNTER
//				Receive_CRC = RxData[CpyLen + 2];
			RcvInfo->ExpectedLen -= 1;
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	3b01      	subs	r3, #1
 800b922:	b2da      	uxtb	r2, r3
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	701a      	strb	r2, [r3, #0]
			Receive_CRC = RcvInfo->Data[RcvInfo->ExpectedLen];
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	4413      	add	r3, r2
 800b932:	785b      	ldrb	r3, [r3, #1]
 800b934:	74bb      	strb	r3, [r7, #18]
			RcvInfo->Data[RcvInfo->ExpectedLen] = 0;
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	4413      	add	r3, r2
 800b940:	2200      	movs	r2, #0
 800b942:	705a      	strb	r2, [r3, #1]
			Calc_CRC = crc_8(RcvInfo->Data, RcvInfo->ExpectedLen);
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	4619      	mov	r1, r3
 800b94e:	4610      	mov	r0, r2
 800b950:	f000 ff11 	bl	800c776 <crc_8>
 800b954:	4603      	mov	r3, r0
 800b956:	747b      	strb	r3, [r7, #17]
			if (Receive_CRC == Calc_CRC) {
 800b958:	7cba      	ldrb	r2, [r7, #18]
 800b95a:	7c7b      	ldrb	r3, [r7, #17]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d108      	bne.n	800b972 <CANFrame_ProcessData+0x15a>
				CANHandler->RcvSucessCounter++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
				SyncPrintf("Invalid CRC\r\n");
//				CANHandler->RcvFailedCounter++;
				return NULL;
			}
#endif
			return RcvInfo;
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	e0ac      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
				SyncPrintf("Invalid CRC\r\n");
 800b972:	4858      	ldr	r0, [pc, #352]	; (800bad4 <CANFrame_ProcessData+0x2bc>)
 800b974:	f000 fe6e 	bl	800c654 <SyncPrintf>
				return NULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	e0a7      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
		default:
			break;
 800b97c:	bf00      	nop
		}
		return NULL;
 800b97e:	2300      	movs	r3, #0
 800b980:	e0a4      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
	} else {
		if (RcvInfo->MsgType != MsgType) {
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b988:	7dba      	ldrb	r2, [r7, #22]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d00c      	beq.n	800b9a8 <CANFrame_ProcessData+0x190>
			CANFrame_ClearRcvInfo(RcvInfo);
 800b98e:	69b8      	ldr	r0, [r7, #24]
 800b990:	f7ff ff35 	bl	800b7fe <CANFrame_ClearRcvInfo>
#ifdef CANFRAME_ENABLE_COUNTER
			SyncPrintf("Not same MsgType\r\n");
 800b994:	4850      	ldr	r0, [pc, #320]	; (800bad8 <CANFrame_ProcessData+0x2c0>)
 800b996:	f000 fe5d 	bl	800c654 <SyncPrintf>
			CANHandler->RcvFailedCounter++;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
#endif
		}
		if (RcvFrameType == CANFRAME_FRAMETYPE_END) {
 800b9a8:	7dfb      	ldrb	r3, [r7, #23]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d15d      	bne.n	800ba6a <CANFrame_ProcessData+0x252>
//			SyncPrintf("Frame Type END\r\n");
			RcvInfo->CurrentFrameType = CANFRAME_FRAMETYPE_END;
 800b9ae:	69bb      	ldr	r3, [r7, #24]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			uint8_t remainLen = RcvInfo->ExpectedLen - RcvInfo->ReceivedLen;
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	781a      	ldrb	r2, [r3, #0]
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	74fb      	strb	r3, [r7, #19]
			RcvInfo->needFirstFrame = 1;
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
//			if(remainLen > 7)
//			{
//				CANFrame_ClearRcvInfo(RcvInfo);
//				return NULL;
//			}
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 1, remainLen);
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	69ba      	ldr	r2, [r7, #24]
 800b9d2:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800b9d6:	1898      	adds	r0, r3, r2
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	7cfa      	ldrb	r2, [r7, #19]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	f001 fade 	bl	800cfa0 <memcpy>
			RcvInfo->ReceivedLen += remainLen;
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800b9ea:	7cfb      	ldrb	r3, [r7, #19]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#ifdef CANFRAME_ENABLE_COUNTER
			RcvInfo->ExpectedLen -= 1;
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	701a      	strb	r2, [r3, #0]
			Receive_CRC = RcvInfo->Data[RcvInfo->ExpectedLen];
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	785b      	ldrb	r3, [r3, #1]
 800ba0e:	74bb      	strb	r3, [r7, #18]
			RcvInfo->Data[RcvInfo->ExpectedLen] = 0;
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	461a      	mov	r2, r3
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	4413      	add	r3, r2
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	705a      	strb	r2, [r3, #1]

			Calc_CRC = crc_8(RcvInfo->Data, RcvInfo->ExpectedLen);
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	4619      	mov	r1, r3
 800ba28:	4610      	mov	r0, r2
 800ba2a:	f000 fea4 	bl	800c776 <crc_8>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	747b      	strb	r3, [r7, #17]
			if (Receive_CRC == Calc_CRC) {
 800ba32:	7cba      	ldrb	r2, [r7, #18]
 800ba34:	7c7b      	ldrb	r3, [r7, #17]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d108      	bne.n	800ba4c <CANFrame_ProcessData+0x234>
				CANHandler->RcvSucessCounter++;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
				return NULL;

			}
#endif
//			SyncPrintf("CpyLen %d ReceivedLen %d ExpectedLen %d\r\n", CpyLen, RcvInfo->ReceivedLen, RcvInfo->ExpectedLen);
			return RcvInfo;
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	e03f      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
				SyncPrintf("Invalid CRC Calc 0x%.2x Rcv 0x%2x\r\n", Calc_CRC,
 800ba4c:	7c7b      	ldrb	r3, [r7, #17]
 800ba4e:	7cba      	ldrb	r2, [r7, #18]
 800ba50:	4619      	mov	r1, r3
 800ba52:	4822      	ldr	r0, [pc, #136]	; (800badc <CANFrame_ProcessData+0x2c4>)
 800ba54:	f000 fdfe 	bl	800c654 <SyncPrintf>
				CANHandler->RcvFailedCounter++;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800ba5e:	1c5a      	adds	r2, r3, #1
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
				return NULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	e030      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
		} else if (RcvFrameType != CurrentFrameType + 1) {
 800ba6a:	7dfa      	ldrb	r2, [r7, #23]
 800ba6c:	7d7b      	ldrb	r3, [r7, #21]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d00f      	beq.n	800ba94 <CANFrame_ProcessData+0x27c>
#ifdef CANFRAME_ENABLE_COUNTER
			SyncPrintf("FrameType not contiguos\r\n");
 800ba74:	481a      	ldr	r0, [pc, #104]	; (800bae0 <CANFrame_ProcessData+0x2c8>)
 800ba76:	f000 fded 	bl	800c654 <SyncPrintf>
			RcvInfo->needFirstFrame = 1;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			RcvInfo->CurrentFrameType = 0;
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
//			CANHandler->RcvFailedCounter++;
#endif
			CANFrame_ClearRcvInfo(RcvInfo);
 800ba8a:	69b8      	ldr	r0, [r7, #24]
 800ba8c:	f7ff feb7 	bl	800b7fe <CANFrame_ClearRcvInfo>
			return NULL;
 800ba90:	2300      	movs	r3, #0
 800ba92:	e01b      	b.n	800bacc <CANFrame_ProcessData+0x2b4>
		} else {
//			SyncPrintf("Frame Type %d\r\n", RcvFrameType);
			RcvInfo->CurrentFrameType = RcvFrameType;
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	7dfa      	ldrb	r2, [r7, #23]
 800ba98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			CpyLen = 7;
 800ba9c:	2307      	movs	r3, #7
 800ba9e:	753b      	strb	r3, [r7, #20]
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 1, CpyLen);
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	3301      	adds	r3, #1
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800baaa:	1898      	adds	r0, r3, r2
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3301      	adds	r3, #1
 800bab0:	7d3a      	ldrb	r2, [r7, #20]
 800bab2:	4619      	mov	r1, r3
 800bab4:	f001 fa74 	bl	800cfa0 <memcpy>
			RcvInfo->ReceivedLen += CpyLen;
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800babe:	7d3b      	ldrb	r3, [r7, #20]
 800bac0:	4413      	add	r3, r2
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
//			SyncPrintf("CpyLen %d ReceivedLen %d ExpectedLen %d\r\n", CpyLen, RcvInfo->ReceivedLen, RcvInfo->ExpectedLen);
			return NULL;
 800baca:	2300      	movs	r3, #0
		}
	}
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	0800e024 	.word	0x0800e024
 800bad8:	0800e034 	.word	0x0800e034
 800badc:	0800e048 	.word	0x0800e048
 800bae0:	0800e06c 	.word	0x0800e06c

0800bae4 <CANFrame_RcvTask>:

void CANFrame_RcvTask(void *arg) {
 800bae4:	b5b0      	push	{r4, r5, r7, lr}
 800bae6:	b09a      	sub	sp, #104	; 0x68
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
	int Status = 0;
 800baec:	2300      	movs	r3, #0
 800baee:	667b      	str	r3, [r7, #100]	; 0x64
	CANFrame_HandlerStruct *CANHandler = (CANFrame_HandlerStruct*) arg;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	663b      	str	r3, [r7, #96]	; 0x60
	CAN_RxHeaderTypeDef CAN_RxHeader;
	uint8_t RxData[8];
	uint8_t TargetNode;
	uint8_t FifoFillLevel = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	osStatus_t status = 0;
 800bafa:	2300      	movs	r3, #0
 800bafc:	65fb      	str	r3, [r7, #92]	; 0x5c
	while (1) {
		CAN_OS_GetRxFifoFillLevel(CANHandler->CAN, CANHandler->RxFifo,
 800bafe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb00:	6818      	ldr	r0, [r3, #0]
 800bb02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	f107 0233 	add.w	r2, r7, #51	; 0x33
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	f000 fbbc 	bl	800c288 <CAN_OS_GetRxFifoFillLevel>
				&FifoFillLevel);
		if (FifoFillLevel == 0) {
 800bb10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10c      	bne.n	800bb32 <CANFrame_RcvTask+0x4e>
			Status = CAN_OS_ListenMsg(CANHandler->CAN, CANHandler->RxFifo,
 800bb18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb1a:	6818      	ldr	r0, [r3, #0]
 800bb1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f04f 32ff 	mov.w	r2, #4294967295
 800bb24:	4619      	mov	r1, r3
 800bb26:	f000 fb6d 	bl	800c204 <CAN_OS_ListenMsg>
 800bb2a:	6678      	str	r0, [r7, #100]	; 0x64
			osWaitForever);
			if (Status != osOK) {
 800bb2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d142      	bne.n	800bbb8 <CANFrame_RcvTask+0xd4>
				continue;
			}
		}
		Status = CAN_OS_GetRxMessage(CANHandler->CAN, CANHandler->RxFifo,
 800bb32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb34:	6818      	ldr	r0, [r3, #0]
 800bb36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb38:	6899      	ldr	r1, [r3, #8]
 800bb3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bb3e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800bb42:	f000 fbb6 	bl	800c2b2 <CAN_OS_GetRxMessage>
 800bb46:	6678      	str	r0, [r7, #100]	; 0x64
				&CAN_RxHeader, RxData);
		if (Status != osOK) {
 800bb48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d136      	bne.n	800bbbc <CANFrame_RcvTask+0xd8>
//				CANHandler->RcvFailedCounter++;
//			}
//
//		}

		TargetNode = CANFRAME_GETTARGETNODE_FROMID(CAN_RxHeader.StdId);
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb50:	08db      	lsrs	r3, r3, #3
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f003 030f 	and.w	r3, r3, #15
 800bb58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if (!((TargetNode != CANHandler->nodeID)
 800bb5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb64:	889b      	ldrh	r3, [r3, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d103      	bne.n	800bb72 <CANFrame_RcvTask+0x8e>
 800bb6a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d026      	beq.n	800bbc0 <CANFrame_RcvTask+0xdc>
				|| (TargetNode != CANFRAME_ALL_NODE))) {
			continue;
		}

		CANFrame_DataStruct Can_Data;
		Can_Data.RxHeader = CAN_RxHeader;
 800bb72:	f107 040c 	add.w	r4, r7, #12
 800bb76:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 800bb7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bb82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//		Can_Data.RxData = RxData;
		memcpy(Can_Data.RxData, RxData, 8);
 800bb86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bb8a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800bb8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb92:	e883 0003 	stmia.w	r3, {r0, r1}

		status = osMessageQueuePut(CANHandler->RxQueue, &Can_Data, 0, 200);
 800bb96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb98:	68d8      	ldr	r0, [r3, #12]
 800bb9a:	f107 010c 	add.w	r1, r7, #12
 800bb9e:	23c8      	movs	r3, #200	; 0xc8
 800bba0:	2200      	movs	r2, #0
 800bba2:	f7fb fd19 	bl	80075d8 <osMessageQueuePut>
 800bba6:	65f8      	str	r0, [r7, #92]	; 0x5c
		if (status != osOK) {
 800bba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0a7      	beq.n	800bafe <CANFrame_RcvTask+0x1a>
			SyncPrintf("Send Data to Queue failed with id: %d\r\n", status);
 800bbae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bbb0:	4804      	ldr	r0, [pc, #16]	; (800bbc4 <CANFrame_RcvTask+0xe0>)
 800bbb2:	f000 fd4f 	bl	800c654 <SyncPrintf>
 800bbb6:	e7a2      	b.n	800bafe <CANFrame_RcvTask+0x1a>
				continue;
 800bbb8:	bf00      	nop
 800bbba:	e7a0      	b.n	800bafe <CANFrame_RcvTask+0x1a>
			continue;
 800bbbc:	bf00      	nop
 800bbbe:	e79e      	b.n	800bafe <CANFrame_RcvTask+0x1a>
			continue;
 800bbc0:	bf00      	nop
	while (1) {
 800bbc2:	e79c      	b.n	800bafe <CANFrame_RcvTask+0x1a>
 800bbc4:	0800e088 	.word	0x0800e088

0800bbc8 <CANFrame_ProcessTask>:
//			}
//			CANFrame_ClearRcvInfo(rcvInfo);
	}
}

void CANFrame_ProcessTask(void *arg) {
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b092      	sub	sp, #72	; 0x48
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
	CANFrame_HandlerStruct *CANHandler = (CANFrame_HandlerStruct*) arg;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	647b      	str	r3, [r7, #68]	; 0x44
	CANFrame_DataStruct CANFrame_Data;
	CANFrame_RxHeaderTypedef CANFrame_RxHeader;
	uint8_t msg_prio = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	72fb      	strb	r3, [r7, #11]
	osStatus_t status = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t SenderId = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (;;) {
		status = osMessageQueueGet(CANHandler->RxQueue, &CANFrame_Data,
 800bbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbe4:	68d8      	ldr	r0, [r3, #12]
 800bbe6:	f107 020b 	add.w	r2, r7, #11
 800bbea:	f107 0114 	add.w	r1, r7, #20
 800bbee:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf2:	f7fb fd65 	bl	80076c0 <osMessageQueueGet>
 800bbf6:	6438      	str	r0, [r7, #64]	; 0x40
				&msg_prio,
				osWaitForever);
		if (status != osOK) {
 800bbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <CANFrame_ProcessTask+0x3e>
			SyncPrintf("Rcv queue failed\r\n");
 800bbfe:	481c      	ldr	r0, [pc, #112]	; (800bc70 <CANFrame_ProcessTask+0xa8>)
 800bc00:	f000 fd28 	bl	800c654 <SyncPrintf>
			continue;
 800bc04:	e032      	b.n	800bc6c <CANFrame_ProcessTask+0xa4>
		}
//		SyncPrintf("Rcv queue success\r\n");
		SenderId = CANFrame_Data.RxData[0];
 800bc06:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bc0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		CANFrame_RcvInfoTypedef *rcvInfo = CANFrame_ProcessData(CANHandler,
 800bc0e:	f107 0314 	add.w	r3, r7, #20
 800bc12:	f103 021c 	add.w	r2, r3, #28
 800bc16:	f107 0314 	add.w	r3, r7, #20
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bc1e:	f7ff fdfb 	bl	800b818 <CANFrame_ProcessData>
 800bc22:	63b8      	str	r0, [r7, #56]	; 0x38
				&CANFrame_Data.RxHeader, CANFrame_Data.RxData);
		if (rcvInfo != NULL) {
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d0db      	beq.n	800bbe2 <CANFrame_ProcessTask+0x1a>
			CANFrame_RxHeader.DataLen = rcvInfo->ExpectedLen;
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	743b      	strb	r3, [r7, #16]
			CANFrame_RxHeader.MessageType = rcvInfo->MsgType;
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	81bb      	strh	r3, [r7, #12]
			CANFrame_RxHeader.senderID = SenderId;
 800bc3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	81fb      	strh	r3, [r7, #14]
			//			{
			//				SyncPrintf("%d ", rcvInfo->Data[i]);
			//			}
			//			SyncPrintf("\r\n");
			//			SyncPrintf("%s \r\n", rcvInfo->Data);
			rcvInfo->Data[CANFrame_RxHeader.DataLen] = 0;
 800bc42:	7c3b      	ldrb	r3, [r7, #16]
 800bc44:	461a      	mov	r2, r3
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	4413      	add	r3, r2
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	705a      	strb	r2, [r3, #1]

			if (CANHandler->ReceiveDataCB != NULL) {
 800bc4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d007      	beq.n	800bc66 <CANFrame_ProcessTask+0x9e>
				CANHandler->ReceiveDataCB(&CANFrame_RxHeader, rcvInfo->Data);
 800bc56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc58:	69db      	ldr	r3, [r3, #28]
 800bc5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc5c:	1c51      	adds	r1, r2, #1
 800bc5e:	f107 020c 	add.w	r2, r7, #12
 800bc62:	4610      	mov	r0, r2
 800bc64:	4798      	blx	r3
			}
			CANFrame_ClearRcvInfo(rcvInfo);
 800bc66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc68:	f7ff fdc9 	bl	800b7fe <CANFrame_ClearRcvInfo>
	for (;;) {
 800bc6c:	e7b9      	b.n	800bbe2 <CANFrame_ProcessTask+0x1a>
 800bc6e:	bf00      	nop
 800bc70:	0800e0b0 	.word	0x0800e0b0

0800bc74 <CANFrame_Init>:
		}
	}
}

int CANFrame_Init(CANFrame_HandlerStruct *canhandler, CAN_OS_HandlerStruct *CAN,
		uint16_t nodeID, uint32_t CAN_RxFifo) {
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	80fb      	strh	r3, [r7, #6]
	memset(canhandler, 0, sizeof(CANFrame_HandlerStruct));
 800bc84:	f44f 724c 	mov.w	r2, #816	; 0x330
 800bc88:	2100      	movs	r1, #0
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f001 f854 	bl	800cd38 <memset>
	canhandler->CAN = CAN;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	601a      	str	r2, [r3, #0]
	canhandler->nodeID = nodeID;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	88fa      	ldrh	r2, [r7, #6]
 800bc9a:	809a      	strh	r2, [r3, #4]
	canhandler->usedFilterBank = 0;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	80da      	strh	r2, [r3, #6]
	canhandler->RxFifo = CAN_RxFifo;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	609a      	str	r2, [r3, #8]
	canhandler->_RxRcvInfo->needFirstFrame = 1;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	canhandler->TxSem = osSemaphoreNew(1, 1, NULL);
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2101      	movs	r1, #1
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f7fb fa7d 	bl	80071b4 <osSemaphoreNew>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	611a      	str	r2, [r3, #16]
	canhandler->RxQueue = osMessageQueueNew(10, sizeof(CANFrame_DataStruct),
 800bcc0:	4a13      	ldr	r2, [pc, #76]	; (800bd10 <CANFrame_Init+0x9c>)
 800bcc2:	2124      	movs	r1, #36	; 0x24
 800bcc4:	200a      	movs	r0, #10
 800bcc6:	f7fb fc01 	bl	80074cc <osMessageQueueNew>
 800bcca:	4602      	mov	r2, r0
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	60da      	str	r2, [r3, #12]
			&CANRxQueue_attributes);
	canhandler->rcvHandler_Th = osThreadNew(CANFrame_RcvTask, canhandler,
 800bcd0:	4a10      	ldr	r2, [pc, #64]	; (800bd14 <CANFrame_Init+0xa0>)
 800bcd2:	68f9      	ldr	r1, [r7, #12]
 800bcd4:	4810      	ldr	r0, [pc, #64]	; (800bd18 <CANFrame_Init+0xa4>)
 800bcd6:	f7fa fe45 	bl	8006964 <osThreadNew>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	615a      	str	r2, [r3, #20]
			&CANRcvTask_attributes);
	canhandler->prcssHandler_Th = osThreadNew(CANFrame_ProcessTask, canhandler,
 800bce0:	4a0e      	ldr	r2, [pc, #56]	; (800bd1c <CANFrame_Init+0xa8>)
 800bce2:	68f9      	ldr	r1, [r7, #12]
 800bce4:	480e      	ldr	r0, [pc, #56]	; (800bd20 <CANFrame_Init+0xac>)
 800bce6:	f7fa fe3d 	bl	8006964 <osThreadNew>
 800bcea:	4602      	mov	r2, r0
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	619a      	str	r2, [r3, #24]
			&CANPrcsTask_attributes);
	CANFrame_FilterConfig(canhandler, CANFRAME_ALL_NODE, CAN_RxFifo);
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	2100      	movs	r1, #0
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 f97d 	bl	800bff4 <CANFrame_FilterConfig>
	return CANFrame_FilterConfig(canhandler, nodeID, CAN_RxFifo);
 800bcfa:	88fb      	ldrh	r3, [r7, #6]
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 f977 	bl	800bff4 <CANFrame_FilterConfig>
 800bd06:	4603      	mov	r3, r0

}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	0800e198 	.word	0x0800e198
 800bd14:	0800e150 	.word	0x0800e150
 800bd18:	0800bae5 	.word	0x0800bae5
 800bd1c:	0800e174 	.word	0x0800e174
 800bd20:	0800bbc9 	.word	0x0800bbc9

0800bd24 <CANFrame_Send>:

int CANFrame_Send(CANFrame_HandlerStruct *canhandler,
		CANFrame_TxHeaderTypedef *CANFrame_txHeader, uint8_t *Data,
		uint32_t timeout) {
 800bd24:	b590      	push	{r4, r7, lr}
 800bd26:	b0a9      	sub	sp, #164	; 0xa4
 800bd28:	af02      	add	r7, sp, #8
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
	int Status;

	CAN_TxHeaderTypeDef CAN_TxHeader;
	/*Config Frame----------------------------------------------------------------*/
	CAN_TxHeader.DLC = 8;
 800bd32:	2308      	movs	r3, #8
 800bd34:	66bb      	str	r3, [r7, #104]	; 0x68
	CAN_TxHeader.RTR = CAN_RTR_DATA;
 800bd36:	2300      	movs	r3, #0
 800bd38:	667b      	str	r3, [r7, #100]	; 0x64
	CAN_TxHeader.IDE = CAN_ID_STD;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	663b      	str	r3, [r7, #96]	; 0x60
	/*Config ID-------------------------------------------------------------------*/
	uint32_t Txmailbox;
	uint16_t ID_NUM = (CANFrame_txHeader->MessageType << 7)
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	01db      	lsls	r3, r3, #7
			| CANFrame_txHeader->TargetNode << 3;
 800bd44:	b21a      	sxth	r2, r3
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	00db      	lsls	r3, r3, #3
 800bd4c:	b21b      	sxth	r3, r3
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	b21b      	sxth	r3, r3
	uint16_t ID_NUM = (CANFrame_txHeader->MessageType << 7)
 800bd52:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

	if (CANFrame_txHeader->DataLen > CANFRAME_MAX_BUFFER_SIZE) {
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	889b      	ldrh	r3, [r3, #4]
 800bd5a:	2b36      	cmp	r3, #54	; 0x36
 800bd5c:	d902      	bls.n	800bd64 <CANFrame_Send+0x40>
		return osErrorParameter;
 800bd5e:	f06f 0303 	mvn.w	r3, #3
 800bd62:	e12d      	b.n	800bfc0 <CANFrame_Send+0x29c>
//		canhandler->SendFailedCounter++;
//	}
//
//	return osOK;

	uint8_t Frame_type = CANFRAME_FRAMETYPE_FIRST;
 800bd64:	2301      	movs	r3, #1
 800bd66:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	/*Implement send data----------------------------------------------------------*/
	uint8_t TxBuffer[CANFRAME_MAX_BUFFER_SIZE] = { 0 };
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	61fb      	str	r3, [r7, #28]
 800bd6e:	f107 0320 	add.w	r3, r7, #32
 800bd72:	2232      	movs	r2, #50	; 0x32
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 ffde 	bl	800cd38 <memset>
	uint8_t TxFrame[CANFRAME_MAX_DATA_LENGTH] = { 0 };
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	617b      	str	r3, [r7, #20]
 800bd80:	2300      	movs	r3, #0
 800bd82:	61bb      	str	r3, [r7, #24]
	uint32_t FrameIndex = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint32_t DataLength = CANFrame_txHeader->DataLen;
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	889b      	ldrh	r3, [r3, #4]
 800bd8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	uint8_t isFirstFrame = 1;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t isLastFrame = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	uint32_t startTime = osKernelGetTickCount();
 800bd9e:	f7fa fdb9 	bl	8006914 <osKernelGetTickCount>
 800bda2:	67f8      	str	r0, [r7, #124]	; 0x7c
	uint8_t calcCRC = crc_8(Data, DataLength);
 800bda4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fce2 	bl	800c776 <crc_8>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	int waitTime;

	if (CANFrame_txHeader->DataLen > CANFRAME_MAX_BUFFER_SIZE) {
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	889b      	ldrh	r3, [r3, #4]
 800bdbc:	2b36      	cmp	r3, #54	; 0x36
 800bdbe:	d902      	bls.n	800bdc6 <CANFrame_Send+0xa2>
		return osErrorParameter;
 800bdc0:	f06f 0303 	mvn.w	r3, #3
 800bdc4:	e0fc      	b.n	800bfc0 <CANFrame_Send+0x29c>
	}
	/*Add nodeID vs Data length at first frame -----------------------------------*/
#ifdef CANFRAME_ENABLE_COUNTER
	memcpy(TxBuffer, Data, DataLength);
 800bdc6:	f107 031c 	add.w	r3, r7, #28
 800bdca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f001 f8e5 	bl	800cfa0 <memcpy>
	TxBuffer[DataLength] = calcCRC;
 800bdd6:	f107 021c 	add.w	r2, r7, #28
 800bdda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdde:	4413      	add	r3, r2
 800bde0:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 800bde4:	701a      	strb	r2, [r3, #0]
	DataLength++;
 800bde6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bdea:	3301      	adds	r3, #1
 800bdec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#endif

	osSemaphoreAcquire(canhandler->TxSem, timeout);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fb fa78 	bl	80072ec <osSemaphoreAcquire>
//	uint32_t cnt =__HAL_TIM_GET_COUNTER(&htim1);
//	SyncPrintf("Time1 %ld ", cnt);

	for (int i = 0; i < DataLength; i++) {
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be02:	e0c9      	b.n	800bf98 <CANFrame_Send+0x274>
		uint8_t byte = TxBuffer[i];
 800be04:	f107 021c 	add.w	r2, r7, #28
 800be08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be0c:	4413      	add	r3, r2
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		if (isFirstFrame) {
 800be14:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d020      	beq.n	800be5e <CANFrame_Send+0x13a>
			TxFrame[FrameIndex] = canhandler->nodeID;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	889b      	ldrh	r3, [r3, #4]
 800be20:	b2d9      	uxtb	r1, r3
 800be22:	f107 0214 	add.w	r2, r7, #20
 800be26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be2a:	4413      	add	r3, r2
 800be2c:	460a      	mov	r2, r1
 800be2e:	701a      	strb	r2, [r3, #0]
			FrameIndex++;
 800be30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be34:	3301      	adds	r3, #1
 800be36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			TxFrame[FrameIndex] = DataLength;
 800be3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be3e:	b2d9      	uxtb	r1, r3
 800be40:	f107 0214 	add.w	r2, r7, #20
 800be44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be48:	4413      	add	r3, r2
 800be4a:	460a      	mov	r2, r1
 800be4c:	701a      	strb	r2, [r3, #0]
			FrameIndex++;
 800be4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be52:	3301      	adds	r3, #1
 800be54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			isFirstFrame = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}
		/*Add byte into frame data----------------------------------------------------*/
		TxFrame[FrameIndex] = byte;
 800be5e:	f107 0214 	add.w	r2, r7, #20
 800be62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be66:	4413      	add	r3, r2
 800be68:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 800be6c:	701a      	strb	r2, [r3, #0]
		FrameIndex++;
 800be6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be72:	3301      	adds	r3, #1
 800be74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		/*Check if frame data is not fill, add FILL byte until frame full 8bytes------*/
		if (FrameIndex == CANFRAME_MAX_DATA_LENGTH || i == DataLength - 1) {
 800be78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be7c:	2b08      	cmp	r3, #8
 800be7e:	d013      	beq.n	800bea8 <CANFrame_Send+0x184>
 800be80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be84:	1e5a      	subs	r2, r3, #1
 800be86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d17f      	bne.n	800bf8e <CANFrame_Send+0x26a>

			while (FrameIndex < CANFRAME_MAX_DATA_LENGTH) {
 800be8e:	e00b      	b.n	800bea8 <CANFrame_Send+0x184>
				TxFrame[FrameIndex] = CANFRAME_FILL_VALUE;
 800be90:	f107 0214 	add.w	r2, r7, #20
 800be94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be98:	4413      	add	r3, r2
 800be9a:	2255      	movs	r2, #85	; 0x55
 800be9c:	701a      	strb	r2, [r3, #0]
				FrameIndex++;
 800be9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bea2:	3301      	adds	r3, #1
 800bea4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			while (FrameIndex < CANFRAME_MAX_DATA_LENGTH) {
 800bea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beac:	2b07      	cmp	r3, #7
 800beae:	d9ef      	bls.n	800be90 <CANFrame_Send+0x16c>
			}
			/*Check last frame------------------------------------------------------*/
			if (i == DataLength - 1) {
 800beb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800beba:	429a      	cmp	r2, r3
 800bebc:	d105      	bne.n	800beca <CANFrame_Send+0x1a6>
				isLastFrame = 1;
 800bebe:	2301      	movs	r3, #1
 800bec0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
				CAN_TxHeader.StdId = ID_NUM | CANFRAME_FRAMETYPE_END;
 800bec4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bec8:	65bb      	str	r3, [r7, #88]	; 0x58

			}
			if (isLastFrame == 0) {
 800beca:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d105      	bne.n	800bede <CANFrame_Send+0x1ba>
				CAN_TxHeader.StdId = ID_NUM | Frame_type;
 800bed2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 800bed6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800beda:	4313      	orrs	r3, r2
 800bedc:	65bb      	str	r3, [r7, #88]	; 0x58
			}
			/*---------send data-----------------------------------------------------------*/

			waitTime = timeout - (osKernelGetTickCount() - startTime);
 800bede:	f7fa fd19 	bl	8006914 <osKernelGetTickCount>
 800bee2:	4602      	mov	r2, r0
 800bee4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bee6:	1a9a      	subs	r2, r3, r2
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	4413      	add	r3, r2
 800beec:	677b      	str	r3, [r7, #116]	; 0x74
			if (waitTime < 0) {
 800beee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	da0e      	bge.n	800bf12 <CANFrame_Send+0x1ee>
				osSemaphoreRelease(canhandler->TxSem);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fb fa5d 	bl	80073b8 <osSemaphoreRelease>
#ifdef CANFRAME_ENABLE_COUNTER
				canhandler->SendFailedCounter++;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800bf04:	1c5a      	adds	r2, r3, #1
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
#endif
				return osErrorTimeout;
 800bf0c:	f06f 0301 	mvn.w	r3, #1
 800bf10:	e056      	b.n	800bfc0 <CANFrame_Send+0x29c>
			}
			Status = CAN_OS_Transmit(canhandler->CAN, &CAN_TxHeader, TxFrame,
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf18:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800bf1c:	f107 0214 	add.w	r2, r7, #20
 800bf20:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	4623      	mov	r3, r4
 800bf28:	f000 f919 	bl	800c15e <CAN_OS_Transmit>
 800bf2c:	6738      	str	r0, [r7, #112]	; 0x70
					&Txmailbox, waitTime);

			if (DataLength > 20)
 800bf2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf32:	2b14      	cmp	r3, #20
 800bf34:	d902      	bls.n	800bf3c <CANFrame_Send+0x218>
				osDelay(0);
 800bf36:	2000      	movs	r0, #0
 800bf38:	f7fa fe62 	bl	8006c00 <osDelay>
			if (Status != osOK) {
 800bf3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00d      	beq.n	800bf5e <CANFrame_Send+0x23a>
				osSemaphoreRelease(canhandler->TxSem);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fb fa36 	bl	80073b8 <osSemaphoreRelease>
#ifdef CANFRAME_ENABLE_COUNTER
				canhandler->SendFailedCounter++;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800bf52:	1c5a      	adds	r2, r3, #1
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
#endif
				return Status;
 800bf5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf5c:	e030      	b.n	800bfc0 <CANFrame_Send+0x29c>
			}
			memset(TxFrame, 0, CANFRAME_MAX_DATA_LENGTH);
 800bf5e:	f107 0314 	add.w	r3, r7, #20
 800bf62:	2208      	movs	r2, #8
 800bf64:	2100      	movs	r1, #0
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 fee6 	bl	800cd38 <memset>
			FrameIndex = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			/*add SenderID for every 1st next frame---------------------------------------*/
			TxFrame[0] = canhandler->nodeID;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	889b      	ldrh	r3, [r3, #4]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	753b      	strb	r3, [r7, #20]
			FrameIndex++;
 800bf7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf7e:	3301      	adds	r3, #1
 800bf80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			Frame_type++;
 800bf84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800bf88:	3301      	adds	r3, #1
 800bf8a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for (int i = 0; i < DataLength; i++) {
 800bf8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf92:	3301      	adds	r3, #1
 800bf94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	f63f af2f 	bhi.w	800be04 <CANFrame_Send+0xe0>
		}
	}
	osSemaphoreRelease(canhandler->TxSem);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fb fa04 	bl	80073b8 <osSemaphoreRelease>
#ifdef CANFRAME_ENABLE_COUNTER
	canhandler->SendSuccessCounter++;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
#endif
	return osOK;
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	379c      	adds	r7, #156	; 0x9c
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd90      	pop	{r4, r7, pc}

0800bfc8 <CANFrame_RegCB>:

int CANFrame_RegCB(CANFrame_HandlerStruct *CANHandler, uint8_t CallbackID,
		void (*Func)(CANFrame_RxHeaderTypedef*, uint8_t*)) {
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	607a      	str	r2, [r7, #4]
 800bfd4:	72fb      	strb	r3, [r7, #11]
	switch (CallbackID) {
 800bfd6:	7afb      	ldrb	r3, [r7, #11]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d104      	bne.n	800bfe6 <CANFrame_RegCB+0x1e>
	case CANFRAME_RCVCPLT_CB_ID:
		CANHandler->ReceiveDataCB = Func;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	61da      	str	r2, [r3, #28]
		return osOK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e001      	b.n	800bfea <CANFrame_RegCB+0x22>
	default:
		return osErrorParameter;
 800bfe6:	f06f 0303 	mvn.w	r3, #3

	}

}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bc80      	pop	{r7}
 800bff2:	4770      	bx	lr

0800bff4 <CANFrame_FilterConfig>:

int CANFrame_FilterConfig(CANFrame_HandlerStruct *Can, uint16_t NodeID,
		uint32_t RxFifo) {
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b08e      	sub	sp, #56	; 0x38
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	460b      	mov	r3, r1
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	817b      	strh	r3, [r7, #10]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 800c002:	2301      	movs	r3, #1
 800c004:	633b      	str	r3, [r7, #48]	; 0x30
	Can_filter_init.FilterBank = Can->usedFilterBank++;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	88db      	ldrh	r3, [r3, #6]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	b291      	uxth	r1, r2
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	80d1      	strh	r1, [r2, #6]
 800c012:	627b      	str	r3, [r7, #36]	; 0x24
	if (Can->usedFilterBank > 14) {
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	88db      	ldrh	r3, [r3, #6]
 800c018:	2b0e      	cmp	r3, #14
 800c01a:	d901      	bls.n	800c020 <CANFrame_FilterConfig+0x2c>
		Error_Handler();
 800c01c:	f7f4 fea2 	bl	8000d64 <Error_Handler>
	}
	Can_filter_init.FilterFIFOAssignment = RxFifo;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterIdHigh = NodeID << 8;
 800c024:	897b      	ldrh	r3, [r7, #10]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdLow = 0x0000;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMaskIdHigh = 0x0F00;
 800c02e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800c032:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 800c034:	2300      	movs	r3, #0
 800c036:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800c038:	2300      	movs	r3, #0
 800c03a:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800c03c:	2301      	movs	r3, #1
 800c03e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (CAN_OS_ConfigFilter(Can->CAN, &Can_filter_init) != HAL_OK) {
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f107 0210 	add.w	r2, r7, #16
 800c048:	4611      	mov	r1, r2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 f830 	bl	800c0b0 <CAN_OS_ConfigFilter>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <CANFrame_FilterConfig+0x66>
		Error_Handler();
 800c056:	f7f4 fe85 	bl	8000d64 <Error_Handler>
	}
	return osOK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3738      	adds	r7, #56	; 0x38
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <CAN_OS_Init>:

#include "CANHandler.h"

int CAN_OS_Init(CAN_OS_HandlerStruct* CANHandler, CAN_HandleTypeDef* hcan)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	HAL_CAN_Stop(hcan);
 800c06e:	6838      	ldr	r0, [r7, #0]
 800c070:	f7f5 fd75 	bl	8001b5e <HAL_CAN_Stop>
	CANHandler->hcan = hcan;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	601a      	str	r2, [r3, #0]
	CANHandler->EventFlag = osEventFlagsNew(NULL);
 800c07a:	2000      	movs	r0, #0
 800c07c:	f7fa fdee 	bl	8006c5c <osEventFlagsNew>
 800c080:	4602      	mov	r2, r0
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	60da      	str	r2, [r3, #12]
	CANHandler->TxSemaphore = osSemaphoreNew(CAN_OS_TxMailBox_Max, CAN_OS_TxMailBox_Max, NULL);
 800c086:	2200      	movs	r2, #0
 800c088:	2103      	movs	r1, #3
 800c08a:	2003      	movs	r0, #3
 800c08c:	f7fb f892 	bl	80071b4 <osSemaphoreNew>
 800c090:	4602      	mov	r2, r0
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	605a      	str	r2, [r3, #4]
	CANHandler->RxSemaphore = osSemaphoreNew(1, 1, NULL);
 800c096:	2200      	movs	r2, #0
 800c098:	2101      	movs	r1, #1
 800c09a:	2001      	movs	r0, #1
 800c09c:	f7fb f88a 	bl	80071b4 <osSemaphoreNew>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <CAN_OS_ConfigFilter>:

int CAN_OS_ConfigFilter(CAN_OS_HandlerStruct* CANHandler,const CAN_FilterTypeDef* Filter)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef Status =  HAL_CAN_ConfigFilter(CANHandler->hcan, Filter);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7f5 fc3f 	bl	8001944 <HAL_CAN_ConfigFilter>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]
	return Status == HAL_OK? osOK: osError;
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <CAN_OS_ConfigFilter+0x24>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e001      	b.n	800c0d8 <CAN_OS_ConfigFilter+0x28>
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <CAN_OS_Start>:
{
	 return HAL_CAN_ActivateNotification(CANHandler->hcan,ActiveITs);
}

int CAN_OS_Start(CAN_OS_HandlerStruct* CANHandler)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
//	CAN_OS_ActivateNotification(CANHandler, CAN_IT_TX_MAILBOX_EMPTY);
	HAL_StatusTypeDef Status = HAL_CAN_Start(CANHandler->hcan);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7f5 fcf2 	bl	8001ad6 <HAL_CAN_Start>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	73fb      	strb	r3, [r7, #15]
	return Status == HAL_OK? osOK: osError;
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <CAN_OS_Start+0x20>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e001      	b.n	800c104 <CAN_OS_Start+0x24>
 800c100:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <CAN_MailboxSync>:

static inline void CAN_MailboxSync(CAN_OS_HandlerStruct* CANHandler)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	uint32_t FreeMailbox;
	uint32_t semCount;
	while(1)
	{
		FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(CANHandler->hcan);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4618      	mov	r0, r3
 800c11a:	f7f5 fe38 	bl	8001d8e <HAL_CAN_GetTxMailboxesFreeLevel>
 800c11e:	60f8      	str	r0, [r7, #12]
		semCount = osSemaphoreGetCount(CANHandler->TxSemaphore);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	4618      	mov	r0, r3
 800c126:	f7fb f99f 	bl	8007468 <osSemaphoreGetCount>
 800c12a:	60b8      	str	r0, [r7, #8]
		if(semCount == FreeMailbox)
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	429a      	cmp	r2, r3
 800c132:	d010      	beq.n	800c156 <CAN_MailboxSync+0x4a>
		{
			return;
		}else if( semCount < FreeMailbox)
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d205      	bcs.n	800c148 <CAN_MailboxSync+0x3c>
		{
			osSemaphoreRelease(CANHandler->TxSemaphore);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	4618      	mov	r0, r3
 800c142:	f7fb f939 	bl	80073b8 <osSemaphoreRelease>
 800c146:	e7e5      	b.n	800c114 <CAN_MailboxSync+0x8>
		}else
		{
			osSemaphoreAcquire(CANHandler->TxSemaphore, 0);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	2100      	movs	r1, #0
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fb f8cc 	bl	80072ec <osSemaphoreAcquire>
		FreeMailbox = HAL_CAN_GetTxMailboxesFreeLevel(CANHandler->hcan);
 800c154:	e7de      	b.n	800c114 <CAN_MailboxSync+0x8>
			return;
 800c156:	bf00      	nop
		}
	}
}
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <CAN_OS_Transmit>:

int CAN_OS_Transmit(CAN_OS_HandlerStruct* CANHandler, const CAN_TxHeaderTypeDef *txHeader, uint8_t* txData, uint32_t* txMailbox, uint32_t timeout)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b086      	sub	sp, #24
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
 800c16a:	603b      	str	r3, [r7, #0]
	int Status;
	uint32_t StartTime = osKernelGetTickCount();
 800c16c:	f7fa fbd2 	bl	8006914 <osKernelGetTickCount>
 800c170:	6178      	str	r0, [r7, #20]
	CAN_MailboxSync(CANHandler);
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f7ff ffca 	bl	800c10c <CAN_MailboxSync>
	Status = osSemaphoreAcquire(CANHandler->TxSemaphore, timeout);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	6a39      	ldr	r1, [r7, #32]
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fb f8b4 	bl	80072ec <osSemaphoreAcquire>
 800c184:	6138      	str	r0, [r7, #16]
	if(Status == osErrorTimeout) return HAL_TIMEOUT;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	f113 0f02 	cmn.w	r3, #2
 800c18c:	d101      	bne.n	800c192 <CAN_OS_Transmit+0x34>
 800c18e:	2303      	movs	r3, #3
 800c190:	e034      	b.n	800c1fc <CAN_OS_Transmit+0x9e>
	Status = HAL_CAN_AddTxMessage(CANHandler->hcan, txHeader, txData, txMailbox);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	68b9      	ldr	r1, [r7, #8]
 800c19c:	f7f5 fd28 	bl	8001bf0 <HAL_CAN_AddTxMessage>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	613b      	str	r3, [r7, #16]

	if (Status != HAL_OK){
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d017      	beq.n	800c1da <CAN_OS_Transmit+0x7c>
		osSemaphoreRelease(CANHandler->TxSemaphore);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7fb f902 	bl	80073b8 <osSemaphoreRelease>
		return osError;
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b8:	e020      	b.n	800c1fc <CAN_OS_Transmit+0x9e>
	}
	while(HAL_CAN_IsTxMessagePending(CANHandler->hcan, *txMailbox))
	{
		if (osKernelGetTickCount() - StartTime > timeout)
 800c1ba:	f7fa fbab 	bl	8006914 <osKernelGetTickCount>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	6a3a      	ldr	r2, [r7, #32]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d207      	bcs.n	800c1da <CAN_OS_Transmit+0x7c>
		{
			osSemaphoreRelease(CANHandler->TxSemaphore);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fb f8f2 	bl	80073b8 <osSemaphoreRelease>
			return osErrorTimeout;
 800c1d4:	f06f 0301 	mvn.w	r3, #1
 800c1d8:	e010      	b.n	800c1fc <CAN_OS_Transmit+0x9e>
	while(HAL_CAN_IsTxMessagePending(CANHandler->hcan, *txMailbox))
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	f7f5 fe06 	bl	8001df6 <HAL_CAN_IsTxMessagePending>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1e4      	bne.n	800c1ba <CAN_OS_Transmit+0x5c>
		}
	}
	osSemaphoreRelease(CANHandler->TxSemaphore);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fb f8df 	bl	80073b8 <osSemaphoreRelease>

	return osOK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3718      	adds	r7, #24
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <CAN_OS_ListenMsg>:
//	int Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
//	return Status > 0 ? osOK : Status;
//}

int CAN_OS_ListenMsg(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint32_t timeout)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b088      	sub	sp, #32
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
	int Status;
	uint32_t activateITS;
	uint8_t waitEvent;
	if (rxFifo == CAN_FILTER_FIFO0){
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d104      	bne.n	800c220 <CAN_OS_ListenMsg+0x1c>
		activateITS = CAN_IT_RX_FIFO0_MSG_PENDING;
 800c216:	2302      	movs	r3, #2
 800c218:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo0Cplt_Event;
 800c21a:	2301      	movs	r3, #1
 800c21c:	76fb      	strb	r3, [r7, #27]
 800c21e:	e00a      	b.n	800c236 <CAN_OS_ListenMsg+0x32>
	}
	else if (rxFifo == CAN_FILTER_FIFO1 ) {
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d104      	bne.n	800c230 <CAN_OS_ListenMsg+0x2c>
		activateITS = CAN_IT_RX_FIFO1_MSG_PENDING;
 800c226:	2310      	movs	r3, #16
 800c228:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo1Cplt_Event;
 800c22a:	2302      	movs	r3, #2
 800c22c:	76fb      	strb	r3, [r7, #27]
 800c22e:	e002      	b.n	800c236 <CAN_OS_ListenMsg+0x32>
	}
	else return osErrorParameter;
 800c230:	f06f 0303 	mvn.w	r3, #3
 800c234:	e024      	b.n	800c280 <CAN_OS_ListenMsg+0x7c>

	Status = HAL_CAN_ActivateNotification(CANHandler->hcan, activateITS);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	69f9      	ldr	r1, [r7, #28]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7f5 ff45 	bl	80020cc <HAL_CAN_ActivateNotification>
 800c242:	4603      	mov	r3, r0
 800c244:	617b      	str	r3, [r7, #20]

	Status = osSemaphoreAcquire(CANHandler->RxSemaphore, timeout);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fb f84d 	bl	80072ec <osSemaphoreAcquire>
 800c252:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <CAN_OS_ListenMsg+0x5a>
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	e010      	b.n	800c280 <CAN_OS_ListenMsg+0x7c>
	Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	68d8      	ldr	r0, [r3, #12]
 800c262:	7ef9      	ldrb	r1, [r7, #27]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f7fa fde6 	bl	8006e38 <osEventFlagsWait>
 800c26c:	4603      	mov	r3, r0
 800c26e:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(CANHandler->RxSemaphore);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	4618      	mov	r0, r3
 800c276:	f7fb f89f 	bl	80073b8 <osSemaphoreRelease>
	return Status > 0 ? osOK : Status;
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800c280:	4618      	mov	r0, r3
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <CAN_OS_GetRxFifoFillLevel>:

int CAN_OS_GetRxFifoFillLevel(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint8_t* FillLevel)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
	*FillLevel = HAL_CAN_GetRxFifoFillLevel(CANHandler->hcan, rxFifo);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7f5 feef 	bl	800207e <HAL_CAN_GetRxFifoFillLevel>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	701a      	strb	r2, [r3, #0]
	return osOK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <CAN_OS_GetRxMessage>:

int CAN_OS_GetRxMessage(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, CAN_RxHeaderTypeDef* rxHeader, uint8_t* rxData)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b086      	sub	sp, #24
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	60f8      	str	r0, [r7, #12]
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	607a      	str	r2, [r7, #4]
 800c2be:	603b      	str	r3, [r7, #0]
	uint8_t Status = HAL_CAN_GetRxMessage(CANHandler->hcan, rxFifo, rxHeader, rxData);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	68b9      	ldr	r1, [r7, #8]
 800c2ca:	f7f5 fdb7 	bl	8001e3c <HAL_CAN_GetRxMessage>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	75fb      	strb	r3, [r7, #23]
	return Status == HAL_OK? osOK: osError;
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d101      	bne.n	800c2dc <CAN_OS_GetRxMessage+0x2a>
 800c2d8:	2300      	movs	r3, #0
 800c2da:	e001      	b.n	800c2e0 <CAN_OS_GetRxMessage+0x2e>
 800c2dc:	f04f 33ff 	mov.w	r3, #4294967295

}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3718      	adds	r7, #24
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <CAN_OS_RxFifo0Cplt_CB>:

void CAN_OS_RxFifo0Cplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	695a      	ldr	r2, [r3, #20]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f022 0202 	bic.w	r2, r2, #2
 800c302:	615a      	str	r2, [r3, #20]
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo0Cplt_Event);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	2101      	movs	r1, #1
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fa fcf8 	bl	8006d00 <osEventFlagsSet>
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <CAN_OS_TxCplt_CB>:
{
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo1Cplt_Event);
}
void CAN_OS_TxCplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CANHandler->TxSemaphore);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	f7fb f847 	bl	80073b8 <osSemaphoreRelease>

}
 800c32a:	bf00      	nop
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <CAN_OS_RegisterCB>:

int CAN_OS_RegisterCB(CAN_OS_HandlerStruct *hcan, uint8_t callbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	60f8      	str	r0, [r7, #12]
 800c33a:	460b      	mov	r3, r1
 800c33c:	607a      	str	r2, [r7, #4]
 800c33e:	72fb      	strb	r3, [r7, #11]
	switch (callbackID)
 800c340:	7afb      	ldrb	r3, [r7, #11]
 800c342:	2b02      	cmp	r3, #2
 800c344:	d039      	beq.n	800c3ba <CAN_OS_RegisterCB+0x88>
 800c346:	2b02      	cmp	r3, #2
 800c348:	dc3f      	bgt.n	800c3ca <CAN_OS_RegisterCB+0x98>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <CAN_OS_RegisterCB+0x22>
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d02b      	beq.n	800c3aa <CAN_OS_RegisterCB+0x78>
 800c352:	e03a      	b.n	800c3ca <CAN_OS_RegisterCB+0x98>
	{
		case CAN_OS_ActivateTxCB_ID:
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID,pCallback);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	2100      	movs	r1, #0
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7f5 fa43 	bl	80017e8 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID,pCallback);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	2101      	movs	r1, #1
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7f5 fa3c 	bl	80017e8 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID,pCallback);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	2102      	movs	r1, #2
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f5 fa35 	bl	80017e8 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_ABORT_CB_ID,pCallback);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	2103      	movs	r1, #3
 800c386:	4618      	mov	r0, r3
 800c388:	f7f5 fa2e 	bl	80017e8 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_ABORT_CB_ID,pCallback);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	2104      	movs	r1, #4
 800c394:	4618      	mov	r0, r3
 800c396:	f7f5 fa27 	bl	80017e8 <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_ABORT_CB_ID,pCallback);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	2105      	movs	r1, #5
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7f5 fa20 	bl	80017e8 <HAL_CAN_RegisterCallback>
			break;
 800c3a8:	e012      	b.n	800c3d0 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo0_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID,pCallback);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	2106      	movs	r1, #6
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7f5 fa18 	bl	80017e8 <HAL_CAN_RegisterCallback>

			break;
 800c3b8:	e00a      	b.n	800c3d0 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo1_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID,pCallback);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	2108      	movs	r1, #8
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7f5 fa10 	bl	80017e8 <HAL_CAN_RegisterCallback>

			break;
 800c3c8:	e002      	b.n	800c3d0 <CAN_OS_RegisterCB+0x9e>
		default:
			return osErrorParameter;
 800c3ca:	f06f 0303 	mvn.w	r3, #3
 800c3ce:	e000      	b.n	800c3d2 <CAN_OS_RegisterCB+0xa0>
			break;
	}
	return osOK;
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <GPIO_TogglePin>:
GPIO_HandlerStruct PC6 = {.Port = GPIOC, .Pin = GPIO_PIN_6};
GPIO_HandlerStruct PC13 = {.Port = GPIOC, .Pin = GPIO_PIN_13};


void GPIO_TogglePin(GPIO_HandlerStruct GPIO)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	463b      	mov	r3, r7
 800c3e2:	e883 0003 	stmia.w	r3, {r0, r1}
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	b292      	uxth	r2, r2
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7f6 fd98 	bl	8002f24 <HAL_GPIO_TogglePin>
}
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <GPIO_WritePin>:

void GPIO_WritePin(GPIO_HandlerStruct GPIO, uint32_t PinState)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	f107 0308 	add.w	r3, r7, #8
 800c404:	e883 0003 	stmia.w	r3, {r0, r1}
 800c408:	607a      	str	r2, [r7, #4]
	return HAL_GPIO_WritePin(GPIO.Port, GPIO.Pin, PinState);
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	b291      	uxth	r1, r2
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	b2d2      	uxtb	r2, r2
 800c414:	4618      	mov	r0, r3
 800c416:	f7f6 fd6d 	bl	8002ef4 <HAL_GPIO_WritePin>
}
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <I2C_OS_Init>:
 */


#include "I2C_Handler.h"
int I2C_OS_Init(I2C_OS_HandlerStruct* i2c, I2C_HandleTypeDef* hi2c)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
	i2c->hi2c = hi2c;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	683a      	ldr	r2, [r7, #0]
 800c42e:	601a      	str	r2, [r3, #0]
//	osSemaphoreNew(1, 0, NULL);
	i2c->Semaphore = osSemaphoreNew(1, 1, NULL);
 800c430:	2200      	movs	r2, #0
 800c432:	2101      	movs	r1, #1
 800c434:	2001      	movs	r0, #1
 800c436:	f7fa febd 	bl	80071b4 <osSemaphoreNew>
 800c43a:	4602      	mov	r2, r0
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	605a      	str	r2, [r3, #4]
	i2c->EventFlag = osEventFlagsNew(NULL);
 800c440:	2000      	movs	r0, #0
 800c442:	f7fa fc0b 	bl	8006c5c <osEventFlagsNew>
 800c446:	4602      	mov	r2, r0
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	609a      	str	r2, [r3, #8]
	return 0;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <I2C_OS_MEM_Write_IT>:
	return Status;
}

int I2C_OS_MEM_Write_IT(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress,uint16_t MemAddress,
		uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t timeout)
{
 800c456:	b590      	push	{r4, r7, lr}
 800c458:	b089      	sub	sp, #36	; 0x24
 800c45a:	af02      	add	r7, sp, #8
 800c45c:	60f8      	str	r0, [r7, #12]
 800c45e:	4608      	mov	r0, r1
 800c460:	4611      	mov	r1, r2
 800c462:	461a      	mov	r2, r3
 800c464:	4603      	mov	r3, r0
 800c466:	817b      	strh	r3, [r7, #10]
 800c468:	460b      	mov	r3, r1
 800c46a:	813b      	strh	r3, [r7, #8]
 800c46c:	4613      	mov	r3, r2
 800c46e:	80fb      	strh	r3, [r7, #6]
	int Status = osOK;
 800c470:	2300      	movs	r3, #0
 800c472:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, timeout);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7fa ff36 	bl	80072ec <osSemaphoreAcquire>
 800c480:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d001      	beq.n	800c48c <I2C_OS_MEM_Write_IT+0x36>
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	e031      	b.n	800c4f0 <I2C_OS_MEM_Write_IT+0x9a>
	osEventFlagsClear(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	2101      	movs	r1, #1
 800c492:	4618      	mov	r0, r3
 800c494:	f7fa fc8c 	bl	8006db0 <osEventFlagsClear>
	Status = HAL_I2C_Mem_Write_IT(i2c->hi2c, DevAddress, MemAddress, MemAddSize, pData, Size);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6818      	ldr	r0, [r3, #0]
 800c49c:	88fc      	ldrh	r4, [r7, #6]
 800c49e:	893a      	ldrh	r2, [r7, #8]
 800c4a0:	8979      	ldrh	r1, [r7, #10]
 800c4a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	f7f6 feac 	bl	8003208 <HAL_I2C_Mem_Write_IT>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	617b      	str	r3, [r7, #20]
	if (Status != 0)
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d009      	beq.n	800c4ce <I2C_OS_MEM_Write_IT+0x78>
	{
		Status = osError;
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c4be:	617b      	str	r3, [r7, #20]
		osSemaphoreRelease(i2c->Semaphore);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fa ff77 	bl	80073b8 <osSemaphoreRelease>
		return Status;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	e010      	b.n	800c4f0 <I2C_OS_MEM_Write_IT+0x9a>
	}
	Status = osEventFlagsWait(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG, osFlagsWaitAll, timeout);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6898      	ldr	r0, [r3, #8]
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	f7fa fcae 	bl	8006e38 <osEventFlagsWait>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(i2c->Semaphore);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fa ff67 	bl	80073b8 <osSemaphoreRelease>
	return Status > 0 ? osOK: Status ;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	371c      	adds	r7, #28
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd90      	pop	{r4, r7, pc}

0800c4f8 <I2C_OS_MEM_Read_IT>:

int I2C_OS_MEM_Read_IT(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress,
		uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t timeout)
{
 800c4f8:	b590      	push	{r4, r7, lr}
 800c4fa:	b089      	sub	sp, #36	; 0x24
 800c4fc:	af02      	add	r7, sp, #8
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	4608      	mov	r0, r1
 800c502:	4611      	mov	r1, r2
 800c504:	461a      	mov	r2, r3
 800c506:	4603      	mov	r3, r0
 800c508:	817b      	strh	r3, [r7, #10]
 800c50a:	460b      	mov	r3, r1
 800c50c:	813b      	strh	r3, [r7, #8]
 800c50e:	4613      	mov	r3, r2
 800c510:	80fb      	strh	r3, [r7, #6]
	int Status = osOK;
 800c512:	2300      	movs	r3, #0
 800c514:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, timeout );
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fa fee5 	bl	80072ec <osSemaphoreAcquire>
 800c522:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d001      	beq.n	800c52e <I2C_OS_MEM_Read_IT+0x36>
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	e031      	b.n	800c592 <I2C_OS_MEM_Read_IT+0x9a>
	osEventFlagsClear(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	2102      	movs	r1, #2
 800c534:	4618      	mov	r0, r3
 800c536:	f7fa fc3b 	bl	8006db0 <osEventFlagsClear>
	Status = HAL_I2C_Mem_Read_IT(i2c->hi2c, DevAddress, MemAddress, MemAddSize, pData, Size);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	88fc      	ldrh	r4, [r7, #6]
 800c540:	893a      	ldrh	r2, [r7, #8]
 800c542:	8979      	ldrh	r1, [r7, #10]
 800c544:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c546:	9301      	str	r3, [sp, #4]
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	4623      	mov	r3, r4
 800c54e:	f7f6 ff07 	bl	8003360 <HAL_I2C_Mem_Read_IT>
 800c552:	4603      	mov	r3, r0
 800c554:	617b      	str	r3, [r7, #20]
	if (Status != 0)
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d009      	beq.n	800c570 <I2C_OS_MEM_Read_IT+0x78>
	{
		Status = osError;
 800c55c:	f04f 33ff 	mov.w	r3, #4294967295
 800c560:	617b      	str	r3, [r7, #20]
		osSemaphoreRelease(i2c->Semaphore);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	4618      	mov	r0, r3
 800c568:	f7fa ff26 	bl	80073b8 <osSemaphoreRelease>
		return Status;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	e010      	b.n	800c592 <I2C_OS_MEM_Read_IT+0x9a>
	}
	Status = osEventFlagsWait(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG, osFlagsWaitAll, timeout);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6898      	ldr	r0, [r3, #8]
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	2201      	movs	r2, #1
 800c578:	2102      	movs	r1, #2
 800c57a:	f7fa fc5d 	bl	8006e38 <osEventFlagsWait>
 800c57e:	4603      	mov	r3, r0
 800c580:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(i2c->Semaphore);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	4618      	mov	r0, r3
 800c588:	f7fa ff16 	bl	80073b8 <osSemaphoreRelease>
	return Status > 0 ? osOK: Status;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800c592:	4618      	mov	r0, r3
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	bd90      	pop	{r4, r7, pc}

0800c59a <I2C_OS_IsDeviceReady>:

int I2C_OS_IsDeviceReady(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress, uint32_t
		Trials, uint32_t Timeout)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b086      	sub	sp, #24
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	603b      	str	r3, [r7, #0]
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	817b      	strh	r3, [r7, #10]
	int Status = osOK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, Timeout);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fa fe99 	bl	80072ec <osSemaphoreAcquire>
 800c5ba:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <I2C_OS_IsDeviceReady+0x2c>
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	e017      	b.n	800c5f6 <I2C_OS_IsDeviceReady+0x5c>
	Status = HAL_I2C_IsDeviceReady(i2c->hi2c, DevAddress, Trials, Timeout);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	8979      	ldrh	r1, [r7, #10]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	f7f6 ff7e 	bl	80034d0 <HAL_I2C_IsDeviceReady>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	617b      	str	r3, [r7, #20]

	if (Status != 0)
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <I2C_OS_IsDeviceReady+0x4c>
	{
		Status = osError;
 800c5de:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e2:	617b      	str	r3, [r7, #20]
 800c5e4:	e001      	b.n	800c5ea <I2C_OS_IsDeviceReady+0x50>
	} else
	{
		Status = osOK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	617b      	str	r3, [r7, #20]
	}
	osSemaphoreRelease(i2c->Semaphore);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fa fee2 	bl	80073b8 <osSemaphoreRelease>
	return Status;
 800c5f4:	697b      	ldr	r3, [r7, #20]

}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <I2C_OS_MEM_RxCpltCB>:
	osSemaphoreRelease(i2c->Semaphore);
	return Status > 0 ? osOK: Status;
}

void I2C_OS_MEM_RxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	2102      	movs	r1, #2
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fa fb77 	bl	8006d00 <osEventFlagsSet>
}
 800c612:	bf00      	nop
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <I2C_OS_MEM_TxCpltCB>:
void I2C_OS_MEM_TxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b082      	sub	sp, #8
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	2101      	movs	r1, #1
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fa fb69 	bl	8006d00 <osEventFlagsSet>
}
 800c62e:	bf00      	nop
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
	...

0800c638 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 800c63c:	4803      	ldr	r0, [pc, #12]	; (800c64c <SyncPrintf_Init+0x14>)
 800c63e:	f7fa fc71 	bl	8006f24 <osMutexNew>
 800c642:	4603      	mov	r3, r0
 800c644:	4a02      	ldr	r2, [pc, #8]	; (800c650 <SyncPrintf_Init+0x18>)
 800c646:	6013      	str	r3, [r2, #0]
}
 800c648:	bf00      	nop
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	0800e1b0 	.word	0x0800e1b0
 800c650:	200034a4 	.word	0x200034a4

0800c654 <SyncPrintf>:

int	SyncPrintf (const char *__restrict format, ...)
{
 800c654:	b40f      	push	{r0, r1, r2, r3}
 800c656:	b580      	push	{r7, lr}
 800c658:	b096      	sub	sp, #88	; 0x58
 800c65a:	af00      	add	r7, sp, #0
#if USE_SyncPrintf == 1
	osMutexAcquire(PrintfMutex, osWaitForever);
 800c65c:	4b1d      	ldr	r3, [pc, #116]	; (800c6d4 <SyncPrintf+0x80>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f04f 31ff 	mov.w	r1, #4294967295
 800c664:	4618      	mov	r0, r3
 800c666:	f7fa fcf7 	bl	8007058 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 800c66a:	2300      	movs	r3, #0
 800c66c:	60bb      	str	r3, [r7, #8]
 800c66e:	f107 030c 	add.w	r3, r7, #12
 800c672:	2242      	movs	r2, #66	; 0x42
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f000 fb5e 	bl	800cd38 <memset>
	size_t size = PrintBufferSize;
 800c67c:	2346      	movs	r3, #70	; 0x46
 800c67e:	607b      	str	r3, [r7, #4]
	va_start(arg,format);
 800c680:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800c684:	653b      	str	r3, [r7, #80]	; 0x50
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 800c686:	1d39      	adds	r1, r7, #4
 800c688:	f107 0008 	add.w	r0, r7, #8
 800c68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c68e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c690:	f000 fb44 	bl	800cd1c <vasniprintf>
 800c694:	6578      	str	r0, [r7, #84]	; 0x54
	va_end(arg);
	if(Output != NULL)
 800c696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d00e      	beq.n	800c6ba <SyncPrintf+0x66>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	230a      	movs	r3, #10
 800c6a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c6a4:	480c      	ldr	r0, [pc, #48]	; (800c6d8 <SyncPrintf+0x84>)
 800c6a6:	f7f9 fb19 	bl	8005cdc <HAL_UART_Transmit>

		if(Output != Buffer)
 800c6aa:	f107 0308 	add.w	r3, r7, #8
 800c6ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d002      	beq.n	800c6ba <SyncPrintf+0x66>
		{

			vPortFree(Output);
 800c6b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c6b6:	f7fe fd55 	bl	800b164 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 800c6ba:	4b06      	ldr	r3, [pc, #24]	; (800c6d4 <SyncPrintf+0x80>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fa fd28 	bl	8007114 <osMutexRelease>

	return size;
 800c6c4:	687b      	ldr	r3, [r7, #4]
#else
	return 0;
#endif
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3758      	adds	r7, #88	; 0x58
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c6d0:	b004      	add	sp, #16
 800c6d2:	4770      	bx	lr
 800c6d4:	200034a4 	.word	0x200034a4
 800c6d8:	200001cc 	.word	0x200001cc

0800c6dc <UART_OS_Init>:
#include <stdarg.h>
#include "string.h"

#define UART_OS_PrintfBufferSize 100
void UART_OS_Init(UART_OS_HandlerStruct* UART, UART_HandleTypeDef* huart)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
	UART->RXMutex = osMutexNew(NULL);
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	f7fa fc1c 	bl	8006f24 <osMutexNew>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	605a      	str	r2, [r3, #4]
	UART->TXMutex = osMutexNew(NULL);
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	f7fa fc16 	bl	8006f24 <osMutexNew>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	609a      	str	r2, [r3, #8]
	UART->EventFlags = osEventFlagsNew(NULL);
 800c6fe:	2000      	movs	r0, #0
 800c700:	f7fa faac 	bl	8006c5c <osEventFlagsNew>
 800c704:	4602      	mov	r2, r0
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	60da      	str	r2, [r3, #12]
	UART->huart = huart;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	601a      	str	r2, [r3, #0]
}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <UART_OS_RcvToIdle_CB>:
	osMutexRelease(UART->RXMutex);
	return Status > 0? osOK: Status;
}

void UART_OS_RcvToIdle_CB(UART_OS_HandlerStruct* UART, uint16_t RcvLen)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	807b      	strh	r3, [r7, #2]
	UART->RxLen = RcvLen;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	887a      	ldrh	r2, [r7, #2]
 800c728:	821a      	strh	r2, [r3, #16]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvToIdleCpl_Event);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	2102      	movs	r1, #2
 800c730:	4618      	mov	r0, r3
 800c732:	f7fa fae5 	bl	8006d00 <osEventFlagsSet>
}
 800c736:	bf00      	nop
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <UART_OS_RxCplt_CB>:

void UART_OS_RxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(UART->EventFlags, UART_OS_RcvCpl_Event);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	2101      	movs	r1, #1
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fa fad7 	bl	8006d00 <osEventFlagsSet>
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <UART_OS_TxCplt_CB>:

void UART_OS_TxCplt_CB(UART_OS_HandlerStruct* UART)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
//	uint32_t flag = osEventFlagsGet(UART->EventFlags);
	osEventFlagsSet(UART->EventFlags, UART_OS_TxCpl_Event);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	2104      	movs	r1, #4
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fa fac9 	bl	8006d00 <osEventFlagsSet>
}
 800c76e:	bf00      	nop
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 800c776:	b480      	push	{r7}
 800c778:	b087      	sub	sp, #28
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	460b      	mov	r3, r1
 800c780:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	e023      	b.n	800c7d4 <crc_8+0x5e>
    crc ^= (*data << 8);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	021b      	lsls	r3, r3, #8
 800c792:	461a      	mov	r2, r3
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	4053      	eors	r3, r2
 800c798:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 800c79a:	2308      	movs	r3, #8
 800c79c:	613b      	str	r3, [r7, #16]
 800c79e:	e010      	b.n	800c7c2 <crc_8+0x4c>
      if (crc & 0x8000)
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 800c7b0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800c7b4:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	613b      	str	r3, [r7, #16]
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1eb      	bne.n	800c7a0 <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	607b      	str	r3, [r7, #4]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1d8      	bne.n	800c78c <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	0a1b      	lsrs	r3, r3, #8
 800c7de:	b2db      	uxtb	r3, r3
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	371c      	adds	r7, #28
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bc80      	pop	{r7}
 800c7e8:	4770      	bx	lr
	...

0800c7ec <DataPack_Split>:
#include "string.h"
#include "stdlib.h"
#include "DataProcess.h"

int DataPack_Split(char* str, uint8_t* ID, char *pValue)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]

	if (str[0] != '#') return 1;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2b23      	cmp	r3, #35	; 0x23
 800c7fe:	d001      	beq.n	800c804 <DataPack_Split+0x18>
 800c800:	2301      	movs	r3, #1
 800c802:	e026      	b.n	800c852 <DataPack_Split+0x66>
	*ID = atoi(str+1);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	3301      	adds	r3, #1
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 f8a7 	bl	800c95c <atoi>
 800c80e:	4603      	mov	r3, r0
 800c810:	b2da      	uxtb	r2, r3
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	701a      	strb	r2, [r3, #0]
	char* tok = strtok(str, "=");
 800c816:	4911      	ldr	r1, [pc, #68]	; (800c85c <DataPack_Split+0x70>)
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f000 fa95 	bl	800cd48 <strtok>
 800c81e:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <DataPack_Split+0x3e>
 800c826:	2301      	movs	r3, #1
 800c828:	e013      	b.n	800c852 <DataPack_Split+0x66>
	tok = strtok(NULL,"=");
 800c82a:	490c      	ldr	r1, [pc, #48]	; (800c85c <DataPack_Split+0x70>)
 800c82c:	2000      	movs	r0, #0
 800c82e:	f000 fa8b 	bl	800cd48 <strtok>
 800c832:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d101      	bne.n	800c83e <DataPack_Split+0x52>
 800c83a:	2301      	movs	r3, #1
 800c83c:	e009      	b.n	800c852 <DataPack_Split+0x66>
	strcpy(pValue, tok);
 800c83e:	6979      	ldr	r1, [r7, #20]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fba5 	bl	800cf90 <strcpy>
	tok = strtok(pValue,"\r");
 800c846:	4906      	ldr	r1, [pc, #24]	; (800c860 <DataPack_Split+0x74>)
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fa7d 	bl	800cd48 <strtok>
 800c84e:	6178      	str	r0, [r7, #20]
	return 0;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3718      	adds	r7, #24
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	0800e0d0 	.word	0x0800e0d0
 800c860:	0800e0d4 	.word	0x0800e0d4

0800c864 <DataPack_GetLEDState>:

int DataPack_GetLEDState(char* str, int* LEDLeft, int* LEDRight, int* LEDFront, int* LEDStop)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
	char* tok = strtok(str, ";");
 800c872:	4922      	ldr	r1, [pc, #136]	; (800c8fc <DataPack_GetLEDState+0x98>)
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 fa67 	bl	800cd48 <strtok>
 800c87a:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <DataPack_GetLEDState+0x22>
 800c882:	2301      	movs	r3, #1
 800c884:	e036      	b.n	800c8f4 <DataPack_GetLEDState+0x90>
	*LEDLeft = atoi(tok);
 800c886:	6978      	ldr	r0, [r7, #20]
 800c888:	f000 f868 	bl	800c95c <atoi>
 800c88c:	4602      	mov	r2, r0
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	601a      	str	r2, [r3, #0]

	tok = strtok(NULL, ";");
 800c892:	491a      	ldr	r1, [pc, #104]	; (800c8fc <DataPack_GetLEDState+0x98>)
 800c894:	2000      	movs	r0, #0
 800c896:	f000 fa57 	bl	800cd48 <strtok>
 800c89a:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <DataPack_GetLEDState+0x42>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e026      	b.n	800c8f4 <DataPack_GetLEDState+0x90>
	*LEDRight = atoi(tok);
 800c8a6:	6978      	ldr	r0, [r7, #20]
 800c8a8:	f000 f858 	bl	800c95c <atoi>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	601a      	str	r2, [r3, #0]

	tok = strtok(NULL, ";");
 800c8b2:	4912      	ldr	r1, [pc, #72]	; (800c8fc <DataPack_GetLEDState+0x98>)
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	f000 fa47 	bl	800cd48 <strtok>
 800c8ba:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <DataPack_GetLEDState+0x62>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e016      	b.n	800c8f4 <DataPack_GetLEDState+0x90>
	*LEDFront = atoi(tok);
 800c8c6:	6978      	ldr	r0, [r7, #20]
 800c8c8:	f000 f848 	bl	800c95c <atoi>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	601a      	str	r2, [r3, #0]

	tok = strtok(NULL, ";");
 800c8d2:	490a      	ldr	r1, [pc, #40]	; (800c8fc <DataPack_GetLEDState+0x98>)
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	f000 fa37 	bl	800cd48 <strtok>
 800c8da:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <DataPack_GetLEDState+0x82>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e006      	b.n	800c8f4 <DataPack_GetLEDState+0x90>
	*LEDStop = atoi(tok);
 800c8e6:	6978      	ldr	r0, [r7, #20]
 800c8e8:	f000 f838 	bl	800c95c <atoi>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	601a      	str	r2, [r3, #0]
	return 0;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3718      	adds	r7, #24
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	0800e0d8 	.word	0x0800e0d8

0800c900 <DataPack_GetSpeakerState>:
int DataPack_GetSpeakerState(char* str, int* SpeakerState)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	*SpeakerState = atoi(str);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f826 	bl	800c95c <atoi>
 800c910:	4602      	mov	r2, r0
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	601a      	str	r2, [r3, #0]
	return 0;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <__assert_func>:
 800c920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c922:	4614      	mov	r4, r2
 800c924:	461a      	mov	r2, r3
 800c926:	4b09      	ldr	r3, [pc, #36]	; (800c94c <__assert_func+0x2c>)
 800c928:	4605      	mov	r5, r0
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68d8      	ldr	r0, [r3, #12]
 800c92e:	b14c      	cbz	r4, 800c944 <__assert_func+0x24>
 800c930:	4b07      	ldr	r3, [pc, #28]	; (800c950 <__assert_func+0x30>)
 800c932:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c936:	9100      	str	r1, [sp, #0]
 800c938:	462b      	mov	r3, r5
 800c93a:	4906      	ldr	r1, [pc, #24]	; (800c954 <__assert_func+0x34>)
 800c93c:	f000 f92c 	bl	800cb98 <fiprintf>
 800c940:	f000 fb3c 	bl	800cfbc <abort>
 800c944:	4b04      	ldr	r3, [pc, #16]	; (800c958 <__assert_func+0x38>)
 800c946:	461c      	mov	r4, r3
 800c948:	e7f3      	b.n	800c932 <__assert_func+0x12>
 800c94a:	bf00      	nop
 800c94c:	200000ac 	.word	0x200000ac
 800c950:	0800e1c0 	.word	0x0800e1c0
 800c954:	0800e1cd 	.word	0x0800e1cd
 800c958:	0800e1fb 	.word	0x0800e1fb

0800c95c <atoi>:
 800c95c:	220a      	movs	r2, #10
 800c95e:	2100      	movs	r1, #0
 800c960:	f000 b87e 	b.w	800ca60 <strtol>

0800c964 <_strtol_l.constprop.0>:
 800c964:	2b01      	cmp	r3, #1
 800c966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96a:	4686      	mov	lr, r0
 800c96c:	4690      	mov	r8, r2
 800c96e:	d001      	beq.n	800c974 <_strtol_l.constprop.0+0x10>
 800c970:	2b24      	cmp	r3, #36	; 0x24
 800c972:	d906      	bls.n	800c982 <_strtol_l.constprop.0+0x1e>
 800c974:	f000 fae0 	bl	800cf38 <__errno>
 800c978:	2316      	movs	r3, #22
 800c97a:	6003      	str	r3, [r0, #0]
 800c97c:	2000      	movs	r0, #0
 800c97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c982:	460d      	mov	r5, r1
 800c984:	4835      	ldr	r0, [pc, #212]	; (800ca5c <_strtol_l.constprop.0+0xf8>)
 800c986:	462a      	mov	r2, r5
 800c988:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c98c:	5d06      	ldrb	r6, [r0, r4]
 800c98e:	f016 0608 	ands.w	r6, r6, #8
 800c992:	d1f8      	bne.n	800c986 <_strtol_l.constprop.0+0x22>
 800c994:	2c2d      	cmp	r4, #45	; 0x2d
 800c996:	d12e      	bne.n	800c9f6 <_strtol_l.constprop.0+0x92>
 800c998:	2601      	movs	r6, #1
 800c99a:	782c      	ldrb	r4, [r5, #0]
 800c99c:	1c95      	adds	r5, r2, #2
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d057      	beq.n	800ca52 <_strtol_l.constprop.0+0xee>
 800c9a2:	2b10      	cmp	r3, #16
 800c9a4:	d109      	bne.n	800c9ba <_strtol_l.constprop.0+0x56>
 800c9a6:	2c30      	cmp	r4, #48	; 0x30
 800c9a8:	d107      	bne.n	800c9ba <_strtol_l.constprop.0+0x56>
 800c9aa:	782a      	ldrb	r2, [r5, #0]
 800c9ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c9b0:	2a58      	cmp	r2, #88	; 0x58
 800c9b2:	d149      	bne.n	800ca48 <_strtol_l.constprop.0+0xe4>
 800c9b4:	2310      	movs	r3, #16
 800c9b6:	786c      	ldrb	r4, [r5, #1]
 800c9b8:	3502      	adds	r5, #2
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800c9c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c9c4:	fbbc f9f3 	udiv	r9, ip, r3
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	fb03 ca19 	mls	sl, r3, r9, ip
 800c9ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c9d2:	2f09      	cmp	r7, #9
 800c9d4:	d814      	bhi.n	800ca00 <_strtol_l.constprop.0+0x9c>
 800c9d6:	463c      	mov	r4, r7
 800c9d8:	42a3      	cmp	r3, r4
 800c9da:	dd20      	ble.n	800ca1e <_strtol_l.constprop.0+0xba>
 800c9dc:	1c57      	adds	r7, r2, #1
 800c9de:	d007      	beq.n	800c9f0 <_strtol_l.constprop.0+0x8c>
 800c9e0:	4581      	cmp	r9, r0
 800c9e2:	d319      	bcc.n	800ca18 <_strtol_l.constprop.0+0xb4>
 800c9e4:	d101      	bne.n	800c9ea <_strtol_l.constprop.0+0x86>
 800c9e6:	45a2      	cmp	sl, r4
 800c9e8:	db16      	blt.n	800ca18 <_strtol_l.constprop.0+0xb4>
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	fb00 4003 	mla	r0, r0, r3, r4
 800c9f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9f4:	e7eb      	b.n	800c9ce <_strtol_l.constprop.0+0x6a>
 800c9f6:	2c2b      	cmp	r4, #43	; 0x2b
 800c9f8:	bf04      	itt	eq
 800c9fa:	782c      	ldrbeq	r4, [r5, #0]
 800c9fc:	1c95      	addeq	r5, r2, #2
 800c9fe:	e7ce      	b.n	800c99e <_strtol_l.constprop.0+0x3a>
 800ca00:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ca04:	2f19      	cmp	r7, #25
 800ca06:	d801      	bhi.n	800ca0c <_strtol_l.constprop.0+0xa8>
 800ca08:	3c37      	subs	r4, #55	; 0x37
 800ca0a:	e7e5      	b.n	800c9d8 <_strtol_l.constprop.0+0x74>
 800ca0c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ca10:	2f19      	cmp	r7, #25
 800ca12:	d804      	bhi.n	800ca1e <_strtol_l.constprop.0+0xba>
 800ca14:	3c57      	subs	r4, #87	; 0x57
 800ca16:	e7df      	b.n	800c9d8 <_strtol_l.constprop.0+0x74>
 800ca18:	f04f 32ff 	mov.w	r2, #4294967295
 800ca1c:	e7e8      	b.n	800c9f0 <_strtol_l.constprop.0+0x8c>
 800ca1e:	1c53      	adds	r3, r2, #1
 800ca20:	d108      	bne.n	800ca34 <_strtol_l.constprop.0+0xd0>
 800ca22:	2322      	movs	r3, #34	; 0x22
 800ca24:	4660      	mov	r0, ip
 800ca26:	f8ce 3000 	str.w	r3, [lr]
 800ca2a:	f1b8 0f00 	cmp.w	r8, #0
 800ca2e:	d0a6      	beq.n	800c97e <_strtol_l.constprop.0+0x1a>
 800ca30:	1e69      	subs	r1, r5, #1
 800ca32:	e006      	b.n	800ca42 <_strtol_l.constprop.0+0xde>
 800ca34:	b106      	cbz	r6, 800ca38 <_strtol_l.constprop.0+0xd4>
 800ca36:	4240      	negs	r0, r0
 800ca38:	f1b8 0f00 	cmp.w	r8, #0
 800ca3c:	d09f      	beq.n	800c97e <_strtol_l.constprop.0+0x1a>
 800ca3e:	2a00      	cmp	r2, #0
 800ca40:	d1f6      	bne.n	800ca30 <_strtol_l.constprop.0+0xcc>
 800ca42:	f8c8 1000 	str.w	r1, [r8]
 800ca46:	e79a      	b.n	800c97e <_strtol_l.constprop.0+0x1a>
 800ca48:	2430      	movs	r4, #48	; 0x30
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1b5      	bne.n	800c9ba <_strtol_l.constprop.0+0x56>
 800ca4e:	2308      	movs	r3, #8
 800ca50:	e7b3      	b.n	800c9ba <_strtol_l.constprop.0+0x56>
 800ca52:	2c30      	cmp	r4, #48	; 0x30
 800ca54:	d0a9      	beq.n	800c9aa <_strtol_l.constprop.0+0x46>
 800ca56:	230a      	movs	r3, #10
 800ca58:	e7af      	b.n	800c9ba <_strtol_l.constprop.0+0x56>
 800ca5a:	bf00      	nop
 800ca5c:	0800e1fd 	.word	0x0800e1fd

0800ca60 <strtol>:
 800ca60:	4613      	mov	r3, r2
 800ca62:	460a      	mov	r2, r1
 800ca64:	4601      	mov	r1, r0
 800ca66:	4802      	ldr	r0, [pc, #8]	; (800ca70 <strtol+0x10>)
 800ca68:	6800      	ldr	r0, [r0, #0]
 800ca6a:	f7ff bf7b 	b.w	800c964 <_strtol_l.constprop.0>
 800ca6e:	bf00      	nop
 800ca70:	200000ac 	.word	0x200000ac

0800ca74 <std>:
 800ca74:	2300      	movs	r3, #0
 800ca76:	b510      	push	{r4, lr}
 800ca78:	4604      	mov	r4, r0
 800ca7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca82:	6083      	str	r3, [r0, #8]
 800ca84:	8181      	strh	r1, [r0, #12]
 800ca86:	6643      	str	r3, [r0, #100]	; 0x64
 800ca88:	81c2      	strh	r2, [r0, #14]
 800ca8a:	6183      	str	r3, [r0, #24]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	2208      	movs	r2, #8
 800ca90:	305c      	adds	r0, #92	; 0x5c
 800ca92:	f000 f951 	bl	800cd38 <memset>
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <std+0x38>)
 800ca98:	6224      	str	r4, [r4, #32]
 800ca9a:	6263      	str	r3, [r4, #36]	; 0x24
 800ca9c:	4b04      	ldr	r3, [pc, #16]	; (800cab0 <std+0x3c>)
 800ca9e:	62a3      	str	r3, [r4, #40]	; 0x28
 800caa0:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <std+0x40>)
 800caa2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caa4:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <std+0x44>)
 800caa6:	6323      	str	r3, [r4, #48]	; 0x30
 800caa8:	bd10      	pop	{r4, pc}
 800caaa:	bf00      	nop
 800caac:	0800cc39 	.word	0x0800cc39
 800cab0:	0800cc5b 	.word	0x0800cc5b
 800cab4:	0800cc93 	.word	0x0800cc93
 800cab8:	0800ccb7 	.word	0x0800ccb7

0800cabc <stdio_exit_handler>:
 800cabc:	4a02      	ldr	r2, [pc, #8]	; (800cac8 <stdio_exit_handler+0xc>)
 800cabe:	4903      	ldr	r1, [pc, #12]	; (800cacc <stdio_exit_handler+0x10>)
 800cac0:	4803      	ldr	r0, [pc, #12]	; (800cad0 <stdio_exit_handler+0x14>)
 800cac2:	f000 b87b 	b.w	800cbbc <_fwalk_sglue>
 800cac6:	bf00      	nop
 800cac8:	20000054 	.word	0x20000054
 800cacc:	0800db25 	.word	0x0800db25
 800cad0:	20000060 	.word	0x20000060

0800cad4 <cleanup_stdio>:
 800cad4:	6841      	ldr	r1, [r0, #4]
 800cad6:	4b0c      	ldr	r3, [pc, #48]	; (800cb08 <cleanup_stdio+0x34>)
 800cad8:	b510      	push	{r4, lr}
 800cada:	4299      	cmp	r1, r3
 800cadc:	4604      	mov	r4, r0
 800cade:	d001      	beq.n	800cae4 <cleanup_stdio+0x10>
 800cae0:	f001 f820 	bl	800db24 <_fflush_r>
 800cae4:	68a1      	ldr	r1, [r4, #8]
 800cae6:	4b09      	ldr	r3, [pc, #36]	; (800cb0c <cleanup_stdio+0x38>)
 800cae8:	4299      	cmp	r1, r3
 800caea:	d002      	beq.n	800caf2 <cleanup_stdio+0x1e>
 800caec:	4620      	mov	r0, r4
 800caee:	f001 f819 	bl	800db24 <_fflush_r>
 800caf2:	68e1      	ldr	r1, [r4, #12]
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <cleanup_stdio+0x3c>)
 800caf6:	4299      	cmp	r1, r3
 800caf8:	d004      	beq.n	800cb04 <cleanup_stdio+0x30>
 800cafa:	4620      	mov	r0, r4
 800cafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb00:	f001 b810 	b.w	800db24 <_fflush_r>
 800cb04:	bd10      	pop	{r4, pc}
 800cb06:	bf00      	nop
 800cb08:	200034a8 	.word	0x200034a8
 800cb0c:	20003510 	.word	0x20003510
 800cb10:	20003578 	.word	0x20003578

0800cb14 <global_stdio_init.part.0>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <global_stdio_init.part.0+0x30>)
 800cb18:	4c0b      	ldr	r4, [pc, #44]	; (800cb48 <global_stdio_init.part.0+0x34>)
 800cb1a:	4a0c      	ldr	r2, [pc, #48]	; (800cb4c <global_stdio_init.part.0+0x38>)
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	2104      	movs	r1, #4
 800cb22:	2200      	movs	r2, #0
 800cb24:	f7ff ffa6 	bl	800ca74 <std>
 800cb28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	2109      	movs	r1, #9
 800cb30:	f7ff ffa0 	bl	800ca74 <std>
 800cb34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cb38:	2202      	movs	r2, #2
 800cb3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb3e:	2112      	movs	r1, #18
 800cb40:	f7ff bf98 	b.w	800ca74 <std>
 800cb44:	200035e0 	.word	0x200035e0
 800cb48:	200034a8 	.word	0x200034a8
 800cb4c:	0800cabd 	.word	0x0800cabd

0800cb50 <__sfp_lock_acquire>:
 800cb50:	4801      	ldr	r0, [pc, #4]	; (800cb58 <__sfp_lock_acquire+0x8>)
 800cb52:	f000 ba1b 	b.w	800cf8c <__retarget_lock_acquire_recursive>
 800cb56:	bf00      	nop
 800cb58:	200035e9 	.word	0x200035e9

0800cb5c <__sfp_lock_release>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	; (800cb64 <__sfp_lock_release+0x8>)
 800cb5e:	f000 ba16 	b.w	800cf8e <__retarget_lock_release_recursive>
 800cb62:	bf00      	nop
 800cb64:	200035e9 	.word	0x200035e9

0800cb68 <__sinit>:
 800cb68:	b510      	push	{r4, lr}
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	f7ff fff0 	bl	800cb50 <__sfp_lock_acquire>
 800cb70:	6a23      	ldr	r3, [r4, #32]
 800cb72:	b11b      	cbz	r3, 800cb7c <__sinit+0x14>
 800cb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb78:	f7ff bff0 	b.w	800cb5c <__sfp_lock_release>
 800cb7c:	4b04      	ldr	r3, [pc, #16]	; (800cb90 <__sinit+0x28>)
 800cb7e:	6223      	str	r3, [r4, #32]
 800cb80:	4b04      	ldr	r3, [pc, #16]	; (800cb94 <__sinit+0x2c>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1f5      	bne.n	800cb74 <__sinit+0xc>
 800cb88:	f7ff ffc4 	bl	800cb14 <global_stdio_init.part.0>
 800cb8c:	e7f2      	b.n	800cb74 <__sinit+0xc>
 800cb8e:	bf00      	nop
 800cb90:	0800cad5 	.word	0x0800cad5
 800cb94:	200035e0 	.word	0x200035e0

0800cb98 <fiprintf>:
 800cb98:	b40e      	push	{r1, r2, r3}
 800cb9a:	b503      	push	{r0, r1, lr}
 800cb9c:	4601      	mov	r1, r0
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <fiprintf+0x20>)
 800cba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba6:	6800      	ldr	r0, [r0, #0]
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	f000 fc8b 	bl	800d4c4 <_vfiprintf_r>
 800cbae:	b002      	add	sp, #8
 800cbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb4:	b003      	add	sp, #12
 800cbb6:	4770      	bx	lr
 800cbb8:	200000ac 	.word	0x200000ac

0800cbbc <_fwalk_sglue>:
 800cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	4688      	mov	r8, r1
 800cbc4:	4614      	mov	r4, r2
 800cbc6:	2600      	movs	r6, #0
 800cbc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbcc:	f1b9 0901 	subs.w	r9, r9, #1
 800cbd0:	d505      	bpl.n	800cbde <_fwalk_sglue+0x22>
 800cbd2:	6824      	ldr	r4, [r4, #0]
 800cbd4:	2c00      	cmp	r4, #0
 800cbd6:	d1f7      	bne.n	800cbc8 <_fwalk_sglue+0xc>
 800cbd8:	4630      	mov	r0, r6
 800cbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbde:	89ab      	ldrh	r3, [r5, #12]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d907      	bls.n	800cbf4 <_fwalk_sglue+0x38>
 800cbe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	d003      	beq.n	800cbf4 <_fwalk_sglue+0x38>
 800cbec:	4629      	mov	r1, r5
 800cbee:	4638      	mov	r0, r7
 800cbf0:	47c0      	blx	r8
 800cbf2:	4306      	orrs	r6, r0
 800cbf4:	3568      	adds	r5, #104	; 0x68
 800cbf6:	e7e9      	b.n	800cbcc <_fwalk_sglue+0x10>

0800cbf8 <siprintf>:
 800cbf8:	b40e      	push	{r1, r2, r3}
 800cbfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbfe:	b500      	push	{lr}
 800cc00:	b09c      	sub	sp, #112	; 0x70
 800cc02:	ab1d      	add	r3, sp, #116	; 0x74
 800cc04:	9002      	str	r0, [sp, #8]
 800cc06:	9006      	str	r0, [sp, #24]
 800cc08:	9107      	str	r1, [sp, #28]
 800cc0a:	9104      	str	r1, [sp, #16]
 800cc0c:	4808      	ldr	r0, [pc, #32]	; (800cc30 <siprintf+0x38>)
 800cc0e:	4909      	ldr	r1, [pc, #36]	; (800cc34 <siprintf+0x3c>)
 800cc10:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc14:	9105      	str	r1, [sp, #20]
 800cc16:	6800      	ldr	r0, [r0, #0]
 800cc18:	a902      	add	r1, sp, #8
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	f000 fb2c 	bl	800d278 <_svfiprintf_r>
 800cc20:	2200      	movs	r2, #0
 800cc22:	9b02      	ldr	r3, [sp, #8]
 800cc24:	701a      	strb	r2, [r3, #0]
 800cc26:	b01c      	add	sp, #112	; 0x70
 800cc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc2c:	b003      	add	sp, #12
 800cc2e:	4770      	bx	lr
 800cc30:	200000ac 	.word	0x200000ac
 800cc34:	ffff0208 	.word	0xffff0208

0800cc38 <__sread>:
 800cc38:	b510      	push	{r4, lr}
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc40:	f000 f956 	bl	800cef0 <_read_r>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	bfab      	itete	ge
 800cc48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc4a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc4c:	181b      	addge	r3, r3, r0
 800cc4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc52:	bfac      	ite	ge
 800cc54:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc56:	81a3      	strhlt	r3, [r4, #12]
 800cc58:	bd10      	pop	{r4, pc}

0800cc5a <__swrite>:
 800cc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5e:	461f      	mov	r7, r3
 800cc60:	898b      	ldrh	r3, [r1, #12]
 800cc62:	4605      	mov	r5, r0
 800cc64:	05db      	lsls	r3, r3, #23
 800cc66:	460c      	mov	r4, r1
 800cc68:	4616      	mov	r6, r2
 800cc6a:	d505      	bpl.n	800cc78 <__swrite+0x1e>
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc74:	f000 f92a 	bl	800cecc <_lseek_r>
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	4632      	mov	r2, r6
 800cc7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc80:	81a3      	strh	r3, [r4, #12]
 800cc82:	4628      	mov	r0, r5
 800cc84:	463b      	mov	r3, r7
 800cc86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8e:	f000 b941 	b.w	800cf14 <_write_r>

0800cc92 <__sseek>:
 800cc92:	b510      	push	{r4, lr}
 800cc94:	460c      	mov	r4, r1
 800cc96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc9a:	f000 f917 	bl	800cecc <_lseek_r>
 800cc9e:	1c43      	adds	r3, r0, #1
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	bf15      	itete	ne
 800cca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccae:	81a3      	strheq	r3, [r4, #12]
 800ccb0:	bf18      	it	ne
 800ccb2:	81a3      	strhne	r3, [r4, #12]
 800ccb4:	bd10      	pop	{r4, pc}

0800ccb6 <__sclose>:
 800ccb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccba:	f000 b8a1 	b.w	800ce00 <_close_r>

0800ccbe <_vasniprintf_r>:
 800ccbe:	b530      	push	{r4, r5, lr}
 800ccc0:	4615      	mov	r5, r2
 800ccc2:	b09b      	sub	sp, #108	; 0x6c
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	682c      	ldr	r4, [r5, #0]
 800ccc8:	b189      	cbz	r1, 800ccee <_vasniprintf_r+0x30>
 800ccca:	2c00      	cmp	r4, #0
 800cccc:	bf12      	itee	ne
 800ccce:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 800ccd2:	f44f 7322 	moveq.w	r3, #648	; 0x288
 800ccd6:	2100      	moveq	r1, #0
 800ccd8:	2c00      	cmp	r4, #0
 800ccda:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ccde:	9100      	str	r1, [sp, #0]
 800cce0:	9104      	str	r1, [sp, #16]
 800cce2:	da08      	bge.n	800ccf6 <_vasniprintf_r+0x38>
 800cce4:	238b      	movs	r3, #139	; 0x8b
 800cce6:	6003      	str	r3, [r0, #0]
 800cce8:	2000      	movs	r0, #0
 800ccea:	b01b      	add	sp, #108	; 0x6c
 800ccec:	bd30      	pop	{r4, r5, pc}
 800ccee:	f44f 7322 	mov.w	r3, #648	; 0x288
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	e7f0      	b.n	800ccd8 <_vasniprintf_r+0x1a>
 800ccf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccfa:	4669      	mov	r1, sp
 800ccfc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cd00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cd02:	9402      	str	r4, [sp, #8]
 800cd04:	9405      	str	r4, [sp, #20]
 800cd06:	f000 fab7 	bl	800d278 <_svfiprintf_r>
 800cd0a:	1e03      	subs	r3, r0, #0
 800cd0c:	f04f 0000 	mov.w	r0, #0
 800cd10:	bfa1      	itttt	ge
 800cd12:	602b      	strge	r3, [r5, #0]
 800cd14:	9b00      	ldrge	r3, [sp, #0]
 800cd16:	7018      	strbge	r0, [r3, #0]
 800cd18:	9804      	ldrge	r0, [sp, #16]
 800cd1a:	e7e6      	b.n	800ccea <_vasniprintf_r+0x2c>

0800cd1c <vasniprintf>:
 800cd1c:	b507      	push	{r0, r1, r2, lr}
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	4613      	mov	r3, r2
 800cd22:	460a      	mov	r2, r1
 800cd24:	4601      	mov	r1, r0
 800cd26:	4803      	ldr	r0, [pc, #12]	; (800cd34 <vasniprintf+0x18>)
 800cd28:	6800      	ldr	r0, [r0, #0]
 800cd2a:	f7ff ffc8 	bl	800ccbe <_vasniprintf_r>
 800cd2e:	b003      	add	sp, #12
 800cd30:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd34:	200000ac 	.word	0x200000ac

0800cd38 <memset>:
 800cd38:	4603      	mov	r3, r0
 800cd3a:	4402      	add	r2, r0
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d100      	bne.n	800cd42 <memset+0xa>
 800cd40:	4770      	bx	lr
 800cd42:	f803 1b01 	strb.w	r1, [r3], #1
 800cd46:	e7f9      	b.n	800cd3c <memset+0x4>

0800cd48 <strtok>:
 800cd48:	4b16      	ldr	r3, [pc, #88]	; (800cda4 <strtok+0x5c>)
 800cd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4e:	681f      	ldr	r7, [r3, #0]
 800cd50:	4605      	mov	r5, r0
 800cd52:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800cd54:	460e      	mov	r6, r1
 800cd56:	b9ec      	cbnz	r4, 800cd94 <strtok+0x4c>
 800cd58:	2050      	movs	r0, #80	; 0x50
 800cd5a:	f000 f97f 	bl	800d05c <malloc>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	6478      	str	r0, [r7, #68]	; 0x44
 800cd62:	b920      	cbnz	r0, 800cd6e <strtok+0x26>
 800cd64:	215b      	movs	r1, #91	; 0x5b
 800cd66:	4b10      	ldr	r3, [pc, #64]	; (800cda8 <strtok+0x60>)
 800cd68:	4810      	ldr	r0, [pc, #64]	; (800cdac <strtok+0x64>)
 800cd6a:	f7ff fdd9 	bl	800c920 <__assert_func>
 800cd6e:	e9c0 4400 	strd	r4, r4, [r0]
 800cd72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cd76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cd7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800cd7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800cd82:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800cd86:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800cd8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800cd8e:	6184      	str	r4, [r0, #24]
 800cd90:	7704      	strb	r4, [r0, #28]
 800cd92:	6244      	str	r4, [r0, #36]	; 0x24
 800cd94:	4631      	mov	r1, r6
 800cd96:	4628      	mov	r0, r5
 800cd98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cda0:	f000 b806 	b.w	800cdb0 <__strtok_r>
 800cda4:	200000ac 	.word	0x200000ac
 800cda8:	0800e2fd 	.word	0x0800e2fd
 800cdac:	0800e314 	.word	0x0800e314

0800cdb0 <__strtok_r>:
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	b908      	cbnz	r0, 800cdb8 <__strtok_r+0x8>
 800cdb4:	6810      	ldr	r0, [r2, #0]
 800cdb6:	b188      	cbz	r0, 800cddc <__strtok_r+0x2c>
 800cdb8:	4604      	mov	r4, r0
 800cdba:	460f      	mov	r7, r1
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cdc2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cdc6:	b91e      	cbnz	r6, 800cdd0 <__strtok_r+0x20>
 800cdc8:	b965      	cbnz	r5, 800cde4 <__strtok_r+0x34>
 800cdca:	4628      	mov	r0, r5
 800cdcc:	6015      	str	r5, [r2, #0]
 800cdce:	e005      	b.n	800cddc <__strtok_r+0x2c>
 800cdd0:	42b5      	cmp	r5, r6
 800cdd2:	d1f6      	bne.n	800cdc2 <__strtok_r+0x12>
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1f0      	bne.n	800cdba <__strtok_r+0xa>
 800cdd8:	6014      	str	r4, [r2, #0]
 800cdda:	7003      	strb	r3, [r0, #0]
 800cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdde:	461c      	mov	r4, r3
 800cde0:	e00c      	b.n	800cdfc <__strtok_r+0x4c>
 800cde2:	b915      	cbnz	r5, 800cdea <__strtok_r+0x3a>
 800cde4:	460e      	mov	r6, r1
 800cde6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cdea:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cdee:	42ab      	cmp	r3, r5
 800cdf0:	d1f7      	bne.n	800cde2 <__strtok_r+0x32>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d0f3      	beq.n	800cdde <__strtok_r+0x2e>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cdfc:	6014      	str	r4, [r2, #0]
 800cdfe:	e7ed      	b.n	800cddc <__strtok_r+0x2c>

0800ce00 <_close_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	2300      	movs	r3, #0
 800ce04:	4d05      	ldr	r5, [pc, #20]	; (800ce1c <_close_r+0x1c>)
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	f7f4 fab2 	bl	8001374 <_close>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d102      	bne.n	800ce1a <_close_r+0x1a>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	b103      	cbz	r3, 800ce1a <_close_r+0x1a>
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	200035e4 	.word	0x200035e4

0800ce20 <_reclaim_reent>:
 800ce20:	4b29      	ldr	r3, [pc, #164]	; (800cec8 <_reclaim_reent+0xa8>)
 800ce22:	b570      	push	{r4, r5, r6, lr}
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4604      	mov	r4, r0
 800ce28:	4283      	cmp	r3, r0
 800ce2a:	d04b      	beq.n	800cec4 <_reclaim_reent+0xa4>
 800ce2c:	69c3      	ldr	r3, [r0, #28]
 800ce2e:	b143      	cbz	r3, 800ce42 <_reclaim_reent+0x22>
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d144      	bne.n	800cec0 <_reclaim_reent+0xa0>
 800ce36:	69e3      	ldr	r3, [r4, #28]
 800ce38:	6819      	ldr	r1, [r3, #0]
 800ce3a:	b111      	cbz	r1, 800ce42 <_reclaim_reent+0x22>
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f000 f8c5 	bl	800cfcc <_free_r>
 800ce42:	6961      	ldr	r1, [r4, #20]
 800ce44:	b111      	cbz	r1, 800ce4c <_reclaim_reent+0x2c>
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 f8c0 	bl	800cfcc <_free_r>
 800ce4c:	69e1      	ldr	r1, [r4, #28]
 800ce4e:	b111      	cbz	r1, 800ce56 <_reclaim_reent+0x36>
 800ce50:	4620      	mov	r0, r4
 800ce52:	f000 f8bb 	bl	800cfcc <_free_r>
 800ce56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ce58:	b111      	cbz	r1, 800ce60 <_reclaim_reent+0x40>
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 f8b6 	bl	800cfcc <_free_r>
 800ce60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce62:	b111      	cbz	r1, 800ce6a <_reclaim_reent+0x4a>
 800ce64:	4620      	mov	r0, r4
 800ce66:	f000 f8b1 	bl	800cfcc <_free_r>
 800ce6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce6c:	b111      	cbz	r1, 800ce74 <_reclaim_reent+0x54>
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f000 f8ac 	bl	800cfcc <_free_r>
 800ce74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce76:	b111      	cbz	r1, 800ce7e <_reclaim_reent+0x5e>
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f000 f8a7 	bl	800cfcc <_free_r>
 800ce7e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ce80:	b111      	cbz	r1, 800ce88 <_reclaim_reent+0x68>
 800ce82:	4620      	mov	r0, r4
 800ce84:	f000 f8a2 	bl	800cfcc <_free_r>
 800ce88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ce8a:	b111      	cbz	r1, 800ce92 <_reclaim_reent+0x72>
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 f89d 	bl	800cfcc <_free_r>
 800ce92:	6a23      	ldr	r3, [r4, #32]
 800ce94:	b1b3      	cbz	r3, 800cec4 <_reclaim_reent+0xa4>
 800ce96:	4620      	mov	r0, r4
 800ce98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce9c:	4718      	bx	r3
 800ce9e:	5949      	ldr	r1, [r1, r5]
 800cea0:	b941      	cbnz	r1, 800ceb4 <_reclaim_reent+0x94>
 800cea2:	3504      	adds	r5, #4
 800cea4:	69e3      	ldr	r3, [r4, #28]
 800cea6:	2d80      	cmp	r5, #128	; 0x80
 800cea8:	68d9      	ldr	r1, [r3, #12]
 800ceaa:	d1f8      	bne.n	800ce9e <_reclaim_reent+0x7e>
 800ceac:	4620      	mov	r0, r4
 800ceae:	f000 f88d 	bl	800cfcc <_free_r>
 800ceb2:	e7c0      	b.n	800ce36 <_reclaim_reent+0x16>
 800ceb4:	680e      	ldr	r6, [r1, #0]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 f888 	bl	800cfcc <_free_r>
 800cebc:	4631      	mov	r1, r6
 800cebe:	e7ef      	b.n	800cea0 <_reclaim_reent+0x80>
 800cec0:	2500      	movs	r5, #0
 800cec2:	e7ef      	b.n	800cea4 <_reclaim_reent+0x84>
 800cec4:	bd70      	pop	{r4, r5, r6, pc}
 800cec6:	bf00      	nop
 800cec8:	200000ac 	.word	0x200000ac

0800cecc <_lseek_r>:
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	4604      	mov	r4, r0
 800ced0:	4608      	mov	r0, r1
 800ced2:	4611      	mov	r1, r2
 800ced4:	2200      	movs	r2, #0
 800ced6:	4d05      	ldr	r5, [pc, #20]	; (800ceec <_lseek_r+0x20>)
 800ced8:	602a      	str	r2, [r5, #0]
 800ceda:	461a      	mov	r2, r3
 800cedc:	f7f4 fa6e 	bl	80013bc <_lseek>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d102      	bne.n	800ceea <_lseek_r+0x1e>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	b103      	cbz	r3, 800ceea <_lseek_r+0x1e>
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	200035e4 	.word	0x200035e4

0800cef0 <_read_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	4611      	mov	r1, r2
 800cef8:	2200      	movs	r2, #0
 800cefa:	4d05      	ldr	r5, [pc, #20]	; (800cf10 <_read_r+0x20>)
 800cefc:	602a      	str	r2, [r5, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	f7f4 f9ff 	bl	8001302 <_read>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_read_r+0x1e>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_read_r+0x1e>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	200035e4 	.word	0x200035e4

0800cf14 <_write_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	4d05      	ldr	r5, [pc, #20]	; (800cf34 <_write_r+0x20>)
 800cf20:	602a      	str	r2, [r5, #0]
 800cf22:	461a      	mov	r2, r3
 800cf24:	f7f4 fa0a 	bl	800133c <_write>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_write_r+0x1e>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_write_r+0x1e>
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	200035e4 	.word	0x200035e4

0800cf38 <__errno>:
 800cf38:	4b01      	ldr	r3, [pc, #4]	; (800cf40 <__errno+0x8>)
 800cf3a:	6818      	ldr	r0, [r3, #0]
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	200000ac 	.word	0x200000ac

0800cf44 <__libc_init_array>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	2600      	movs	r6, #0
 800cf48:	4d0c      	ldr	r5, [pc, #48]	; (800cf7c <__libc_init_array+0x38>)
 800cf4a:	4c0d      	ldr	r4, [pc, #52]	; (800cf80 <__libc_init_array+0x3c>)
 800cf4c:	1b64      	subs	r4, r4, r5
 800cf4e:	10a4      	asrs	r4, r4, #2
 800cf50:	42a6      	cmp	r6, r4
 800cf52:	d109      	bne.n	800cf68 <__libc_init_array+0x24>
 800cf54:	f000 ffda 	bl	800df0c <_init>
 800cf58:	2600      	movs	r6, #0
 800cf5a:	4d0a      	ldr	r5, [pc, #40]	; (800cf84 <__libc_init_array+0x40>)
 800cf5c:	4c0a      	ldr	r4, [pc, #40]	; (800cf88 <__libc_init_array+0x44>)
 800cf5e:	1b64      	subs	r4, r4, r5
 800cf60:	10a4      	asrs	r4, r4, #2
 800cf62:	42a6      	cmp	r6, r4
 800cf64:	d105      	bne.n	800cf72 <__libc_init_array+0x2e>
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
 800cf68:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf6c:	4798      	blx	r3
 800cf6e:	3601      	adds	r6, #1
 800cf70:	e7ee      	b.n	800cf50 <__libc_init_array+0xc>
 800cf72:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf76:	4798      	blx	r3
 800cf78:	3601      	adds	r6, #1
 800cf7a:	e7f2      	b.n	800cf62 <__libc_init_array+0x1e>
 800cf7c:	0800e3a4 	.word	0x0800e3a4
 800cf80:	0800e3a4 	.word	0x0800e3a4
 800cf84:	0800e3a4 	.word	0x0800e3a4
 800cf88:	0800e3a8 	.word	0x0800e3a8

0800cf8c <__retarget_lock_acquire_recursive>:
 800cf8c:	4770      	bx	lr

0800cf8e <__retarget_lock_release_recursive>:
 800cf8e:	4770      	bx	lr

0800cf90 <strcpy>:
 800cf90:	4603      	mov	r3, r0
 800cf92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf96:	f803 2b01 	strb.w	r2, [r3], #1
 800cf9a:	2a00      	cmp	r2, #0
 800cf9c:	d1f9      	bne.n	800cf92 <strcpy+0x2>
 800cf9e:	4770      	bx	lr

0800cfa0 <memcpy>:
 800cfa0:	440a      	add	r2, r1
 800cfa2:	4291      	cmp	r1, r2
 800cfa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfa8:	d100      	bne.n	800cfac <memcpy+0xc>
 800cfaa:	4770      	bx	lr
 800cfac:	b510      	push	{r4, lr}
 800cfae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfb2:	4291      	cmp	r1, r2
 800cfb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfb8:	d1f9      	bne.n	800cfae <memcpy+0xe>
 800cfba:	bd10      	pop	{r4, pc}

0800cfbc <abort>:
 800cfbc:	2006      	movs	r0, #6
 800cfbe:	b508      	push	{r3, lr}
 800cfc0:	f000 feb0 	bl	800dd24 <raise>
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	f7f4 f992 	bl	80012ee <_exit>
	...

0800cfcc <_free_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4605      	mov	r5, r0
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	d040      	beq.n	800d056 <_free_r+0x8a>
 800cfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd8:	1f0c      	subs	r4, r1, #4
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	bfb8      	it	lt
 800cfde:	18e4      	addlt	r4, r4, r3
 800cfe0:	f000 f8e4 	bl	800d1ac <__malloc_lock>
 800cfe4:	4a1c      	ldr	r2, [pc, #112]	; (800d058 <_free_r+0x8c>)
 800cfe6:	6813      	ldr	r3, [r2, #0]
 800cfe8:	b933      	cbnz	r3, 800cff8 <_free_r+0x2c>
 800cfea:	6063      	str	r3, [r4, #4]
 800cfec:	6014      	str	r4, [r2, #0]
 800cfee:	4628      	mov	r0, r5
 800cff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cff4:	f000 b8e0 	b.w	800d1b8 <__malloc_unlock>
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d908      	bls.n	800d00e <_free_r+0x42>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	1821      	adds	r1, r4, r0
 800d000:	428b      	cmp	r3, r1
 800d002:	bf01      	itttt	eq
 800d004:	6819      	ldreq	r1, [r3, #0]
 800d006:	685b      	ldreq	r3, [r3, #4]
 800d008:	1809      	addeq	r1, r1, r0
 800d00a:	6021      	streq	r1, [r4, #0]
 800d00c:	e7ed      	b.n	800cfea <_free_r+0x1e>
 800d00e:	461a      	mov	r2, r3
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	b10b      	cbz	r3, 800d018 <_free_r+0x4c>
 800d014:	42a3      	cmp	r3, r4
 800d016:	d9fa      	bls.n	800d00e <_free_r+0x42>
 800d018:	6811      	ldr	r1, [r2, #0]
 800d01a:	1850      	adds	r0, r2, r1
 800d01c:	42a0      	cmp	r0, r4
 800d01e:	d10b      	bne.n	800d038 <_free_r+0x6c>
 800d020:	6820      	ldr	r0, [r4, #0]
 800d022:	4401      	add	r1, r0
 800d024:	1850      	adds	r0, r2, r1
 800d026:	4283      	cmp	r3, r0
 800d028:	6011      	str	r1, [r2, #0]
 800d02a:	d1e0      	bne.n	800cfee <_free_r+0x22>
 800d02c:	6818      	ldr	r0, [r3, #0]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	4408      	add	r0, r1
 800d032:	6010      	str	r0, [r2, #0]
 800d034:	6053      	str	r3, [r2, #4]
 800d036:	e7da      	b.n	800cfee <_free_r+0x22>
 800d038:	d902      	bls.n	800d040 <_free_r+0x74>
 800d03a:	230c      	movs	r3, #12
 800d03c:	602b      	str	r3, [r5, #0]
 800d03e:	e7d6      	b.n	800cfee <_free_r+0x22>
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	1821      	adds	r1, r4, r0
 800d044:	428b      	cmp	r3, r1
 800d046:	bf01      	itttt	eq
 800d048:	6819      	ldreq	r1, [r3, #0]
 800d04a:	685b      	ldreq	r3, [r3, #4]
 800d04c:	1809      	addeq	r1, r1, r0
 800d04e:	6021      	streq	r1, [r4, #0]
 800d050:	6063      	str	r3, [r4, #4]
 800d052:	6054      	str	r4, [r2, #4]
 800d054:	e7cb      	b.n	800cfee <_free_r+0x22>
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	200035ec 	.word	0x200035ec

0800d05c <malloc>:
 800d05c:	4b02      	ldr	r3, [pc, #8]	; (800d068 <malloc+0xc>)
 800d05e:	4601      	mov	r1, r0
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	f000 b823 	b.w	800d0ac <_malloc_r>
 800d066:	bf00      	nop
 800d068:	200000ac 	.word	0x200000ac

0800d06c <sbrk_aligned>:
 800d06c:	b570      	push	{r4, r5, r6, lr}
 800d06e:	4e0e      	ldr	r6, [pc, #56]	; (800d0a8 <sbrk_aligned+0x3c>)
 800d070:	460c      	mov	r4, r1
 800d072:	6831      	ldr	r1, [r6, #0]
 800d074:	4605      	mov	r5, r0
 800d076:	b911      	cbnz	r1, 800d07e <sbrk_aligned+0x12>
 800d078:	f000 fe70 	bl	800dd5c <_sbrk_r>
 800d07c:	6030      	str	r0, [r6, #0]
 800d07e:	4621      	mov	r1, r4
 800d080:	4628      	mov	r0, r5
 800d082:	f000 fe6b 	bl	800dd5c <_sbrk_r>
 800d086:	1c43      	adds	r3, r0, #1
 800d088:	d00a      	beq.n	800d0a0 <sbrk_aligned+0x34>
 800d08a:	1cc4      	adds	r4, r0, #3
 800d08c:	f024 0403 	bic.w	r4, r4, #3
 800d090:	42a0      	cmp	r0, r4
 800d092:	d007      	beq.n	800d0a4 <sbrk_aligned+0x38>
 800d094:	1a21      	subs	r1, r4, r0
 800d096:	4628      	mov	r0, r5
 800d098:	f000 fe60 	bl	800dd5c <_sbrk_r>
 800d09c:	3001      	adds	r0, #1
 800d09e:	d101      	bne.n	800d0a4 <sbrk_aligned+0x38>
 800d0a0:	f04f 34ff 	mov.w	r4, #4294967295
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	bd70      	pop	{r4, r5, r6, pc}
 800d0a8:	200035f0 	.word	0x200035f0

0800d0ac <_malloc_r>:
 800d0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	1ccd      	adds	r5, r1, #3
 800d0b2:	f025 0503 	bic.w	r5, r5, #3
 800d0b6:	3508      	adds	r5, #8
 800d0b8:	2d0c      	cmp	r5, #12
 800d0ba:	bf38      	it	cc
 800d0bc:	250c      	movcc	r5, #12
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	db01      	blt.n	800d0c8 <_malloc_r+0x1c>
 800d0c4:	42a9      	cmp	r1, r5
 800d0c6:	d905      	bls.n	800d0d4 <_malloc_r+0x28>
 800d0c8:	230c      	movs	r3, #12
 800d0ca:	2600      	movs	r6, #0
 800d0cc:	603b      	str	r3, [r7, #0]
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d1a8 <_malloc_r+0xfc>
 800d0d8:	f000 f868 	bl	800d1ac <__malloc_lock>
 800d0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e0:	461c      	mov	r4, r3
 800d0e2:	bb5c      	cbnz	r4, 800d13c <_malloc_r+0x90>
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	f7ff ffc0 	bl	800d06c <sbrk_aligned>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	d155      	bne.n	800d19e <_malloc_r+0xf2>
 800d0f2:	f8d8 4000 	ldr.w	r4, [r8]
 800d0f6:	4626      	mov	r6, r4
 800d0f8:	2e00      	cmp	r6, #0
 800d0fa:	d145      	bne.n	800d188 <_malloc_r+0xdc>
 800d0fc:	2c00      	cmp	r4, #0
 800d0fe:	d048      	beq.n	800d192 <_malloc_r+0xe6>
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	4631      	mov	r1, r6
 800d104:	4638      	mov	r0, r7
 800d106:	eb04 0903 	add.w	r9, r4, r3
 800d10a:	f000 fe27 	bl	800dd5c <_sbrk_r>
 800d10e:	4581      	cmp	r9, r0
 800d110:	d13f      	bne.n	800d192 <_malloc_r+0xe6>
 800d112:	6821      	ldr	r1, [r4, #0]
 800d114:	4638      	mov	r0, r7
 800d116:	1a6d      	subs	r5, r5, r1
 800d118:	4629      	mov	r1, r5
 800d11a:	f7ff ffa7 	bl	800d06c <sbrk_aligned>
 800d11e:	3001      	adds	r0, #1
 800d120:	d037      	beq.n	800d192 <_malloc_r+0xe6>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	442b      	add	r3, r5
 800d126:	6023      	str	r3, [r4, #0]
 800d128:	f8d8 3000 	ldr.w	r3, [r8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d038      	beq.n	800d1a2 <_malloc_r+0xf6>
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	42a2      	cmp	r2, r4
 800d134:	d12b      	bne.n	800d18e <_malloc_r+0xe2>
 800d136:	2200      	movs	r2, #0
 800d138:	605a      	str	r2, [r3, #4]
 800d13a:	e00f      	b.n	800d15c <_malloc_r+0xb0>
 800d13c:	6822      	ldr	r2, [r4, #0]
 800d13e:	1b52      	subs	r2, r2, r5
 800d140:	d41f      	bmi.n	800d182 <_malloc_r+0xd6>
 800d142:	2a0b      	cmp	r2, #11
 800d144:	d917      	bls.n	800d176 <_malloc_r+0xca>
 800d146:	1961      	adds	r1, r4, r5
 800d148:	42a3      	cmp	r3, r4
 800d14a:	6025      	str	r5, [r4, #0]
 800d14c:	bf18      	it	ne
 800d14e:	6059      	strne	r1, [r3, #4]
 800d150:	6863      	ldr	r3, [r4, #4]
 800d152:	bf08      	it	eq
 800d154:	f8c8 1000 	streq.w	r1, [r8]
 800d158:	5162      	str	r2, [r4, r5]
 800d15a:	604b      	str	r3, [r1, #4]
 800d15c:	4638      	mov	r0, r7
 800d15e:	f104 060b 	add.w	r6, r4, #11
 800d162:	f000 f829 	bl	800d1b8 <__malloc_unlock>
 800d166:	f026 0607 	bic.w	r6, r6, #7
 800d16a:	1d23      	adds	r3, r4, #4
 800d16c:	1af2      	subs	r2, r6, r3
 800d16e:	d0ae      	beq.n	800d0ce <_malloc_r+0x22>
 800d170:	1b9b      	subs	r3, r3, r6
 800d172:	50a3      	str	r3, [r4, r2]
 800d174:	e7ab      	b.n	800d0ce <_malloc_r+0x22>
 800d176:	42a3      	cmp	r3, r4
 800d178:	6862      	ldr	r2, [r4, #4]
 800d17a:	d1dd      	bne.n	800d138 <_malloc_r+0x8c>
 800d17c:	f8c8 2000 	str.w	r2, [r8]
 800d180:	e7ec      	b.n	800d15c <_malloc_r+0xb0>
 800d182:	4623      	mov	r3, r4
 800d184:	6864      	ldr	r4, [r4, #4]
 800d186:	e7ac      	b.n	800d0e2 <_malloc_r+0x36>
 800d188:	4634      	mov	r4, r6
 800d18a:	6876      	ldr	r6, [r6, #4]
 800d18c:	e7b4      	b.n	800d0f8 <_malloc_r+0x4c>
 800d18e:	4613      	mov	r3, r2
 800d190:	e7cc      	b.n	800d12c <_malloc_r+0x80>
 800d192:	230c      	movs	r3, #12
 800d194:	4638      	mov	r0, r7
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	f000 f80e 	bl	800d1b8 <__malloc_unlock>
 800d19c:	e797      	b.n	800d0ce <_malloc_r+0x22>
 800d19e:	6025      	str	r5, [r4, #0]
 800d1a0:	e7dc      	b.n	800d15c <_malloc_r+0xb0>
 800d1a2:	605b      	str	r3, [r3, #4]
 800d1a4:	deff      	udf	#255	; 0xff
 800d1a6:	bf00      	nop
 800d1a8:	200035ec 	.word	0x200035ec

0800d1ac <__malloc_lock>:
 800d1ac:	4801      	ldr	r0, [pc, #4]	; (800d1b4 <__malloc_lock+0x8>)
 800d1ae:	f7ff beed 	b.w	800cf8c <__retarget_lock_acquire_recursive>
 800d1b2:	bf00      	nop
 800d1b4:	200035e8 	.word	0x200035e8

0800d1b8 <__malloc_unlock>:
 800d1b8:	4801      	ldr	r0, [pc, #4]	; (800d1c0 <__malloc_unlock+0x8>)
 800d1ba:	f7ff bee8 	b.w	800cf8e <__retarget_lock_release_recursive>
 800d1be:	bf00      	nop
 800d1c0:	200035e8 	.word	0x200035e8

0800d1c4 <__ssputs_r>:
 800d1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c8:	461f      	mov	r7, r3
 800d1ca:	688e      	ldr	r6, [r1, #8]
 800d1cc:	4682      	mov	sl, r0
 800d1ce:	42be      	cmp	r6, r7
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	4690      	mov	r8, r2
 800d1d4:	680b      	ldr	r3, [r1, #0]
 800d1d6:	d82c      	bhi.n	800d232 <__ssputs_r+0x6e>
 800d1d8:	898a      	ldrh	r2, [r1, #12]
 800d1da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1de:	d026      	beq.n	800d22e <__ssputs_r+0x6a>
 800d1e0:	6965      	ldr	r5, [r4, #20]
 800d1e2:	6909      	ldr	r1, [r1, #16]
 800d1e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1e8:	eba3 0901 	sub.w	r9, r3, r1
 800d1ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1f0:	1c7b      	adds	r3, r7, #1
 800d1f2:	444b      	add	r3, r9
 800d1f4:	106d      	asrs	r5, r5, #1
 800d1f6:	429d      	cmp	r5, r3
 800d1f8:	bf38      	it	cc
 800d1fa:	461d      	movcc	r5, r3
 800d1fc:	0553      	lsls	r3, r2, #21
 800d1fe:	d527      	bpl.n	800d250 <__ssputs_r+0x8c>
 800d200:	4629      	mov	r1, r5
 800d202:	f7ff ff53 	bl	800d0ac <_malloc_r>
 800d206:	4606      	mov	r6, r0
 800d208:	b360      	cbz	r0, 800d264 <__ssputs_r+0xa0>
 800d20a:	464a      	mov	r2, r9
 800d20c:	6921      	ldr	r1, [r4, #16]
 800d20e:	f7ff fec7 	bl	800cfa0 <memcpy>
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d21c:	81a3      	strh	r3, [r4, #12]
 800d21e:	6126      	str	r6, [r4, #16]
 800d220:	444e      	add	r6, r9
 800d222:	6026      	str	r6, [r4, #0]
 800d224:	463e      	mov	r6, r7
 800d226:	6165      	str	r5, [r4, #20]
 800d228:	eba5 0509 	sub.w	r5, r5, r9
 800d22c:	60a5      	str	r5, [r4, #8]
 800d22e:	42be      	cmp	r6, r7
 800d230:	d900      	bls.n	800d234 <__ssputs_r+0x70>
 800d232:	463e      	mov	r6, r7
 800d234:	4632      	mov	r2, r6
 800d236:	4641      	mov	r1, r8
 800d238:	6820      	ldr	r0, [r4, #0]
 800d23a:	f000 fd31 	bl	800dca0 <memmove>
 800d23e:	2000      	movs	r0, #0
 800d240:	68a3      	ldr	r3, [r4, #8]
 800d242:	1b9b      	subs	r3, r3, r6
 800d244:	60a3      	str	r3, [r4, #8]
 800d246:	6823      	ldr	r3, [r4, #0]
 800d248:	4433      	add	r3, r6
 800d24a:	6023      	str	r3, [r4, #0]
 800d24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d250:	462a      	mov	r2, r5
 800d252:	f000 fda1 	bl	800dd98 <_realloc_r>
 800d256:	4606      	mov	r6, r0
 800d258:	2800      	cmp	r0, #0
 800d25a:	d1e0      	bne.n	800d21e <__ssputs_r+0x5a>
 800d25c:	4650      	mov	r0, sl
 800d25e:	6921      	ldr	r1, [r4, #16]
 800d260:	f7ff feb4 	bl	800cfcc <_free_r>
 800d264:	230c      	movs	r3, #12
 800d266:	f8ca 3000 	str.w	r3, [sl]
 800d26a:	89a3      	ldrh	r3, [r4, #12]
 800d26c:	f04f 30ff 	mov.w	r0, #4294967295
 800d270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	e7e9      	b.n	800d24c <__ssputs_r+0x88>

0800d278 <_svfiprintf_r>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	4698      	mov	r8, r3
 800d27e:	898b      	ldrh	r3, [r1, #12]
 800d280:	4607      	mov	r7, r0
 800d282:	061b      	lsls	r3, r3, #24
 800d284:	460d      	mov	r5, r1
 800d286:	4614      	mov	r4, r2
 800d288:	b09d      	sub	sp, #116	; 0x74
 800d28a:	d50e      	bpl.n	800d2aa <_svfiprintf_r+0x32>
 800d28c:	690b      	ldr	r3, [r1, #16]
 800d28e:	b963      	cbnz	r3, 800d2aa <_svfiprintf_r+0x32>
 800d290:	2140      	movs	r1, #64	; 0x40
 800d292:	f7ff ff0b 	bl	800d0ac <_malloc_r>
 800d296:	6028      	str	r0, [r5, #0]
 800d298:	6128      	str	r0, [r5, #16]
 800d29a:	b920      	cbnz	r0, 800d2a6 <_svfiprintf_r+0x2e>
 800d29c:	230c      	movs	r3, #12
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a4:	e0d0      	b.n	800d448 <_svfiprintf_r+0x1d0>
 800d2a6:	2340      	movs	r3, #64	; 0x40
 800d2a8:	616b      	str	r3, [r5, #20]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ae:	2320      	movs	r3, #32
 800d2b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2b4:	2330      	movs	r3, #48	; 0x30
 800d2b6:	f04f 0901 	mov.w	r9, #1
 800d2ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d460 <_svfiprintf_r+0x1e8>
 800d2c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2c6:	4623      	mov	r3, r4
 800d2c8:	469a      	mov	sl, r3
 800d2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ce:	b10a      	cbz	r2, 800d2d4 <_svfiprintf_r+0x5c>
 800d2d0:	2a25      	cmp	r2, #37	; 0x25
 800d2d2:	d1f9      	bne.n	800d2c8 <_svfiprintf_r+0x50>
 800d2d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d2d8:	d00b      	beq.n	800d2f2 <_svfiprintf_r+0x7a>
 800d2da:	465b      	mov	r3, fp
 800d2dc:	4622      	mov	r2, r4
 800d2de:	4629      	mov	r1, r5
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f7ff ff6f 	bl	800d1c4 <__ssputs_r>
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	f000 80a9 	beq.w	800d43e <_svfiprintf_r+0x1c6>
 800d2ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2ee:	445a      	add	r2, fp
 800d2f0:	9209      	str	r2, [sp, #36]	; 0x24
 800d2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 80a1 	beq.w	800d43e <_svfiprintf_r+0x1c6>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d306:	f10a 0a01 	add.w	sl, sl, #1
 800d30a:	9304      	str	r3, [sp, #16]
 800d30c:	9307      	str	r3, [sp, #28]
 800d30e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d312:	931a      	str	r3, [sp, #104]	; 0x68
 800d314:	4654      	mov	r4, sl
 800d316:	2205      	movs	r2, #5
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	4850      	ldr	r0, [pc, #320]	; (800d460 <_svfiprintf_r+0x1e8>)
 800d31e:	f000 fd2d 	bl	800dd7c <memchr>
 800d322:	9a04      	ldr	r2, [sp, #16]
 800d324:	b9d8      	cbnz	r0, 800d35e <_svfiprintf_r+0xe6>
 800d326:	06d0      	lsls	r0, r2, #27
 800d328:	bf44      	itt	mi
 800d32a:	2320      	movmi	r3, #32
 800d32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d330:	0711      	lsls	r1, r2, #28
 800d332:	bf44      	itt	mi
 800d334:	232b      	movmi	r3, #43	; 0x2b
 800d336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d33a:	f89a 3000 	ldrb.w	r3, [sl]
 800d33e:	2b2a      	cmp	r3, #42	; 0x2a
 800d340:	d015      	beq.n	800d36e <_svfiprintf_r+0xf6>
 800d342:	4654      	mov	r4, sl
 800d344:	2000      	movs	r0, #0
 800d346:	f04f 0c0a 	mov.w	ip, #10
 800d34a:	9a07      	ldr	r2, [sp, #28]
 800d34c:	4621      	mov	r1, r4
 800d34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d352:	3b30      	subs	r3, #48	; 0x30
 800d354:	2b09      	cmp	r3, #9
 800d356:	d94d      	bls.n	800d3f4 <_svfiprintf_r+0x17c>
 800d358:	b1b0      	cbz	r0, 800d388 <_svfiprintf_r+0x110>
 800d35a:	9207      	str	r2, [sp, #28]
 800d35c:	e014      	b.n	800d388 <_svfiprintf_r+0x110>
 800d35e:	eba0 0308 	sub.w	r3, r0, r8
 800d362:	fa09 f303 	lsl.w	r3, r9, r3
 800d366:	4313      	orrs	r3, r2
 800d368:	46a2      	mov	sl, r4
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	e7d2      	b.n	800d314 <_svfiprintf_r+0x9c>
 800d36e:	9b03      	ldr	r3, [sp, #12]
 800d370:	1d19      	adds	r1, r3, #4
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	9103      	str	r1, [sp, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	bfbb      	ittet	lt
 800d37a:	425b      	neglt	r3, r3
 800d37c:	f042 0202 	orrlt.w	r2, r2, #2
 800d380:	9307      	strge	r3, [sp, #28]
 800d382:	9307      	strlt	r3, [sp, #28]
 800d384:	bfb8      	it	lt
 800d386:	9204      	strlt	r2, [sp, #16]
 800d388:	7823      	ldrb	r3, [r4, #0]
 800d38a:	2b2e      	cmp	r3, #46	; 0x2e
 800d38c:	d10c      	bne.n	800d3a8 <_svfiprintf_r+0x130>
 800d38e:	7863      	ldrb	r3, [r4, #1]
 800d390:	2b2a      	cmp	r3, #42	; 0x2a
 800d392:	d134      	bne.n	800d3fe <_svfiprintf_r+0x186>
 800d394:	9b03      	ldr	r3, [sp, #12]
 800d396:	3402      	adds	r4, #2
 800d398:	1d1a      	adds	r2, r3, #4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	9203      	str	r2, [sp, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bfb8      	it	lt
 800d3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3a6:	9305      	str	r3, [sp, #20]
 800d3a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d464 <_svfiprintf_r+0x1ec>
 800d3ac:	2203      	movs	r2, #3
 800d3ae:	4650      	mov	r0, sl
 800d3b0:	7821      	ldrb	r1, [r4, #0]
 800d3b2:	f000 fce3 	bl	800dd7c <memchr>
 800d3b6:	b138      	cbz	r0, 800d3c8 <_svfiprintf_r+0x150>
 800d3b8:	2240      	movs	r2, #64	; 0x40
 800d3ba:	9b04      	ldr	r3, [sp, #16]
 800d3bc:	eba0 000a 	sub.w	r0, r0, sl
 800d3c0:	4082      	lsls	r2, r0
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	3401      	adds	r4, #1
 800d3c6:	9304      	str	r3, [sp, #16]
 800d3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3cc:	2206      	movs	r2, #6
 800d3ce:	4826      	ldr	r0, [pc, #152]	; (800d468 <_svfiprintf_r+0x1f0>)
 800d3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3d4:	f000 fcd2 	bl	800dd7c <memchr>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d038      	beq.n	800d44e <_svfiprintf_r+0x1d6>
 800d3dc:	4b23      	ldr	r3, [pc, #140]	; (800d46c <_svfiprintf_r+0x1f4>)
 800d3de:	bb1b      	cbnz	r3, 800d428 <_svfiprintf_r+0x1b0>
 800d3e0:	9b03      	ldr	r3, [sp, #12]
 800d3e2:	3307      	adds	r3, #7
 800d3e4:	f023 0307 	bic.w	r3, r3, #7
 800d3e8:	3308      	adds	r3, #8
 800d3ea:	9303      	str	r3, [sp, #12]
 800d3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ee:	4433      	add	r3, r6
 800d3f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f2:	e768      	b.n	800d2c6 <_svfiprintf_r+0x4e>
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fc:	e7a6      	b.n	800d34c <_svfiprintf_r+0xd4>
 800d3fe:	2300      	movs	r3, #0
 800d400:	f04f 0c0a 	mov.w	ip, #10
 800d404:	4619      	mov	r1, r3
 800d406:	3401      	adds	r4, #1
 800d408:	9305      	str	r3, [sp, #20]
 800d40a:	4620      	mov	r0, r4
 800d40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d410:	3a30      	subs	r2, #48	; 0x30
 800d412:	2a09      	cmp	r2, #9
 800d414:	d903      	bls.n	800d41e <_svfiprintf_r+0x1a6>
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0c6      	beq.n	800d3a8 <_svfiprintf_r+0x130>
 800d41a:	9105      	str	r1, [sp, #20]
 800d41c:	e7c4      	b.n	800d3a8 <_svfiprintf_r+0x130>
 800d41e:	4604      	mov	r4, r0
 800d420:	2301      	movs	r3, #1
 800d422:	fb0c 2101 	mla	r1, ip, r1, r2
 800d426:	e7f0      	b.n	800d40a <_svfiprintf_r+0x192>
 800d428:	ab03      	add	r3, sp, #12
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	462a      	mov	r2, r5
 800d42e:	4638      	mov	r0, r7
 800d430:	4b0f      	ldr	r3, [pc, #60]	; (800d470 <_svfiprintf_r+0x1f8>)
 800d432:	a904      	add	r1, sp, #16
 800d434:	f3af 8000 	nop.w
 800d438:	1c42      	adds	r2, r0, #1
 800d43a:	4606      	mov	r6, r0
 800d43c:	d1d6      	bne.n	800d3ec <_svfiprintf_r+0x174>
 800d43e:	89ab      	ldrh	r3, [r5, #12]
 800d440:	065b      	lsls	r3, r3, #25
 800d442:	f53f af2d 	bmi.w	800d2a0 <_svfiprintf_r+0x28>
 800d446:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d448:	b01d      	add	sp, #116	; 0x74
 800d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44e:	ab03      	add	r3, sp, #12
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	462a      	mov	r2, r5
 800d454:	4638      	mov	r0, r7
 800d456:	4b06      	ldr	r3, [pc, #24]	; (800d470 <_svfiprintf_r+0x1f8>)
 800d458:	a904      	add	r1, sp, #16
 800d45a:	f000 f9bf 	bl	800d7dc <_printf_i>
 800d45e:	e7eb      	b.n	800d438 <_svfiprintf_r+0x1c0>
 800d460:	0800e36e 	.word	0x0800e36e
 800d464:	0800e374 	.word	0x0800e374
 800d468:	0800e378 	.word	0x0800e378
 800d46c:	00000000 	.word	0x00000000
 800d470:	0800d1c5 	.word	0x0800d1c5

0800d474 <__sfputc_r>:
 800d474:	6893      	ldr	r3, [r2, #8]
 800d476:	b410      	push	{r4}
 800d478:	3b01      	subs	r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	6093      	str	r3, [r2, #8]
 800d47e:	da07      	bge.n	800d490 <__sfputc_r+0x1c>
 800d480:	6994      	ldr	r4, [r2, #24]
 800d482:	42a3      	cmp	r3, r4
 800d484:	db01      	blt.n	800d48a <__sfputc_r+0x16>
 800d486:	290a      	cmp	r1, #10
 800d488:	d102      	bne.n	800d490 <__sfputc_r+0x1c>
 800d48a:	bc10      	pop	{r4}
 800d48c:	f000 bb72 	b.w	800db74 <__swbuf_r>
 800d490:	6813      	ldr	r3, [r2, #0]
 800d492:	1c58      	adds	r0, r3, #1
 800d494:	6010      	str	r0, [r2, #0]
 800d496:	7019      	strb	r1, [r3, #0]
 800d498:	4608      	mov	r0, r1
 800d49a:	bc10      	pop	{r4}
 800d49c:	4770      	bx	lr

0800d49e <__sfputs_r>:
 800d49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	460f      	mov	r7, r1
 800d4a4:	4614      	mov	r4, r2
 800d4a6:	18d5      	adds	r5, r2, r3
 800d4a8:	42ac      	cmp	r4, r5
 800d4aa:	d101      	bne.n	800d4b0 <__sfputs_r+0x12>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e007      	b.n	800d4c0 <__sfputs_r+0x22>
 800d4b0:	463a      	mov	r2, r7
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b8:	f7ff ffdc 	bl	800d474 <__sfputc_r>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d1f3      	bne.n	800d4a8 <__sfputs_r+0xa>
 800d4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4c4 <_vfiprintf_r>:
 800d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	460d      	mov	r5, r1
 800d4ca:	4614      	mov	r4, r2
 800d4cc:	4698      	mov	r8, r3
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	b09d      	sub	sp, #116	; 0x74
 800d4d2:	b118      	cbz	r0, 800d4dc <_vfiprintf_r+0x18>
 800d4d4:	6a03      	ldr	r3, [r0, #32]
 800d4d6:	b90b      	cbnz	r3, 800d4dc <_vfiprintf_r+0x18>
 800d4d8:	f7ff fb46 	bl	800cb68 <__sinit>
 800d4dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4de:	07d9      	lsls	r1, r3, #31
 800d4e0:	d405      	bmi.n	800d4ee <_vfiprintf_r+0x2a>
 800d4e2:	89ab      	ldrh	r3, [r5, #12]
 800d4e4:	059a      	lsls	r2, r3, #22
 800d4e6:	d402      	bmi.n	800d4ee <_vfiprintf_r+0x2a>
 800d4e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4ea:	f7ff fd4f 	bl	800cf8c <__retarget_lock_acquire_recursive>
 800d4ee:	89ab      	ldrh	r3, [r5, #12]
 800d4f0:	071b      	lsls	r3, r3, #28
 800d4f2:	d501      	bpl.n	800d4f8 <_vfiprintf_r+0x34>
 800d4f4:	692b      	ldr	r3, [r5, #16]
 800d4f6:	b99b      	cbnz	r3, 800d520 <_vfiprintf_r+0x5c>
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f000 fb78 	bl	800dbf0 <__swsetup_r>
 800d500:	b170      	cbz	r0, 800d520 <_vfiprintf_r+0x5c>
 800d502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d504:	07dc      	lsls	r4, r3, #31
 800d506:	d504      	bpl.n	800d512 <_vfiprintf_r+0x4e>
 800d508:	f04f 30ff 	mov.w	r0, #4294967295
 800d50c:	b01d      	add	sp, #116	; 0x74
 800d50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d512:	89ab      	ldrh	r3, [r5, #12]
 800d514:	0598      	lsls	r0, r3, #22
 800d516:	d4f7      	bmi.n	800d508 <_vfiprintf_r+0x44>
 800d518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d51a:	f7ff fd38 	bl	800cf8e <__retarget_lock_release_recursive>
 800d51e:	e7f3      	b.n	800d508 <_vfiprintf_r+0x44>
 800d520:	2300      	movs	r3, #0
 800d522:	9309      	str	r3, [sp, #36]	; 0x24
 800d524:	2320      	movs	r3, #32
 800d526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d52a:	2330      	movs	r3, #48	; 0x30
 800d52c:	f04f 0901 	mov.w	r9, #1
 800d530:	f8cd 800c 	str.w	r8, [sp, #12]
 800d534:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d6e4 <_vfiprintf_r+0x220>
 800d538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d53c:	4623      	mov	r3, r4
 800d53e:	469a      	mov	sl, r3
 800d540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d544:	b10a      	cbz	r2, 800d54a <_vfiprintf_r+0x86>
 800d546:	2a25      	cmp	r2, #37	; 0x25
 800d548:	d1f9      	bne.n	800d53e <_vfiprintf_r+0x7a>
 800d54a:	ebba 0b04 	subs.w	fp, sl, r4
 800d54e:	d00b      	beq.n	800d568 <_vfiprintf_r+0xa4>
 800d550:	465b      	mov	r3, fp
 800d552:	4622      	mov	r2, r4
 800d554:	4629      	mov	r1, r5
 800d556:	4630      	mov	r0, r6
 800d558:	f7ff ffa1 	bl	800d49e <__sfputs_r>
 800d55c:	3001      	adds	r0, #1
 800d55e:	f000 80a9 	beq.w	800d6b4 <_vfiprintf_r+0x1f0>
 800d562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d564:	445a      	add	r2, fp
 800d566:	9209      	str	r2, [sp, #36]	; 0x24
 800d568:	f89a 3000 	ldrb.w	r3, [sl]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 80a1 	beq.w	800d6b4 <_vfiprintf_r+0x1f0>
 800d572:	2300      	movs	r3, #0
 800d574:	f04f 32ff 	mov.w	r2, #4294967295
 800d578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d57c:	f10a 0a01 	add.w	sl, sl, #1
 800d580:	9304      	str	r3, [sp, #16]
 800d582:	9307      	str	r3, [sp, #28]
 800d584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d588:	931a      	str	r3, [sp, #104]	; 0x68
 800d58a:	4654      	mov	r4, sl
 800d58c:	2205      	movs	r2, #5
 800d58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d592:	4854      	ldr	r0, [pc, #336]	; (800d6e4 <_vfiprintf_r+0x220>)
 800d594:	f000 fbf2 	bl	800dd7c <memchr>
 800d598:	9a04      	ldr	r2, [sp, #16]
 800d59a:	b9d8      	cbnz	r0, 800d5d4 <_vfiprintf_r+0x110>
 800d59c:	06d1      	lsls	r1, r2, #27
 800d59e:	bf44      	itt	mi
 800d5a0:	2320      	movmi	r3, #32
 800d5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5a6:	0713      	lsls	r3, r2, #28
 800d5a8:	bf44      	itt	mi
 800d5aa:	232b      	movmi	r3, #43	; 0x2b
 800d5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d5b6:	d015      	beq.n	800d5e4 <_vfiprintf_r+0x120>
 800d5b8:	4654      	mov	r4, sl
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	f04f 0c0a 	mov.w	ip, #10
 800d5c0:	9a07      	ldr	r2, [sp, #28]
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5c8:	3b30      	subs	r3, #48	; 0x30
 800d5ca:	2b09      	cmp	r3, #9
 800d5cc:	d94d      	bls.n	800d66a <_vfiprintf_r+0x1a6>
 800d5ce:	b1b0      	cbz	r0, 800d5fe <_vfiprintf_r+0x13a>
 800d5d0:	9207      	str	r2, [sp, #28]
 800d5d2:	e014      	b.n	800d5fe <_vfiprintf_r+0x13a>
 800d5d4:	eba0 0308 	sub.w	r3, r0, r8
 800d5d8:	fa09 f303 	lsl.w	r3, r9, r3
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	46a2      	mov	sl, r4
 800d5e0:	9304      	str	r3, [sp, #16]
 800d5e2:	e7d2      	b.n	800d58a <_vfiprintf_r+0xc6>
 800d5e4:	9b03      	ldr	r3, [sp, #12]
 800d5e6:	1d19      	adds	r1, r3, #4
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	9103      	str	r1, [sp, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	bfbb      	ittet	lt
 800d5f0:	425b      	neglt	r3, r3
 800d5f2:	f042 0202 	orrlt.w	r2, r2, #2
 800d5f6:	9307      	strge	r3, [sp, #28]
 800d5f8:	9307      	strlt	r3, [sp, #28]
 800d5fa:	bfb8      	it	lt
 800d5fc:	9204      	strlt	r2, [sp, #16]
 800d5fe:	7823      	ldrb	r3, [r4, #0]
 800d600:	2b2e      	cmp	r3, #46	; 0x2e
 800d602:	d10c      	bne.n	800d61e <_vfiprintf_r+0x15a>
 800d604:	7863      	ldrb	r3, [r4, #1]
 800d606:	2b2a      	cmp	r3, #42	; 0x2a
 800d608:	d134      	bne.n	800d674 <_vfiprintf_r+0x1b0>
 800d60a:	9b03      	ldr	r3, [sp, #12]
 800d60c:	3402      	adds	r4, #2
 800d60e:	1d1a      	adds	r2, r3, #4
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	9203      	str	r2, [sp, #12]
 800d614:	2b00      	cmp	r3, #0
 800d616:	bfb8      	it	lt
 800d618:	f04f 33ff 	movlt.w	r3, #4294967295
 800d61c:	9305      	str	r3, [sp, #20]
 800d61e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d6e8 <_vfiprintf_r+0x224>
 800d622:	2203      	movs	r2, #3
 800d624:	4650      	mov	r0, sl
 800d626:	7821      	ldrb	r1, [r4, #0]
 800d628:	f000 fba8 	bl	800dd7c <memchr>
 800d62c:	b138      	cbz	r0, 800d63e <_vfiprintf_r+0x17a>
 800d62e:	2240      	movs	r2, #64	; 0x40
 800d630:	9b04      	ldr	r3, [sp, #16]
 800d632:	eba0 000a 	sub.w	r0, r0, sl
 800d636:	4082      	lsls	r2, r0
 800d638:	4313      	orrs	r3, r2
 800d63a:	3401      	adds	r4, #1
 800d63c:	9304      	str	r3, [sp, #16]
 800d63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d642:	2206      	movs	r2, #6
 800d644:	4829      	ldr	r0, [pc, #164]	; (800d6ec <_vfiprintf_r+0x228>)
 800d646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d64a:	f000 fb97 	bl	800dd7c <memchr>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d03f      	beq.n	800d6d2 <_vfiprintf_r+0x20e>
 800d652:	4b27      	ldr	r3, [pc, #156]	; (800d6f0 <_vfiprintf_r+0x22c>)
 800d654:	bb1b      	cbnz	r3, 800d69e <_vfiprintf_r+0x1da>
 800d656:	9b03      	ldr	r3, [sp, #12]
 800d658:	3307      	adds	r3, #7
 800d65a:	f023 0307 	bic.w	r3, r3, #7
 800d65e:	3308      	adds	r3, #8
 800d660:	9303      	str	r3, [sp, #12]
 800d662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d664:	443b      	add	r3, r7
 800d666:	9309      	str	r3, [sp, #36]	; 0x24
 800d668:	e768      	b.n	800d53c <_vfiprintf_r+0x78>
 800d66a:	460c      	mov	r4, r1
 800d66c:	2001      	movs	r0, #1
 800d66e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d672:	e7a6      	b.n	800d5c2 <_vfiprintf_r+0xfe>
 800d674:	2300      	movs	r3, #0
 800d676:	f04f 0c0a 	mov.w	ip, #10
 800d67a:	4619      	mov	r1, r3
 800d67c:	3401      	adds	r4, #1
 800d67e:	9305      	str	r3, [sp, #20]
 800d680:	4620      	mov	r0, r4
 800d682:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d686:	3a30      	subs	r2, #48	; 0x30
 800d688:	2a09      	cmp	r2, #9
 800d68a:	d903      	bls.n	800d694 <_vfiprintf_r+0x1d0>
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d0c6      	beq.n	800d61e <_vfiprintf_r+0x15a>
 800d690:	9105      	str	r1, [sp, #20]
 800d692:	e7c4      	b.n	800d61e <_vfiprintf_r+0x15a>
 800d694:	4604      	mov	r4, r0
 800d696:	2301      	movs	r3, #1
 800d698:	fb0c 2101 	mla	r1, ip, r1, r2
 800d69c:	e7f0      	b.n	800d680 <_vfiprintf_r+0x1bc>
 800d69e:	ab03      	add	r3, sp, #12
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	4b13      	ldr	r3, [pc, #76]	; (800d6f4 <_vfiprintf_r+0x230>)
 800d6a8:	a904      	add	r1, sp, #16
 800d6aa:	f3af 8000 	nop.w
 800d6ae:	4607      	mov	r7, r0
 800d6b0:	1c78      	adds	r0, r7, #1
 800d6b2:	d1d6      	bne.n	800d662 <_vfiprintf_r+0x19e>
 800d6b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6b6:	07d9      	lsls	r1, r3, #31
 800d6b8:	d405      	bmi.n	800d6c6 <_vfiprintf_r+0x202>
 800d6ba:	89ab      	ldrh	r3, [r5, #12]
 800d6bc:	059a      	lsls	r2, r3, #22
 800d6be:	d402      	bmi.n	800d6c6 <_vfiprintf_r+0x202>
 800d6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6c2:	f7ff fc64 	bl	800cf8e <__retarget_lock_release_recursive>
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	065b      	lsls	r3, r3, #25
 800d6ca:	f53f af1d 	bmi.w	800d508 <_vfiprintf_r+0x44>
 800d6ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6d0:	e71c      	b.n	800d50c <_vfiprintf_r+0x48>
 800d6d2:	ab03      	add	r3, sp, #12
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	462a      	mov	r2, r5
 800d6d8:	4630      	mov	r0, r6
 800d6da:	4b06      	ldr	r3, [pc, #24]	; (800d6f4 <_vfiprintf_r+0x230>)
 800d6dc:	a904      	add	r1, sp, #16
 800d6de:	f000 f87d 	bl	800d7dc <_printf_i>
 800d6e2:	e7e4      	b.n	800d6ae <_vfiprintf_r+0x1ea>
 800d6e4:	0800e36e 	.word	0x0800e36e
 800d6e8:	0800e374 	.word	0x0800e374
 800d6ec:	0800e378 	.word	0x0800e378
 800d6f0:	00000000 	.word	0x00000000
 800d6f4:	0800d49f 	.word	0x0800d49f

0800d6f8 <_printf_common>:
 800d6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6fc:	4616      	mov	r6, r2
 800d6fe:	4699      	mov	r9, r3
 800d700:	688a      	ldr	r2, [r1, #8]
 800d702:	690b      	ldr	r3, [r1, #16]
 800d704:	4607      	mov	r7, r0
 800d706:	4293      	cmp	r3, r2
 800d708:	bfb8      	it	lt
 800d70a:	4613      	movlt	r3, r2
 800d70c:	6033      	str	r3, [r6, #0]
 800d70e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d712:	460c      	mov	r4, r1
 800d714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d718:	b10a      	cbz	r2, 800d71e <_printf_common+0x26>
 800d71a:	3301      	adds	r3, #1
 800d71c:	6033      	str	r3, [r6, #0]
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	0699      	lsls	r1, r3, #26
 800d722:	bf42      	ittt	mi
 800d724:	6833      	ldrmi	r3, [r6, #0]
 800d726:	3302      	addmi	r3, #2
 800d728:	6033      	strmi	r3, [r6, #0]
 800d72a:	6825      	ldr	r5, [r4, #0]
 800d72c:	f015 0506 	ands.w	r5, r5, #6
 800d730:	d106      	bne.n	800d740 <_printf_common+0x48>
 800d732:	f104 0a19 	add.w	sl, r4, #25
 800d736:	68e3      	ldr	r3, [r4, #12]
 800d738:	6832      	ldr	r2, [r6, #0]
 800d73a:	1a9b      	subs	r3, r3, r2
 800d73c:	42ab      	cmp	r3, r5
 800d73e:	dc2b      	bgt.n	800d798 <_printf_common+0xa0>
 800d740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d744:	1e13      	subs	r3, r2, #0
 800d746:	6822      	ldr	r2, [r4, #0]
 800d748:	bf18      	it	ne
 800d74a:	2301      	movne	r3, #1
 800d74c:	0692      	lsls	r2, r2, #26
 800d74e:	d430      	bmi.n	800d7b2 <_printf_common+0xba>
 800d750:	4649      	mov	r1, r9
 800d752:	4638      	mov	r0, r7
 800d754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d758:	47c0      	blx	r8
 800d75a:	3001      	adds	r0, #1
 800d75c:	d023      	beq.n	800d7a6 <_printf_common+0xae>
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	6922      	ldr	r2, [r4, #16]
 800d762:	f003 0306 	and.w	r3, r3, #6
 800d766:	2b04      	cmp	r3, #4
 800d768:	bf14      	ite	ne
 800d76a:	2500      	movne	r5, #0
 800d76c:	6833      	ldreq	r3, [r6, #0]
 800d76e:	f04f 0600 	mov.w	r6, #0
 800d772:	bf08      	it	eq
 800d774:	68e5      	ldreq	r5, [r4, #12]
 800d776:	f104 041a 	add.w	r4, r4, #26
 800d77a:	bf08      	it	eq
 800d77c:	1aed      	subeq	r5, r5, r3
 800d77e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d782:	bf08      	it	eq
 800d784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d788:	4293      	cmp	r3, r2
 800d78a:	bfc4      	itt	gt
 800d78c:	1a9b      	subgt	r3, r3, r2
 800d78e:	18ed      	addgt	r5, r5, r3
 800d790:	42b5      	cmp	r5, r6
 800d792:	d11a      	bne.n	800d7ca <_printf_common+0xd2>
 800d794:	2000      	movs	r0, #0
 800d796:	e008      	b.n	800d7aa <_printf_common+0xb2>
 800d798:	2301      	movs	r3, #1
 800d79a:	4652      	mov	r2, sl
 800d79c:	4649      	mov	r1, r9
 800d79e:	4638      	mov	r0, r7
 800d7a0:	47c0      	blx	r8
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d103      	bne.n	800d7ae <_printf_common+0xb6>
 800d7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ae:	3501      	adds	r5, #1
 800d7b0:	e7c1      	b.n	800d736 <_printf_common+0x3e>
 800d7b2:	2030      	movs	r0, #48	; 0x30
 800d7b4:	18e1      	adds	r1, r4, r3
 800d7b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7c0:	4422      	add	r2, r4
 800d7c2:	3302      	adds	r3, #2
 800d7c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7c8:	e7c2      	b.n	800d750 <_printf_common+0x58>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	4649      	mov	r1, r9
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	47c0      	blx	r8
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d0e6      	beq.n	800d7a6 <_printf_common+0xae>
 800d7d8:	3601      	adds	r6, #1
 800d7da:	e7d9      	b.n	800d790 <_printf_common+0x98>

0800d7dc <_printf_i>:
 800d7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e0:	7e0f      	ldrb	r7, [r1, #24]
 800d7e2:	4691      	mov	r9, r2
 800d7e4:	2f78      	cmp	r7, #120	; 0x78
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	460c      	mov	r4, r1
 800d7ea:	469a      	mov	sl, r3
 800d7ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d7f2:	d807      	bhi.n	800d804 <_printf_i+0x28>
 800d7f4:	2f62      	cmp	r7, #98	; 0x62
 800d7f6:	d80a      	bhi.n	800d80e <_printf_i+0x32>
 800d7f8:	2f00      	cmp	r7, #0
 800d7fa:	f000 80d5 	beq.w	800d9a8 <_printf_i+0x1cc>
 800d7fe:	2f58      	cmp	r7, #88	; 0x58
 800d800:	f000 80c1 	beq.w	800d986 <_printf_i+0x1aa>
 800d804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d808:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d80c:	e03a      	b.n	800d884 <_printf_i+0xa8>
 800d80e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d812:	2b15      	cmp	r3, #21
 800d814:	d8f6      	bhi.n	800d804 <_printf_i+0x28>
 800d816:	a101      	add	r1, pc, #4	; (adr r1, 800d81c <_printf_i+0x40>)
 800d818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d81c:	0800d875 	.word	0x0800d875
 800d820:	0800d889 	.word	0x0800d889
 800d824:	0800d805 	.word	0x0800d805
 800d828:	0800d805 	.word	0x0800d805
 800d82c:	0800d805 	.word	0x0800d805
 800d830:	0800d805 	.word	0x0800d805
 800d834:	0800d889 	.word	0x0800d889
 800d838:	0800d805 	.word	0x0800d805
 800d83c:	0800d805 	.word	0x0800d805
 800d840:	0800d805 	.word	0x0800d805
 800d844:	0800d805 	.word	0x0800d805
 800d848:	0800d98f 	.word	0x0800d98f
 800d84c:	0800d8b5 	.word	0x0800d8b5
 800d850:	0800d949 	.word	0x0800d949
 800d854:	0800d805 	.word	0x0800d805
 800d858:	0800d805 	.word	0x0800d805
 800d85c:	0800d9b1 	.word	0x0800d9b1
 800d860:	0800d805 	.word	0x0800d805
 800d864:	0800d8b5 	.word	0x0800d8b5
 800d868:	0800d805 	.word	0x0800d805
 800d86c:	0800d805 	.word	0x0800d805
 800d870:	0800d951 	.word	0x0800d951
 800d874:	682b      	ldr	r3, [r5, #0]
 800d876:	1d1a      	adds	r2, r3, #4
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	602a      	str	r2, [r5, #0]
 800d87c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d880:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d884:	2301      	movs	r3, #1
 800d886:	e0a0      	b.n	800d9ca <_printf_i+0x1ee>
 800d888:	6820      	ldr	r0, [r4, #0]
 800d88a:	682b      	ldr	r3, [r5, #0]
 800d88c:	0607      	lsls	r7, r0, #24
 800d88e:	f103 0104 	add.w	r1, r3, #4
 800d892:	6029      	str	r1, [r5, #0]
 800d894:	d501      	bpl.n	800d89a <_printf_i+0xbe>
 800d896:	681e      	ldr	r6, [r3, #0]
 800d898:	e003      	b.n	800d8a2 <_printf_i+0xc6>
 800d89a:	0646      	lsls	r6, r0, #25
 800d89c:	d5fb      	bpl.n	800d896 <_printf_i+0xba>
 800d89e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d8a2:	2e00      	cmp	r6, #0
 800d8a4:	da03      	bge.n	800d8ae <_printf_i+0xd2>
 800d8a6:	232d      	movs	r3, #45	; 0x2d
 800d8a8:	4276      	negs	r6, r6
 800d8aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8ae:	230a      	movs	r3, #10
 800d8b0:	4859      	ldr	r0, [pc, #356]	; (800da18 <_printf_i+0x23c>)
 800d8b2:	e012      	b.n	800d8da <_printf_i+0xfe>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	6820      	ldr	r0, [r4, #0]
 800d8b8:	1d19      	adds	r1, r3, #4
 800d8ba:	6029      	str	r1, [r5, #0]
 800d8bc:	0605      	lsls	r5, r0, #24
 800d8be:	d501      	bpl.n	800d8c4 <_printf_i+0xe8>
 800d8c0:	681e      	ldr	r6, [r3, #0]
 800d8c2:	e002      	b.n	800d8ca <_printf_i+0xee>
 800d8c4:	0641      	lsls	r1, r0, #25
 800d8c6:	d5fb      	bpl.n	800d8c0 <_printf_i+0xe4>
 800d8c8:	881e      	ldrh	r6, [r3, #0]
 800d8ca:	2f6f      	cmp	r7, #111	; 0x6f
 800d8cc:	bf0c      	ite	eq
 800d8ce:	2308      	moveq	r3, #8
 800d8d0:	230a      	movne	r3, #10
 800d8d2:	4851      	ldr	r0, [pc, #324]	; (800da18 <_printf_i+0x23c>)
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8da:	6865      	ldr	r5, [r4, #4]
 800d8dc:	2d00      	cmp	r5, #0
 800d8de:	bfa8      	it	ge
 800d8e0:	6821      	ldrge	r1, [r4, #0]
 800d8e2:	60a5      	str	r5, [r4, #8]
 800d8e4:	bfa4      	itt	ge
 800d8e6:	f021 0104 	bicge.w	r1, r1, #4
 800d8ea:	6021      	strge	r1, [r4, #0]
 800d8ec:	b90e      	cbnz	r6, 800d8f2 <_printf_i+0x116>
 800d8ee:	2d00      	cmp	r5, #0
 800d8f0:	d04b      	beq.n	800d98a <_printf_i+0x1ae>
 800d8f2:	4615      	mov	r5, r2
 800d8f4:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8f8:	fb03 6711 	mls	r7, r3, r1, r6
 800d8fc:	5dc7      	ldrb	r7, [r0, r7]
 800d8fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d902:	4637      	mov	r7, r6
 800d904:	42bb      	cmp	r3, r7
 800d906:	460e      	mov	r6, r1
 800d908:	d9f4      	bls.n	800d8f4 <_printf_i+0x118>
 800d90a:	2b08      	cmp	r3, #8
 800d90c:	d10b      	bne.n	800d926 <_printf_i+0x14a>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	07de      	lsls	r6, r3, #31
 800d912:	d508      	bpl.n	800d926 <_printf_i+0x14a>
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	6861      	ldr	r1, [r4, #4]
 800d918:	4299      	cmp	r1, r3
 800d91a:	bfde      	ittt	le
 800d91c:	2330      	movle	r3, #48	; 0x30
 800d91e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d922:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d926:	1b52      	subs	r2, r2, r5
 800d928:	6122      	str	r2, [r4, #16]
 800d92a:	464b      	mov	r3, r9
 800d92c:	4621      	mov	r1, r4
 800d92e:	4640      	mov	r0, r8
 800d930:	f8cd a000 	str.w	sl, [sp]
 800d934:	aa03      	add	r2, sp, #12
 800d936:	f7ff fedf 	bl	800d6f8 <_printf_common>
 800d93a:	3001      	adds	r0, #1
 800d93c:	d14a      	bne.n	800d9d4 <_printf_i+0x1f8>
 800d93e:	f04f 30ff 	mov.w	r0, #4294967295
 800d942:	b004      	add	sp, #16
 800d944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	f043 0320 	orr.w	r3, r3, #32
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	2778      	movs	r7, #120	; 0x78
 800d952:	4832      	ldr	r0, [pc, #200]	; (800da1c <_printf_i+0x240>)
 800d954:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d958:	6823      	ldr	r3, [r4, #0]
 800d95a:	6829      	ldr	r1, [r5, #0]
 800d95c:	061f      	lsls	r7, r3, #24
 800d95e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d962:	d402      	bmi.n	800d96a <_printf_i+0x18e>
 800d964:	065f      	lsls	r7, r3, #25
 800d966:	bf48      	it	mi
 800d968:	b2b6      	uxthmi	r6, r6
 800d96a:	07df      	lsls	r7, r3, #31
 800d96c:	bf48      	it	mi
 800d96e:	f043 0320 	orrmi.w	r3, r3, #32
 800d972:	6029      	str	r1, [r5, #0]
 800d974:	bf48      	it	mi
 800d976:	6023      	strmi	r3, [r4, #0]
 800d978:	b91e      	cbnz	r6, 800d982 <_printf_i+0x1a6>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	f023 0320 	bic.w	r3, r3, #32
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	2310      	movs	r3, #16
 800d984:	e7a6      	b.n	800d8d4 <_printf_i+0xf8>
 800d986:	4824      	ldr	r0, [pc, #144]	; (800da18 <_printf_i+0x23c>)
 800d988:	e7e4      	b.n	800d954 <_printf_i+0x178>
 800d98a:	4615      	mov	r5, r2
 800d98c:	e7bd      	b.n	800d90a <_printf_i+0x12e>
 800d98e:	682b      	ldr	r3, [r5, #0]
 800d990:	6826      	ldr	r6, [r4, #0]
 800d992:	1d18      	adds	r0, r3, #4
 800d994:	6961      	ldr	r1, [r4, #20]
 800d996:	6028      	str	r0, [r5, #0]
 800d998:	0635      	lsls	r5, r6, #24
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	d501      	bpl.n	800d9a2 <_printf_i+0x1c6>
 800d99e:	6019      	str	r1, [r3, #0]
 800d9a0:	e002      	b.n	800d9a8 <_printf_i+0x1cc>
 800d9a2:	0670      	lsls	r0, r6, #25
 800d9a4:	d5fb      	bpl.n	800d99e <_printf_i+0x1c2>
 800d9a6:	8019      	strh	r1, [r3, #0]
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	4615      	mov	r5, r2
 800d9ac:	6123      	str	r3, [r4, #16]
 800d9ae:	e7bc      	b.n	800d92a <_printf_i+0x14e>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	1d1a      	adds	r2, r3, #4
 800d9b6:	602a      	str	r2, [r5, #0]
 800d9b8:	681d      	ldr	r5, [r3, #0]
 800d9ba:	6862      	ldr	r2, [r4, #4]
 800d9bc:	4628      	mov	r0, r5
 800d9be:	f000 f9dd 	bl	800dd7c <memchr>
 800d9c2:	b108      	cbz	r0, 800d9c8 <_printf_i+0x1ec>
 800d9c4:	1b40      	subs	r0, r0, r5
 800d9c6:	6060      	str	r0, [r4, #4]
 800d9c8:	6863      	ldr	r3, [r4, #4]
 800d9ca:	6123      	str	r3, [r4, #16]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9d2:	e7aa      	b.n	800d92a <_printf_i+0x14e>
 800d9d4:	462a      	mov	r2, r5
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	4640      	mov	r0, r8
 800d9da:	6923      	ldr	r3, [r4, #16]
 800d9dc:	47d0      	blx	sl
 800d9de:	3001      	adds	r0, #1
 800d9e0:	d0ad      	beq.n	800d93e <_printf_i+0x162>
 800d9e2:	6823      	ldr	r3, [r4, #0]
 800d9e4:	079b      	lsls	r3, r3, #30
 800d9e6:	d413      	bmi.n	800da10 <_printf_i+0x234>
 800d9e8:	68e0      	ldr	r0, [r4, #12]
 800d9ea:	9b03      	ldr	r3, [sp, #12]
 800d9ec:	4298      	cmp	r0, r3
 800d9ee:	bfb8      	it	lt
 800d9f0:	4618      	movlt	r0, r3
 800d9f2:	e7a6      	b.n	800d942 <_printf_i+0x166>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	4632      	mov	r2, r6
 800d9f8:	4649      	mov	r1, r9
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	47d0      	blx	sl
 800d9fe:	3001      	adds	r0, #1
 800da00:	d09d      	beq.n	800d93e <_printf_i+0x162>
 800da02:	3501      	adds	r5, #1
 800da04:	68e3      	ldr	r3, [r4, #12]
 800da06:	9903      	ldr	r1, [sp, #12]
 800da08:	1a5b      	subs	r3, r3, r1
 800da0a:	42ab      	cmp	r3, r5
 800da0c:	dcf2      	bgt.n	800d9f4 <_printf_i+0x218>
 800da0e:	e7eb      	b.n	800d9e8 <_printf_i+0x20c>
 800da10:	2500      	movs	r5, #0
 800da12:	f104 0619 	add.w	r6, r4, #25
 800da16:	e7f5      	b.n	800da04 <_printf_i+0x228>
 800da18:	0800e37f 	.word	0x0800e37f
 800da1c:	0800e390 	.word	0x0800e390

0800da20 <__sflush_r>:
 800da20:	898a      	ldrh	r2, [r1, #12]
 800da22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da24:	4605      	mov	r5, r0
 800da26:	0710      	lsls	r0, r2, #28
 800da28:	460c      	mov	r4, r1
 800da2a:	d457      	bmi.n	800dadc <__sflush_r+0xbc>
 800da2c:	684b      	ldr	r3, [r1, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dc04      	bgt.n	800da3c <__sflush_r+0x1c>
 800da32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da34:	2b00      	cmp	r3, #0
 800da36:	dc01      	bgt.n	800da3c <__sflush_r+0x1c>
 800da38:	2000      	movs	r0, #0
 800da3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da3e:	2e00      	cmp	r6, #0
 800da40:	d0fa      	beq.n	800da38 <__sflush_r+0x18>
 800da42:	2300      	movs	r3, #0
 800da44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da48:	682f      	ldr	r7, [r5, #0]
 800da4a:	6a21      	ldr	r1, [r4, #32]
 800da4c:	602b      	str	r3, [r5, #0]
 800da4e:	d032      	beq.n	800dab6 <__sflush_r+0x96>
 800da50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	075a      	lsls	r2, r3, #29
 800da56:	d505      	bpl.n	800da64 <__sflush_r+0x44>
 800da58:	6863      	ldr	r3, [r4, #4]
 800da5a:	1ac0      	subs	r0, r0, r3
 800da5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da5e:	b10b      	cbz	r3, 800da64 <__sflush_r+0x44>
 800da60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da62:	1ac0      	subs	r0, r0, r3
 800da64:	2300      	movs	r3, #0
 800da66:	4602      	mov	r2, r0
 800da68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da6a:	4628      	mov	r0, r5
 800da6c:	6a21      	ldr	r1, [r4, #32]
 800da6e:	47b0      	blx	r6
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	d106      	bne.n	800da84 <__sflush_r+0x64>
 800da76:	6829      	ldr	r1, [r5, #0]
 800da78:	291d      	cmp	r1, #29
 800da7a:	d82b      	bhi.n	800dad4 <__sflush_r+0xb4>
 800da7c:	4a28      	ldr	r2, [pc, #160]	; (800db20 <__sflush_r+0x100>)
 800da7e:	410a      	asrs	r2, r1
 800da80:	07d6      	lsls	r6, r2, #31
 800da82:	d427      	bmi.n	800dad4 <__sflush_r+0xb4>
 800da84:	2200      	movs	r2, #0
 800da86:	6062      	str	r2, [r4, #4]
 800da88:	6922      	ldr	r2, [r4, #16]
 800da8a:	04d9      	lsls	r1, r3, #19
 800da8c:	6022      	str	r2, [r4, #0]
 800da8e:	d504      	bpl.n	800da9a <__sflush_r+0x7a>
 800da90:	1c42      	adds	r2, r0, #1
 800da92:	d101      	bne.n	800da98 <__sflush_r+0x78>
 800da94:	682b      	ldr	r3, [r5, #0]
 800da96:	b903      	cbnz	r3, 800da9a <__sflush_r+0x7a>
 800da98:	6560      	str	r0, [r4, #84]	; 0x54
 800da9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da9c:	602f      	str	r7, [r5, #0]
 800da9e:	2900      	cmp	r1, #0
 800daa0:	d0ca      	beq.n	800da38 <__sflush_r+0x18>
 800daa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800daa6:	4299      	cmp	r1, r3
 800daa8:	d002      	beq.n	800dab0 <__sflush_r+0x90>
 800daaa:	4628      	mov	r0, r5
 800daac:	f7ff fa8e 	bl	800cfcc <_free_r>
 800dab0:	2000      	movs	r0, #0
 800dab2:	6360      	str	r0, [r4, #52]	; 0x34
 800dab4:	e7c1      	b.n	800da3a <__sflush_r+0x1a>
 800dab6:	2301      	movs	r3, #1
 800dab8:	4628      	mov	r0, r5
 800daba:	47b0      	blx	r6
 800dabc:	1c41      	adds	r1, r0, #1
 800dabe:	d1c8      	bne.n	800da52 <__sflush_r+0x32>
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0c5      	beq.n	800da52 <__sflush_r+0x32>
 800dac6:	2b1d      	cmp	r3, #29
 800dac8:	d001      	beq.n	800dace <__sflush_r+0xae>
 800daca:	2b16      	cmp	r3, #22
 800dacc:	d101      	bne.n	800dad2 <__sflush_r+0xb2>
 800dace:	602f      	str	r7, [r5, #0]
 800dad0:	e7b2      	b.n	800da38 <__sflush_r+0x18>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dad8:	81a3      	strh	r3, [r4, #12]
 800dada:	e7ae      	b.n	800da3a <__sflush_r+0x1a>
 800dadc:	690f      	ldr	r7, [r1, #16]
 800dade:	2f00      	cmp	r7, #0
 800dae0:	d0aa      	beq.n	800da38 <__sflush_r+0x18>
 800dae2:	0793      	lsls	r3, r2, #30
 800dae4:	bf18      	it	ne
 800dae6:	2300      	movne	r3, #0
 800dae8:	680e      	ldr	r6, [r1, #0]
 800daea:	bf08      	it	eq
 800daec:	694b      	ldreq	r3, [r1, #20]
 800daee:	1bf6      	subs	r6, r6, r7
 800daf0:	600f      	str	r7, [r1, #0]
 800daf2:	608b      	str	r3, [r1, #8]
 800daf4:	2e00      	cmp	r6, #0
 800daf6:	dd9f      	ble.n	800da38 <__sflush_r+0x18>
 800daf8:	4633      	mov	r3, r6
 800dafa:	463a      	mov	r2, r7
 800dafc:	4628      	mov	r0, r5
 800dafe:	6a21      	ldr	r1, [r4, #32]
 800db00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800db04:	47e0      	blx	ip
 800db06:	2800      	cmp	r0, #0
 800db08:	dc06      	bgt.n	800db18 <__sflush_r+0xf8>
 800db0a:	89a3      	ldrh	r3, [r4, #12]
 800db0c:	f04f 30ff 	mov.w	r0, #4294967295
 800db10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db14:	81a3      	strh	r3, [r4, #12]
 800db16:	e790      	b.n	800da3a <__sflush_r+0x1a>
 800db18:	4407      	add	r7, r0
 800db1a:	1a36      	subs	r6, r6, r0
 800db1c:	e7ea      	b.n	800daf4 <__sflush_r+0xd4>
 800db1e:	bf00      	nop
 800db20:	dfbffffe 	.word	0xdfbffffe

0800db24 <_fflush_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	690b      	ldr	r3, [r1, #16]
 800db28:	4605      	mov	r5, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	b913      	cbnz	r3, 800db34 <_fflush_r+0x10>
 800db2e:	2500      	movs	r5, #0
 800db30:	4628      	mov	r0, r5
 800db32:	bd38      	pop	{r3, r4, r5, pc}
 800db34:	b118      	cbz	r0, 800db3e <_fflush_r+0x1a>
 800db36:	6a03      	ldr	r3, [r0, #32]
 800db38:	b90b      	cbnz	r3, 800db3e <_fflush_r+0x1a>
 800db3a:	f7ff f815 	bl	800cb68 <__sinit>
 800db3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d0f3      	beq.n	800db2e <_fflush_r+0xa>
 800db46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db48:	07d0      	lsls	r0, r2, #31
 800db4a:	d404      	bmi.n	800db56 <_fflush_r+0x32>
 800db4c:	0599      	lsls	r1, r3, #22
 800db4e:	d402      	bmi.n	800db56 <_fflush_r+0x32>
 800db50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db52:	f7ff fa1b 	bl	800cf8c <__retarget_lock_acquire_recursive>
 800db56:	4628      	mov	r0, r5
 800db58:	4621      	mov	r1, r4
 800db5a:	f7ff ff61 	bl	800da20 <__sflush_r>
 800db5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db60:	4605      	mov	r5, r0
 800db62:	07da      	lsls	r2, r3, #31
 800db64:	d4e4      	bmi.n	800db30 <_fflush_r+0xc>
 800db66:	89a3      	ldrh	r3, [r4, #12]
 800db68:	059b      	lsls	r3, r3, #22
 800db6a:	d4e1      	bmi.n	800db30 <_fflush_r+0xc>
 800db6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db6e:	f7ff fa0e 	bl	800cf8e <__retarget_lock_release_recursive>
 800db72:	e7dd      	b.n	800db30 <_fflush_r+0xc>

0800db74 <__swbuf_r>:
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db76:	460e      	mov	r6, r1
 800db78:	4614      	mov	r4, r2
 800db7a:	4605      	mov	r5, r0
 800db7c:	b118      	cbz	r0, 800db86 <__swbuf_r+0x12>
 800db7e:	6a03      	ldr	r3, [r0, #32]
 800db80:	b90b      	cbnz	r3, 800db86 <__swbuf_r+0x12>
 800db82:	f7fe fff1 	bl	800cb68 <__sinit>
 800db86:	69a3      	ldr	r3, [r4, #24]
 800db88:	60a3      	str	r3, [r4, #8]
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	071a      	lsls	r2, r3, #28
 800db8e:	d525      	bpl.n	800dbdc <__swbuf_r+0x68>
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	b31b      	cbz	r3, 800dbdc <__swbuf_r+0x68>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	6922      	ldr	r2, [r4, #16]
 800db98:	b2f6      	uxtb	r6, r6
 800db9a:	1a98      	subs	r0, r3, r2
 800db9c:	6963      	ldr	r3, [r4, #20]
 800db9e:	4637      	mov	r7, r6
 800dba0:	4283      	cmp	r3, r0
 800dba2:	dc04      	bgt.n	800dbae <__swbuf_r+0x3a>
 800dba4:	4621      	mov	r1, r4
 800dba6:	4628      	mov	r0, r5
 800dba8:	f7ff ffbc 	bl	800db24 <_fflush_r>
 800dbac:	b9e0      	cbnz	r0, 800dbe8 <__swbuf_r+0x74>
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	60a3      	str	r3, [r4, #8]
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	6022      	str	r2, [r4, #0]
 800dbba:	701e      	strb	r6, [r3, #0]
 800dbbc:	6962      	ldr	r2, [r4, #20]
 800dbbe:	1c43      	adds	r3, r0, #1
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d004      	beq.n	800dbce <__swbuf_r+0x5a>
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	07db      	lsls	r3, r3, #31
 800dbc8:	d506      	bpl.n	800dbd8 <__swbuf_r+0x64>
 800dbca:	2e0a      	cmp	r6, #10
 800dbcc:	d104      	bne.n	800dbd8 <__swbuf_r+0x64>
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f7ff ffa7 	bl	800db24 <_fflush_r>
 800dbd6:	b938      	cbnz	r0, 800dbe8 <__swbuf_r+0x74>
 800dbd8:	4638      	mov	r0, r7
 800dbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbdc:	4621      	mov	r1, r4
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f000 f806 	bl	800dbf0 <__swsetup_r>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d0d5      	beq.n	800db94 <__swbuf_r+0x20>
 800dbe8:	f04f 37ff 	mov.w	r7, #4294967295
 800dbec:	e7f4      	b.n	800dbd8 <__swbuf_r+0x64>
	...

0800dbf0 <__swsetup_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4b2a      	ldr	r3, [pc, #168]	; (800dc9c <__swsetup_r+0xac>)
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	6818      	ldr	r0, [r3, #0]
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	b118      	cbz	r0, 800dc04 <__swsetup_r+0x14>
 800dbfc:	6a03      	ldr	r3, [r0, #32]
 800dbfe:	b90b      	cbnz	r3, 800dc04 <__swsetup_r+0x14>
 800dc00:	f7fe ffb2 	bl	800cb68 <__sinit>
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc0a:	0718      	lsls	r0, r3, #28
 800dc0c:	d422      	bmi.n	800dc54 <__swsetup_r+0x64>
 800dc0e:	06d9      	lsls	r1, r3, #27
 800dc10:	d407      	bmi.n	800dc22 <__swsetup_r+0x32>
 800dc12:	2309      	movs	r3, #9
 800dc14:	602b      	str	r3, [r5, #0]
 800dc16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1e:	81a3      	strh	r3, [r4, #12]
 800dc20:	e034      	b.n	800dc8c <__swsetup_r+0x9c>
 800dc22:	0758      	lsls	r0, r3, #29
 800dc24:	d512      	bpl.n	800dc4c <__swsetup_r+0x5c>
 800dc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc28:	b141      	cbz	r1, 800dc3c <__swsetup_r+0x4c>
 800dc2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc2e:	4299      	cmp	r1, r3
 800dc30:	d002      	beq.n	800dc38 <__swsetup_r+0x48>
 800dc32:	4628      	mov	r0, r5
 800dc34:	f7ff f9ca 	bl	800cfcc <_free_r>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	6363      	str	r3, [r4, #52]	; 0x34
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc42:	81a3      	strh	r3, [r4, #12]
 800dc44:	2300      	movs	r3, #0
 800dc46:	6063      	str	r3, [r4, #4]
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	6023      	str	r3, [r4, #0]
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f043 0308 	orr.w	r3, r3, #8
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	6923      	ldr	r3, [r4, #16]
 800dc56:	b94b      	cbnz	r3, 800dc6c <__swsetup_r+0x7c>
 800dc58:	89a3      	ldrh	r3, [r4, #12]
 800dc5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc62:	d003      	beq.n	800dc6c <__swsetup_r+0x7c>
 800dc64:	4621      	mov	r1, r4
 800dc66:	4628      	mov	r0, r5
 800dc68:	f000 f8ea 	bl	800de40 <__smakebuf_r>
 800dc6c:	89a0      	ldrh	r0, [r4, #12]
 800dc6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc72:	f010 0301 	ands.w	r3, r0, #1
 800dc76:	d00a      	beq.n	800dc8e <__swsetup_r+0x9e>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	60a3      	str	r3, [r4, #8]
 800dc7c:	6963      	ldr	r3, [r4, #20]
 800dc7e:	425b      	negs	r3, r3
 800dc80:	61a3      	str	r3, [r4, #24]
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	b943      	cbnz	r3, 800dc98 <__swsetup_r+0xa8>
 800dc86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc8a:	d1c4      	bne.n	800dc16 <__swsetup_r+0x26>
 800dc8c:	bd38      	pop	{r3, r4, r5, pc}
 800dc8e:	0781      	lsls	r1, r0, #30
 800dc90:	bf58      	it	pl
 800dc92:	6963      	ldrpl	r3, [r4, #20]
 800dc94:	60a3      	str	r3, [r4, #8]
 800dc96:	e7f4      	b.n	800dc82 <__swsetup_r+0x92>
 800dc98:	2000      	movs	r0, #0
 800dc9a:	e7f7      	b.n	800dc8c <__swsetup_r+0x9c>
 800dc9c:	200000ac 	.word	0x200000ac

0800dca0 <memmove>:
 800dca0:	4288      	cmp	r0, r1
 800dca2:	b510      	push	{r4, lr}
 800dca4:	eb01 0402 	add.w	r4, r1, r2
 800dca8:	d902      	bls.n	800dcb0 <memmove+0x10>
 800dcaa:	4284      	cmp	r4, r0
 800dcac:	4623      	mov	r3, r4
 800dcae:	d807      	bhi.n	800dcc0 <memmove+0x20>
 800dcb0:	1e43      	subs	r3, r0, #1
 800dcb2:	42a1      	cmp	r1, r4
 800dcb4:	d008      	beq.n	800dcc8 <memmove+0x28>
 800dcb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcbe:	e7f8      	b.n	800dcb2 <memmove+0x12>
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	4402      	add	r2, r0
 800dcc4:	428a      	cmp	r2, r1
 800dcc6:	d100      	bne.n	800dcca <memmove+0x2a>
 800dcc8:	bd10      	pop	{r4, pc}
 800dcca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcd2:	e7f7      	b.n	800dcc4 <memmove+0x24>

0800dcd4 <_raise_r>:
 800dcd4:	291f      	cmp	r1, #31
 800dcd6:	b538      	push	{r3, r4, r5, lr}
 800dcd8:	4604      	mov	r4, r0
 800dcda:	460d      	mov	r5, r1
 800dcdc:	d904      	bls.n	800dce8 <_raise_r+0x14>
 800dcde:	2316      	movs	r3, #22
 800dce0:	6003      	str	r3, [r0, #0]
 800dce2:	f04f 30ff 	mov.w	r0, #4294967295
 800dce6:	bd38      	pop	{r3, r4, r5, pc}
 800dce8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dcea:	b112      	cbz	r2, 800dcf2 <_raise_r+0x1e>
 800dcec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcf0:	b94b      	cbnz	r3, 800dd06 <_raise_r+0x32>
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f000 f830 	bl	800dd58 <_getpid_r>
 800dcf8:	462a      	mov	r2, r5
 800dcfa:	4601      	mov	r1, r0
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd02:	f000 b817 	b.w	800dd34 <_kill_r>
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d00a      	beq.n	800dd20 <_raise_r+0x4c>
 800dd0a:	1c59      	adds	r1, r3, #1
 800dd0c:	d103      	bne.n	800dd16 <_raise_r+0x42>
 800dd0e:	2316      	movs	r3, #22
 800dd10:	6003      	str	r3, [r0, #0]
 800dd12:	2001      	movs	r0, #1
 800dd14:	e7e7      	b.n	800dce6 <_raise_r+0x12>
 800dd16:	2400      	movs	r4, #0
 800dd18:	4628      	mov	r0, r5
 800dd1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd1e:	4798      	blx	r3
 800dd20:	2000      	movs	r0, #0
 800dd22:	e7e0      	b.n	800dce6 <_raise_r+0x12>

0800dd24 <raise>:
 800dd24:	4b02      	ldr	r3, [pc, #8]	; (800dd30 <raise+0xc>)
 800dd26:	4601      	mov	r1, r0
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	f7ff bfd3 	b.w	800dcd4 <_raise_r>
 800dd2e:	bf00      	nop
 800dd30:	200000ac 	.word	0x200000ac

0800dd34 <_kill_r>:
 800dd34:	b538      	push	{r3, r4, r5, lr}
 800dd36:	2300      	movs	r3, #0
 800dd38:	4d06      	ldr	r5, [pc, #24]	; (800dd54 <_kill_r+0x20>)
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	4611      	mov	r1, r2
 800dd40:	602b      	str	r3, [r5, #0]
 800dd42:	f7f3 fac4 	bl	80012ce <_kill>
 800dd46:	1c43      	adds	r3, r0, #1
 800dd48:	d102      	bne.n	800dd50 <_kill_r+0x1c>
 800dd4a:	682b      	ldr	r3, [r5, #0]
 800dd4c:	b103      	cbz	r3, 800dd50 <_kill_r+0x1c>
 800dd4e:	6023      	str	r3, [r4, #0]
 800dd50:	bd38      	pop	{r3, r4, r5, pc}
 800dd52:	bf00      	nop
 800dd54:	200035e4 	.word	0x200035e4

0800dd58 <_getpid_r>:
 800dd58:	f7f3 bab2 	b.w	80012c0 <_getpid>

0800dd5c <_sbrk_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	2300      	movs	r3, #0
 800dd60:	4d05      	ldr	r5, [pc, #20]	; (800dd78 <_sbrk_r+0x1c>)
 800dd62:	4604      	mov	r4, r0
 800dd64:	4608      	mov	r0, r1
 800dd66:	602b      	str	r3, [r5, #0]
 800dd68:	f7f3 fb34 	bl	80013d4 <_sbrk>
 800dd6c:	1c43      	adds	r3, r0, #1
 800dd6e:	d102      	bne.n	800dd76 <_sbrk_r+0x1a>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	b103      	cbz	r3, 800dd76 <_sbrk_r+0x1a>
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	bd38      	pop	{r3, r4, r5, pc}
 800dd78:	200035e4 	.word	0x200035e4

0800dd7c <memchr>:
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	b510      	push	{r4, lr}
 800dd80:	b2c9      	uxtb	r1, r1
 800dd82:	4402      	add	r2, r0
 800dd84:	4293      	cmp	r3, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	d101      	bne.n	800dd8e <memchr+0x12>
 800dd8a:	2000      	movs	r0, #0
 800dd8c:	e003      	b.n	800dd96 <memchr+0x1a>
 800dd8e:	7804      	ldrb	r4, [r0, #0]
 800dd90:	3301      	adds	r3, #1
 800dd92:	428c      	cmp	r4, r1
 800dd94:	d1f6      	bne.n	800dd84 <memchr+0x8>
 800dd96:	bd10      	pop	{r4, pc}

0800dd98 <_realloc_r>:
 800dd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9c:	4680      	mov	r8, r0
 800dd9e:	4614      	mov	r4, r2
 800dda0:	460e      	mov	r6, r1
 800dda2:	b921      	cbnz	r1, 800ddae <_realloc_r+0x16>
 800dda4:	4611      	mov	r1, r2
 800dda6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddaa:	f7ff b97f 	b.w	800d0ac <_malloc_r>
 800ddae:	b92a      	cbnz	r2, 800ddbc <_realloc_r+0x24>
 800ddb0:	f7ff f90c 	bl	800cfcc <_free_r>
 800ddb4:	4625      	mov	r5, r4
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddbc:	f000 f89e 	bl	800defc <_malloc_usable_size_r>
 800ddc0:	4284      	cmp	r4, r0
 800ddc2:	4607      	mov	r7, r0
 800ddc4:	d802      	bhi.n	800ddcc <_realloc_r+0x34>
 800ddc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddca:	d812      	bhi.n	800ddf2 <_realloc_r+0x5a>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4640      	mov	r0, r8
 800ddd0:	f7ff f96c 	bl	800d0ac <_malloc_r>
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d0ed      	beq.n	800ddb6 <_realloc_r+0x1e>
 800ddda:	42bc      	cmp	r4, r7
 800dddc:	4622      	mov	r2, r4
 800ddde:	4631      	mov	r1, r6
 800dde0:	bf28      	it	cs
 800dde2:	463a      	movcs	r2, r7
 800dde4:	f7ff f8dc 	bl	800cfa0 <memcpy>
 800dde8:	4631      	mov	r1, r6
 800ddea:	4640      	mov	r0, r8
 800ddec:	f7ff f8ee 	bl	800cfcc <_free_r>
 800ddf0:	e7e1      	b.n	800ddb6 <_realloc_r+0x1e>
 800ddf2:	4635      	mov	r5, r6
 800ddf4:	e7df      	b.n	800ddb6 <_realloc_r+0x1e>

0800ddf6 <__swhatbuf_r>:
 800ddf6:	b570      	push	{r4, r5, r6, lr}
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddfe:	4615      	mov	r5, r2
 800de00:	2900      	cmp	r1, #0
 800de02:	461e      	mov	r6, r3
 800de04:	b096      	sub	sp, #88	; 0x58
 800de06:	da0c      	bge.n	800de22 <__swhatbuf_r+0x2c>
 800de08:	89a3      	ldrh	r3, [r4, #12]
 800de0a:	2100      	movs	r1, #0
 800de0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de10:	bf0c      	ite	eq
 800de12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de16:	2340      	movne	r3, #64	; 0x40
 800de18:	2000      	movs	r0, #0
 800de1a:	6031      	str	r1, [r6, #0]
 800de1c:	602b      	str	r3, [r5, #0]
 800de1e:	b016      	add	sp, #88	; 0x58
 800de20:	bd70      	pop	{r4, r5, r6, pc}
 800de22:	466a      	mov	r2, sp
 800de24:	f000 f848 	bl	800deb8 <_fstat_r>
 800de28:	2800      	cmp	r0, #0
 800de2a:	dbed      	blt.n	800de08 <__swhatbuf_r+0x12>
 800de2c:	9901      	ldr	r1, [sp, #4]
 800de2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de36:	4259      	negs	r1, r3
 800de38:	4159      	adcs	r1, r3
 800de3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de3e:	e7eb      	b.n	800de18 <__swhatbuf_r+0x22>

0800de40 <__smakebuf_r>:
 800de40:	898b      	ldrh	r3, [r1, #12]
 800de42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de44:	079d      	lsls	r5, r3, #30
 800de46:	4606      	mov	r6, r0
 800de48:	460c      	mov	r4, r1
 800de4a:	d507      	bpl.n	800de5c <__smakebuf_r+0x1c>
 800de4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de50:	6023      	str	r3, [r4, #0]
 800de52:	6123      	str	r3, [r4, #16]
 800de54:	2301      	movs	r3, #1
 800de56:	6163      	str	r3, [r4, #20]
 800de58:	b002      	add	sp, #8
 800de5a:	bd70      	pop	{r4, r5, r6, pc}
 800de5c:	466a      	mov	r2, sp
 800de5e:	ab01      	add	r3, sp, #4
 800de60:	f7ff ffc9 	bl	800ddf6 <__swhatbuf_r>
 800de64:	9900      	ldr	r1, [sp, #0]
 800de66:	4605      	mov	r5, r0
 800de68:	4630      	mov	r0, r6
 800de6a:	f7ff f91f 	bl	800d0ac <_malloc_r>
 800de6e:	b948      	cbnz	r0, 800de84 <__smakebuf_r+0x44>
 800de70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de74:	059a      	lsls	r2, r3, #22
 800de76:	d4ef      	bmi.n	800de58 <__smakebuf_r+0x18>
 800de78:	f023 0303 	bic.w	r3, r3, #3
 800de7c:	f043 0302 	orr.w	r3, r3, #2
 800de80:	81a3      	strh	r3, [r4, #12]
 800de82:	e7e3      	b.n	800de4c <__smakebuf_r+0xc>
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	6020      	str	r0, [r4, #0]
 800de88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de8c:	81a3      	strh	r3, [r4, #12]
 800de8e:	9b00      	ldr	r3, [sp, #0]
 800de90:	6120      	str	r0, [r4, #16]
 800de92:	6163      	str	r3, [r4, #20]
 800de94:	9b01      	ldr	r3, [sp, #4]
 800de96:	b15b      	cbz	r3, 800deb0 <__smakebuf_r+0x70>
 800de98:	4630      	mov	r0, r6
 800de9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de9e:	f000 f81d 	bl	800dedc <_isatty_r>
 800dea2:	b128      	cbz	r0, 800deb0 <__smakebuf_r+0x70>
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	f023 0303 	bic.w	r3, r3, #3
 800deaa:	f043 0301 	orr.w	r3, r3, #1
 800deae:	81a3      	strh	r3, [r4, #12]
 800deb0:	89a3      	ldrh	r3, [r4, #12]
 800deb2:	431d      	orrs	r5, r3
 800deb4:	81a5      	strh	r5, [r4, #12]
 800deb6:	e7cf      	b.n	800de58 <__smakebuf_r+0x18>

0800deb8 <_fstat_r>:
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	2300      	movs	r3, #0
 800debc:	4d06      	ldr	r5, [pc, #24]	; (800ded8 <_fstat_r+0x20>)
 800debe:	4604      	mov	r4, r0
 800dec0:	4608      	mov	r0, r1
 800dec2:	4611      	mov	r1, r2
 800dec4:	602b      	str	r3, [r5, #0]
 800dec6:	f7f3 fa60 	bl	800138a <_fstat>
 800deca:	1c43      	adds	r3, r0, #1
 800decc:	d102      	bne.n	800ded4 <_fstat_r+0x1c>
 800dece:	682b      	ldr	r3, [r5, #0]
 800ded0:	b103      	cbz	r3, 800ded4 <_fstat_r+0x1c>
 800ded2:	6023      	str	r3, [r4, #0]
 800ded4:	bd38      	pop	{r3, r4, r5, pc}
 800ded6:	bf00      	nop
 800ded8:	200035e4 	.word	0x200035e4

0800dedc <_isatty_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	2300      	movs	r3, #0
 800dee0:	4d05      	ldr	r5, [pc, #20]	; (800def8 <_isatty_r+0x1c>)
 800dee2:	4604      	mov	r4, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	602b      	str	r3, [r5, #0]
 800dee8:	f7f3 fa5e 	bl	80013a8 <_isatty>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d102      	bne.n	800def6 <_isatty_r+0x1a>
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	b103      	cbz	r3, 800def6 <_isatty_r+0x1a>
 800def4:	6023      	str	r3, [r4, #0]
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	200035e4 	.word	0x200035e4

0800defc <_malloc_usable_size_r>:
 800defc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df00:	1f18      	subs	r0, r3, #4
 800df02:	2b00      	cmp	r3, #0
 800df04:	bfbc      	itt	lt
 800df06:	580b      	ldrlt	r3, [r1, r0]
 800df08:	18c0      	addlt	r0, r0, r3
 800df0a:	4770      	bx	lr

0800df0c <_init>:
 800df0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0e:	bf00      	nop
 800df10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df12:	bc08      	pop	{r3}
 800df14:	469e      	mov	lr, r3
 800df16:	4770      	bx	lr

0800df18 <_fini>:
 800df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1a:	bf00      	nop
 800df1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df1e:	bc08      	pop	{r3}
 800df20:	469e      	mov	lr, r3
 800df22:	4770      	bx	lr
