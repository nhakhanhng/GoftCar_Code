
EngineNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e634  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800e744  0800e744  0001e744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eae8  0800eae8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800eae8  0800eae8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eae8  0800eae8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eae8  0800eae8  0001eae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eaec  0800eaec  0001eaec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800eaf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000326c  2000008c  0800eb7c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032f8  0800eb7c  000232f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025772  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056e8  00000000  00000000  0004586a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  0004af58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001749  00000000  00000000  0004cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000071ec  00000000  00000000  0004e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026bd0  00000000  00000000  000556ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a045e  00000000  00000000  0007c27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008aa0  00000000  00000000  0011c6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0012517c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e72c 	.word	0x0800e72c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	0800e72c 	.word	0x0800e72c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <crc_8>:

#include "CRC.h"
#include "stdint.h"
unsigned char table[256] = {0};

uint8_t crc_8(uint8_t* data, uint8_t len) {
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
  unsigned crc = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  int i, j;
  for (j = len; j; j--, data++) {
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e023      	b.n	8000fee <crc_8+0x5e>
    crc ^= (*data << 8);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	461a      	mov	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	4053      	eors	r3, r2
 8000fb2:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e010      	b.n	8000fdc <crc_8+0x4c>
      if (crc & 0x8000)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d005      	beq.n	8000fd0 <crc_8+0x40>
        crc ^= (0x1070 << 3);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f483 4303 	eor.w	r3, r3, #33536	; 0x8300
 8000fca:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000fce:	617b      	str	r3, [r7, #20]
      crc <<= 1;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
    for(i = 8; i; i--) {
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1eb      	bne.n	8000fba <crc_8+0x2a>
  for (j = len; j; j--, data++) {
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1d8      	bne.n	8000fa6 <crc_8+0x16>
    }
  }
  return (uint8_t)(crc >> 8);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b2db      	uxtb	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001008:	f001 f9a0 	bl	800234c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100c:	f000 f824 	bl	8001058 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001010:	f000 f9fc 	bl	800140c <MX_GPIO_Init>
	MX_DMA_Init();
 8001014:	f000 f9a0 	bl	8001358 <MX_DMA_Init>
	MX_CAN_Init();
 8001018:	f000 f864 	bl	80010e4 <MX_CAN_Init>
	MX_I2C1_Init();
 800101c:	f000 f898 	bl	8001150 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001020:	f000 f8c4 	bl	80011ac <MX_TIM2_Init>
	MX_TIM3_Init();
 8001024:	f000 f91a 	bl	800125c <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001028:	f000 f96c 	bl	8001304 <MX_USART1_UART_Init>
//  HAL_GPIO_WritePin(Engine_Brake_GPIO_Port, Engine_Brake_Pin, 0);
//  HAL_GPIO_WritePin(Engine_Brake_GPIO_Port, Engine_Brake_Pin, 1);
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800102c:	f006 fa4c 	bl	80074c8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of tDefault */
	tDefaultHandle = osThreadNew(StartDefaultTask, NULL, &tDefault_attributes);
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <main+0x48>)
 8001032:	2100      	movs	r1, #0
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <main+0x4c>)
 8001036:	f006 fad5 	bl	80075e4 <osThreadNew>
 800103a:	4603      	mov	r3, r0
 800103c:	4a05      	ldr	r2, [pc, #20]	; (8001054 <main+0x50>)
 800103e:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	SyncPrintf_Init();
 8001040:	f00b ff72 	bl	800cf28 <SyncPrintf_Init>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001044:	f006 fa72 	bl	800752c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001048:	e7fe      	b.n	8001048 <main+0x44>
 800104a:	bf00      	nop
 800104c:	0800e838 	.word	0x0800e838
 8001050:	08001755 	.word	0x08001755
 8001054:	2000038c 	.word	0x2000038c

08001058 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b090      	sub	sp, #64	; 0x40
 800105c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	2228      	movs	r2, #40	; 0x28
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00c fafc 	bl	800d664 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107a:	2301      	movs	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001082:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108c:	2302      	movs	r3, #2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001096:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fc31 	bl	8005908 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x58>
		Error_Handler();
 80010ac:	f000 fc20 	bl	80018f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2102      	movs	r1, #2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fe9e 	bl	8005e0c <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x82>
		Error_Handler();
 80010d6:	f000 fc0b 	bl	80018f0 <Error_Handler>
	}
}
 80010da:	bf00      	nop
 80010dc:	3740      	adds	r7, #64	; 0x40
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_CAN_Init+0x64>)
 80010ea:	4a18      	ldr	r2, [pc, #96]	; (800114c <MX_CAN_Init+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4;
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_CAN_Init+0x64>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_CAN_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_CAN_Init+0x64>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_CAN_Init+0x64>)
 8001102:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001106:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_CAN_Init+0x64>)
 800110a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800110e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_CAN_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_CAN_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_CAN_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_CAN_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_CAN_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_CAN_Init+0x64>)
 8001130:	2201      	movs	r2, #1
 8001132:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_CAN_Init+0x64>)
 8001136:	f001 f93b 	bl	80023b0 <HAL_CAN_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_CAN_Init+0x60>
		Error_Handler();
 8001140:	f000 fbd6 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000a8 	.word	0x200000a8
 800114c:	40006400 	.word	0x40006400

08001150 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_I2C1_Init+0x54>)
 8001158:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C1_Init+0x50>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_I2C1_Init+0x58>)
 800115e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_I2C1_Init+0x50>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_I2C1_Init+0x50>)
 800118e:	f002 fc7d 	bl	8003a8c <HAL_I2C_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001198:	f000 fbaa 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000010c 	.word	0x2000010c
 80011a4:	40005400 	.word	0x40005400
 80011a8:	00061a80 	.word	0x00061a80

080011ac <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80011ce:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_TIM2_Init+0xac>)
 80011d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_TIM2_Init+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_TIM2_Init+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <MX_TIM2_Init+0xac>)
 80011e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_TIM2_Init+0xac>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_TIM2_Init+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <MX_TIM2_Init+0xac>)
 80011f8:	f005 f870 	bl	80062dc <HAL_TIM_PWM_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001202:	f000 fb75 	bl	80018f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800120e:	f107 0320 	add.w	r3, r7, #32
 8001212:	4619      	mov	r1, r3
 8001214:	4810      	ldr	r0, [pc, #64]	; (8001258 <MX_TIM2_Init+0xac>)
 8001216:	f005 ff17 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001220:	f000 fb66 	bl	80018f0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2204      	movs	r2, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM2_Init+0xac>)
 800123c:	f005 fc10 	bl	8006a60 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001246:	f000 fb53 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM2_Init+0xac>)
 800124c:	f000 fd02 	bl	8001c54 <HAL_TIM_MspPostInit>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001e8 	.word	0x200001e8

0800125c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00c f9fa 	bl	800d664 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_TIM3_Init+0xa0>)
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_TIM3_Init+0xa4>)
 800127c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM3_Init+0xa0>)
 800128c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001290:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_TIM3_Init+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800129e:	2303      	movs	r3, #3
 80012a0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM3_Init+0xa0>)
 80012ca:	f005 f8f9 	bl	80064c0 <HAL_TIM_Encoder_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x7c>
		Error_Handler();
 80012d4:	f000 fb0c 	bl	80018f0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM3_Init+0xa0>)
 80012e6:	f005 feaf 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80012f0:	f000 fafe 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000230 	.word	0x20000230
 8001300:	40000400 	.word	0x40000400

08001304 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART1_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800133c:	f005 fef4 	bl	8007128 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001346:	f000 fad3 	bl	80018f0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000278 	.word	0x20000278
 8001354:	40013800 	.word	0x40013800

08001358 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma1_channel1
 */
static void MX_DMA_Init(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <MX_DMA_Init+0xa8>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a27      	ldr	r2, [pc, #156]	; (8001400 <MX_DMA_Init+0xa8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6153      	str	r3, [r2, #20]
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MX_DMA_Init+0xa8>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
	hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <MX_DMA_Init+0xac>)
 8001378:	4a23      	ldr	r2, [pc, #140]	; (8001408 <MX_DMA_Init+0xb0>)
 800137a:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_DMA_Init+0xac>)
 800137e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001382:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_DMA_Init+0xac>)
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_DMA_Init+0xac>)
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_DMA_Init+0xac>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_DMA_Init+0xac>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_DMA_Init+0xac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_DMA_Init+0xac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK) {
 80013a8:	4816      	ldr	r0, [pc, #88]	; (8001404 <MX_DMA_Init+0xac>)
 80013aa:	f001 ffd3 	bl	8003354 <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_DMA_Init+0x60>
		Error_Handler();
 80013b4:	f000 fa9c 	bl	80018f0 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2105      	movs	r1, #5
 80013bc:	200e      	movs	r0, #14
 80013be:	f001 ff9e 	bl	80032fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013c2:	200e      	movs	r0, #14
 80013c4:	f001 ffb7 	bl	8003336 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2105      	movs	r1, #5
 80013cc:	200f      	movs	r0, #15
 80013ce:	f001 ff96 	bl	80032fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f001 ffaf 	bl	8003336 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2105      	movs	r1, #5
 80013dc:	2010      	movs	r0, #16
 80013de:	f001 ff8e 	bl	80032fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013e2:	2010      	movs	r0, #16
 80013e4:	f001 ffa7 	bl	8003336 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2105      	movs	r1, #5
 80013ec:	2011      	movs	r0, #17
 80013ee:	f001 ff86 	bl	80032fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013f2:	2011      	movs	r0, #17
 80013f4:	f001 ff9f 	bl	8003336 <HAL_NVIC_EnableIRQ>

}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	20000348 	.word	0x20000348
 8001408:	40020008 	.word	0x40020008

0800140c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <MX_GPIO_Init+0x128>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a43      	ldr	r2, [pc, #268]	; (8001534 <MX_GPIO_Init+0x128>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b41      	ldr	r3, [pc, #260]	; (8001534 <MX_GPIO_Init+0x128>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001438:	4b3e      	ldr	r3, [pc, #248]	; (8001534 <MX_GPIO_Init+0x128>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a3d      	ldr	r2, [pc, #244]	; (8001534 <MX_GPIO_Init+0x128>)
 800143e:	f043 0320 	orr.w	r3, r3, #32
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <MX_GPIO_Init+0x128>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <MX_GPIO_Init+0x128>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a37      	ldr	r2, [pc, #220]	; (8001534 <MX_GPIO_Init+0x128>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <MX_GPIO_Init+0x128>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001468:	4b32      	ldr	r3, [pc, #200]	; (8001534 <MX_GPIO_Init+0x128>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a31      	ldr	r2, [pc, #196]	; (8001534 <MX_GPIO_Init+0x128>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <MX_GPIO_Init+0x128>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001486:	482c      	ldr	r0, [pc, #176]	; (8001538 <MX_GPIO_Init+0x12c>)
 8001488:	f002 face 	bl	8003a28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800148c:	2200      	movs	r2, #0
 800148e:	210d      	movs	r1, #13
 8001490:	482a      	ldr	r0, [pc, #168]	; (800153c <MX_GPIO_Init+0x130>)
 8001492:	f002 fac9 	bl	8003a28 <HAL_GPIO_WritePin>
			Engine_Dir_Pin | Engine_Enable_Pin | Engine_Brake_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_B_Pin | LED_G_Pin | LED_R_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	f640 4102 	movw	r1, #3074	; 0xc02
 800149c:	4828      	ldr	r0, [pc, #160]	; (8001540 <MX_GPIO_Init+0x134>)
 800149e:	f002 fac3 	bl	8003a28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	481f      	ldr	r0, [pc, #124]	; (8001538 <MX_GPIO_Init+0x12c>)
 80014bc:	f002 f930 	bl	8003720 <HAL_GPIO_Init>

	/*Configure GPIO pins : Engine_Dir_Pin Engine_Enable_Pin Engine_Brake_Pin */
	GPIO_InitStruct.Pin = Engine_Dir_Pin | Engine_Enable_Pin | Engine_Brake_Pin;
 80014c0:	230d      	movs	r3, #13
 80014c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4819      	ldr	r0, [pc, #100]	; (800153c <MX_GPIO_Init+0x130>)
 80014d8:	f002 f922 	bl	8003720 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin;
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	4619      	mov	r1, r3
 80014ee:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_GPIO_Init+0x130>)
 80014f0:	f002 f916 	bl	8003720 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN2_Pin Encoder_Z_Pin */
	GPIO_InitStruct.Pin = BTN2_Pin | Encoder_Z_Pin;
 80014f4:	2309      	movs	r3, #9
 80014f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4619      	mov	r1, r3
 8001506:	480e      	ldr	r0, [pc, #56]	; (8001540 <MX_GPIO_Init+0x134>)
 8001508:	f002 f90a 	bl	8003720 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_B_Pin LED_G_Pin LED_R_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | LED_G_Pin | LED_R_Pin;
 800150c:	f640 4302 	movw	r3, #3074	; 0xc02
 8001510:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2302      	movs	r3, #2
 800151c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_GPIO_Init+0x134>)
 8001526:	f002 f8fb 	bl	8003720 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	40011000 	.word	0x40011000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00

08001544 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_I2C_MemRxCpltCallback+0x20>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	429a      	cmp	r2, r3
 8001554:	d102      	bne.n	800155c <HAL_I2C_MemRxCpltCallback+0x18>
		I2C_OS_MEM_RxCpltCB(&mainI2C);
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001558:	f00b fcca 	bl	800cef0 <I2C_OS_MEM_RxCpltCB>
	}
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000390 	.word	0x20000390

08001568 <HAL_I2C_MemTxCpltCallback>:
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if (mainI2C.hi2c == hi2c) {
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_I2C_MemTxCpltCallback+0x20>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d102      	bne.n	8001580 <HAL_I2C_MemTxCpltCallback+0x18>
		I2C_OS_MEM_TxCpltCB(&mainI2C);
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <HAL_I2C_MemTxCpltCallback+0x20>)
 800157c:	f00b fcc6 	bl	800cf0c <I2C_OS_MEM_TxCpltCB>
	}
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000390 	.word	0x20000390

0800158c <CAN_TxCallback>:

void CAN_TxCallback(CAN_HandleTypeDef *hcan) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <CAN_TxCallback+0x20>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	429a      	cmp	r2, r3
 800159c:	d102      	bne.n	80015a4 <CAN_TxCallback+0x18>
		CAN_OS_TxCplt_CB(&CANmain);
 800159e:	4803      	ldr	r0, [pc, #12]	; (80015ac <CAN_TxCallback+0x20>)
 80015a0:	f00b fb84 	bl	800ccac <CAN_OS_TxCplt_CB>

	}
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200003ac 	.word	0x200003ac

080015b0 <CAN_RxFifo0Callback>:

void CAN_RxFifo0Callback(CAN_HandleTypeDef *hcan) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	if (CANmain.hcan == hcan) {
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <CAN_RxFifo0Callback+0x20>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d102      	bne.n	80015c8 <CAN_RxFifo0Callback+0x18>
		CAN_OS_RxFifo0Cplt_CB(&CANmain);
 80015c2:	4803      	ldr	r0, [pc, #12]	; (80015d0 <CAN_RxFifo0Callback+0x20>)
 80015c4:	f00b fb5a 	bl	800cc7c <CAN_OS_RxFifo0Cplt_CB>
	}
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200003ac 	.word	0x200003ac

080015d4 <CANFrame_RcvDoneHandler>:
		}
	}
}

static void CANFrame_RcvDoneHandler(CANFrame_RxHeaderTypedef *CANFrame_RxHeader,
		uint8_t *str) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b092      	sub	sp, #72	; 0x48
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	uint8_t strLen = CANFrame_RxHeader->DataLen;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	791b      	ldrb	r3, [r3, #4]
 80015e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t ID;
	char Data[50];
	float Speed;
	int res = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	643b      	str	r3, [r7, #64]	; 0x40
	if (str[0] != '#' || str[strLen - 2] != '\r' || str[strLen - 1] != '\n') {
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b23      	cmp	r3, #35	; 0x23
 80015f0:	f040 8099 	bne.w	8001726 <CANFrame_RcvDoneHandler+0x152>
 80015f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015f8:	3b02      	subs	r3, #2
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b0d      	cmp	r3, #13
 8001602:	f040 8090 	bne.w	8001726 <CANFrame_RcvDoneHandler+0x152>
 8001606:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800160a:	3b01      	subs	r3, #1
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b0a      	cmp	r3, #10
 8001614:	f040 8087 	bne.w	8001726 <CANFrame_RcvDoneHandler+0x152>
		return;
	}
	if (str[strLen - 3] == '!') {
 8001618:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800161c:	3b03      	subs	r3, #3
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b21      	cmp	r3, #33	; 0x21
 8001626:	d108      	bne.n	800163a <CANFrame_RcvDoneHandler+0x66>
		SpeedController_Start(&SpeedController, 0);
 8001628:	2100      	movs	r1, #0
 800162a:	4845      	ldr	r0, [pc, #276]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 800162c:	f00a fec2 	bl	800c3b4 <SpeedController_Start>
		Engine_SetSpeed(&Engine, 0);
 8001630:	2100      	movs	r1, #0
 8001632:	4844      	ldr	r0, [pc, #272]	; (8001744 <CANFrame_RcvDoneHandler+0x170>)
 8001634:	f00a fc97 	bl	800bf66 <Engine_SetSpeed>
		return;
 8001638:	e07e      	b.n	8001738 <CANFrame_RcvDoneHandler+0x164>
	}

	if (DataPack_Split((char*) str, &ID, Data) != 0) {
 800163a:	f107 020c 	add.w	r2, r7, #12
 800163e:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8001642:	4619      	mov	r1, r3
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f00b fcc1 	bl	800cfcc <DataPack_Split>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d16c      	bne.n	800172a <CANFrame_RcvDoneHandler+0x156>
		return;
	}

	switch (ID) {
 8001650:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001654:	2b01      	cmp	r3, #1
 8001656:	d16a      	bne.n	800172e <CANFrame_RcvDoneHandler+0x15a>
	case 1:
		res = DataPack_GetSpeed(Data, &Speed);
 8001658:	f107 0208 	add.w	r2, r7, #8
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f00b fcee 	bl	800d044 <DataPack_GetSpeed>
 8001668:	6438      	str	r0, [r7, #64]	; 0x40
		if (res != 0)
 800166a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d160      	bne.n	8001732 <CANFrame_RcvDoneHandler+0x15e>
			return;
//		Engine_SetSpeed(&Engine, Speed * Engine_TIM_MaxPulse / 100);
		if (Speed == 0) {
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fc32 	bl	8000ee0 <__aeabi_fcmpeq>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00c      	beq.n	800169c <CANFrame_RcvDoneHandler+0xc8>
			SpeedController_SetSpeed(&SpeedController, 0);
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	482e      	ldr	r0, [pc, #184]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 8001688:	f00a ff88 	bl	800c59c <SpeedController_SetSpeed>
			SpeedController_Start(&SpeedController, 0);
 800168c:	2100      	movs	r1, #0
 800168e:	482c      	ldr	r0, [pc, #176]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 8001690:	f00a fe90 	bl	800c3b4 <SpeedController_Start>
			Engine_Brake(&Engine, ENGINE_BRAKE_SET);
 8001694:	2100      	movs	r1, #0
 8001696:	482b      	ldr	r0, [pc, #172]	; (8001744 <CANFrame_RcvDoneHandler+0x170>)
 8001698:	f00a fd22 	bl	800c0e0 <Engine_Brake>
		}
		if (Speed == SpeedController.SetPoint)
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fc1b 	bl	8000ee0 <__aeabi_fcmpeq>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d142      	bne.n	8001736 <CANFrame_RcvDoneHandler+0x162>
			return;
		if (Speed > 0) {
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fc3a 	bl	8000f30 <__aeabi_fcmpgt>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00e      	beq.n	80016e0 <CANFrame_RcvDoneHandler+0x10c>
			SpeedController_SetSpeed(&SpeedController, Speed);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4619      	mov	r1, r3
 80016c6:	481e      	ldr	r0, [pc, #120]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 80016c8:	f00a ff68 	bl	800c59c <SpeedController_SetSpeed>
			if (SpeedController.isEnable == 0)
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 80016ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d122      	bne.n	800171c <CANFrame_RcvDoneHandler+0x148>
				SpeedController_Start(&SpeedController, 1);
 80016d6:	2101      	movs	r1, #1
 80016d8:	4819      	ldr	r0, [pc, #100]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 80016da:	f00a fe6b 	bl	800c3b4 <SpeedController_Start>
 80016de:	e01d      	b.n	800171c <CANFrame_RcvDoneHandler+0x148>
		} else {
//			SpeedController_SetSpeed(&SpeedController, 0);
			SpeedController_Start(&SpeedController, 0);
 80016e0:	2100      	movs	r1, #0
 80016e2:	4817      	ldr	r0, [pc, #92]	; (8001740 <CANFrame_RcvDoneHandler+0x16c>)
 80016e4:	f00a fe66 	bl	800c3b4 <SpeedController_Start>
			Engine_SetSpeed(&Engine, Speed * 4 * Engine_TIM_MaxPulse / 100);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fa62 	bl	8000bb8 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4914      	ldr	r1, [pc, #80]	; (8001748 <CANFrame_RcvDoneHandler+0x174>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fa5d 	bl	8000bb8 <__aeabi_fmul>
 80016fe:	4603      	mov	r3, r0
 8001700:	4912      	ldr	r1, [pc, #72]	; (800174c <CANFrame_RcvDoneHandler+0x178>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fb0c 	bl	8000d20 <__aeabi_fdiv>
 8001708:	4603      	mov	r3, r0
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc1a 	bl	8000f44 <__aeabi_f2iz>
 8001710:	4603      	mov	r3, r0
 8001712:	b21b      	sxth	r3, r3
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <CANFrame_RcvDoneHandler+0x170>)
 8001718:	f00a fc25 	bl	800bf66 <Engine_SetSpeed>
		}
		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800171c:	2102      	movs	r1, #2
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <CANFrame_RcvDoneHandler+0x17c>)
 8001720:	f002 f99a 	bl	8003a58 <HAL_GPIO_TogglePin>
		break;
 8001724:	e008      	b.n	8001738 <CANFrame_RcvDoneHandler+0x164>
		return;
 8001726:	bf00      	nop
 8001728:	e006      	b.n	8001738 <CANFrame_RcvDoneHandler+0x164>
		return;
 800172a:	bf00      	nop
 800172c:	e004      	b.n	8001738 <CANFrame_RcvDoneHandler+0x164>
	default:
		break;
 800172e:	bf00      	nop
 8001730:	e002      	b.n	8001738 <CANFrame_RcvDoneHandler+0x164>
			return;
 8001732:	bf00      	nop
 8001734:	e000      	b.n	8001738 <CANFrame_RcvDoneHandler+0x164>
			return;
 8001736:	bf00      	nop
	}
}
 8001738:	3748      	adds	r7, #72	; 0x48
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000738 	.word	0x20000738
 8001744:	20000710 	.word	0x20000710
 8001748:	461c4000 	.word	0x461c4000
 800174c:	42c80000 	.word	0x42c80000
 8001750:	40010c00 	.word	0x40010c00

08001754 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b087      	sub	sp, #28
 8001758:	af04      	add	r7, sp, #16
 800175a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	I2C_OS_Init(&mainI2C, &hi2c1);
 800175c:	4940      	ldr	r1, [pc, #256]	; (8001860 <StartDefaultTask+0x10c>)
 800175e:	4841      	ldr	r0, [pc, #260]	; (8001864 <StartDefaultTask+0x110>)
 8001760:	f00b fb28 	bl	800cdb4 <I2C_OS_Init>
	CAN_OS_Init(&CANmain, &hcan);
 8001764:	4940      	ldr	r1, [pc, #256]	; (8001868 <StartDefaultTask+0x114>)
 8001766:	4841      	ldr	r0, [pc, #260]	; (800186c <StartDefaultTask+0x118>)
 8001768:	f00b f9ca 	bl	800cb00 <CAN_OS_Init>
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateTxCB_ID, CAN_TxCallback);
 800176c:	4a40      	ldr	r2, [pc, #256]	; (8001870 <StartDefaultTask+0x11c>)
 800176e:	2100      	movs	r1, #0
 8001770:	483e      	ldr	r0, [pc, #248]	; (800186c <StartDefaultTask+0x118>)
 8001772:	f00b faa8 	bl	800ccc6 <CAN_OS_RegisterCB>
	CAN_OS_RegisterCB(&CANmain, CAN_OS_ActivateRxFifo0_ID, CAN_RxFifo0Callback);
 8001776:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <StartDefaultTask+0x120>)
 8001778:	2101      	movs	r1, #1
 800177a:	483c      	ldr	r0, [pc, #240]	; (800186c <StartDefaultTask+0x118>)
 800177c:	f00b faa3 	bl	800ccc6 <CAN_OS_RegisterCB>

	INA219_Init(&INA219_main, &mainI2C, INA219_ADDRESS_Default);
 8001780:	2240      	movs	r2, #64	; 0x40
 8001782:	4938      	ldr	r1, [pc, #224]	; (8001864 <StartDefaultTask+0x110>)
 8001784:	483c      	ldr	r0, [pc, #240]	; (8001878 <StartDefaultTask+0x124>)
 8001786:	f00a fd95 	bl	800c2b4 <INA219_Init>
	CANFrame_Init(&CANFrame_Handler, &CANmain, CANFRAME_ENGINE_CONTROL_ID,
 800178a:	2300      	movs	r3, #0
 800178c:	2201      	movs	r2, #1
 800178e:	4937      	ldr	r1, [pc, #220]	; (800186c <StartDefaultTask+0x118>)
 8001790:	483a      	ldr	r0, [pc, #232]	; (800187c <StartDefaultTask+0x128>)
 8001792:	f00b f929 	bl	800c9e8 <CANFrame_Init>
	CAN_FILTER_FIFO0);
	CANFrame_RegCB(&CANFrame_Handler, CANFRAME_RCVCPLT_CB_ID,
 8001796:	4a3a      	ldr	r2, [pc, #232]	; (8001880 <StartDefaultTask+0x12c>)
 8001798:	2101      	movs	r1, #1
 800179a:	4838      	ldr	r0, [pc, #224]	; (800187c <StartDefaultTask+0x128>)
 800179c:	f00b f962 	bl	800ca64 <CANFrame_RegCB>
			CANFrame_RcvDoneHandler);
//	PowerPublisher_Init(&PowerPub, &INA219_main, &CANFrame_Handler, 50);
//	BNO055_Init(&imuBNO055, &mainI2C, BNO055_I2C_ADDR_HI);

	Encoder_Init(&Encoder, &htim3, 0.3, 10);
 80017a0:	230a      	movs	r3, #10
 80017a2:	4a38      	ldr	r2, [pc, #224]	; (8001884 <StartDefaultTask+0x130>)
 80017a4:	4938      	ldr	r1, [pc, #224]	; (8001888 <StartDefaultTask+0x134>)
 80017a6:	4839      	ldr	r0, [pc, #228]	; (800188c <StartDefaultTask+0x138>)
 80017a8:	f00a fa82 	bl	800bcb0 <Encoder_Init>
	Engine_Init(&Engine, -7200, 7200);
 80017ac:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80017b0:	4937      	ldr	r1, [pc, #220]	; (8001890 <StartDefaultTask+0x13c>)
 80017b2:	4838      	ldr	r0, [pc, #224]	; (8001894 <StartDefaultTask+0x140>)
 80017b4:	f00a fbbf 	bl	800bf36 <Engine_Init>
	Engine_ConfigTimer(&Engine, &htim2, TIM_CHANNEL_2);
 80017b8:	2204      	movs	r2, #4
 80017ba:	4937      	ldr	r1, [pc, #220]	; (8001898 <StartDefaultTask+0x144>)
 80017bc:	4835      	ldr	r0, [pc, #212]	; (8001894 <StartDefaultTask+0x140>)
 80017be:	f00a fb67 	bl	800be90 <Engine_ConfigTimer>
	Engine_ConfigControlPin(&Engine, BrakePin, DirPin, GasEnPin);
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <StartDefaultTask+0x148>)
 80017c4:	4c36      	ldr	r4, [pc, #216]	; (80018a0 <StartDefaultTask+0x14c>)
 80017c6:	4937      	ldr	r1, [pc, #220]	; (80018a4 <StartDefaultTask+0x150>)
 80017c8:	aa01      	add	r2, sp, #4
 80017ca:	c903      	ldmia	r1, {r0, r1}
 80017cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	9200      	str	r2, [sp, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017da:	482e      	ldr	r0, [pc, #184]	; (8001894 <StartDefaultTask+0x140>)
 80017dc:	f00a fb84 	bl	800bee8 <Engine_ConfigControlPin>

	SpeedController_Init(&SpeedController, &Encoder, &Engine, 50);
 80017e0:	2332      	movs	r3, #50	; 0x32
 80017e2:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <StartDefaultTask+0x140>)
 80017e4:	4929      	ldr	r1, [pc, #164]	; (800188c <StartDefaultTask+0x138>)
 80017e6:	4830      	ldr	r0, [pc, #192]	; (80018a8 <StartDefaultTask+0x154>)
 80017e8:	f00a fdba 	bl	800c360 <SpeedController_Init>
	HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80017ec:	2102      	movs	r1, #2
 80017ee:	482f      	ldr	r0, [pc, #188]	; (80018ac <StartDefaultTask+0x158>)
 80017f0:	f002 f932 	bl	8003a58 <HAL_GPIO_TogglePin>
//	IMUPublisher_Init(&IMUPub, &imuBNO055, &CANFrame_Handler, 10);
//	IMUPublisher_EnablePub(&IMUPub, IMUPUBLISHER_PUB_EULER);\
//	IMUPublisher_Start(&IMUPub, 1);
	Encoder.EnCntTraveled = 1;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <StartDefaultTask+0x138>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	751a      	strb	r2, [r3, #20]
	Encoder.PulsePerMeter = 2927 * 2;
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <StartDefaultTask+0x138>)
 80017fc:	f241 62de 	movw	r2, #5854	; 0x16de
 8001800:	611a      	str	r2, [r3, #16]
	SpeedController.PulsePerMeter = 2927 * 2;
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <StartDefaultTask+0x154>)
 8001804:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <StartDefaultTask+0x15c>)
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_Start(&Encoder, 1);
 8001808:	2101      	movs	r1, #1
 800180a:	4820      	ldr	r0, [pc, #128]	; (800188c <StartDefaultTask+0x138>)
 800180c:	f00a fa7c 	bl	800bd08 <Encoder_Start>
	SpeedController_SetTunings(&SpeedController, 180.0, 1.0, 35.0);
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <StartDefaultTask+0x160>)
 8001812:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001816:	4928      	ldr	r1, [pc, #160]	; (80018b8 <StartDefaultTask+0x164>)
 8001818:	4823      	ldr	r0, [pc, #140]	; (80018a8 <StartDefaultTask+0x154>)
 800181a:	f00a feed 	bl	800c5f8 <SpeedController_SetTunings>
	SpeedController_Start(&SpeedController, 1);
 800181e:	2101      	movs	r1, #1
 8001820:	4821      	ldr	r0, [pc, #132]	; (80018a8 <StartDefaultTask+0x154>)
 8001822:	f00a fdc7 	bl	800c3b4 <SpeedController_Start>
	CAN_OS_Start(&CANmain);
 8001826:	4811      	ldr	r0, [pc, #68]	; (800186c <StartDefaultTask+0x118>)
 8001828:	f00b f9a8 	bl	800cb7c <CAN_OS_Start>
//	PowerPublisher_Start(&PowerPub, 1);
//	SpeedController_SetSpeed(&SpeedController, 0.3);

	SyncPrintf("####### Engine I AM AWAKE ##### \r\n");
 800182c:	4823      	ldr	r0, [pc, #140]	; (80018bc <StartDefaultTask+0x168>)
 800182e:	f00b fb89 	bl	800cf44 <SyncPrintf>
//	SpeedController_SetSpeed(&SpeedController, 5);
//	Engine_SetSpeed(&Engine, 100);
//	TestTaskHandle = osThreadNew(TestTask, NULL, &TestTask_attributes);
	osThreadSetPriority(tDefaultHandle, osPriorityBelowNormal);
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <StartDefaultTask+0x16c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2110      	movs	r1, #16
 8001838:	4618      	mov	r0, r3
 800183a:	f005 ff7d 	bl	8007738 <osThreadSetPriority>
//	Speed = 10;
	/* Infinite loop */
	for (;;) {
		GPIO_TogglePin(Blinker);
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <StartDefaultTask+0x170>)
 8001840:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001844:	f00b fa93 	bl	800cd6e <GPIO_TogglePin>
//		SpeedController_SetSpeed(&SpeedController, Speed);
		curSpeed = Encoder_GetSpeed_MPS(&Encoder);
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <StartDefaultTask+0x138>)
 800184a:	f00a fb09 	bl	800be60 <Encoder_GetSpeed_MPS>
 800184e:	4603      	mov	r3, r0
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <StartDefaultTask+0x174>)
 8001852:	6013      	str	r3, [r2, #0]
//		GPIO_WritePin(DirPin, 1);
//		GPIO_WritePin(GasEnPin, 0);
//		GPIO_WritePin(BrakePin, 0);
//		GPIO_WritePin(DirPin, 0);

		osDelay(500);
 8001854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001858:	f006 f812 	bl	8007880 <osDelay>
		GPIO_TogglePin(Blinker);
 800185c:	e7ef      	b.n	800183e <StartDefaultTask+0xea>
 800185e:	bf00      	nop
 8001860:	2000010c 	.word	0x2000010c
 8001864:	20000390 	.word	0x20000390
 8001868:	200000a8 	.word	0x200000a8
 800186c:	200003ac 	.word	0x200003ac
 8001870:	0800158d 	.word	0x0800158d
 8001874:	080015b1 	.word	0x080015b1
 8001878:	2000039c 	.word	0x2000039c
 800187c:	200003bc 	.word	0x200003bc
 8001880:	080015d5 	.word	0x080015d5
 8001884:	3e99999a 	.word	0x3e99999a
 8001888:	20000230 	.word	0x20000230
 800188c:	200006e4 	.word	0x200006e4
 8001890:	ffffe3e0 	.word	0xffffe3e0
 8001894:	20000710 	.word	0x20000710
 8001898:	200001e8 	.word	0x200001e8
 800189c:	20000018 	.word	0x20000018
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000010 	.word	0x20000010
 80018a8:	20000738 	.word	0x20000738
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	45b6f000 	.word	0x45b6f000
 80018b4:	420c0000 	.word	0x420c0000
 80018b8:	43340000 	.word	0x43340000
 80018bc:	0800e75c 	.word	0x0800e75c
 80018c0:	2000038c 	.word	0x2000038c
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000768 	.word	0x20000768

080018cc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80018de:	f000 fd4b 	bl	8002378 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40000800 	.word	0x40000800

080018f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_MspInit+0x68>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_MspInit+0x68>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_MspInit+0x68>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_MspInit+0x68>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_MspInit+0x68>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x68>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	210f      	movs	r1, #15
 8001936:	f06f 0001 	mvn.w	r0, #1
 800193a:	f001 fce0 	bl	80032fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_MspInit+0x6c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_MspInit+0x6c>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000

0800196c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <HAL_CAN_MspInit+0xcc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d151      	bne.n	8001a30 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_CAN_MspInit+0xd0>)
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_CAN_MspInit+0xd0>)
 8001992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001996:	61d3      	str	r3, [r2, #28]
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_CAN_MspInit+0xd0>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_CAN_MspInit+0xd0>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <HAL_CAN_MspInit+0xd0>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6193      	str	r3, [r2, #24]
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_CAN_MspInit+0xd0>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	4619      	mov	r1, r3
 80019d0:	481b      	ldr	r0, [pc, #108]	; (8001a40 <HAL_CAN_MspInit+0xd4>)
 80019d2:	f001 fea5 	bl	8003720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4815      	ldr	r0, [pc, #84]	; (8001a40 <HAL_CAN_MspInit+0xd4>)
 80019ec:	f001 fe98 	bl	8003720 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2105      	movs	r1, #5
 80019f4:	2013      	movs	r0, #19
 80019f6:	f001 fc82 	bl	80032fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80019fa:	2013      	movs	r0, #19
 80019fc:	f001 fc9b 	bl	8003336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2105      	movs	r1, #5
 8001a04:	2014      	movs	r0, #20
 8001a06:	f001 fc7a 	bl	80032fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001a0a:	2014      	movs	r0, #20
 8001a0c:	f001 fc93 	bl	8003336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2105      	movs	r1, #5
 8001a14:	2015      	movs	r0, #21
 8001a16:	f001 fc72 	bl	80032fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001a1a:	2015      	movs	r0, #21
 8001a1c:	f001 fc8b 	bl	8003336 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2105      	movs	r1, #5
 8001a24:	2016      	movs	r0, #22
 8001a26:	f001 fc6a 	bl	80032fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001a2a:	2016      	movs	r0, #22
 8001a2c:	f001 fc83 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40006400 	.word	0x40006400
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010800 	.word	0x40010800

08001a44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_I2C_MspInit+0x118>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d177      	bne.n	8001b54 <HAL_I2C_MspInit+0x110>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a64:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <HAL_I2C_MspInit+0x11c>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a3d      	ldr	r2, [pc, #244]	; (8001b60 <HAL_I2C_MspInit+0x11c>)
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_I2C_MspInit+0x11c>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a80:	2312      	movs	r3, #18
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4835      	ldr	r0, [pc, #212]	; (8001b64 <HAL_I2C_MspInit+0x120>)
 8001a90:	f001 fe46 	bl	8003720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a94:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_I2C_MspInit+0x11c>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <HAL_I2C_MspInit+0x11c>)
 8001a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9e:	61d3      	str	r3, [r2, #28]
 8001aa0:	4b2f      	ldr	r3, [pc, #188]	; (8001b60 <HAL_I2C_MspInit+0x11c>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001aae:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <HAL_I2C_MspInit+0x128>)
 8001ab0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001adc:	4822      	ldr	r0, [pc, #136]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001ade:	f001 fc39 	bl	8003354 <HAL_DMA_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001ae8:	f7ff ff02 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
 8001af2:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_I2C_MspInit+0x124>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_I2C_MspInit+0x130>)
 8001afc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b00:	2210      	movs	r2, #16
 8001b02:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001b28:	4811      	ldr	r0, [pc, #68]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b2a:	f001 fc13 	bl	8003354 <HAL_DMA_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8001b34:	f7ff fedc 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3e:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_I2C_MspInit+0x12c>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2105      	movs	r1, #5
 8001b48:	201f      	movs	r0, #31
 8001b4a:	f001 fbd8 	bl	80032fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b4e:	201f      	movs	r0, #31
 8001b50:	f001 fbf1 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40010c00 	.word	0x40010c00
 8001b68:	20000160 	.word	0x20000160
 8001b6c:	40020080 	.word	0x40020080
 8001b70:	200001a4 	.word	0x200001a4
 8001b74:	4002006c 	.word	0x4002006c

08001b78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b88:	d10b      	bne.n	8001ba2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_TIM_PWM_MspInit+0x34>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_TIM_PWM_MspInit+0x34>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	61d3      	str	r3, [r2, #28]
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_TIM_PWM_MspInit+0x34>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d135      	bne.n	8001c3c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	61d3      	str	r3, [r2, #28]
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_TIM_Encoder_MspInit+0x98>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c00:	2330      	movs	r3, #48	; 0x30
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	480e      	ldr	r0, [pc, #56]	; (8001c4c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c14:	f001 fd84 	bl	8003720 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
 8001c36:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	40010000 	.word	0x40010000

08001c54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c72:	d117      	bne.n	8001ca4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_TIM_MspPostInit+0x58>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_TIM_MspPostInit+0x58>)
 8001c7a:	f043 0304 	orr.w	r3, r3, #4
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_TIM_MspPostInit+0x58>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <HAL_TIM_MspPostInit+0x5c>)
 8001ca0:	f001 fd3e 	bl	8003720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40010800 	.word	0x40010800

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a42      	ldr	r2, [pc, #264]	; (8001dd8 <HAL_UART_MspInit+0x124>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d17d      	bne.n	8001dd0 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_UART_MspInit+0x128>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a40      	ldr	r2, [pc, #256]	; (8001ddc <HAL_UART_MspInit+0x128>)
 8001cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_UART_MspInit+0x128>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_UART_MspInit+0x128>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <HAL_UART_MspInit+0x128>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_UART_MspInit+0x128>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	4831      	ldr	r0, [pc, #196]	; (8001de0 <HAL_UART_MspInit+0x12c>)
 8001d1a:	f001 fd01 	bl	8003720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 0310 	add.w	r3, r7, #16
 8001d30:	4619      	mov	r1, r3
 8001d32:	482b      	ldr	r0, [pc, #172]	; (8001de0 <HAL_UART_MspInit+0x12c>)
 8001d34:	f001 fcf4 	bl	8003720 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_UART_MspInit+0x134>)
 8001d3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d68:	481e      	ldr	r0, [pc, #120]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d6a:	f001 faf3 	bl	8003354 <HAL_DMA_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001d74:	f7ff fdbc 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a1a      	ldr	r2, [pc, #104]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d7e:	4a19      	ldr	r2, [pc, #100]	; (8001de4 <HAL_UART_MspInit+0x130>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001d86:	4a1a      	ldr	r2, [pc, #104]	; (8001df0 <HAL_UART_MspInit+0x13c>)
 8001d88:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001db6:	f001 facd 	bl	8003354 <HAL_DMA_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001dc0:	f7ff fd96 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_UART_MspInit+0x138>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	200002c0 	.word	0x200002c0
 8001de8:	40020058 	.word	0x40020058
 8001dec:	20000304 	.word	0x20000304
 8001df0:	40020044 	.word	0x40020044

08001df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_InitTick+0xe8>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <HAL_InitTick+0xe8>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	61d3      	str	r3, [r2, #28]
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_InitTick+0xe8>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e22:	f107 0210 	add.w	r2, r7, #16
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 f95d 	bl	80060ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d103      	bne.n	8001e44 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e3c:	f004 f92e 	bl	800609c <HAL_RCC_GetPCLK1Freq>
 8001e40:	6378      	str	r0, [r7, #52]	; 0x34
 8001e42:	e004      	b.n	8001e4e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e44:	f004 f92a 	bl	800609c <HAL_RCC_GetPCLK1Freq>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <HAL_InitTick+0xec>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e5e:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_InitTick+0xf4>)
 8001e60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e68:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001e82:	4818      	ldr	r0, [pc, #96]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e84:	f004 f980 	bl	8006188 <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11b      	bne.n	8001ece <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001e96:	4813      	ldr	r0, [pc, #76]	; (8001ee4 <HAL_InitTick+0xf0>)
 8001e98:	f004 f9ce 	bl	8006238 <HAL_TIM_Base_Start_IT>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d111      	bne.n	8001ece <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eaa:	201e      	movs	r0, #30
 8001eac:	f001 fa43 	bl	8003336 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	d808      	bhi.n	8001ec8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	201e      	movs	r0, #30
 8001ebc:	f001 fa1f 	bl	80032fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec0:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_InitTick+0xf8>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e002      	b.n	8001ece <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3738      	adds	r7, #56	; 0x38
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	431bde83 	.word	0x431bde83
 8001ee4:	2000076c 	.word	0x2000076c
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	20000024 	.word	0x20000024

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <NMI_Handler+0x4>

08001ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <MemManage_Handler+0x4>

08001f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
	...

08001f1c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA1_Channel4_IRQHandler+0x10>)
 8001f22:	f001 fae9 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000304 	.word	0x20000304

08001f30 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <DMA1_Channel5_IRQHandler+0x10>)
 8001f36:	f001 fadf 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002c0 	.word	0x200002c0

08001f44 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <DMA1_Channel6_IRQHandler+0x10>)
 8001f4a:	f001 fad5 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200001a4 	.word	0x200001a4

08001f58 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <DMA1_Channel7_IRQHandler+0x10>)
 8001f5e:	f001 facb 	bl	80034f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000160 	.word	0x20000160

08001f6c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001f72:	f000 fed4 	bl	8002d1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200000a8 	.word	0x200000a8

08001f80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f86:	f000 feca 	bl	8002d1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200000a8 	.word	0x200000a8

08001f94 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <CAN1_RX1_IRQHandler+0x10>)
 8001f9a:	f000 fec0 	bl	8002d1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200000a8 	.word	0x200000a8

08001fa8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <CAN1_SCE_IRQHandler+0x10>)
 8001fae:	f000 feb6 	bl	8002d1e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200000a8 	.word	0x200000a8

08001fbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <TIM4_IRQHandler+0x10>)
 8001fc2:	f004 fc44 	bl	800684e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000076c 	.word	0x2000076c

08001fd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <I2C1_EV_IRQHandler+0x10>)
 8001fd6:	f002 f88b 	bl	80040f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000010c 	.word	0x2000010c

08001fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <_kill>:

int _kill(int pid, int sig)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ffc:	f00b fc42 	bl	800d884 <__errno>
 8002000:	4603      	mov	r3, r0
 8002002:	2216      	movs	r2, #22
 8002004:	601a      	str	r2, [r3, #0]
  return -1;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_exit>:

void _exit (int status)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800201a:	f04f 31ff 	mov.w	r1, #4294967295
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffe7 	bl	8001ff2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002024:	e7fe      	b.n	8002024 <_exit+0x12>

08002026 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e00a      	b.n	800204e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002038:	f3af 8000 	nop.w
 800203c:	4601      	mov	r1, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	3301      	adds	r3, #1
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	dbf0      	blt.n	8002038 <_read+0x12>
  }

  return len;
 8002056:	687b      	ldr	r3, [r7, #4]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e009      	b.n	8002086 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	60ba      	str	r2, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <_write+0x12>
  }
  return len;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_close>:

int _close(int file)

{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020be:	605a      	str	r2, [r3, #4]
  return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <_isatty>:

int _isatty(int file)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f00b fbac 	bl	800d884 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20005000 	.word	0x20005000
 8002158:	00000400 	.word	0x00000400
 800215c:	200007b4 	.word	0x200007b4
 8002160:	200032f8 	.word	0x200032f8

08002164 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002170:	f7ff fff8 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002176:	490c      	ldr	r1, [pc, #48]	; (80021a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002178:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800218c:	4c09      	ldr	r4, [pc, #36]	; (80021b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219a:	f00b fb79 	bl	800d890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800219e:	f7fe ff31 	bl	8001004 <main>
  bx lr
 80021a2:	4770      	bx	lr
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80021ac:	0800eaf0 	.word	0x0800eaf0
  ldr r2, =_sbss
 80021b0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80021b4:	200032f8 	.word	0x200032f8

080021b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC1_2_IRQHandler>

080021ba <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
}
 80021ca:	bf00      	nop
 80021cc:	f7ff fb90 	bl	80018f0 <Error_Handler>
 80021d0:	e7fe      	b.n	80021d0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	e007      	b.n	80021e8 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	2100      	movs	r1, #0
 80021de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d9f4      	bls.n	80021d8 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	721a      	strb	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d104      	bne.n	8002214 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800220a:	b672      	cpsid	i
}
 800220c:	bf00      	nop
 800220e:	f7ff fb6f 	bl	80018f0 <Error_Handler>
 8002212:	e7fe      	b.n	8002212 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7a1b      	ldrb	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d904      	bls.n	8002226 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
 8002220:	f7ff fb66 	bl	80018f0 <Error_Handler>
 8002224:	e7fe      	b.n	8002224 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7a1b      	ldrb	r3, [r3, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	b2d1      	uxtb	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	7211      	strb	r1, [r2, #8]
 8002232:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002234:	f3ef 8211 	mrs	r2, BASEPRI
 8002238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	60fa      	str	r2, [r7, #12]
 800224a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800226a:	b672      	cpsid	i
}
 800226c:	bf00      	nop
 800226e:	f7ff fb3f 	bl	80018f0 <Error_Handler>
 8002272:	e7fe      	b.n	8002272 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7a1b      	ldrb	r3, [r3, #8]
 8002278:	3b01      	subs	r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7a1b      	ldrb	r3, [r3, #8]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d904      	bls.n	8002292 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
 800228c:	f7ff fb30 	bl	80018f0 <Error_Handler>
 8002290:	e7fe      	b.n	8002290 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7a1b      	ldrb	r3, [r3, #8]
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022a6:	bf00      	nop
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80022be:	f00b fae1 	bl	800d884 <__errno>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2216      	movs	r2, #22
 80022c6:	601a      	str	r2, [r3, #0]
    return;
 80022c8:	e015      	b.n	80022f6 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80022ca:	200c      	movs	r0, #12
 80022cc:	f00a ff4c 	bl	800d168 <malloc>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff68 	bl	80021ba <stm32_lock_init>
    return;
 80022ea:	e004      	b.n	80022f6 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80022f0:	f7ff fafe 	bl	80018f0 <Error_Handler>
 80022f4:	e7fe      	b.n	80022f4 <__retarget_lock_init_recursive+0x44>
}
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d104      	bne.n	8002314 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800230a:	b672      	cpsid	i
}
 800230c:	bf00      	nop
 800230e:	f7ff faef 	bl	80018f0 <Error_Handler>
 8002312:	e7fe      	b.n	8002312 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff70 	bl	80021fc <stm32_lock_acquire>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002332:	b672      	cpsid	i
}
 8002334:	bf00      	nop
 8002336:	f7ff fadb 	bl	80018f0 <Error_Handler>
 800233a:	e7fe      	b.n	800233a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff8c 	bl	800225c <stm32_lock_release>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_Init+0x28>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_Init+0x28>)
 8002356:	f043 0310 	orr.w	r3, r3, #16
 800235a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 ffc3 	bl	80032e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	200f      	movs	r0, #15
 8002364:	f7ff fd46 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f7ff fac8 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40022000 	.word	0x40022000

08002378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_IncTick+0x1c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_IncTick+0x20>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_IncTick+0x20>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000028 	.word	0x20000028
 8002398:	200007d0 	.word	0x200007d0

0800239c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_GetTick+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	200007d0 	.word	0x200007d0

080023b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e11c      	b.n	80025fc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d131      	bne.n	8002432 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a8c      	ldr	r2, [pc, #560]	; (8002604 <HAL_CAN_Init+0x254>)
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a8c      	ldr	r2, [pc, #560]	; (8002608 <HAL_CAN_Init+0x258>)
 80023d8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a8b      	ldr	r2, [pc, #556]	; (800260c <HAL_CAN_Init+0x25c>)
 80023de:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a8b      	ldr	r2, [pc, #556]	; (8002610 <HAL_CAN_Init+0x260>)
 80023e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <HAL_CAN_Init+0x264>)
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a8a      	ldr	r2, [pc, #552]	; (8002618 <HAL_CAN_Init+0x268>)
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a89      	ldr	r2, [pc, #548]	; (800261c <HAL_CAN_Init+0x26c>)
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a89      	ldr	r2, [pc, #548]	; (8002620 <HAL_CAN_Init+0x270>)
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a88      	ldr	r2, [pc, #544]	; (8002624 <HAL_CAN_Init+0x274>)
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a88      	ldr	r2, [pc, #544]	; (8002628 <HAL_CAN_Init+0x278>)
 8002408:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a87      	ldr	r2, [pc, #540]	; (800262c <HAL_CAN_Init+0x27c>)
 800240e:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a87      	ldr	r2, [pc, #540]	; (8002630 <HAL_CAN_Init+0x280>)
 8002414:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a86      	ldr	r2, [pc, #536]	; (8002634 <HAL_CAN_Init+0x284>)
 800241a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a84      	ldr	r2, [pc, #528]	; (8002638 <HAL_CAN_Init+0x288>)
 8002428:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002442:	f7ff ffab 	bl	800239c <HAL_GetTick>
 8002446:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002448:	e012      	b.n	8002470 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800244a:	f7ff ffa7 	bl	800239c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b0a      	cmp	r3, #10
 8002456:	d90b      	bls.n	8002470 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2205      	movs	r2, #5
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0c5      	b.n	80025fc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0e5      	beq.n	800244a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0202 	bic.w	r2, r2, #2
 800248c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248e:	f7ff ff85 	bl	800239c <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002494:	e012      	b.n	80024bc <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002496:	f7ff ff81 	bl	800239c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b0a      	cmp	r3, #10
 80024a2:	d90b      	bls.n	80024bc <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2205      	movs	r2, #5
 80024b4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e09f      	b.n	80025fc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e5      	bne.n	8002496 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7e1b      	ldrb	r3, [r3, #24]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d108      	bne.n	80024e4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e007      	b.n	80024f4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e5b      	ldrb	r3, [r3, #25]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e007      	b.n	800251e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7e9b      	ldrb	r3, [r3, #26]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d108      	bne.n	8002538 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0220 	orr.w	r2, r2, #32
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e007      	b.n	8002548 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0220 	bic.w	r2, r2, #32
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	7edb      	ldrb	r3, [r3, #27]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d108      	bne.n	8002562 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0210 	bic.w	r2, r2, #16
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e007      	b.n	8002572 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0210 	orr.w	r2, r2, #16
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7f1b      	ldrb	r3, [r3, #28]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d108      	bne.n	800258c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0208 	orr.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e007      	b.n	800259c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0208 	bic.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7f5b      	ldrb	r3, [r3, #29]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0204 	orr.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e007      	b.n	80025c6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0204 	bic.w	r2, r2, #4
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	ea42 0103 	orr.w	r1, r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	08003115 	.word	0x08003115
 8002608:	08003127 	.word	0x08003127
 800260c:	08003139 	.word	0x08003139
 8002610:	0800314b 	.word	0x0800314b
 8002614:	080030a9 	.word	0x080030a9
 8002618:	080030bb 	.word	0x080030bb
 800261c:	080030cd 	.word	0x080030cd
 8002620:	080030df 	.word	0x080030df
 8002624:	080030f1 	.word	0x080030f1
 8002628:	08003103 	.word	0x08003103
 800262c:	0800315d 	.word	0x0800315d
 8002630:	0800316f 	.word	0x0800316f
 8002634:	08003181 	.word	0x08003181
 8002638:	0800196d 	.word	0x0800196d

0800263c <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	460b      	mov	r3, r1
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e094      	b.n	800278e <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d168      	bne.n	8002742 <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8002670:	7afb      	ldrb	r3, [r7, #11]
 8002672:	2b0e      	cmp	r3, #14
 8002674:	d85c      	bhi.n	8002730 <HAL_CAN_RegisterCallback+0xf4>
 8002676:	a201      	add	r2, pc, #4	; (adr r2, 800267c <HAL_CAN_RegisterCallback+0x40>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	080026b9 	.word	0x080026b9
 8002680:	080026c1 	.word	0x080026c1
 8002684:	080026c9 	.word	0x080026c9
 8002688:	080026d1 	.word	0x080026d1
 800268c:	080026d9 	.word	0x080026d9
 8002690:	080026e1 	.word	0x080026e1
 8002694:	080026e9 	.word	0x080026e9
 8002698:	080026f1 	.word	0x080026f1
 800269c:	080026f9 	.word	0x080026f9
 80026a0:	08002701 	.word	0x08002701
 80026a4:	08002709 	.word	0x08002709
 80026a8:	08002711 	.word	0x08002711
 80026ac:	08002719 	.word	0x08002719
 80026b0:	08002721 	.word	0x08002721
 80026b4:	08002729 	.word	0x08002729
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80026be:	e065      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80026c6:	e061      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80026ce:	e05d      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80026d6:	e059      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80026de:	e055      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 80026e6:	e051      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 80026ee:	e04d      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80026f6:	e049      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80026fe:	e045      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8002706:	e041      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800270e:	e03d      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002716:	e039      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800271e:	e035      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002726:	e031      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800272e:	e02d      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
        break;
 8002740:	e024      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d116      	bne.n	800277c <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 800274e:	7afb      	ldrb	r3, [r7, #11]
 8002750:	2b0d      	cmp	r3, #13
 8002752:	d002      	beq.n	800275a <HAL_CAN_RegisterCallback+0x11e>
 8002754:	2b0e      	cmp	r3, #14
 8002756:	d004      	beq.n	8002762 <HAL_CAN_RegisterCallback+0x126>
 8002758:	e007      	b.n	800276a <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8002760:	e014      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8002768:	e010      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]
        break;
 800277a:	e007      	b.n	800278c <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800278c:	7dfb      	ldrb	r3, [r7, #23]
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d003      	beq.n	80027be <HAL_CAN_ConfigFilter+0x26>
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	f040 80aa 	bne.w	8002912 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2201      	movs	r2, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	401a      	ands	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d123      	bne.n	8002840 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	43db      	mvns	r3, r3
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800281a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3248      	adds	r2, #72	; 0x48
 8002820:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002834:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	3348      	adds	r3, #72	; 0x48
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	440b      	add	r3, r1
 800283e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d122      	bne.n	800288e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	431a      	orrs	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002868:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3248      	adds	r2, #72	; 0x48
 800286e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002882:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002884:	6979      	ldr	r1, [r7, #20]
 8002886:	3348      	adds	r3, #72	; 0x48
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	440b      	add	r3, r1
 800288c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	43db      	mvns	r3, r3
 80028a0:	401a      	ands	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80028a8:	e007      	b.n	80028ba <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	401a      	ands	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028d4:	e007      	b.n	80028e6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	431a      	orrs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002904:	f023 0201 	bic.w	r2, r3, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e006      	b.n	8002920 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d12e      	bne.n	800299c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002956:	f7ff fd21 	bl	800239c <HAL_GetTick>
 800295a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800295c:	e012      	b.n	8002984 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800295e:	f7ff fd1d 	bl	800239c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b0a      	cmp	r3, #10
 800296a:	d90b      	bls.n	8002984 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2205      	movs	r2, #5
 800297c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e012      	b.n	80029aa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e006      	b.n	80029aa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
  }
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d133      	bne.n	8002a2e <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029d6:	f7ff fce1 	bl	800239c <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029dc:	e012      	b.n	8002a04 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029de:	f7ff fcdd 	bl	800239c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b0a      	cmp	r3, #10
 80029ea:	d90b      	bls.n	8002a04 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2205      	movs	r2, #5
 80029fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e01b      	b.n	8002a3c <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0e5      	beq.n	80029de <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0202 	bic.w	r2, r2, #2
 8002a20:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e006      	b.n	8002a3c <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a58:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d003      	beq.n	8002a68 <HAL_CAN_GetRxMessage+0x24>
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	f040 8103 	bne.w	8002c6e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10e      	bne.n	8002a8c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0f7      	b.n	8002c7c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e0e8      	b.n	8002c7c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	331b      	adds	r3, #27
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0204 	and.w	r2, r3, #4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	331b      	adds	r3, #27
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	4413      	add	r3, r2
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0d5b      	lsrs	r3, r3, #21
 8002ad8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e00b      	b.n	8002afa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	331b      	adds	r3, #27
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	331b      	adds	r3, #27
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	4413      	add	r3, r2
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0202 	and.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	331b      	adds	r3, #27
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	e00b      	b.n	8002b48 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	331b      	adds	r3, #27
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	331b      	adds	r3, #27
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	331b      	adds	r3, #27
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0a1a      	lsrs	r2, r3, #8
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0c1a      	lsrs	r2, r3, #16
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	3302      	adds	r3, #2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e1a      	lsrs	r2, r3, #24
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	3303      	adds	r3, #3
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0a1a      	lsrs	r2, r3, #8
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0c1a      	lsrs	r2, r3, #16
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	3306      	adds	r3, #6
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e1a      	lsrs	r2, r3, #24
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	3307      	adds	r3, #7
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d108      	bne.n	8002c5a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0220 	orr.w	r2, r2, #32
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	e007      	b.n	8002c6a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0220 	orr.w	r2, r2, #32
 8002c68:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e006      	b.n	8002c7c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c9c:	7afb      	ldrb	r3, [r7, #11]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d002      	beq.n	8002ca8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e005      	b.n	8002cc8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d002      	beq.n	8002cf2 <HAL_CAN_ActivateNotification+0x1e>
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d109      	bne.n	8002d06 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6959      	ldr	r1, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e006      	b.n	8002d14 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b08a      	sub	sp, #40	; 0x28
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8083 	beq.w	8002e6c <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d025      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d004      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
 8002d8a:	e017      	b.n	8002dbc <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9e:	e00d      	b.n	8002dbc <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	e003      	b.n	8002dbc <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d026      	beq.n	8002e14 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
 8002de2:	e017      	b.n	8002e14 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
 8002df6:	e00d      	b.n	8002e14 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0a:	e003      	b.n	8002e14 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d026      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
 8002e3a:	e017      	b.n	8002e6c <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	e00d      	b.n	8002e6c <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	e003      	b.n	8002e6c <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00c      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00c      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2208      	movs	r2, #8
 8002f12:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2210      	movs	r2, #16
 8002f56:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d07b      	beq.n	8003086 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d072      	beq.n	800307e <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d043      	beq.n	800307e <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d03e      	beq.n	800307e <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003006:	2b60      	cmp	r3, #96	; 0x60
 8003008:	d02b      	beq.n	8003062 <HAL_CAN_IRQHandler+0x344>
 800300a:	2b60      	cmp	r3, #96	; 0x60
 800300c:	d82e      	bhi.n	800306c <HAL_CAN_IRQHandler+0x34e>
 800300e:	2b50      	cmp	r3, #80	; 0x50
 8003010:	d022      	beq.n	8003058 <HAL_CAN_IRQHandler+0x33a>
 8003012:	2b50      	cmp	r3, #80	; 0x50
 8003014:	d82a      	bhi.n	800306c <HAL_CAN_IRQHandler+0x34e>
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d019      	beq.n	800304e <HAL_CAN_IRQHandler+0x330>
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d826      	bhi.n	800306c <HAL_CAN_IRQHandler+0x34e>
 800301e:	2b30      	cmp	r3, #48	; 0x30
 8003020:	d010      	beq.n	8003044 <HAL_CAN_IRQHandler+0x326>
 8003022:	2b30      	cmp	r3, #48	; 0x30
 8003024:	d822      	bhi.n	800306c <HAL_CAN_IRQHandler+0x34e>
 8003026:	2b10      	cmp	r3, #16
 8003028:	d002      	beq.n	8003030 <HAL_CAN_IRQHandler+0x312>
 800302a:	2b20      	cmp	r3, #32
 800302c:	d005      	beq.n	800303a <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800302e:	e01d      	b.n	800306c <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f043 0308 	orr.w	r3, r3, #8
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003038:	e019      	b.n	800306e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	f043 0310 	orr.w	r3, r3, #16
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003042:	e014      	b.n	800306e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f043 0320 	orr.w	r3, r3, #32
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800304c:	e00f      	b.n	800306e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003056:	e00a      	b.n	800306e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003060:	e005      	b.n	800306e <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800306a:	e000      	b.n	800306e <HAL_CAN_IRQHandler+0x350>
            break;
 800306c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699a      	ldr	r2, [r3, #24]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800307c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d009      	beq.n	80030a0 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030a0:	bf00      	nop
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
	...

08003194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <__NVIC_SetPriorityGrouping+0x44>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b0:	4013      	ands	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031c6:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	60d3      	str	r3, [r2, #12]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <__NVIC_GetPriorityGrouping+0x18>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	f003 0307 	and.w	r3, r3, #7
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	2b00      	cmp	r3, #0
 8003208:	db0b      	blt.n	8003222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	f003 021f 	and.w	r2, r3, #31
 8003210:	4906      	ldr	r1, [pc, #24]	; (800322c <__NVIC_EnableIRQ+0x34>)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	2001      	movs	r0, #1
 800321a:	fa00 f202 	lsl.w	r2, r0, r2
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100

08003230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db0a      	blt.n	800325a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	490c      	ldr	r1, [pc, #48]	; (800327c <__NVIC_SetPriority+0x4c>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	440b      	add	r3, r1
 8003254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003258:	e00a      	b.n	8003270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4908      	ldr	r1, [pc, #32]	; (8003280 <__NVIC_SetPriority+0x50>)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3b04      	subs	r3, #4
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	440b      	add	r3, r1
 800326e:	761a      	strb	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f1c3 0307 	rsb	r3, r3, #7
 800329e:	2b04      	cmp	r3, #4
 80032a0:	bf28      	it	cs
 80032a2:	2304      	movcs	r3, #4
 80032a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d902      	bls.n	80032b4 <NVIC_EncodePriority+0x30>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3b03      	subs	r3, #3
 80032b2:	e000      	b.n	80032b6 <NVIC_EncodePriority+0x32>
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43d9      	mvns	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	4313      	orrs	r3, r2
         );
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff4f 	bl	8003194 <__NVIC_SetPriorityGrouping>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003310:	f7ff ff64 	bl	80031dc <__NVIC_GetPriorityGrouping>
 8003314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	f7ff ffb2 	bl	8003284 <NVIC_EncodePriority>
 8003320:	4602      	mov	r2, r0
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff81 	bl	8003230 <__NVIC_SetPriority>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff57 	bl	80031f8 <__NVIC_EnableIRQ>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e043      	b.n	80033f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <HAL_DMA_Init+0xa8>)
 8003372:	4413      	add	r3, r2
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <HAL_DMA_Init+0xac>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	009a      	lsls	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <HAL_DMA_Init+0xb0>)
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800339e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	bffdfff8 	.word	0xbffdfff8
 8003400:	cccccccd 	.word	0xcccccccd
 8003404:	40020000 	.word	0x40020000

08003408 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d005      	beq.n	800342c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2204      	movs	r2, #4
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	e051      	b.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020e 	bic.w	r2, r2, #14
 800343a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_DMA_Abort_IT+0xd4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d029      	beq.n	80034aa <HAL_DMA_Abort_IT+0xa2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	; (80034e0 <HAL_DMA_Abort_IT+0xd8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_DMA_Abort_IT+0x9e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_DMA_Abort_IT+0xdc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_Abort_IT+0x98>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_DMA_Abort_IT+0xe0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d012      	beq.n	800349a <HAL_DMA_Abort_IT+0x92>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_DMA_Abort_IT+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00a      	beq.n	8003494 <HAL_DMA_Abort_IT+0x8c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <HAL_DMA_Abort_IT+0xe8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d102      	bne.n	800348e <HAL_DMA_Abort_IT+0x86>
 8003488:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800348c:	e00e      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 800348e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003492:	e00b      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 8003494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003498:	e008      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 800349a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349e:	e005      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 80034a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a4:	e002      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 80034a6:	2310      	movs	r3, #16
 80034a8:	e000      	b.n	80034ac <HAL_DMA_Abort_IT+0xa4>
 80034aa:	2301      	movs	r3, #1
 80034ac:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <HAL_DMA_Abort_IT+0xec>)
 80034ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
    } 
  }
  return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40020008 	.word	0x40020008
 80034e0:	4002001c 	.word	0x4002001c
 80034e4:	40020030 	.word	0x40020030
 80034e8:	40020044 	.word	0x40020044
 80034ec:	40020058 	.word	0x40020058
 80034f0:	4002006c 	.word	0x4002006c
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2204      	movs	r2, #4
 8003516:	409a      	lsls	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d04f      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xc8>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d04a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d107      	bne.n	8003548 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a66      	ldr	r2, [pc, #408]	; (80036e8 <HAL_DMA_IRQHandler+0x1f0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d029      	beq.n	80035a6 <HAL_DMA_IRQHandler+0xae>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a65      	ldr	r2, [pc, #404]	; (80036ec <HAL_DMA_IRQHandler+0x1f4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_IRQHandler+0xaa>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <HAL_DMA_IRQHandler+0x1f8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01a      	beq.n	800359c <HAL_DMA_IRQHandler+0xa4>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a62      	ldr	r2, [pc, #392]	; (80036f4 <HAL_DMA_IRQHandler+0x1fc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d012      	beq.n	8003596 <HAL_DMA_IRQHandler+0x9e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a60      	ldr	r2, [pc, #384]	; (80036f8 <HAL_DMA_IRQHandler+0x200>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00a      	beq.n	8003590 <HAL_DMA_IRQHandler+0x98>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a5f      	ldr	r2, [pc, #380]	; (80036fc <HAL_DMA_IRQHandler+0x204>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d102      	bne.n	800358a <HAL_DMA_IRQHandler+0x92>
 8003584:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003588:	e00e      	b.n	80035a8 <HAL_DMA_IRQHandler+0xb0>
 800358a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800358e:	e00b      	b.n	80035a8 <HAL_DMA_IRQHandler+0xb0>
 8003590:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003594:	e008      	b.n	80035a8 <HAL_DMA_IRQHandler+0xb0>
 8003596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800359a:	e005      	b.n	80035a8 <HAL_DMA_IRQHandler+0xb0>
 800359c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a0:	e002      	b.n	80035a8 <HAL_DMA_IRQHandler+0xb0>
 80035a2:	2340      	movs	r3, #64	; 0x40
 80035a4:	e000      	b.n	80035a8 <HAL_DMA_IRQHandler+0xb0>
 80035a6:	2304      	movs	r3, #4
 80035a8:	4a55      	ldr	r2, [pc, #340]	; (8003700 <HAL_DMA_IRQHandler+0x208>)
 80035aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8094 	beq.w	80036de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035be:	e08e      	b.n	80036de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2202      	movs	r2, #2
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d056      	beq.n	800367e <HAL_DMA_IRQHandler+0x186>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d051      	beq.n	800367e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 020a 	bic.w	r2, r2, #10
 80035f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d029      	beq.n	800365e <HAL_DMA_IRQHandler+0x166>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a37      	ldr	r2, [pc, #220]	; (80036ec <HAL_DMA_IRQHandler+0x1f4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d022      	beq.n	800365a <HAL_DMA_IRQHandler+0x162>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a35      	ldr	r2, [pc, #212]	; (80036f0 <HAL_DMA_IRQHandler+0x1f8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01a      	beq.n	8003654 <HAL_DMA_IRQHandler+0x15c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a34      	ldr	r2, [pc, #208]	; (80036f4 <HAL_DMA_IRQHandler+0x1fc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d012      	beq.n	800364e <HAL_DMA_IRQHandler+0x156>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a32      	ldr	r2, [pc, #200]	; (80036f8 <HAL_DMA_IRQHandler+0x200>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00a      	beq.n	8003648 <HAL_DMA_IRQHandler+0x150>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_DMA_IRQHandler+0x204>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d102      	bne.n	8003642 <HAL_DMA_IRQHandler+0x14a>
 800363c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003640:	e00e      	b.n	8003660 <HAL_DMA_IRQHandler+0x168>
 8003642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003646:	e00b      	b.n	8003660 <HAL_DMA_IRQHandler+0x168>
 8003648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800364c:	e008      	b.n	8003660 <HAL_DMA_IRQHandler+0x168>
 800364e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003652:	e005      	b.n	8003660 <HAL_DMA_IRQHandler+0x168>
 8003654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003658:	e002      	b.n	8003660 <HAL_DMA_IRQHandler+0x168>
 800365a:	2320      	movs	r3, #32
 800365c:	e000      	b.n	8003660 <HAL_DMA_IRQHandler+0x168>
 800365e:	2302      	movs	r3, #2
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <HAL_DMA_IRQHandler+0x208>)
 8003662:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d034      	beq.n	80036de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800367c:	e02f      	b.n	80036de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2208      	movs	r2, #8
 8003684:	409a      	lsls	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d028      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x1e8>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d023      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 020e 	bic.w	r2, r2, #14
 80036a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
    }
  }
  return;
 80036de:	bf00      	nop
 80036e0:	bf00      	nop
}
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40020008 	.word	0x40020008
 80036ec:	4002001c 	.word	0x4002001c
 80036f0:	40020030 	.word	0x40020030
 80036f4:	40020044 	.word	0x40020044
 80036f8:	40020058 	.word	0x40020058
 80036fc:	4002006c 	.word	0x4002006c
 8003700:	40020000 	.word	0x40020000

08003704 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003712:	b2db      	uxtb	r3, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
	...

08003720 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003720:	b480      	push	{r7}
 8003722:	b08b      	sub	sp, #44	; 0x2c
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800372e:	2300      	movs	r3, #0
 8003730:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003732:	e169      	b.n	8003a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003734:	2201      	movs	r2, #1
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	429a      	cmp	r2, r3
 800374e:	f040 8158 	bne.w	8003a02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a9a      	ldr	r2, [pc, #616]	; (80039c0 <HAL_GPIO_Init+0x2a0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d05e      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 800375c:	4a98      	ldr	r2, [pc, #608]	; (80039c0 <HAL_GPIO_Init+0x2a0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d875      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 8003762:	4a98      	ldr	r2, [pc, #608]	; (80039c4 <HAL_GPIO_Init+0x2a4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d058      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 8003768:	4a96      	ldr	r2, [pc, #600]	; (80039c4 <HAL_GPIO_Init+0x2a4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d86f      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 800376e:	4a96      	ldr	r2, [pc, #600]	; (80039c8 <HAL_GPIO_Init+0x2a8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d052      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 8003774:	4a94      	ldr	r2, [pc, #592]	; (80039c8 <HAL_GPIO_Init+0x2a8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d869      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 800377a:	4a94      	ldr	r2, [pc, #592]	; (80039cc <HAL_GPIO_Init+0x2ac>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d04c      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 8003780:	4a92      	ldr	r2, [pc, #584]	; (80039cc <HAL_GPIO_Init+0x2ac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d863      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 8003786:	4a92      	ldr	r2, [pc, #584]	; (80039d0 <HAL_GPIO_Init+0x2b0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d046      	beq.n	800381a <HAL_GPIO_Init+0xfa>
 800378c:	4a90      	ldr	r2, [pc, #576]	; (80039d0 <HAL_GPIO_Init+0x2b0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d85d      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 8003792:	2b12      	cmp	r3, #18
 8003794:	d82a      	bhi.n	80037ec <HAL_GPIO_Init+0xcc>
 8003796:	2b12      	cmp	r3, #18
 8003798:	d859      	bhi.n	800384e <HAL_GPIO_Init+0x12e>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <HAL_GPIO_Init+0x80>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	0800381b 	.word	0x0800381b
 80037a4:	080037f5 	.word	0x080037f5
 80037a8:	08003807 	.word	0x08003807
 80037ac:	08003849 	.word	0x08003849
 80037b0:	0800384f 	.word	0x0800384f
 80037b4:	0800384f 	.word	0x0800384f
 80037b8:	0800384f 	.word	0x0800384f
 80037bc:	0800384f 	.word	0x0800384f
 80037c0:	0800384f 	.word	0x0800384f
 80037c4:	0800384f 	.word	0x0800384f
 80037c8:	0800384f 	.word	0x0800384f
 80037cc:	0800384f 	.word	0x0800384f
 80037d0:	0800384f 	.word	0x0800384f
 80037d4:	0800384f 	.word	0x0800384f
 80037d8:	0800384f 	.word	0x0800384f
 80037dc:	0800384f 	.word	0x0800384f
 80037e0:	0800384f 	.word	0x0800384f
 80037e4:	080037fd 	.word	0x080037fd
 80037e8:	08003811 	.word	0x08003811
 80037ec:	4a79      	ldr	r2, [pc, #484]	; (80039d4 <HAL_GPIO_Init+0x2b4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037f2:	e02c      	b.n	800384e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	623b      	str	r3, [r7, #32]
          break;
 80037fa:	e029      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	3304      	adds	r3, #4
 8003802:	623b      	str	r3, [r7, #32]
          break;
 8003804:	e024      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	3308      	adds	r3, #8
 800380c:	623b      	str	r3, [r7, #32]
          break;
 800380e:	e01f      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	330c      	adds	r3, #12
 8003816:	623b      	str	r3, [r7, #32]
          break;
 8003818:	e01a      	b.n	8003850 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003822:	2304      	movs	r3, #4
 8003824:	623b      	str	r3, [r7, #32]
          break;
 8003826:	e013      	b.n	8003850 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003830:	2308      	movs	r3, #8
 8003832:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	611a      	str	r2, [r3, #16]
          break;
 800383a:	e009      	b.n	8003850 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800383c:	2308      	movs	r3, #8
 800383e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	615a      	str	r2, [r3, #20]
          break;
 8003846:	e003      	b.n	8003850 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
          break;
 800384c:	e000      	b.n	8003850 <HAL_GPIO_Init+0x130>
          break;
 800384e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2bff      	cmp	r3, #255	; 0xff
 8003854:	d801      	bhi.n	800385a <HAL_GPIO_Init+0x13a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	e001      	b.n	800385e <HAL_GPIO_Init+0x13e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2bff      	cmp	r3, #255	; 0xff
 8003864:	d802      	bhi.n	800386c <HAL_GPIO_Init+0x14c>
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	e002      	b.n	8003872 <HAL_GPIO_Init+0x152>
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	3b08      	subs	r3, #8
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	210f      	movs	r1, #15
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	401a      	ands	r2, r3
 8003884:	6a39      	ldr	r1, [r7, #32]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	431a      	orrs	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80b1 	beq.w	8003a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_GPIO_Init+0x2b8>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <HAL_GPIO_Init+0x2b8>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <HAL_GPIO_Init+0x2b8>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038b8:	4a48      	ldr	r2, [pc, #288]	; (80039dc <HAL_GPIO_Init+0x2bc>)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a40      	ldr	r2, [pc, #256]	; (80039e0 <HAL_GPIO_Init+0x2c0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d013      	beq.n	800390c <HAL_GPIO_Init+0x1ec>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3f      	ldr	r2, [pc, #252]	; (80039e4 <HAL_GPIO_Init+0x2c4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00d      	beq.n	8003908 <HAL_GPIO_Init+0x1e8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <HAL_GPIO_Init+0x2c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <HAL_GPIO_Init+0x1e4>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <HAL_GPIO_Init+0x2cc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_GPIO_Init+0x1e0>
 80038fc:	2303      	movs	r3, #3
 80038fe:	e006      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003900:	2304      	movs	r3, #4
 8003902:	e004      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003904:	2302      	movs	r3, #2
 8003906:	e002      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_GPIO_Init+0x1ee>
 800390c:	2300      	movs	r3, #0
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	f002 0203 	and.w	r2, r2, #3
 8003914:	0092      	lsls	r2, r2, #2
 8003916:	4093      	lsls	r3, r2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800391e:	492f      	ldr	r1, [pc, #188]	; (80039dc <HAL_GPIO_Init+0x2bc>)
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3302      	adds	r3, #2
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	492c      	ldr	r1, [pc, #176]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003946:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	43db      	mvns	r3, r3
 800394e:	4928      	ldr	r1, [pc, #160]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003950:	4013      	ands	r3, r2
 8003952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d006      	beq.n	800396e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003960:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	4922      	ldr	r1, [pc, #136]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4313      	orrs	r3, r2
 800396a:	60cb      	str	r3, [r1, #12]
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	43db      	mvns	r3, r3
 8003976:	491e      	ldr	r1, [pc, #120]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003978:	4013      	ands	r3, r2
 800397a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4918      	ldr	r1, [pc, #96]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
 8003994:	e006      	b.n	80039a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	43db      	mvns	r3, r3
 800399e:	4914      	ldr	r1, [pc, #80]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d021      	beq.n	80039f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	490e      	ldr	r1, [pc, #56]	; (80039f0 <HAL_GPIO_Init+0x2d0>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e021      	b.n	8003a02 <HAL_GPIO_Init+0x2e2>
 80039be:	bf00      	nop
 80039c0:	10320000 	.word	0x10320000
 80039c4:	10310000 	.word	0x10310000
 80039c8:	10220000 	.word	0x10220000
 80039cc:	10210000 	.word	0x10210000
 80039d0:	10120000 	.word	0x10120000
 80039d4:	10110000 	.word	0x10110000
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40010800 	.word	0x40010800
 80039e4:	40010c00 	.word	0x40010c00
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_GPIO_Init+0x304>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	4909      	ldr	r1, [pc, #36]	; (8003a24 <HAL_GPIO_Init+0x304>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	3301      	adds	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f47f ae8e 	bne.w	8003734 <HAL_GPIO_Init+0x14>
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	372c      	adds	r7, #44	; 0x2c
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40010400 	.word	0x40010400

08003a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
 8003a34:	4613      	mov	r3, r2
 8003a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a38:	787b      	ldrb	r3, [r7, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a44:	e003      	b.n	8003a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	611a      	str	r2, [r3, #16]
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	041a      	lsls	r2, r3, #16
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43d9      	mvns	r1, r3
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	400b      	ands	r3, r1
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	611a      	str	r2, [r3, #16]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e12b      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd ffc6 	bl	8001a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ade:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003af0:	f002 fad4 	bl	800609c <HAL_RCC_GetPCLK1Freq>
 8003af4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a81      	ldr	r2, [pc, #516]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d807      	bhi.n	8003b10 <HAL_I2C_Init+0x84>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a80      	ldr	r2, [pc, #512]	; (8003d04 <HAL_I2C_Init+0x278>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	bf94      	ite	ls
 8003b08:	2301      	movls	r3, #1
 8003b0a:	2300      	movhi	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e006      	b.n	8003b1e <HAL_I2C_Init+0x92>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a7d      	ldr	r2, [pc, #500]	; (8003d08 <HAL_I2C_Init+0x27c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bf94      	ite	ls
 8003b18:	2301      	movls	r3, #1
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e7      	b.n	8003cf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a78      	ldr	r2, [pc, #480]	; (8003d0c <HAL_I2C_Init+0x280>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	0c9b      	lsrs	r3, r3, #18
 8003b30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d802      	bhi.n	8003b60 <HAL_I2C_Init+0xd4>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	e009      	b.n	8003b74 <HAL_I2C_Init+0xe8>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_I2C_Init+0x284>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	3301      	adds	r3, #1
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	495c      	ldr	r1, [pc, #368]	; (8003d00 <HAL_I2C_Init+0x274>)
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d819      	bhi.n	8003bc8 <HAL_I2C_Init+0x13c>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e59      	subs	r1, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ba8:	400b      	ands	r3, r1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_I2C_Init+0x138>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e59      	subs	r1, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc2:	e051      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e04f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d111      	bne.n	8003bf4 <HAL_I2C_Init+0x168>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e012      	b.n	8003c1a <HAL_I2C_Init+0x18e>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1e58      	subs	r0, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	0099      	lsls	r1, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Init+0x196>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_I2C_Init+0x1bc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e58      	subs	r0, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	460b      	mov	r3, r1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Init+0x1dc>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	0099      	lsls	r1, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	6809      	ldr	r1, [r1, #0]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69da      	ldr	r2, [r3, #28]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6911      	ldr	r1, [r2, #16]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	4311      	orrs	r1, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	000186a0 	.word	0x000186a0
 8003d04:	001e847f 	.word	0x001e847f
 8003d08:	003d08ff 	.word	0x003d08ff
 8003d0c:	431bde83 	.word	0x431bde83
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b80      	cmp	r3, #128	; 0x80
 8003d28:	d103      	bne.n	8003d32 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr

08003d3c <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	4608      	mov	r0, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	817b      	strh	r3, [r7, #10]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	813b      	strh	r3, [r7, #8]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	f040 808a 	bne.w	8003e7c <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d68:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_I2C_Mem_Write_IT+0x14c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	08db      	lsrs	r3, r3, #3
 8003d6e:	4a47      	ldr	r2, [pc, #284]	; (8003e8c <HAL_I2C_Mem_Write_IT+0x150>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	0a1a      	lsrs	r2, r3, #8
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009a      	lsls	r2, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d112      	bne.n	8003db4 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
 8003db2:	e064      	b.n	8003e7e <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d0df      	beq.n	8003d82 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2C_Mem_Write_IT+0x94>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e056      	b.n	8003e7e <HAL_I2C_Mem_Write_IT+0x142>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d007      	beq.n	8003df6 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e04:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2221      	movs	r2, #33	; 0x21
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2240      	movs	r2, #64	; 0x40
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a3a      	ldr	r2, [r7, #32]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_I2C_Mem_Write_IT+0x154>)
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e38:	897a      	ldrh	r2, [r7, #10]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003e3e:	893a      	ldrh	r2, [r7, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003e44:	88fa      	ldrh	r2, [r7, #6]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e76:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr
 8003e88:	20000020 	.word	0x20000020
 8003e8c:	14f8b589 	.word	0x14f8b589
 8003e90:	ffff0000 	.word	0xffff0000

08003e94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7fe fa7a 	bl	800239c <HAL_GetTick>
 8003ea8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	f040 8111 	bne.w	80040de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2319      	movs	r3, #25
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4988      	ldr	r1, [pc, #544]	; (80040e8 <HAL_I2C_IsDeviceReady+0x254>)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f001 fc58 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e104      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_I2C_IsDeviceReady+0x50>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e0fd      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x24c>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d007      	beq.n	8003f0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2224      	movs	r2, #36	; 0x24
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a70      	ldr	r2, [pc, #448]	; (80040ec <HAL_I2C_IsDeviceReady+0x258>)
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f001 fc16 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f64:	d103      	bne.n	8003f6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0b6      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f82:	f7fe fa0b 	bl	800239c <HAL_GetTick>
 8003f86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fb6:	e025      	b.n	8004004 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fb8:	f7fe f9f0 	bl	800239c <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <HAL_I2C_IsDeviceReady+0x13a>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	22a0      	movs	r2, #160	; 0xa0
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2ba0      	cmp	r3, #160	; 0xa0
 800400e:	d005      	beq.n	800401c <HAL_I2C_IsDeviceReady+0x188>
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <HAL_I2C_IsDeviceReady+0x188>
 8004016:	7dbb      	ldrb	r3, [r7, #22]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0cd      	beq.n	8003fb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d129      	bne.n	8004086 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2319      	movs	r3, #25
 800405e:	2201      	movs	r2, #1
 8004060:	4921      	ldr	r1, [pc, #132]	; (80040e8 <HAL_I2C_IsDeviceReady+0x254>)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f001 fb8a 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e036      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	e02c      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004094:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2319      	movs	r3, #25
 80040a6:	2201      	movs	r2, #1
 80040a8:	490f      	ldr	r1, [pc, #60]	; (80040e8 <HAL_I2C_IsDeviceReady+0x254>)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f001 fb66 	bl	800577c <I2C_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e012      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	3301      	adds	r3, #1
 80040be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	f4ff af32 	bcc.w	8003f2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
  }
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00100002 	.word	0x00100002
 80040ec:	ffff0000 	.word	0xffff0000

080040f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004110:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004118:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b10      	cmp	r3, #16
 800411e:	d003      	beq.n	8004128 <HAL_I2C_EV_IRQHandler+0x38>
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	f040 80b1 	bne.w	800428a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <HAL_I2C_EV_IRQHandler+0x6e>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004148:	d003      	beq.n	8004152 <HAL_I2C_EV_IRQHandler+0x62>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004150:	d101      	bne.n	8004156 <HAL_I2C_EV_IRQHandler+0x66>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_I2C_EV_IRQHandler+0x68>
 8004156:	2300      	movs	r3, #0
 8004158:	2b01      	cmp	r3, #1
 800415a:	f000 8114 	beq.w	8004386 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_I2C_EV_IRQHandler+0x90>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f001 fbae 	bl	80058d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fca7 	bl	8004acc <I2C_Master_SB>
 800417e:	e083      	b.n	8004288 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0xac>
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fd1e 	bl	8004bd6 <I2C_Master_ADD10>
 800419a:	e075      	b.n	8004288 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0xc8>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fd39 	bl	8004c28 <I2C_Master_ADDR>
 80041b6:	e067      	b.n	8004288 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d036      	beq.n	8004230 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d0:	f000 80db 	beq.w	800438a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <HAL_I2C_EV_IRQHandler+0x10a>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_I2C_EV_IRQHandler+0x10a>
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f91b 	bl	800442e <I2C_MasterTransmit_TXE>
 80041f8:	e046      	b.n	8004288 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80c2 	beq.w	800438a <HAL_I2C_EV_IRQHandler+0x29a>
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80bc 	beq.w	800438a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004212:	7bbb      	ldrb	r3, [r7, #14]
 8004214:	2b21      	cmp	r3, #33	; 0x21
 8004216:	d103      	bne.n	8004220 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f9a4 	bl	8004566 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421e:	e0b4      	b.n	800438a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b40      	cmp	r3, #64	; 0x40
 8004224:	f040 80b1 	bne.w	800438a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fa12 	bl	8004652 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800422e:	e0ac      	b.n	800438a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423e:	f000 80a4 	beq.w	800438a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00d      	beq.n	8004268 <HAL_I2C_EV_IRQHandler+0x178>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_I2C_EV_IRQHandler+0x178>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fa8e 	bl	8004782 <I2C_MasterReceive_RXNE>
 8004266:	e00f      	b.n	8004288 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 808b 	beq.w	800438a <HAL_I2C_EV_IRQHandler+0x29a>
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8085 	beq.w	800438a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb39 	bl	80048f8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004286:	e080      	b.n	800438a <HAL_I2C_EV_IRQHandler+0x29a>
 8004288:	e07f      	b.n	800438a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e007      	b.n	80042ac <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d011      	beq.n	80042da <HAL_I2C_EV_IRQHandler+0x1ea>
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042d0:	69b9      	ldr	r1, [r7, #24]
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 feff 	bl	80050d6 <I2C_Slave_ADDR>
 80042d8:	e05a      	b.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_I2C_EV_IRQHandler+0x206>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ff3a 	bl	8005168 <I2C_Slave_STOPF>
 80042f4:	e04c      	b.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042f6:	7bbb      	ldrb	r3, [r7, #14]
 80042f8:	2b21      	cmp	r3, #33	; 0x21
 80042fa:	d002      	beq.n	8004302 <HAL_I2C_EV_IRQHandler+0x212>
 80042fc:	7bbb      	ldrb	r3, [r7, #14]
 80042fe:	2b29      	cmp	r3, #41	; 0x29
 8004300:	d120      	bne.n	8004344 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00d      	beq.n	8004328 <HAL_I2C_EV_IRQHandler+0x238>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	2b00      	cmp	r3, #0
 8004314:	d008      	beq.n	8004328 <HAL_I2C_EV_IRQHandler+0x238>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fe1c 	bl	8004f5e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004326:	e032      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02d      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x29e>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d028      	beq.n	800438e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fe4b 	bl	8004fd8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004342:	e024      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <HAL_I2C_EV_IRQHandler+0x27a>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_I2C_EV_IRQHandler+0x27a>
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fe58 	bl	8005018 <I2C_SlaveReceive_RXNE>
 8004368:	e012      	b.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fe88 	bl	8005094 <I2C_SlaveReceive_BTF>
 8004384:	e004      	b.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004386:	bf00      	nop
 8004388:	e002      	b.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438a:	bf00      	nop
 800438c:	e000      	b.n	8004390 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800438e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
 80043ea:	4613      	mov	r3, r2
 80043ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004444:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	2b00      	cmp	r3, #0
 8004452:	d150      	bne.n	80044f6 <I2C_MasterTransmit_TXE+0xc8>
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b21      	cmp	r3, #33	; 0x21
 8004458:	d14d      	bne.n	80044f6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d01d      	beq.n	800449c <I2C_MasterTransmit_TXE+0x6e>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b20      	cmp	r3, #32
 8004464:	d01a      	beq.n	800449c <I2C_MasterTransmit_TXE+0x6e>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800446c:	d016      	beq.n	800449c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2211      	movs	r2, #17
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ff7e 	bl	8004396 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800449a:	e060      	b.n	800455e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044aa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d107      	bne.n	80044e6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd f842 	bl	8001568 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044e4:	e03b      	b.n	800455e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ff51 	bl	8004396 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044f4:	e033      	b.n	800455e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b21      	cmp	r3, #33	; 0x21
 80044fa:	d005      	beq.n	8004508 <I2C_MasterTransmit_TXE+0xda>
 80044fc:	7bbb      	ldrb	r3, [r7, #14]
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d12d      	bne.n	800455e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b22      	cmp	r3, #34	; 0x22
 8004506:	d12a      	bne.n	800455e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004520:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004522:	e01c      	b.n	800455e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d103      	bne.n	8004538 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f88e 	bl	8004652 <I2C_MemoryTransmit_TXE_BTF>
}
 8004536:	e012      	b.n	800455e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800455c:	e7ff      	b.n	800455e <I2C_MasterTransmit_TXE+0x130>
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b21      	cmp	r3, #33	; 0x21
 800457e:	d164      	bne.n	800464a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d012      	beq.n	80045b0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80045ae:	e04c      	b.n	800464a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d01d      	beq.n	80045f2 <I2C_MasterTransmit_BTF+0x8c>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d01a      	beq.n	80045f2 <I2C_MasterTransmit_BTF+0x8c>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c2:	d016      	beq.n	80045f2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045d2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2211      	movs	r2, #17
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fed3 	bl	8004396 <HAL_I2C_MasterTxCpltCallback>
}
 80045f0:	e02b      	b.n	800464a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004600:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004610:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d107      	bne.n	800463c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fc ff97 	bl	8001568 <HAL_I2C_MemTxCpltCallback>
}
 800463a:	e006      	b.n	800464a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fea6 	bl	8004396 <HAL_I2C_MasterTxCpltCallback>
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004660:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004666:	2b00      	cmp	r3, #0
 8004668:	d11d      	bne.n	80046a6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10b      	bne.n	800468a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004676:	b2da      	uxtb	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004688:	e077      	b.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468e:	b29b      	uxth	r3, r3
 8004690:	121b      	asrs	r3, r3, #8
 8004692:	b2da      	uxtb	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046a4:	e069      	b.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d10b      	bne.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046c4:	e059      	b.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d152      	bne.n	8004774 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b22      	cmp	r3, #34	; 0x22
 80046d2:	d10d      	bne.n	80046f0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046e2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046ee:	e044      	b.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d015      	beq.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b21      	cmp	r3, #33	; 0x21
 80046fe:	d112      	bne.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004724:	e029      	b.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d124      	bne.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b21      	cmp	r3, #33	; 0x21
 8004734:	d121      	bne.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004744:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004754:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fc fefb 	bl	8001568 <HAL_I2C_MemTxCpltCallback>
}
 8004772:	e002      	b.n	800477a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff facd 	bl	8003d14 <I2C_Flush_DR>
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b22      	cmp	r3, #34	; 0x22
 8004794:	f040 80ac 	bne.w	80048f0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d921      	bls.n	80047ea <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	f040 808c 	bne.w	80048f0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80047e8:	e082      	b.n	80048f0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d075      	beq.n	80048de <I2C_MasterReceive_RXNE+0x15c>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d002      	beq.n	80047fe <I2C_MasterReceive_RXNE+0x7c>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d16f      	bne.n	80048de <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 f836 	bl	8005870 <I2C_WaitOnSTOPRequestThroughIT>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d142      	bne.n	8004890 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004818:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004828:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d10a      	bne.n	800487a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc fe66 	bl	8001544 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004878:	e03a      	b.n	80048f0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2212      	movs	r2, #18
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fd8d 	bl	80043a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800488e:	e02f      	b.n	80048f0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800489e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fd97 	bl	800440a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048dc:	e008      	b.n	80048f0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ec:	605a      	str	r2, [r3, #4]
}
 80048ee:	e7ff      	b.n	80048f0 <I2C_MasterReceive_RXNE+0x16e>
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b04      	cmp	r3, #4
 800490e:	d11b      	bne.n	8004948 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004946:	e0bd      	b.n	8004ac4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b03      	cmp	r3, #3
 8004950:	d129      	bne.n	80049a6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004960:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b04      	cmp	r3, #4
 8004966:	d00a      	beq.n	800497e <I2C_MasterReceive_BTF+0x86>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d007      	beq.n	800497e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049a4:	e08e      	b.n	8004ac4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d176      	bne.n	8004a9e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d002      	beq.n	80049bc <I2C_MasterReceive_BTF+0xc4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d108      	bne.n	80049ce <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e019      	b.n	8004a02 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d002      	beq.n	80049da <I2C_MasterReceive_BTF+0xe2>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d108      	bne.n	80049ec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e00a      	b.n	8004a02 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d007      	beq.n	8004a02 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a5c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b40      	cmp	r3, #64	; 0x40
 8004a70:	d10a      	bne.n	8004a88 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc fd5f 	bl	8001544 <HAL_I2C_MemRxCpltCallback>
}
 8004a86:	e01d      	b.n	8004ac4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2212      	movs	r2, #18
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fc86 	bl	80043a8 <HAL_I2C_MasterRxCpltCallback>
}
 8004a9c:	e012      	b.n	8004ac4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d117      	bne.n	8004b10 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004af8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004afa:	e067      	b.n	8004bcc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]
}
 8004b0e:	e05d      	b.n	8004bcc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b18:	d133      	bne.n	8004b82 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b21      	cmp	r3, #33	; 0x21
 8004b24:	d109      	bne.n	8004b3a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b36:	611a      	str	r2, [r3, #16]
 8004b38:	e008      	b.n	8004b4c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <I2C_Master_SB+0x92>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d032      	beq.n	8004bcc <I2C_Master_SB+0x100>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d02d      	beq.n	8004bcc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7e:	605a      	str	r2, [r3, #4]
}
 8004b80:	e024      	b.n	8004bcc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10e      	bne.n	8004ba8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	11db      	asrs	r3, r3, #7
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f003 0306 	and.w	r3, r3, #6
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f063 030f 	orn	r3, r3, #15
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	611a      	str	r2, [r3, #16]
}
 8004ba6:	e011      	b.n	8004bcc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10d      	bne.n	8004bcc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	11db      	asrs	r3, r3, #7
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f003 0306 	and.w	r3, r3, #6
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f063 030e 	orn	r3, r3, #14
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d004      	beq.n	8004bfc <I2C_Master_ADD10+0x26>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d108      	bne.n	8004c0e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <I2C_Master_ADD10+0x48>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c1c:	605a      	str	r2, [r3, #4]
  }
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b091      	sub	sp, #68	; 0x44
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b22      	cmp	r3, #34	; 0x22
 8004c50:	f040 8174 	bne.w	8004f3c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10f      	bne.n	8004c7c <I2C_Master_ADDR+0x54>
 8004c5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d10b      	bne.n	8004c7c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c64:	2300      	movs	r3, #0
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	e16b      	b.n	8004f54 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d11d      	bne.n	8004cc0 <I2C_Master_ADDR+0x98>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c8c:	d118      	bne.n	8004cc0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	651a      	str	r2, [r3, #80]	; 0x50
 8004cbe:	e149      	b.n	8004f54 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d113      	bne.n	8004cf2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	e120      	b.n	8004f34 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	f040 808a 	bne.w	8004e12 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d04:	d137      	bne.n	8004d76 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d24:	d113      	bne.n	8004d4e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d34:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d36:	2300      	movs	r3, #0
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	e0f2      	b.n	8004f34 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e0de      	b.n	8004f34 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d02e      	beq.n	8004dda <I2C_Master_ADDR+0x1b2>
 8004d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d02b      	beq.n	8004dda <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	2b12      	cmp	r3, #18
 8004d86:	d102      	bne.n	8004d8e <I2C_Master_ADDR+0x166>
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d125      	bne.n	8004dda <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d00e      	beq.n	8004db2 <I2C_Master_ADDR+0x18a>
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d00b      	beq.n	8004db2 <I2C_Master_ADDR+0x18a>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d008      	beq.n	8004db2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e007      	b.n	8004dc2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	e0ac      	b.n	8004f34 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e090      	b.n	8004f34 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d158      	bne.n	8004ece <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d021      	beq.n	8004e66 <I2C_Master_ADDR+0x23e>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d01e      	beq.n	8004e66 <I2C_Master_ADDR+0x23e>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d01b      	beq.n	8004e66 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e012      	b.n	8004e8c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e74:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9a:	d14b      	bne.n	8004f34 <I2C_Master_ADDR+0x30c>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ea2:	d00b      	beq.n	8004ebc <I2C_Master_ADDR+0x294>
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d008      	beq.n	8004ebc <I2C_Master_ADDR+0x294>
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d005      	beq.n	8004ebc <I2C_Master_ADDR+0x294>
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d002      	beq.n	8004ebc <I2C_Master_ADDR+0x294>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d13b      	bne.n	8004f34 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eca:	605a      	str	r2, [r3, #4]
 8004ecc:	e032      	b.n	8004f34 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004edc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eec:	d117      	bne.n	8004f1e <I2C_Master_ADDR+0x2f6>
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ef4:	d00b      	beq.n	8004f0e <I2C_Master_ADDR+0x2e6>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d008      	beq.n	8004f0e <I2C_Master_ADDR+0x2e6>
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d005      	beq.n	8004f0e <I2C_Master_ADDR+0x2e6>
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d002      	beq.n	8004f0e <I2C_Master_ADDR+0x2e6>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d107      	bne.n	8004f1e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f3a:	e00b      	b.n	8004f54 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
}
 8004f52:	e7ff      	b.n	8004f54 <I2C_Master_ADDR+0x32c>
 8004f54:	bf00      	nop
 8004f56:	3744      	adds	r7, #68	; 0x44
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02b      	beq.n	8004fd0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d114      	bne.n	8004fd0 <I2C_SlaveTransmit_TXE+0x72>
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	2b29      	cmp	r3, #41	; 0x29
 8004faa:	d111      	bne.n	8004fd0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2221      	movs	r2, #33	; 0x21
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2228      	movs	r2, #40	; 0x28
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff f9f5 	bl	80043ba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d011      	beq.n	800500e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d02c      	beq.n	800508c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d114      	bne.n	800508c <I2C_SlaveReceive_RXNE+0x74>
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b2a      	cmp	r3, #42	; 0x2a
 8005066:	d111      	bne.n	800508c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005076:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2222      	movs	r2, #34	; 0x22
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2228      	movs	r2, #40	; 0x28
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff f9a0 	bl	80043cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d012      	beq.n	80050cc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr

080050d6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b084      	sub	sp, #16
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050f0:	2b28      	cmp	r3, #40	; 0x28
 80050f2:	d125      	bne.n	8005140 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800510e:	2301      	movs	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	81bb      	strh	r3, [r7, #12]
 8005122:	e002      	b.n	800512a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005132:	89ba      	ldrh	r2, [r7, #12]
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff f950 	bl	80043de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800513e:	e00e      	b.n	800515e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005140:	2300      	movs	r3, #0
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005186:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	60bb      	str	r3, [r7, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c4:	d172      	bne.n	80052ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b22      	cmp	r3, #34	; 0x22
 80051ca:	d002      	beq.n	80051d2 <I2C_Slave_STOPF+0x6a>
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	2b2a      	cmp	r3, #42	; 0x2a
 80051d0:	d135      	bne.n	800523e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f043 0204 	orr.w	r2, r3, #4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005204:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fa7a 	bl	8003704 <HAL_DMA_GetState>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d049      	beq.n	80052aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	4a69      	ldr	r2, [pc, #420]	; (80053c0 <I2C_Slave_STOPF+0x258>)
 800521c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe f8f0 	bl	8003408 <HAL_DMA_Abort_IT>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d03d      	beq.n	80052aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005238:	4610      	mov	r0, r2
 800523a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800523c:	e035      	b.n	80052aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	b29a      	uxth	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f043 0204 	orr.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005270:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fa44 	bl	8003704 <HAL_DMA_GetState>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d014      	beq.n	80052ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	4a4e      	ldr	r2, [pc, #312]	; (80053c0 <I2C_Slave_STOPF+0x258>)
 8005288:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe f8ba 	bl	8003408 <HAL_DMA_Abort_IT>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052a4:	4610      	mov	r0, r2
 80052a6:	4798      	blx	r3
 80052a8:	e000      	b.n	80052ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d03e      	beq.n	8005334 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d112      	bne.n	80052ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f4:	2b40      	cmp	r3, #64	; 0x40
 80052f6:	d112      	bne.n	800531e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	f043 0204 	orr.w	r2, r3, #4
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f843 	bl	80053c8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005342:	e039      	b.n	80053b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b2a      	cmp	r3, #42	; 0x2a
 8005348:	d109      	bne.n	800535e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2228      	movs	r2, #40	; 0x28
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff f837 	bl	80043cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b28      	cmp	r3, #40	; 0x28
 8005368:	d111      	bne.n	800538e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <I2C_Slave_STOPF+0x25c>)
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff f836 	bl	80043f8 <HAL_I2C_ListenCpltCallback>
}
 800538c:	e014      	b.n	80053b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	2b22      	cmp	r3, #34	; 0x22
 8005394:	d002      	beq.n	800539c <I2C_Slave_STOPF+0x234>
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b22      	cmp	r3, #34	; 0x22
 800539a:	d10d      	bne.n	80053b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff f80a 	bl	80043cc <HAL_I2C_SlaveRxCpltCallback>
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	0800562d 	.word	0x0800562d
 80053c4:	ffff0000 	.word	0xffff0000

080053c8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053de:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d002      	beq.n	80053ec <I2C_ITError+0x24>
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d10a      	bne.n	8005402 <I2C_ITError+0x3a>
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b22      	cmp	r3, #34	; 0x22
 80053f0:	d107      	bne.n	8005402 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005400:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005408:	2b28      	cmp	r3, #40	; 0x28
 800540a:	d107      	bne.n	800541c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2228      	movs	r2, #40	; 0x28
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800541a:	e015      	b.n	8005448 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542a:	d00a      	beq.n	8005442 <I2C_ITError+0x7a>
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	2b60      	cmp	r3, #96	; 0x60
 8005430:	d007      	beq.n	8005442 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005456:	d162      	bne.n	800551e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005466:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d020      	beq.n	80054b8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	4a6a      	ldr	r2, [pc, #424]	; (8005624 <I2C_ITError+0x25c>)
 800547c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd ffc0 	bl	8003408 <HAL_DMA_Abort_IT>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 8089 	beq.w	80055a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b2:	4610      	mov	r0, r2
 80054b4:	4798      	blx	r3
 80054b6:	e074      	b.n	80055a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	4a59      	ldr	r2, [pc, #356]	; (8005624 <I2C_ITError+0x25c>)
 80054be:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fd ff9f 	bl	8003408 <HAL_DMA_Abort_IT>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d068      	beq.n	80055a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d10b      	bne.n	80054f6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3
 800551c:	e041      	b.n	80055a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b60      	cmp	r3, #96	; 0x60
 8005528:	d125      	bne.n	8005576 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d10b      	bne.n	800555e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7fe ff54 	bl	800441c <HAL_I2C_AbortCpltCallback>
 8005574:	e015      	b.n	80055a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d10b      	bne.n	800559c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fe ff34 	bl	800440a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10e      	bne.n	80055d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d113      	bne.n	800561c <I2C_ITError+0x254>
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b28      	cmp	r3, #40	; 0x28
 80055f8:	d110      	bne.n	800561c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <I2C_ITError+0x260>)
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fe feee 	bl	80043f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	0800562d 	.word	0x0800562d
 8005628:	ffff0000 	.word	0xffff0000

0800562c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005646:	4b4b      	ldr	r3, [pc, #300]	; (8005774 <I2C_DMAAbort+0x148>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	08db      	lsrs	r3, r3, #3
 800564c:	4a4a      	ldr	r2, [pc, #296]	; (8005778 <I2C_DMAAbort+0x14c>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0a1a      	lsrs	r2, r3, #8
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	00da      	lsls	r2, r3, #3
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005672:	e00a      	b.n	800568a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3b01      	subs	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005688:	d0ea      	beq.n	8005660 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	2200      	movs	r2, #0
 8005698:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	2200      	movs	r2, #0
 80056a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2200      	movs	r2, #0
 80056be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	2200      	movs	r2, #0
 80056ce:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	2200      	movs	r2, #0
 80056de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b60      	cmp	r3, #96	; 0x60
 80056fa:	d10e      	bne.n	800571a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2200      	movs	r2, #0
 8005710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005712:	6978      	ldr	r0, [r7, #20]
 8005714:	f7fe fe82 	bl	800441c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005718:	e027      	b.n	800576a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800571a:	7cfb      	ldrb	r3, [r7, #19]
 800571c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005720:	2b28      	cmp	r3, #40	; 0x28
 8005722:	d117      	bne.n	8005754 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005742:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2228      	movs	r2, #40	; 0x28
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005752:	e007      	b.n	8005764 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005764:	6978      	ldr	r0, [r7, #20]
 8005766:	f7fe fe50 	bl	800440a <HAL_I2C_ErrorCallback>
}
 800576a:	bf00      	nop
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000020 	.word	0x20000020
 8005778:	14f8b589 	.word	0x14f8b589

0800577c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800578c:	e048      	b.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d044      	beq.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fc fe01 	bl	800239c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d139      	bne.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0c1b      	lsrs	r3, r3, #16
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10d      	bne.n	80057d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	43da      	mvns	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	e00c      	b.n	80057ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	43da      	mvns	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	4013      	ands	r3, r2
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d116      	bne.n	8005820 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f043 0220 	orr.w	r2, r3, #32
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e023      	b.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	0c1b      	lsrs	r3, r3, #16
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10d      	bne.n	8005846 <I2C_WaitOnFlagUntilTimeout+0xca>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	43da      	mvns	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4013      	ands	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	e00c      	b.n	8005860 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	43da      	mvns	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4013      	ands	r3, r2
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	429a      	cmp	r2, r3
 8005864:	d093      	beq.n	800578e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800587c:	4b13      	ldr	r3, [pc, #76]	; (80058cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	08db      	lsrs	r3, r3, #3
 8005882:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	0a1a      	lsrs	r2, r3, #8
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b01      	subs	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f043 0220 	orr.w	r2, r3, #32
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e008      	b.n	80058c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058bc:	d0e9      	beq.n	8005892 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000020 	.word	0x20000020
 80058d0:	14f8b589 	.word	0x14f8b589

080058d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058e4:	d103      	bne.n	80058ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80058ec:	e007      	b.n	80058fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058f6:	d102      	bne.n	80058fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2208      	movs	r2, #8
 80058fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e272      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8087 	beq.w	8005a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005928:	4b92      	ldr	r3, [pc, #584]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b04      	cmp	r3, #4
 8005932:	d00c      	beq.n	800594e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005934:	4b8f      	ldr	r3, [pc, #572]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b08      	cmp	r3, #8
 800593e:	d112      	bne.n	8005966 <HAL_RCC_OscConfig+0x5e>
 8005940:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d10b      	bne.n	8005966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594e:	4b89      	ldr	r3, [pc, #548]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d06c      	beq.n	8005a34 <HAL_RCC_OscConfig+0x12c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d168      	bne.n	8005a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e24c      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596e:	d106      	bne.n	800597e <HAL_RCC_OscConfig+0x76>
 8005970:	4b80      	ldr	r3, [pc, #512]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a7f      	ldr	r2, [pc, #508]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	e02e      	b.n	80059dc <HAL_RCC_OscConfig+0xd4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x98>
 8005986:	4b7b      	ldr	r3, [pc, #492]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a7a      	ldr	r2, [pc, #488]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 800598c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b78      	ldr	r3, [pc, #480]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a77      	ldr	r2, [pc, #476]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e01d      	b.n	80059dc <HAL_RCC_OscConfig+0xd4>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0xbc>
 80059aa:	4b72      	ldr	r3, [pc, #456]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a71      	ldr	r2, [pc, #452]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a6e      	ldr	r2, [pc, #440]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0xd4>
 80059c4:	4b6b      	ldr	r3, [pc, #428]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6a      	ldr	r2, [pc, #424]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b68      	ldr	r3, [pc, #416]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a67      	ldr	r2, [pc, #412]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fc fcda 	bl	800239c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fc fcd6 	bl	800239c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e200      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fe:	4b5d      	ldr	r3, [pc, #372]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0xe4>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fc fcc6 	bl	800239c <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fc fcc2 	bl	800239c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e1ec      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a26:	4b53      	ldr	r3, [pc, #332]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0x10c>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d063      	beq.n	8005b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a42:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a4e:	4b49      	ldr	r3, [pc, #292]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d11c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x18c>
 8005a5a:	4b46      	ldr	r3, [pc, #280]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d116      	bne.n	8005a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a66:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_RCC_OscConfig+0x176>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d001      	beq.n	8005a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e1c0      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7e:	4b3d      	ldr	r3, [pc, #244]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4939      	ldr	r1, [pc, #228]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a92:	e03a      	b.n	8005b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d020      	beq.n	8005ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <HAL_RCC_OscConfig+0x270>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa2:	f7fc fc7b 	bl	800239c <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aaa:	f7fc fc77 	bl	800239c <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e1a1      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005abc:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0f0      	beq.n	8005aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac8:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4927      	ldr	r1, [pc, #156]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]
 8005adc:	e015      	b.n	8005b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ade:	4b26      	ldr	r3, [pc, #152]	; (8005b78 <HAL_RCC_OscConfig+0x270>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fc fc5a 	bl	800239c <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aec:	f7fc fc56 	bl	800239c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e180      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afe:	4b1d      	ldr	r3, [pc, #116]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d03a      	beq.n	8005b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d019      	beq.n	8005b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b1e:	4b17      	ldr	r3, [pc, #92]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b24:	f7fc fc3a 	bl	800239c <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b2c:	f7fc fc36 	bl	800239c <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e160      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <HAL_RCC_OscConfig+0x26c>)
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d0f0      	beq.n	8005b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	f000 fafe 	bl	800614c <RCC_Delay>
 8005b50:	e01c      	b.n	8005b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <HAL_RCC_OscConfig+0x274>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b58:	f7fc fc20 	bl	800239c <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5e:	e00f      	b.n	8005b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b60:	f7fc fc1c 	bl	800239c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d908      	bls.n	8005b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e146      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000
 8005b78:	42420000 	.word	0x42420000
 8005b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b80:	4b92      	ldr	r3, [pc, #584]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e9      	bne.n	8005b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80a6 	beq.w	8005ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b9e:	4b8b      	ldr	r3, [pc, #556]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10d      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005baa:	4b88      	ldr	r3, [pc, #544]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4a87      	ldr	r2, [pc, #540]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	61d3      	str	r3, [r2, #28]
 8005bb6:	4b85      	ldr	r3, [pc, #532]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc6:	4b82      	ldr	r3, [pc, #520]	; (8005dd0 <HAL_RCC_OscConfig+0x4c8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d118      	bne.n	8005c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bd2:	4b7f      	ldr	r3, [pc, #508]	; (8005dd0 <HAL_RCC_OscConfig+0x4c8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7e      	ldr	r2, [pc, #504]	; (8005dd0 <HAL_RCC_OscConfig+0x4c8>)
 8005bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bde:	f7fc fbdd 	bl	800239c <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be6:	f7fc fbd9 	bl	800239c <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b64      	cmp	r3, #100	; 0x64
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e103      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf8:	4b75      	ldr	r3, [pc, #468]	; (8005dd0 <HAL_RCC_OscConfig+0x4c8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCC_OscConfig+0x312>
 8005c0c:	4b6f      	ldr	r3, [pc, #444]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4a6e      	ldr	r2, [pc, #440]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6213      	str	r3, [r2, #32]
 8005c18:	e02d      	b.n	8005c76 <HAL_RCC_OscConfig+0x36e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCC_OscConfig+0x334>
 8005c22:	4b6a      	ldr	r3, [pc, #424]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	4a69      	ldr	r2, [pc, #420]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	6213      	str	r3, [r2, #32]
 8005c2e:	4b67      	ldr	r3, [pc, #412]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	4a66      	ldr	r2, [pc, #408]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c34:	f023 0304 	bic.w	r3, r3, #4
 8005c38:	6213      	str	r3, [r2, #32]
 8005c3a:	e01c      	b.n	8005c76 <HAL_RCC_OscConfig+0x36e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d10c      	bne.n	8005c5e <HAL_RCC_OscConfig+0x356>
 8005c44:	4b61      	ldr	r3, [pc, #388]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	4a60      	ldr	r2, [pc, #384]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c4a:	f043 0304 	orr.w	r3, r3, #4
 8005c4e:	6213      	str	r3, [r2, #32]
 8005c50:	4b5e      	ldr	r3, [pc, #376]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	4a5d      	ldr	r2, [pc, #372]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	6213      	str	r3, [r2, #32]
 8005c5c:	e00b      	b.n	8005c76 <HAL_RCC_OscConfig+0x36e>
 8005c5e:	4b5b      	ldr	r3, [pc, #364]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	4a5a      	ldr	r2, [pc, #360]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	6213      	str	r3, [r2, #32]
 8005c6a:	4b58      	ldr	r3, [pc, #352]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	4a57      	ldr	r2, [pc, #348]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d015      	beq.n	8005caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7e:	f7fc fb8d 	bl	800239c <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c86:	f7fc fb89 	bl	800239c <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0b1      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0ee      	beq.n	8005c86 <HAL_RCC_OscConfig+0x37e>
 8005ca8:	e014      	b.n	8005cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005caa:	f7fc fb77 	bl	800239c <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fc fb73 	bl	800239c <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e09b      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc8:	4b40      	ldr	r3, [pc, #256]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ee      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cda:	4b3c      	ldr	r3, [pc, #240]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	4a3b      	ldr	r2, [pc, #236]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8087 	beq.w	8005dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cf0:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d061      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d146      	bne.n	8005d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d04:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <HAL_RCC_OscConfig+0x4cc>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0a:	f7fc fb47 	bl	800239c <HAL_GetTick>
 8005d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d12:	f7fc fb43 	bl	800239c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e06d      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d24:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f0      	bne.n	8005d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d38:	d108      	bne.n	8005d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d3a:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	4921      	ldr	r1, [pc, #132]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d4c:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a19      	ldr	r1, [r3, #32]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	491b      	ldr	r1, [pc, #108]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <HAL_RCC_OscConfig+0x4cc>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6a:	f7fc fb17 	bl	800239c <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d72:	f7fc fb13 	bl	800239c <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e03d      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x46a>
 8005d90:	e035      	b.n	8005dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d92:	4b10      	ldr	r3, [pc, #64]	; (8005dd4 <HAL_RCC_OscConfig+0x4cc>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fc fb00 	bl	800239c <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fc fafc 	bl	800239c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e026      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_RCC_OscConfig+0x4c4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x498>
 8005dbe:	e01e      	b.n	8005dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e019      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	40007000 	.word	0x40007000
 8005dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_RCC_OscConfig+0x500>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d001      	beq.n	8005dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0d0      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e20:	4b6a      	ldr	r3, [pc, #424]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d910      	bls.n	8005e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2e:	4b67      	ldr	r3, [pc, #412]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f023 0207 	bic.w	r2, r3, #7
 8005e36:	4965      	ldr	r1, [pc, #404]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3e:	4b63      	ldr	r3, [pc, #396]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d001      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0b8      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d020      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e68:	4b59      	ldr	r3, [pc, #356]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4a58      	ldr	r2, [pc, #352]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e80:	4b53      	ldr	r3, [pc, #332]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4a52      	ldr	r2, [pc, #328]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e8c:	4b50      	ldr	r3, [pc, #320]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	494d      	ldr	r1, [pc, #308]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d040      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d107      	bne.n	8005ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb2:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d115      	bne.n	8005eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e07f      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d107      	bne.n	8005eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eca:	4b41      	ldr	r3, [pc, #260]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e073      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eda:	4b3d      	ldr	r3, [pc, #244]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e06b      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eea:	4b39      	ldr	r3, [pc, #228]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f023 0203 	bic.w	r2, r3, #3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	4936      	ldr	r1, [pc, #216]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005efc:	f7fc fa4e 	bl	800239c <HAL_GetTick>
 8005f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f02:	e00a      	b.n	8005f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f04:	f7fc fa4a 	bl	800239c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e053      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 020c 	and.w	r2, r3, #12
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d1eb      	bne.n	8005f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f2c:	4b27      	ldr	r3, [pc, #156]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d210      	bcs.n	8005f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3a:	4b24      	ldr	r3, [pc, #144]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 0207 	bic.w	r2, r3, #7
 8005f42:	4922      	ldr	r1, [pc, #136]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <HAL_RCC_ClockConfig+0x1c0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0307 	and.w	r3, r3, #7
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e032      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f68:	4b19      	ldr	r3, [pc, #100]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4916      	ldr	r1, [pc, #88]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f86:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	490e      	ldr	r1, [pc, #56]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f9a:	f000 f821 	bl	8005fe0 <HAL_RCC_GetSysClockFreq>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	091b      	lsrs	r3, r3, #4
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	490a      	ldr	r1, [pc, #40]	; (8005fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fac:	5ccb      	ldrb	r3, [r1, r3]
 8005fae:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb2:	4a09      	ldr	r2, [pc, #36]	; (8005fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8005fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_RCC_ClockConfig+0x1d0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fb ff1a 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	40022000 	.word	0x40022000
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	0800e85c 	.word	0x0800e85c
 8005fd8:	20000020 	.word	0x20000020
 8005fdc:	20000024 	.word	0x20000024

08005fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	2b04      	cmp	r3, #4
 8006008:	d002      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x30>
 800600a:	2b08      	cmp	r3, #8
 800600c:	d003      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x36>
 800600e:	e027      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <HAL_RCC_GetSysClockFreq+0x98>)
 8006012:	613b      	str	r3, [r7, #16]
      break;
 8006014:	e027      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	0c9b      	lsrs	r3, r3, #18
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	4a17      	ldr	r2, [pc, #92]	; (800607c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006020:	5cd3      	ldrb	r3, [r2, r3]
 8006022:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d010      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_RCC_GetSysClockFreq+0x94>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0c5b      	lsrs	r3, r3, #17
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	4a11      	ldr	r2, [pc, #68]	; (8006080 <HAL_RCC_GetSysClockFreq+0xa0>)
 800603a:	5cd3      	ldrb	r3, [r2, r3]
 800603c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a0d      	ldr	r2, [pc, #52]	; (8006078 <HAL_RCC_GetSysClockFreq+0x98>)
 8006042:	fb03 f202 	mul.w	r2, r3, r2
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	fbb2 f3f3 	udiv	r3, r2, r3
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e004      	b.n	800605a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a0c      	ldr	r2, [pc, #48]	; (8006084 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	613b      	str	r3, [r7, #16]
      break;
 800605e:	e002      	b.n	8006066 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCC_GetSysClockFreq+0x98>)
 8006062:	613b      	str	r3, [r7, #16]
      break;
 8006064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006066:	693b      	ldr	r3, [r7, #16]
}
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000
 8006078:	007a1200 	.word	0x007a1200
 800607c:	0800e874 	.word	0x0800e874
 8006080:	0800e884 	.word	0x0800e884
 8006084:	003d0900 	.word	0x003d0900

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800608c:	4b02      	ldr	r3, [pc, #8]	; (8006098 <HAL_RCC_GetHCLKFreq+0x10>)
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	bc80      	pop	{r7}
 8006096:	4770      	bx	lr
 8006098:	20000020 	.word	0x20000020

0800609c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060a0:	f7ff fff2 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060a4:	4602      	mov	r2, r0
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	0a1b      	lsrs	r3, r3, #8
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	4903      	ldr	r1, [pc, #12]	; (80060c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b2:	5ccb      	ldrb	r3, [r1, r3]
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40021000 	.word	0x40021000
 80060c0:	0800e86c 	.word	0x0800e86c

080060c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060c8:	f7ff ffde 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	0adb      	lsrs	r3, r3, #11
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	4903      	ldr	r1, [pc, #12]	; (80060e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060da:	5ccb      	ldrb	r3, [r1, r3]
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40021000 	.word	0x40021000
 80060e8:	0800e86c 	.word	0x0800e86c

080060ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	220f      	movs	r2, #15
 80060fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80060fc:	4b11      	ldr	r3, [pc, #68]	; (8006144 <HAL_RCC_GetClockConfig+0x58>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 0203 	and.w	r2, r3, #3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_RCC_GetClockConfig+0x58>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_RCC_GetClockConfig+0x58>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006120:	4b08      	ldr	r3, [pc, #32]	; (8006144 <HAL_RCC_GetClockConfig+0x58>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	08db      	lsrs	r3, r3, #3
 8006126:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <HAL_RCC_GetClockConfig+0x5c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0207 	and.w	r2, r3, #7
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	40021000 	.word	0x40021000
 8006148:	40022000 	.word	0x40022000

0800614c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <RCC_Delay+0x34>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <RCC_Delay+0x38>)
 800615a:	fba2 2303 	umull	r2, r3, r2, r3
 800615e:	0a5b      	lsrs	r3, r3, #9
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006168:	bf00      	nop
  }
  while (Delay --);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1e5a      	subs	r2, r3, #1
 800616e:	60fa      	str	r2, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f9      	bne.n	8006168 <RCC_Delay+0x1c>
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	20000020 	.word	0x20000020
 8006184:	10624dd3 	.word	0x10624dd3

08006188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e041      	b.n	800621e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f839 	bl	8006226 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f000 fd30 	bl	8006c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e03a      	b.n	80062c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <HAL_TIM_Base_Start_IT+0x98>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00e      	beq.n	8006290 <HAL_TIM_Base_Start_IT+0x58>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d009      	beq.n	8006290 <HAL_TIM_Base_Start_IT+0x58>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_TIM_Base_Start_IT+0x58>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d111      	bne.n	80062b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b06      	cmp	r3, #6
 80062a0:	d010      	beq.n	80062c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b2:	e007      	b.n	80062c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800

080062dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e041      	b.n	8006372 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb fc38 	bl	8001b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f000 fc86 	bl	8006c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_TIM_PWM_Start+0x24>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e022      	b.n	80063e6 <HAL_TIM_PWM_Start+0x6a>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d109      	bne.n	80063ba <HAL_TIM_PWM_Start+0x3e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	e015      	b.n	80063e6 <HAL_TIM_PWM_Start+0x6a>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d109      	bne.n	80063d4 <HAL_TIM_PWM_Start+0x58>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e008      	b.n	80063e6 <HAL_TIM_PWM_Start+0x6a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e05e      	b.n	80064ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0x82>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fc:	e013      	b.n	8006426 <HAL_TIM_PWM_Start+0xaa>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0x92>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800640c:	e00b      	b.n	8006426 <HAL_TIM_PWM_Start+0xaa>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xa2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800641c:	e003      	b.n	8006426 <HAL_TIM_PWM_Start+0xaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2201      	movs	r2, #1
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fde6 	bl	8007000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <HAL_TIM_PWM_Start+0x138>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d107      	bne.n	800644e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <HAL_TIM_PWM_Start+0x138>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_TIM_PWM_Start+0xfa>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d009      	beq.n	8006476 <HAL_TIM_PWM_Start+0xfa>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a14      	ldr	r2, [pc, #80]	; (80064b8 <HAL_TIM_PWM_Start+0x13c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIM_PWM_Start+0xfa>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a12      	ldr	r2, [pc, #72]	; (80064bc <HAL_TIM_PWM_Start+0x140>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d111      	bne.n	800649a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b06      	cmp	r3, #6
 8006486:	d010      	beq.n	80064aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006498:	e007      	b.n	80064aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800

080064c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e093      	b.n	80065fc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fb fb61 	bl	8001bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f000 fb89 	bl	8006c2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	4313      	orrs	r3, r2
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006560:	f023 030c 	bic.w	r3, r3, #12
 8006564:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800656c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	4313      	orrs	r3, r2
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	031b      	lsls	r3, r3, #12
 8006590:	4313      	orrs	r3, r2
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	4313      	orrs	r3, r2
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006614:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800661c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006624:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800662c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d110      	bne.n	8006656 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d102      	bne.n	8006640 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800663a:	7b7b      	ldrb	r3, [r7, #13]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d001      	beq.n	8006644 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e069      	b.n	8006718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006654:	e031      	b.n	80066ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b04      	cmp	r3, #4
 800665a:	d110      	bne.n	800667e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d102      	bne.n	8006668 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006662:	7b3b      	ldrb	r3, [r7, #12]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d001      	beq.n	800666c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e055      	b.n	8006718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800667c:	e01d      	b.n	80066ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800667e:	7bfb      	ldrb	r3, [r7, #15]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d108      	bne.n	8006696 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d105      	bne.n	8006696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800668a:	7b7b      	ldrb	r3, [r7, #13]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d102      	bne.n	8006696 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006690:	7b3b      	ldrb	r3, [r7, #12]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e03e      	b.n	8006718 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_TIM_Encoder_Start+0xc4>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d008      	beq.n	80066d8 <HAL_TIM_Encoder_Start+0xd4>
 80066c6:	e00f      	b.n	80066e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2201      	movs	r2, #1
 80066ce:	2100      	movs	r1, #0
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fc95 	bl	8007000 <TIM_CCxChannelCmd>
      break;
 80066d6:	e016      	b.n	8006706 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2201      	movs	r2, #1
 80066de:	2104      	movs	r1, #4
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fc8d 	bl	8007000 <TIM_CCxChannelCmd>
      break;
 80066e6:	e00e      	b.n	8006706 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fc85 	bl	8007000 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2201      	movs	r2, #1
 80066fc:	2104      	movs	r1, #4
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fc7e 	bl	8007000 <TIM_CCxChannelCmd>
      break;
 8006704:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0201 	orr.w	r2, r2, #1
 8006714:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_TIM_Encoder_Stop+0x18>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b04      	cmp	r3, #4
 8006734:	d008      	beq.n	8006748 <HAL_TIM_Encoder_Stop+0x28>
 8006736:	e00f      	b.n	8006758 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2200      	movs	r2, #0
 800673e:	2100      	movs	r1, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fc5d 	bl	8007000 <TIM_CCxChannelCmd>
      break;
 8006746:	e016      	b.n	8006776 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2200      	movs	r2, #0
 800674e:	2104      	movs	r1, #4
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fc55 	bl	8007000 <TIM_CCxChannelCmd>
      break;
 8006756:	e00e      	b.n	8006776 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2200      	movs	r2, #0
 800675e:	2100      	movs	r1, #0
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fc4d 	bl	8007000 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2200      	movs	r2, #0
 800676c:	2104      	movs	r1, #4
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fc46 	bl	8007000 <TIM_CCxChannelCmd>
      break;
 8006774:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10f      	bne.n	80067a6 <HAL_TIM_Encoder_Stop+0x86>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6a1a      	ldr	r2, [r3, #32]
 800678c:	f240 4344 	movw	r3, #1092	; 0x444
 8006790:	4013      	ands	r3, r2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d107      	bne.n	80067a6 <HAL_TIM_Encoder_Stop+0x86>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0201 	bic.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_TIM_Encoder_Stop+0x92>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d138      	bne.n	8006824 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <HAL_TIM_Encoder_Stop+0xa2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c0:	e013      	b.n	80067ea <HAL_TIM_Encoder_Stop+0xca>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d104      	bne.n	80067d2 <HAL_TIM_Encoder_Stop+0xb2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d0:	e00b      	b.n	80067ea <HAL_TIM_Encoder_Stop+0xca>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_Encoder_Stop+0xc2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e0:	e003      	b.n	80067ea <HAL_TIM_Encoder_Stop+0xca>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_Encoder_Stop+0xda>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f8:	e024      	b.n	8006844 <HAL_TIM_Encoder_Stop+0x124>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d104      	bne.n	800680a <HAL_TIM_Encoder_Stop+0xea>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006808:	e01c      	b.n	8006844 <HAL_TIM_Encoder_Stop+0x124>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b08      	cmp	r3, #8
 800680e:	d104      	bne.n	800681a <HAL_TIM_Encoder_Stop+0xfa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006818:	e014      	b.n	8006844 <HAL_TIM_Encoder_Stop+0x124>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006822:	e00f      	b.n	8006844 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d122      	bne.n	80068aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b02      	cmp	r3, #2
 8006870:	d11b      	bne.n	80068aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f06f 0202 	mvn.w	r2, #2
 800687a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f9b0 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 8006896:	e005      	b.n	80068a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f9a3 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f9b2 	bl	8006c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d122      	bne.n	80068fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d11b      	bne.n	80068fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f06f 0204 	mvn.w	r2, #4
 80068ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f986 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 80068ea:	e005      	b.n	80068f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f979 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f988 	bl	8006c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f003 0308 	and.w	r3, r3, #8
 8006908:	2b08      	cmp	r3, #8
 800690a:	d122      	bne.n	8006952 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b08      	cmp	r3, #8
 8006918:	d11b      	bne.n	8006952 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f06f 0208 	mvn.w	r2, #8
 8006922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2204      	movs	r2, #4
 8006928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f95c 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 800693e:	e005      	b.n	800694c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f94f 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f95e 	bl	8006c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b10      	cmp	r3, #16
 800695e:	d122      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b10      	cmp	r3, #16
 800696c:	d11b      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f06f 0210 	mvn.w	r2, #16
 8006976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2208      	movs	r2, #8
 800697c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f932 	bl	8006bf6 <HAL_TIM_IC_CaptureCallback>
 8006992:	e005      	b.n	80069a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f925 	bl	8006be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f934 	bl	8006c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d10e      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d107      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f06f 0201 	mvn.w	r2, #1
 80069ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fa ff7d 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b80      	cmp	r3, #128	; 0x80
 80069de:	d10e      	bne.n	80069fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ea:	2b80      	cmp	r3, #128	; 0x80
 80069ec:	d107      	bne.n	80069fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fb8c 	bl	8007116 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d10e      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d107      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f8f8 	bl	8006c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d10e      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f06f 0220 	mvn.w	r2, #32
 8006a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb57 	bl	8007104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e0ae      	b.n	8006bdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	f200 809f 	bhi.w	8006bcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006bcd 	.word	0x08006bcd
 8006a9c:	08006bcd 	.word	0x08006bcd
 8006aa0:	08006bcd 	.word	0x08006bcd
 8006aa4:	08006b09 	.word	0x08006b09
 8006aa8:	08006bcd 	.word	0x08006bcd
 8006aac:	08006bcd 	.word	0x08006bcd
 8006ab0:	08006bcd 	.word	0x08006bcd
 8006ab4:	08006b4b 	.word	0x08006b4b
 8006ab8:	08006bcd 	.word	0x08006bcd
 8006abc:	08006bcd 	.word	0x08006bcd
 8006ac0:	08006bcd 	.word	0x08006bcd
 8006ac4:	08006b8b 	.word	0x08006b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f90e 	bl	8006cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0208 	orr.w	r2, r2, #8
 8006ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0204 	bic.w	r2, r2, #4
 8006af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6999      	ldr	r1, [r3, #24]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	619a      	str	r2, [r3, #24]
      break;
 8006b06:	e064      	b.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f954 	bl	8006dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6999      	ldr	r1, [r3, #24]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	021a      	lsls	r2, r3, #8
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	619a      	str	r2, [r3, #24]
      break;
 8006b48:	e043      	b.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f99d 	bl	8006e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0208 	orr.w	r2, r2, #8
 8006b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0204 	bic.w	r2, r2, #4
 8006b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	69d9      	ldr	r1, [r3, #28]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	61da      	str	r2, [r3, #28]
      break;
 8006b88:	e023      	b.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f9e7 	bl	8006f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69d9      	ldr	r1, [r3, #28]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	021a      	lsls	r2, r3, #8
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	61da      	str	r2, [r3, #28]
      break;
 8006bca:	e002      	b.n	8006bd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr

08006c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a29      	ldr	r2, [pc, #164]	; (8006ce4 <TIM_Base_SetConfig+0xb8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00b      	beq.n	8006c5c <TIM_Base_SetConfig+0x30>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4a:	d007      	beq.n	8006c5c <TIM_Base_SetConfig+0x30>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a26      	ldr	r2, [pc, #152]	; (8006ce8 <TIM_Base_SetConfig+0xbc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_Base_SetConfig+0x30>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a25      	ldr	r2, [pc, #148]	; (8006cec <TIM_Base_SetConfig+0xc0>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d108      	bne.n	8006c6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a1c      	ldr	r2, [pc, #112]	; (8006ce4 <TIM_Base_SetConfig+0xb8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00b      	beq.n	8006c8e <TIM_Base_SetConfig+0x62>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7c:	d007      	beq.n	8006c8e <TIM_Base_SetConfig+0x62>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <TIM_Base_SetConfig+0xbc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <TIM_Base_SetConfig+0x62>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a18      	ldr	r2, [pc, #96]	; (8006cec <TIM_Base_SetConfig+0xc0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d108      	bne.n	8006ca0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a07      	ldr	r2, [pc, #28]	; (8006ce4 <TIM_Base_SetConfig+0xb8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d103      	bne.n	8006cd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	615a      	str	r2, [r3, #20]
}
 8006cda:	bf00      	nop
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bc80      	pop	{r7}
 8006ce2:	4770      	bx	lr
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800

08006cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	f023 0201 	bic.w	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0303 	bic.w	r3, r3, #3
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 0302 	bic.w	r3, r3, #2
 8006d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a1c      	ldr	r2, [pc, #112]	; (8006db8 <TIM_OC1_SetConfig+0xc8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10c      	bne.n	8006d66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0308 	bic.w	r3, r3, #8
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 0304 	bic.w	r3, r3, #4
 8006d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <TIM_OC1_SetConfig+0xc8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d111      	bne.n	8006d92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	621a      	str	r2, [r3, #32]
}
 8006dac:	bf00      	nop
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40012c00 	.word	0x40012c00

08006dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	f023 0210 	bic.w	r2, r3, #16
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f023 0320 	bic.w	r3, r3, #32
 8006e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <TIM_OC2_SetConfig+0xd0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d10d      	bne.n	8006e38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a14      	ldr	r2, [pc, #80]	; (8006e8c <TIM_OC2_SetConfig+0xd0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d113      	bne.n	8006e68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr
 8006e8c:	40012c00 	.word	0x40012c00

08006e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <TIM_OC3_SetConfig+0xd0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d10d      	bne.n	8006f0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <TIM_OC3_SetConfig+0xd0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d113      	bne.n	8006f3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	621a      	str	r2, [r3, #32]
}
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40012c00 	.word	0x40012c00

08006f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a0f      	ldr	r2, [pc, #60]	; (8006ffc <TIM_OC4_SetConfig+0x98>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d109      	bne.n	8006fd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	019b      	lsls	r3, r3, #6
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr
 8006ffc:	40012c00 	.word	0x40012c00

08007000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f003 031f 	and.w	r3, r3, #31
 8007012:	2201      	movs	r2, #1
 8007014:	fa02 f303 	lsl.w	r3, r2, r3
 8007018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1a      	ldr	r2, [r3, #32]
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	43db      	mvns	r3, r3
 8007022:	401a      	ands	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f003 031f 	and.w	r3, r3, #31
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e046      	b.n	80070ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ac:	d009      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a12      	ldr	r2, [pc, #72]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a10      	ldr	r2, [pc, #64]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d10c      	bne.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40000400 	.word	0x40000400
 8007100:	40000800 	.word	0x40000800

08007104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e042      	b.n	80071c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7fa fdb0 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2224      	movs	r2, #36	; 0x24
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800716a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f91d 	bl	80073ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691a      	ldr	r2, [r3, #16]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	603b      	str	r3, [r7, #0]
 80071d4:	4613      	mov	r3, r2
 80071d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d16d      	bne.n	80072c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <HAL_UART_Transmit+0x2c>
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e066      	b.n	80072c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2221      	movs	r2, #33	; 0x21
 8007202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007206:	f7fb f8c9 	bl	800239c <HAL_GetTick>
 800720a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	88fa      	ldrh	r2, [r7, #6]
 8007216:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007220:	d108      	bne.n	8007234 <HAL_UART_Transmit+0x6c>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d104      	bne.n	8007234 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	e003      	b.n	800723c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007238:	2300      	movs	r3, #0
 800723a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800723c:	e02a      	b.n	8007294 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	2180      	movs	r1, #128	; 0x80
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f840 	bl	80072ce <UART_WaitOnFlagUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e036      	b.n	80072c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10b      	bne.n	8007276 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800726c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	3302      	adds	r3, #2
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	e007      	b.n	8007286 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	781a      	ldrb	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1cf      	bne.n	800723e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2200      	movs	r2, #0
 80072a6:	2140      	movs	r1, #64	; 0x40
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f810 	bl	80072ce <UART_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e006      	b.n	80072c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e000      	b.n	80072c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80072c4:	2302      	movs	r3, #2
  }
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3720      	adds	r7, #32
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b090      	sub	sp, #64	; 0x40
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072de:	e050      	b.n	8007382 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d04c      	beq.n	8007382 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <UART_WaitOnFlagUntilTimeout+0x30>
 80072ee:	f7fb f855 	bl	800239c <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d241      	bcs.n	8007382 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800731e:	637a      	str	r2, [r7, #52]	; 0x34
 8007320:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007326:	e841 2300 	strex	r3, r2, [r1]
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e5      	bne.n	80072fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3314      	adds	r3, #20
 8007338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	613b      	str	r3, [r7, #16]
   return(result);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	63bb      	str	r3, [r7, #56]	; 0x38
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3314      	adds	r3, #20
 8007350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007352:	623a      	str	r2, [r7, #32]
 8007354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	69f9      	ldr	r1, [r7, #28]
 8007358:	6a3a      	ldr	r2, [r7, #32]
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e5      	bne.n	8007332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2220      	movs	r2, #32
 800736a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e00f      	b.n	80073a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4013      	ands	r3, r2
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	429a      	cmp	r2, r3
 8007390:	bf0c      	ite	eq
 8007392:	2301      	moveq	r3, #1
 8007394:	2300      	movne	r3, #0
 8007396:	b2db      	uxtb	r3, r3
 8007398:	461a      	mov	r2, r3
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	429a      	cmp	r2, r3
 800739e:	d09f      	beq.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3740      	adds	r7, #64	; 0x40
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073e6:	f023 030c 	bic.w	r3, r3, #12
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6812      	ldr	r2, [r2, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	430b      	orrs	r3, r1
 80073f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <UART_SetConfig+0x114>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d103      	bne.n	800741c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7fe fe56 	bl	80060c4 <HAL_RCC_GetPCLK2Freq>
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	e002      	b.n	8007422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800741c:	f7fe fe3e 	bl	800609c <HAL_RCC_GetPCLK1Freq>
 8007420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009a      	lsls	r2, r3, #2
 800742c:	441a      	add	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <UART_SetConfig+0x118>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	0119      	lsls	r1, r3, #4
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009a      	lsls	r2, r3, #2
 800744c:	441a      	add	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	fbb2 f2f3 	udiv	r2, r2, r3
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <UART_SetConfig+0x118>)
 800745a:	fba3 0302 	umull	r0, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	2064      	movs	r0, #100	; 0x64
 8007462:	fb00 f303 	mul.w	r3, r0, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	3332      	adds	r3, #50	; 0x32
 800746c:	4a15      	ldr	r2, [pc, #84]	; (80074c4 <UART_SetConfig+0x118>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007478:	4419      	add	r1, r3
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009a      	lsls	r2, r3, #2
 8007484:	441a      	add	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007490:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <UART_SetConfig+0x118>)
 8007492:	fba3 0302 	umull	r0, r3, r3, r2
 8007496:	095b      	lsrs	r3, r3, #5
 8007498:	2064      	movs	r0, #100	; 0x64
 800749a:	fb00 f303 	mul.w	r3, r0, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	3332      	adds	r3, #50	; 0x32
 80074a4:	4a07      	ldr	r2, [pc, #28]	; (80074c4 <UART_SetConfig+0x118>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f003 020f 	and.w	r2, r3, #15
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	440a      	add	r2, r1
 80074b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	40013800 	.word	0x40013800
 80074c4:	51eb851f 	.word	0x51eb851f

080074c8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ce:	f3ef 8305 	mrs	r3, IPSR
 80074d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80074d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10f      	bne.n	80074fa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074da:	f3ef 8310 	mrs	r3, PRIMASK
 80074de:	607b      	str	r3, [r7, #4]
  return(result);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <osKernelInitialize+0x32>
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <osKernelInitialize+0x60>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d109      	bne.n	8007502 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074ee:	f3ef 8311 	mrs	r3, BASEPRI
 80074f2:	603b      	str	r3, [r7, #0]
  return(result);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80074fa:	f06f 0305 	mvn.w	r3, #5
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e00c      	b.n	800751c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <osKernelInitialize+0x60>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d105      	bne.n	8007516 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <osKernelInitialize+0x60>)
 800750c:	2201      	movs	r2, #1
 800750e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007510:	2300      	movs	r3, #0
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e002      	b.n	800751c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007516:	f04f 33ff 	mov.w	r3, #4294967295
 800751a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800751c:	68fb      	ldr	r3, [r7, #12]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr
 8007528:	200007d4 	.word	0x200007d4

0800752c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007532:	f3ef 8305 	mrs	r3, IPSR
 8007536:	60bb      	str	r3, [r7, #8]
  return(result);
 8007538:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10f      	bne.n	800755e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800753e:	f3ef 8310 	mrs	r3, PRIMASK
 8007542:	607b      	str	r3, [r7, #4]
  return(result);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <osKernelStart+0x32>
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <osKernelStart+0x64>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d109      	bne.n	8007566 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007552:	f3ef 8311 	mrs	r3, BASEPRI
 8007556:	603b      	str	r3, [r7, #0]
  return(result);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <osKernelStart+0x3a>
    stat = osErrorISR;
 800755e:	f06f 0305 	mvn.w	r3, #5
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e00e      	b.n	8007584 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <osKernelStart+0x64>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d107      	bne.n	800757e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <osKernelStart+0x64>)
 8007570:	2202      	movs	r2, #2
 8007572:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007574:	f002 fd58 	bl	800a028 <vTaskStartScheduler>
      stat = osOK;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	e002      	b.n	8007584 <osKernelStart+0x58>
    } else {
      stat = osError;
 800757e:	f04f 33ff 	mov.w	r3, #4294967295
 8007582:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007584:	68fb      	ldr	r3, [r7, #12]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	200007d4 	.word	0x200007d4

08007594 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800759a:	f3ef 8305 	mrs	r3, IPSR
 800759e:	60bb      	str	r3, [r7, #8]
  return(result);
 80075a0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10f      	bne.n	80075c6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a6:	f3ef 8310 	mrs	r3, PRIMASK
 80075aa:	607b      	str	r3, [r7, #4]
  return(result);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <osKernelGetTickCount+0x32>
 80075b2:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <osKernelGetTickCount+0x4c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d109      	bne.n	80075ce <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ba:	f3ef 8311 	mrs	r3, BASEPRI
 80075be:	603b      	str	r3, [r7, #0]
  return(result);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80075c6:	f002 fe59 	bl	800a27c <xTaskGetTickCountFromISR>
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	e002      	b.n	80075d4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80075ce:	f002 fe47 	bl	800a260 <xTaskGetTickCount>
 80075d2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80075d4:	68fb      	ldr	r3, [r7, #12]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	200007d4 	.word	0x200007d4

080075e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b092      	sub	sp, #72	; 0x48
 80075e8:	af04      	add	r7, sp, #16
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f4:	f3ef 8305 	mrs	r3, IPSR
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8094 	bne.w	800772a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007602:	f3ef 8310 	mrs	r3, PRIMASK
 8007606:	623b      	str	r3, [r7, #32]
  return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f040 808d 	bne.w	800772a <osThreadNew+0x146>
 8007610:	4b48      	ldr	r3, [pc, #288]	; (8007734 <osThreadNew+0x150>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d106      	bne.n	8007626 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007618:	f3ef 8311 	mrs	r3, BASEPRI
 800761c:	61fb      	str	r3, [r7, #28]
  return(result);
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f040 8082 	bne.w	800772a <osThreadNew+0x146>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d07e      	beq.n	800772a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800762c:	2340      	movs	r3, #64	; 0x40
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007630:	2318      	movs	r3, #24
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007634:	2300      	movs	r3, #0
 8007636:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007638:	f107 031b 	add.w	r3, r7, #27
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800763e:	f04f 33ff 	mov.w	r3, #4294967295
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d045      	beq.n	80076d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <osThreadNew+0x74>
        name = attr->name;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <osThreadNew+0x9a>
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	2b38      	cmp	r3, #56	; 0x38
 8007670:	d805      	bhi.n	800767e <osThreadNew+0x9a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <osThreadNew+0x9e>
        return (NULL);
 800767e:	2300      	movs	r3, #0
 8007680:	e054      	b.n	800772c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <osThreadNew+0xd4>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2ba3      	cmp	r3, #163	; 0xa3
 80076a0:	d90a      	bls.n	80076b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d006      	beq.n	80076b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <osThreadNew+0xd4>
        mem = 1;
 80076b2:	2301      	movs	r3, #1
 80076b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076b6:	e010      	b.n	80076da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10c      	bne.n	80076da <osThreadNew+0xf6>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d108      	bne.n	80076da <osThreadNew+0xf6>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <osThreadNew+0xf6>
          mem = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d4:	e001      	b.n	80076da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d110      	bne.n	8007702 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076e8:	9202      	str	r2, [sp, #8]
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f002 f902 	bl	8009900 <xTaskCreateStatic>
 80076fc:	4603      	mov	r3, r0
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e013      	b.n	800772a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	2b00      	cmp	r3, #0
 8007706:	d110      	bne.n	800772a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	b29a      	uxth	r2, r3
 800770c:	f107 0314 	add.w	r3, r7, #20
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f002 f94c 	bl	80099b8 <xTaskCreate>
 8007720:	4603      	mov	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d001      	beq.n	800772a <osThreadNew+0x146>
          hTask = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800772a:	697b      	ldr	r3, [r7, #20]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3738      	adds	r7, #56	; 0x38
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200007d4 	.word	0x200007d4

08007738 <osThreadSetPriority>:
   */
  (void) thread_id;
  return 0;
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007746:	f3ef 8305 	mrs	r3, IPSR
 800774a:	617b      	str	r3, [r7, #20]
  return(result);
 800774c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10f      	bne.n	8007772 <osThreadSetPriority+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007752:	f3ef 8310 	mrs	r3, PRIMASK
 8007756:	613b      	str	r3, [r7, #16]
  return(result);
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d109      	bne.n	8007772 <osThreadSetPriority+0x3a>
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <osThreadSetPriority+0x74>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d109      	bne.n	800777a <osThreadSetPriority+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007766:	f3ef 8311 	mrs	r3, BASEPRI
 800776a:	60fb      	str	r3, [r7, #12]
  return(result);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <osThreadSetPriority+0x42>
    stat = osErrorISR;
 8007772:	f06f 0305 	mvn.w	r3, #5
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	e013      	b.n	80077a2 <osThreadSetPriority+0x6a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <osThreadSetPriority+0x54>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	dd02      	ble.n	800778c <osThreadSetPriority+0x54>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b38      	cmp	r3, #56	; 0x38
 800778a:	dd03      	ble.n	8007794 <osThreadSetPriority+0x5c>
    stat = osErrorParameter;
 800778c:	f06f 0303 	mvn.w	r3, #3
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e006      	b.n	80077a2 <osThreadSetPriority+0x6a>
  }
  else {
    stat = osOK;
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	4619      	mov	r1, r3
 800779c:	69b8      	ldr	r0, [r7, #24]
 800779e:	f002 fa93 	bl	8009cc8 <vTaskPrioritySet>
  }

  return (stat);
 80077a2:	69fb      	ldr	r3, [r7, #28]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200007d4 	.word	0x200007d4

080077b0 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077bc:	f3ef 8305 	mrs	r3, IPSR
 80077c0:	617b      	str	r3, [r7, #20]
  return(result);
 80077c2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10f      	bne.n	80077e8 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c8:	f3ef 8310 	mrs	r3, PRIMASK
 80077cc:	613b      	str	r3, [r7, #16]
  return(result);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <osThreadSuspend+0x38>
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <osThreadSuspend+0x64>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d109      	bne.n	80077f0 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077dc:	f3ef 8311 	mrs	r3, BASEPRI
 80077e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80077e8:	f06f 0305 	mvn.w	r3, #5
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	e00b      	b.n	8007808 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d103      	bne.n	80077fe <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80077f6:	f06f 0303 	mvn.w	r3, #3
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	e004      	b.n	8007808 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8007802:	69b8      	ldr	r0, [r7, #24]
 8007804:	f002 fb02 	bl	8009e0c <vTaskSuspend>
  }

  return (stat);
 8007808:	69fb      	ldr	r3, [r7, #28]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	200007d4 	.word	0x200007d4

08007818 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007824:	f3ef 8305 	mrs	r3, IPSR
 8007828:	617b      	str	r3, [r7, #20]
  return(result);
 800782a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10f      	bne.n	8007850 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007830:	f3ef 8310 	mrs	r3, PRIMASK
 8007834:	613b      	str	r3, [r7, #16]
  return(result);
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d109      	bne.n	8007850 <osThreadResume+0x38>
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <osThreadResume+0x64>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d109      	bne.n	8007858 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007844:	f3ef 8311 	mrs	r3, BASEPRI
 8007848:	60fb      	str	r3, [r7, #12]
  return(result);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <osThreadResume+0x40>
    stat = osErrorISR;
 8007850:	f06f 0305 	mvn.w	r3, #5
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e00b      	b.n	8007870 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d103      	bne.n	8007866 <osThreadResume+0x4e>
    stat = osErrorParameter;
 800785e:	f06f 0303 	mvn.w	r3, #3
 8007862:	61fb      	str	r3, [r7, #28]
 8007864:	e004      	b.n	8007870 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 800786a:	69b8      	ldr	r0, [r7, #24]
 800786c:	f002 fb7e 	bl	8009f6c <vTaskResume>
  }

  return (stat);
 8007870:	69fb      	ldr	r3, [r7, #28]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	200007d4 	.word	0x200007d4

08007880 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007888:	f3ef 8305 	mrs	r3, IPSR
 800788c:	613b      	str	r3, [r7, #16]
  return(result);
 800788e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10f      	bne.n	80078b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007894:	f3ef 8310 	mrs	r3, PRIMASK
 8007898:	60fb      	str	r3, [r7, #12]
  return(result);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <osDelay+0x34>
 80078a0:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <osDelay+0x58>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d109      	bne.n	80078bc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078a8:	f3ef 8311 	mrs	r3, BASEPRI
 80078ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <osDelay+0x3c>
    stat = osErrorISR;
 80078b4:	f06f 0305 	mvn.w	r3, #5
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e007      	b.n	80078cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f002 f9ca 	bl	8009c60 <vTaskDelay>
    }
  }

  return (stat);
 80078cc:	697b      	ldr	r3, [r7, #20]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200007d4 	.word	0x200007d4

080078dc <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078e8:	f3ef 8305 	mrs	r3, IPSR
 80078ec:	617b      	str	r3, [r7, #20]
  return(result);
 80078ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d13d      	bne.n	8007970 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078f4:	f3ef 8310 	mrs	r3, PRIMASK
 80078f8:	613b      	str	r3, [r7, #16]
  return(result);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d137      	bne.n	8007970 <osEventFlagsNew+0x94>
 8007900:	4b1e      	ldr	r3, [pc, #120]	; (800797c <osEventFlagsNew+0xa0>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d105      	bne.n	8007914 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007908:	f3ef 8311 	mrs	r3, BASEPRI
 800790c:	60fb      	str	r3, [r7, #12]
  return(result);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d12d      	bne.n	8007970 <osEventFlagsNew+0x94>
    mem = -1;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295
 8007918:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d015      	beq.n	800794c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <osEventFlagsNew+0x5a>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b1f      	cmp	r3, #31
 800792e:	d902      	bls.n	8007936 <osEventFlagsNew+0x5a>
        mem = 1;
 8007930:	2301      	movs	r3, #1
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	e00c      	b.n	8007950 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d108      	bne.n	8007950 <osEventFlagsNew+0x74>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d104      	bne.n	8007950 <osEventFlagsNew+0x74>
          mem = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	e001      	b.n	8007950 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d106      	bne.n	8007964 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fbf4 	bl	8008148 <xEventGroupCreateStatic>
 8007960:	61f8      	str	r0, [r7, #28]
 8007962:	e005      	b.n	8007970 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800796a:	f000 fc24 	bl	80081b6 <xEventGroupCreate>
 800796e:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007970:	69fb      	ldr	r3, [r7, #28]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200007d4 	.word	0x200007d4

08007980 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d004      	beq.n	800799e <osEventFlagsSet+0x1e>
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800799e:	f06f 0303 	mvn.w	r3, #3
 80079a2:	61fb      	str	r3, [r7, #28]
 80079a4:	e03a      	b.n	8007a1c <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079a6:	f3ef 8305 	mrs	r3, IPSR
 80079aa:	617b      	str	r3, [r7, #20]
  return(result);
 80079ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10f      	bne.n	80079d2 <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b2:	f3ef 8310 	mrs	r3, PRIMASK
 80079b6:	613b      	str	r3, [r7, #16]
  return(result);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <osEventFlagsSet+0x52>
 80079be:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <osEventFlagsSet+0xa8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d123      	bne.n	8007a0e <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079c6:	f3ef 8311 	mrs	r3, BASEPRI
 80079ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d01d      	beq.n	8007a0e <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80079d6:	f107 0308 	add.w	r3, r7, #8
 80079da:	461a      	mov	r2, r3
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	69b8      	ldr	r0, [r7, #24]
 80079e0:	f000 fe08 	bl	80085f4 <xEventGroupSetBitsFromISR>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80079ea:	f06f 0302 	mvn.w	r3, #2
 80079ee:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80079f0:	e013      	b.n	8007a1a <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <osEventFlagsSet+0x9a>
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <osEventFlagsSet+0xac>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8007a0c:	e005      	b.n	8007a1a <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	69b8      	ldr	r0, [r7, #24]
 8007a12:	f000 fd28 	bl	8008466 <xEventGroupSetBits>
 8007a16:	61f8      	str	r0, [r7, #28]
 8007a18:	e000      	b.n	8007a1c <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8007a1a:	bf00      	nop
  }

  return (rflags);
 8007a1c:	69fb      	ldr	r3, [r7, #28]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3720      	adds	r7, #32
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200007d4 	.word	0x200007d4
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <osEventFlagsClear+0x1e>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007a4e:	f06f 0303 	mvn.w	r3, #3
 8007a52:	61fb      	str	r3, [r7, #28]
 8007a54:	e029      	b.n	8007aaa <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a56:	f3ef 8305 	mrs	r3, IPSR
 8007a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8007a5c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10f      	bne.n	8007a82 <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a62:	f3ef 8310 	mrs	r3, PRIMASK
 8007a66:	613b      	str	r3, [r7, #16]
  return(result);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d109      	bne.n	8007a82 <osEventFlagsClear+0x52>
 8007a6e:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <osEventFlagsClear+0x84>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d114      	bne.n	8007aa0 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a76:	f3ef 8311 	mrs	r3, BASEPRI
 8007a7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00e      	beq.n	8007aa0 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8007a82:	69b8      	ldr	r0, [r7, #24]
 8007a84:	f000 fccc 	bl	8008420 <xEventGroupGetBitsFromISR>
 8007a88:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	69b8      	ldr	r0, [r7, #24]
 8007a8e:	f000 fcb3 	bl	80083f8 <xEventGroupClearBitsFromISR>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d108      	bne.n	8007aaa <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8007a98:	f06f 0302 	mvn.w	r3, #2
 8007a9c:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8007a9e:	e004      	b.n	8007aaa <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	69b8      	ldr	r0, [r7, #24]
 8007aa4:	f000 fc70 	bl	8008388 <xEventGroupClearBits>
 8007aa8:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8007aaa:	69fb      	ldr	r3, [r7, #28]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	200007d4 	.word	0x200007d4

08007ab8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08e      	sub	sp, #56	; 0x38
 8007abc:	af02      	add	r7, sp, #8
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d004      	beq.n	8007ada <osEventFlagsWait+0x22>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8007ada:	f06f 0303 	mvn.w	r3, #3
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae0:	e059      	b.n	8007b96 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae2:	f3ef 8305 	mrs	r3, IPSR
 8007ae6:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ae8:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10f      	bne.n	8007b0e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aee:	f3ef 8310 	mrs	r3, PRIMASK
 8007af2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d109      	bne.n	8007b0e <osEventFlagsWait+0x56>
 8007afa:	4b29      	ldr	r3, [pc, #164]	; (8007ba0 <osEventFlagsWait+0xe8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d109      	bne.n	8007b16 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b02:	f3ef 8311 	mrs	r3, BASEPRI
 8007b06:	617b      	str	r3, [r7, #20]
  return(result);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8007b0e:	f06f 0305 	mvn.w	r3, #5
 8007b12:	627b      	str	r3, [r7, #36]	; 0x24
 8007b14:	e03f      	b.n	8007b96 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d002      	beq.n	8007b26 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b24:	e001      	b.n	8007b2a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b38:	e001      	b.n	8007b3e <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	6a38      	ldr	r0, [r7, #32]
 8007b4a:	f000 fb4f 	bl	80081ec <xEventGroupWaitBits>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00e      	beq.n	8007b78 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d019      	beq.n	8007b96 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8007b68:	f06f 0301 	mvn.w	r3, #1
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6e:	e012      	b.n	8007b96 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007b70:	f06f 0302 	mvn.w	r3, #2
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
 8007b76:	e00e      	b.n	8007b96 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8007b88:	f06f 0301 	mvn.w	r3, #1
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8e:	e002      	b.n	8007b96 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007b90:	f06f 0302 	mvn.w	r3, #2
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3730      	adds	r7, #48	; 0x30
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	200007d4 	.word	0x200007d4

08007ba4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb0:	f3ef 8305 	mrs	r3, IPSR
 8007bb4:	613b      	str	r3, [r7, #16]
  return(result);
 8007bb6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f040 8085 	bne.w	8007cc8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d17e      	bne.n	8007cc8 <osMutexNew+0x124>
 8007bca:	4b42      	ldr	r3, [pc, #264]	; (8007cd4 <osMutexNew+0x130>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d105      	bne.n	8007bde <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8007bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d174      	bne.n	8007cc8 <osMutexNew+0x124>
    if (attr != NULL) {
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <osMutexNew+0x48>
      type = attr->attr_bits;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	e001      	b.n	8007bf0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <osMutexNew+0x5c>
      rmtx = 1U;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]
 8007bfe:	e001      	b.n	8007c04 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d15c      	bne.n	8007cc8 <osMutexNew+0x124>
      mem = -1;
 8007c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c12:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d015      	beq.n	8007c46 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d006      	beq.n	8007c30 <osMutexNew+0x8c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	2b4f      	cmp	r3, #79	; 0x4f
 8007c28:	d902      	bls.n	8007c30 <osMutexNew+0x8c>
          mem = 1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	e00c      	b.n	8007c4a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <osMutexNew+0xa6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d104      	bne.n	8007c4a <osMutexNew+0xa6>
            mem = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	e001      	b.n	8007c4a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d112      	bne.n	8007c76 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	2004      	movs	r0, #4
 8007c5e:	f000 feff 	bl	8008a60 <xQueueCreateMutexStatic>
 8007c62:	6278      	str	r0, [r7, #36]	; 0x24
 8007c64:	e016      	b.n	8007c94 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	2001      	movs	r0, #1
 8007c6e:	f000 fef7 	bl	8008a60 <xQueueCreateMutexStatic>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24
 8007c74:	e00e      	b.n	8007c94 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10b      	bne.n	8007c94 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007c82:	2004      	movs	r0, #4
 8007c84:	f000 fed4 	bl	8008a30 <xQueueCreateMutex>
 8007c88:	6278      	str	r0, [r7, #36]	; 0x24
 8007c8a:	e003      	b.n	8007c94 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f000 fecf 	bl	8008a30 <xQueueCreateMutex>
 8007c92:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <osMutexNew+0x110>
        if (attr != NULL) {
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <osMutexNew+0x104>
          name = attr->name;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e001      	b.n	8007cac <osMutexNew+0x108>
        } else {
          name = NULL;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007cac:	6979      	ldr	r1, [r7, #20]
 8007cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cb0:	f001 fda0 	bl	80097f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d006      	beq.n	8007cc8 <osMutexNew+0x124>
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	f043 0301 	orr.w	r3, r3, #1
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3728      	adds	r7, #40	; 0x28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200007d4 	.word	0x200007d4

08007cd8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cf6:	f3ef 8305 	mrs	r3, IPSR
 8007cfa:	613b      	str	r3, [r7, #16]
  return(result);
 8007cfc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10f      	bne.n	8007d22 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d02:	f3ef 8310 	mrs	r3, PRIMASK
 8007d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <osMutexAcquire+0x4a>
 8007d0e:	4b20      	ldr	r3, [pc, #128]	; (8007d90 <osMutexAcquire+0xb8>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d109      	bne.n	8007d2a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d16:	f3ef 8311 	mrs	r3, BASEPRI
 8007d1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007d22:	f06f 0305 	mvn.w	r3, #5
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	e02c      	b.n	8007d84 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007d30:	f06f 0303 	mvn.w	r3, #3
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	e025      	b.n	8007d84 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d011      	beq.n	8007d62 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	69b8      	ldr	r0, [r7, #24]
 8007d42:	f000 fedc 	bl	8008afe <xQueueTakeMutexRecursive>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d01b      	beq.n	8007d84 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007d52:	f06f 0301 	mvn.w	r3, #1
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	e014      	b.n	8007d84 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007d5a:	f06f 0302 	mvn.w	r3, #2
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	e010      	b.n	8007d84 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	69b8      	ldr	r0, [r7, #24]
 8007d66:	f001 fa6f 	bl	8009248 <xQueueSemaphoreTake>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d009      	beq.n	8007d84 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007d76:	f06f 0301 	mvn.w	r3, #1
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	e002      	b.n	8007d84 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007d7e:	f06f 0302 	mvn.w	r3, #2
 8007d82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007d84:	69fb      	ldr	r3, [r7, #28]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3720      	adds	r7, #32
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	200007d4 	.word	0x200007d4

08007d94 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f023 0301 	bic.w	r3, r3, #1
 8007da2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007db0:	f3ef 8305 	mrs	r3, IPSR
 8007db4:	613b      	str	r3, [r7, #16]
  return(result);
 8007db6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10f      	bne.n	8007ddc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007dc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d109      	bne.n	8007ddc <osMutexRelease+0x48>
 8007dc8:	4b19      	ldr	r3, [pc, #100]	; (8007e30 <osMutexRelease+0x9c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d109      	bne.n	8007de4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8007dd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d003      	beq.n	8007de4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007ddc:	f06f 0305 	mvn.w	r3, #5
 8007de0:	61fb      	str	r3, [r7, #28]
 8007de2:	e01f      	b.n	8007e24 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007dea:	f06f 0303 	mvn.w	r3, #3
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	e018      	b.n	8007e24 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007df8:	69b8      	ldr	r0, [r7, #24]
 8007dfa:	f000 fe4c 	bl	8008a96 <xQueueGiveMutexRecursive>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d00f      	beq.n	8007e24 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007e04:	f06f 0302 	mvn.w	r3, #2
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	e00b      	b.n	8007e24 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	69b8      	ldr	r0, [r7, #24]
 8007e14:	f000 ff14 	bl	8008c40 <xQueueGenericSend>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d002      	beq.n	8007e24 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007e1e:	f06f 0302 	mvn.w	r3, #2
 8007e22:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007e24:	69fb      	ldr	r3, [r7, #28]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3720      	adds	r7, #32
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200007d4 	.word	0x200007d4

08007e34 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08c      	sub	sp, #48	; 0x30
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e44:	f3ef 8305 	mrs	r3, IPSR
 8007e48:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 8086 	bne.w	8007f5e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e52:	f3ef 8310 	mrs	r3, PRIMASK
 8007e56:	617b      	str	r3, [r7, #20]
  return(result);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d17f      	bne.n	8007f5e <osSemaphoreNew+0x12a>
 8007e5e:	4b42      	ldr	r3, [pc, #264]	; (8007f68 <osSemaphoreNew+0x134>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d105      	bne.n	8007e72 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e66:	f3ef 8311 	mrs	r3, BASEPRI
 8007e6a:	613b      	str	r3, [r7, #16]
  return(result);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d175      	bne.n	8007f5e <osSemaphoreNew+0x12a>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d072      	beq.n	8007f5e <osSemaphoreNew+0x12a>
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d86e      	bhi.n	8007f5e <osSemaphoreNew+0x12a>
    mem = -1;
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d015      	beq.n	8007eb8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d006      	beq.n	8007ea2 <osSemaphoreNew+0x6e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	2b4f      	cmp	r3, #79	; 0x4f
 8007e9a:	d902      	bls.n	8007ea2 <osSemaphoreNew+0x6e>
        mem = 1;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	623b      	str	r3, [r7, #32]
 8007ea0:	e00c      	b.n	8007ebc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d108      	bne.n	8007ebc <osSemaphoreNew+0x88>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <osSemaphoreNew+0x88>
          mem = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	623b      	str	r3, [r7, #32]
 8007eb6:	e001      	b.n	8007ebc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d04c      	beq.n	8007f5e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d128      	bne.n	8007f1c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10a      	bne.n	8007ee6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	9200      	str	r2, [sp, #0]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2100      	movs	r1, #0
 8007edc:	2001      	movs	r0, #1
 8007ede:	f000 fcb5 	bl	800884c <xQueueGenericCreateStatic>
 8007ee2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ee4:	e005      	b.n	8007ef2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	2100      	movs	r1, #0
 8007eea:	2001      	movs	r0, #1
 8007eec:	f000 fd25 	bl	800893a <xQueueGenericCreate>
 8007ef0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d022      	beq.n	8007f3e <osSemaphoreNew+0x10a>
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d01f      	beq.n	8007f3e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007efe:	2300      	movs	r3, #0
 8007f00:	2200      	movs	r2, #0
 8007f02:	2100      	movs	r1, #0
 8007f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f06:	f000 fe9b 	bl	8008c40 <xQueueGenericSend>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d016      	beq.n	8007f3e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8007f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f12:	f001 fb25 	bl	8009560 <vQueueDelete>
            hSemaphore = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1a:	e010      	b.n	8007f3e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d108      	bne.n	8007f34 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	461a      	mov	r2, r3
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fe1d 	bl	8008b6a <xQueueCreateCountingSemaphoreStatic>
 8007f30:	6278      	str	r0, [r7, #36]	; 0x24
 8007f32:	e004      	b.n	8007f3e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fe4e 	bl	8008bd8 <xQueueCreateCountingSemaphore>
 8007f3c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00c      	beq.n	8007f5e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <osSemaphoreNew+0x11e>
          name = attr->name;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e001      	b.n	8007f56 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007f56:	69f9      	ldr	r1, [r7, #28]
 8007f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f5a:	f001 fc4b 	bl	80097f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3728      	adds	r7, #40	; 0x28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200007d4 	.word	0x200007d4

08007f6c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b088      	sub	sp, #32
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d103      	bne.n	8007f8c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007f84:	f06f 0303 	mvn.w	r3, #3
 8007f88:	61fb      	str	r3, [r7, #28]
 8007f8a:	e04b      	b.n	8008024 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f8c:	f3ef 8305 	mrs	r3, IPSR
 8007f90:	617b      	str	r3, [r7, #20]
  return(result);
 8007f92:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10f      	bne.n	8007fb8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f98:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d109      	bne.n	8007fb8 <osSemaphoreAcquire+0x4c>
 8007fa4:	4b22      	ldr	r3, [pc, #136]	; (8008030 <osSemaphoreAcquire+0xc4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d128      	bne.n	8007ffe <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fac:	f3ef 8311 	mrs	r3, BASEPRI
 8007fb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d022      	beq.n	8007ffe <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007fbe:	f06f 0303 	mvn.w	r3, #3
 8007fc2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007fc4:	e02d      	b.n	8008022 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007fca:	f107 0308 	add.w	r3, r7, #8
 8007fce:	461a      	mov	r2, r3
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	69b8      	ldr	r0, [r7, #24]
 8007fd4:	f001 fa44 	bl	8009460 <xQueueReceiveFromISR>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d003      	beq.n	8007fe6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007fde:	f06f 0302 	mvn.w	r3, #2
 8007fe2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007fe4:	e01d      	b.n	8008022 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01a      	beq.n	8008022 <osSemaphoreAcquire+0xb6>
 8007fec:	4b11      	ldr	r3, [pc, #68]	; (8008034 <osSemaphoreAcquire+0xc8>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007ffc:	e011      	b.n	8008022 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	69b8      	ldr	r0, [r7, #24]
 8008002:	f001 f921 	bl	8009248 <xQueueSemaphoreTake>
 8008006:	4603      	mov	r3, r0
 8008008:	2b01      	cmp	r3, #1
 800800a:	d00b      	beq.n	8008024 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008012:	f06f 0301 	mvn.w	r3, #1
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	e004      	b.n	8008024 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800801a:	f06f 0302 	mvn.w	r3, #2
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	e000      	b.n	8008024 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008022:	bf00      	nop
      }
    }
  }

  return (stat);
 8008024:	69fb      	ldr	r3, [r7, #28]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	200007d4 	.word	0x200007d4
 8008034:	e000ed04 	.word	0xe000ed04

08008038 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008044:	2300      	movs	r3, #0
 8008046:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d103      	bne.n	8008056 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800804e:	f06f 0303 	mvn.w	r3, #3
 8008052:	61fb      	str	r3, [r7, #28]
 8008054:	e03e      	b.n	80080d4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008056:	f3ef 8305 	mrs	r3, IPSR
 800805a:	617b      	str	r3, [r7, #20]
  return(result);
 800805c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10f      	bne.n	8008082 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008062:	f3ef 8310 	mrs	r3, PRIMASK
 8008066:	613b      	str	r3, [r7, #16]
  return(result);
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <osSemaphoreRelease+0x4a>
 800806e:	4b1c      	ldr	r3, [pc, #112]	; (80080e0 <osSemaphoreRelease+0xa8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d120      	bne.n	80080b8 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008076:	f3ef 8311 	mrs	r3, BASEPRI
 800807a:	60fb      	str	r3, [r7, #12]
  return(result);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d01a      	beq.n	80080b8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	4619      	mov	r1, r3
 800808c:	69b8      	ldr	r0, [r7, #24]
 800808e:	f000 ff6d 	bl	8008f6c <xQueueGiveFromISR>
 8008092:	4603      	mov	r3, r0
 8008094:	2b01      	cmp	r3, #1
 8008096:	d003      	beq.n	80080a0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008098:	f06f 0302 	mvn.w	r3, #2
 800809c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800809e:	e018      	b.n	80080d2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d015      	beq.n	80080d2 <osSemaphoreRelease+0x9a>
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <osSemaphoreRelease+0xac>)
 80080a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80080b6:	e00c      	b.n	80080d2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80080b8:	2300      	movs	r3, #0
 80080ba:	2200      	movs	r2, #0
 80080bc:	2100      	movs	r1, #0
 80080be:	69b8      	ldr	r0, [r7, #24]
 80080c0:	f000 fdbe 	bl	8008c40 <xQueueGenericSend>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d004      	beq.n	80080d4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80080ca:	f06f 0302 	mvn.w	r3, #2
 80080ce:	61fb      	str	r3, [r7, #28]
 80080d0:	e000      	b.n	80080d4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80080d2:	bf00      	nop
    }
  }

  return (stat);
 80080d4:	69fb      	ldr	r3, [r7, #28]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3720      	adds	r7, #32
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200007d4 	.word	0x200007d4
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a06      	ldr	r2, [pc, #24]	; (8008110 <vApplicationGetIdleTaskMemory+0x28>)
 80080f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4a05      	ldr	r2, [pc, #20]	; (8008114 <vApplicationGetIdleTaskMemory+0x2c>)
 80080fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2240      	movs	r2, #64	; 0x40
 8008104:	601a      	str	r2, [r3, #0]
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr
 8008110:	200007d8 	.word	0x200007d8
 8008114:	2000087c 	.word	0x2000087c

08008118 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4a06      	ldr	r2, [pc, #24]	; (8008140 <vApplicationGetTimerTaskMemory+0x28>)
 8008128:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	4a05      	ldr	r2, [pc, #20]	; (8008144 <vApplicationGetTimerTaskMemory+0x2c>)
 800812e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2240      	movs	r2, #64	; 0x40
 8008134:	601a      	str	r2, [r3, #0]
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr
 8008140:	2000097c 	.word	0x2000097c
 8008144:	20000a20 	.word	0x20000a20

08008148 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <xEventGroupCreateStatic+0x24>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	613b      	str	r3, [r7, #16]
}
 8008168:	bf00      	nop
 800816a:	e7fe      	b.n	800816a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800816c:	2320      	movs	r3, #32
 800816e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b20      	cmp	r3, #32
 8008174:	d00a      	beq.n	800818c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fa3b 	bl	800861c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2201      	movs	r2, #1
 80081aa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80081ac:	697b      	ldr	r3, [r7, #20]
	}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80081bc:	2020      	movs	r0, #32
 80081be:	f003 fb75 	bl	800b8ac <pvPortMalloc>
 80081c2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fa21 	bl	800861c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80081e0:	687b      	ldr	r3, [r7, #4]
	}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b090      	sub	sp, #64	; 0x40
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8008202:	2300      	movs	r3, #0
 8008204:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xEventGroupWaitBits+0x36>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	623b      	str	r3, [r7, #32]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <xEventGroupWaitBits+0x56>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	61fb      	str	r3, [r7, #28]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xEventGroupWaitBits+0x72>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	61bb      	str	r3, [r7, #24]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800825e:	f002 fc03 	bl	800aa68 <xTaskGetSchedulerState>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <xEventGroupWaitBits+0x82>
 8008268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <xEventGroupWaitBits+0x86>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <xEventGroupWaitBits+0x88>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	617b      	str	r3, [r7, #20]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800828e:	f001 ff3b 	bl	800a108 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800829e:	f000 f987 	bl	80085b0 <prvTestWaitCondition>
 80082a2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00e      	beq.n	80082c8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d028      	beq.n	800830a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80082b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	43db      	mvns	r3, r3
 80082c0:	401a      	ands	r2, r3
 80082c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e020      	b.n	800830a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80082c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80082d2:	2301      	movs	r3, #1
 80082d4:	633b      	str	r3, [r7, #48]	; 0x30
 80082d6:	e018      	b.n	800830a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082e4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082f2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80082f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f6:	1d18      	adds	r0, r3, #4
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	4313      	orrs	r3, r2
 80082fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008300:	4619      	mov	r1, r3
 8008302:	f002 f913 	bl	800a52c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800830a:	f001 ff0b 	bl	800a124 <xTaskResumeAll>
 800830e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8008310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008312:	2b00      	cmp	r3, #0
 8008314:	d031      	beq.n	800837a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d107      	bne.n	800832c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800831c:	4b19      	ldr	r3, [pc, #100]	; (8008384 <xEventGroupWaitBits+0x198>)
 800831e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800832c:	f002 fd1c 	bl	800ad68 <uxTaskResetEventItemValue>
 8008330:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11a      	bne.n	8008372 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800833c:	f003 f9b6 	bl	800b6ac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8008340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800834c:	f000 f930 	bl	80085b0 <prvTestWaitCondition>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d006      	beq.n	800836a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	43db      	mvns	r3, r3
 8008364:	401a      	ands	r2, r3
 8008366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008368:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800836a:	2301      	movs	r3, #1
 800836c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800836e:	f003 f9cd 	bl	800b70c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008374:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008378:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800837a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800837c:	4618      	mov	r0, r3
 800837e:	3740      	adds	r7, #64	; 0x40
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10a      	bne.n	80083b2 <xEventGroupClearBits+0x2a>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	60fb      	str	r3, [r7, #12]
}
 80083ae:	bf00      	nop
 80083b0:	e7fe      	b.n	80083b0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <xEventGroupClearBits+0x4a>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60bb      	str	r3, [r7, #8]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80083d2:	f003 f96b 	bl	800b6ac <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	401a      	ands	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80083ea:	f003 f98f 	bl	800b70c <vPortExitCritical>

	return uxReturn;
 80083ee:	693b      	ldr	r3, [r7, #16]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4804      	ldr	r0, [pc, #16]	; (800841c <xEventGroupClearBitsFromISR+0x24>)
 800840a:	f003 f83f 	bl	800b48c <xTimerPendFunctionCallFromISR>
 800840e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008410:	68fb      	ldr	r3, [r7, #12]
	}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	08008597 	.word	0x08008597

08008420 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008420:	b480      	push	{r7}
 8008422:	b089      	sub	sp, #36	; 0x24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	61fb      	str	r3, [r7, #28]
	__asm volatile
 800842c:	f3ef 8211 	mrs	r2, BASEPRI
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fa      	str	r2, [r7, #12]
 8008442:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 8008444:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008446:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f383 8811 	msr	BASEPRI, r3
}
 8008458:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800845a:	697b      	ldr	r3, [r7, #20]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3724      	adds	r7, #36	; 0x24
 8008460:	46bd      	mov	sp, r7
 8008462:	bc80      	pop	{r7}
 8008464:	4770      	bx	lr

08008466 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b08e      	sub	sp, #56	; 0x38
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
 800846e:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008470:	2300      	movs	r3, #0
 8008472:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8008478:	2300      	movs	r3, #0
 800847a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <xEventGroupSetBits+0x32>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	613b      	str	r3, [r7, #16]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <xEventGroupSetBits+0x52>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60fb      	str	r3, [r7, #12]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	3304      	adds	r3, #4
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	3308      	adds	r3, #8
 80084c2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80084c4:	f001 fe20 	bl	800a108 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	431a      	orrs	r2, r3
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80084da:	e03c      	b.n	8008556 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80084e8:	2300      	movs	r3, #0
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80084f2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084fa:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d108      	bne.n	8008518 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	4013      	ands	r3, r2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008512:	2301      	movs	r3, #1
 8008514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008516:	e008      	b.n	800852a <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	4013      	ands	r3, r2
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	429a      	cmp	r2, r3
 8008524:	d101      	bne.n	800852a <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008526:	2301      	movs	r3, #1
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800852a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852c:	2b00      	cmp	r3, #0
 800852e:	d010      	beq.n	8008552 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	4313      	orrs	r3, r2
 8008540:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800854a:	4619      	mov	r1, r3
 800854c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800854e:	f002 f8b9 	bl	800a6c4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8008556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	429a      	cmp	r2, r3
 800855c:	d1be      	bne.n	80084dc <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	43db      	mvns	r3, r3
 8008566:	401a      	ands	r2, r3
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800856c:	f001 fdda 	bl	800a124 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	681b      	ldr	r3, [r3, #0]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3738      	adds	r7, #56	; 0x38
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ff6c 	bl	8008466 <xEventGroupSetBits>
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff fef0 	bl	8008388 <xEventGroupClearBits>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d107      	bne.n	80085d6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e007      	b.n	80085e6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4013      	ands	r3, r2
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d101      	bne.n	80085e6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80085e2:	2301      	movs	r3, #1
 80085e4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80085e6:	697b      	ldr	r3, [r7, #20]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bc80      	pop	{r7}
 80085f0:	4770      	bx	lr
	...

080085f4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	68f9      	ldr	r1, [r7, #12]
 8008606:	4804      	ldr	r0, [pc, #16]	; (8008618 <xEventGroupSetBitsFromISR+0x24>)
 8008608:	f002 ff40 	bl	800b48c <xTimerPendFunctionCallFromISR>
 800860c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800860e:	697b      	ldr	r3, [r7, #20]
	}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	0800857d 	.word	0x0800857d

0800861c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f103 0208 	add.w	r2, r3, #8
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f04f 32ff 	mov.w	r2, #4294967295
 8008634:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f103 0208 	add.w	r2, r3, #8
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f103 0208 	add.w	r2, r3, #8
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	bc80      	pop	{r7}
 8008658:	4770      	bx	lr

0800865a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	bc80      	pop	{r7}
 8008670:	4770      	bx	lr

08008672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr

080086b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ce:	d103      	bne.n	80086d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e00c      	b.n	80086f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3308      	adds	r3, #8
 80086dc:	60fb      	str	r3, [r7, #12]
 80086de:	e002      	b.n	80086e6 <vListInsert+0x2e>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d2f6      	bcs.n	80086e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6892      	ldr	r2, [r2, #8]
 800873e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6852      	ldr	r2, [r2, #4]
 8008748:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d103      	bne.n	800875c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	1e5a      	subs	r2, r3, #1
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr
	...

0800877c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10a      	bne.n	80087a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	60bb      	str	r3, [r7, #8]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087a6:	f002 ff81 	bl	800b6ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087b6:	fb01 f303 	mul.w	r3, r1, r3
 80087ba:	441a      	add	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	3b01      	subs	r3, #1
 80087d8:	68f9      	ldr	r1, [r7, #12]
 80087da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087dc:	fb01 f303 	mul.w	r3, r1, r3
 80087e0:	441a      	add	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	22ff      	movs	r2, #255	; 0xff
 80087ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	22ff      	movs	r2, #255	; 0xff
 80087f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d114      	bne.n	8008826 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01a      	beq.n	800883a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3310      	adds	r3, #16
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fef7 	bl	800a5fc <xTaskRemoveFromEventList>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d012      	beq.n	800883a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008814:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <xQueueGenericReset+0xcc>)
 8008816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	e009      	b.n	800883a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3310      	adds	r3, #16
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fef6 	bl	800861c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3324      	adds	r3, #36	; 0x24
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff fef1 	bl	800861c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800883a:	f002 ff67 	bl	800b70c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800883e:	2301      	movs	r3, #1
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08e      	sub	sp, #56	; 0x38
 8008850:	af02      	add	r7, sp, #8
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10a      	bne.n	8008876 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008872:	bf00      	nop
 8008874:	e7fe      	b.n	8008874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <xQueueGenericCreateStatic+0x52>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <xQueueGenericCreateStatic+0x56>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <xQueueGenericCreateStatic+0x58>
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	623b      	str	r3, [r7, #32]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <xQueueGenericCreateStatic+0x7e>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <xQueueGenericCreateStatic+0x82>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <xQueueGenericCreateStatic+0x84>
 80088ce:	2300      	movs	r3, #0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	61fb      	str	r3, [r7, #28]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088ea:	2350      	movs	r3, #80	; 0x50
 80088ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b50      	cmp	r3, #80	; 0x50
 80088f2:	d00a      	beq.n	800890a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	61bb      	str	r3, [r7, #24]
}
 8008906:	bf00      	nop
 8008908:	e7fe      	b.n	8008908 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00d      	beq.n	8008930 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800891c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4613      	mov	r3, r2
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f843 	bl	80089b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008932:	4618      	mov	r0, r3
 8008934:	3730      	adds	r7, #48	; 0x30
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800893a:	b580      	push	{r7, lr}
 800893c:	b08a      	sub	sp, #40	; 0x28
 800893e:	af02      	add	r7, sp, #8
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <xQueueGenericCreate+0x2a>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	613b      	str	r3, [r7, #16]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d102      	bne.n	8008970 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800896a:	2300      	movs	r3, #0
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	e004      	b.n	800897a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	fb02 f303 	mul.w	r3, r2, r3
 8008978:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	3350      	adds	r3, #80	; 0x50
 800897e:	4618      	mov	r0, r3
 8008980:	f002 ff94 	bl	800b8ac <pvPortMalloc>
 8008984:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00f      	beq.n	80089ac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	3350      	adds	r3, #80	; 0x50
 8008990:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800899a:	79fa      	ldrb	r2, [r7, #7]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	4613      	mov	r3, r2
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f805 	bl	80089b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80089ac:	69bb      	ldr	r3, [r7, #24]
	}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3720      	adds	r7, #32
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	607a      	str	r2, [r7, #4]
 80089c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	e002      	b.n	80089d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089e4:	2101      	movs	r1, #1
 80089e6:	69b8      	ldr	r0, [r7, #24]
 80089e8:	f7ff fec8 	bl	800877c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089f4:	bf00      	nop
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00e      	beq.n	8008a28 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2100      	movs	r1, #0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f90c 	bl	8008c40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6939      	ldr	r1, [r7, #16]
 8008a48:	6978      	ldr	r0, [r7, #20]
 8008a4a:	f7ff ff76 	bl	800893a <xQueueGenericCreate>
 8008a4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff ffd3 	bl	80089fc <prvInitialiseMutex>

		return pxNewQueue;
 8008a56:	68fb      	ldr	r3, [r7, #12]
	}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	2300      	movs	r3, #0
 8008a72:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6939      	ldr	r1, [r7, #16]
 8008a7e:	6978      	ldr	r0, [r7, #20]
 8008a80:	f7ff fee4 	bl	800884c <xQueueGenericCreateStatic>
 8008a84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff ffb8 	bl	80089fc <prvInitialiseMutex>

		return pxNewQueue;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
	}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008a96:	b590      	push	{r4, r7, lr}
 8008a98:	b087      	sub	sp, #28
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60fb      	str	r3, [r7, #12]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	685c      	ldr	r4, [r3, #4]
 8008ac2:	f001 ffc3 	bl	800aa4c <xTaskGetCurrentTaskHandle>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	d111      	bne.n	8008af0 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	1e5a      	subs	r2, r3, #1
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d105      	bne.n	8008aea <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6938      	ldr	r0, [r7, #16]
 8008ae6:	f000 f8ab 	bl	8008c40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008aea:	2301      	movs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e001      	b.n	8008af4 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008af4:	697b      	ldr	r3, [r7, #20]
	}
 8008af6:	4618      	mov	r0, r3
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd90      	pop	{r4, r7, pc}

08008afe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008afe:	b590      	push	{r4, r7, lr}
 8008b00:	b087      	sub	sp, #28
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	60fb      	str	r3, [r7, #12]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685c      	ldr	r4, [r3, #4]
 8008b2c:	f001 ff8e 	bl	800aa4c <xTaskGetCurrentTaskHandle>
 8008b30:	4603      	mov	r3, r0
 8008b32:	429c      	cmp	r4, r3
 8008b34:	d107      	bne.n	8008b46 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008b40:	2301      	movs	r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e00c      	b.n	8008b60 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6938      	ldr	r0, [r7, #16]
 8008b4a:	f000 fb7d 	bl	8009248 <xQueueSemaphoreTake>
 8008b4e:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d004      	beq.n	8008b60 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008b60:	697b      	ldr	r3, [r7, #20]
	}
 8008b62:	4618      	mov	r0, r3
 8008b64:	371c      	adds	r7, #28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd90      	pop	{r4, r7, pc}

08008b6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b08a      	sub	sp, #40	; 0x28
 8008b6e:	af02      	add	r7, sp, #8
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	61bb      	str	r3, [r7, #24]
}
 8008b8e:	bf00      	nop
 8008b90:	e7fe      	b.n	8008b90 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d90a      	bls.n	8008bb0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	617b      	str	r3, [r7, #20]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	2100      	movs	r1, #0
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7ff fe46 	bl	800884c <xQueueGenericCreateStatic>
 8008bc0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008bce:	69fb      	ldr	r3, [r7, #28]
	}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3720      	adds	r7, #32
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10a      	bne.n	8008bfe <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	613b      	str	r3, [r7, #16]
}
 8008bfa:	bf00      	nop
 8008bfc:	e7fe      	b.n	8008bfc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d90a      	bls.n	8008c1c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	f383 8811 	msr	BASEPRI, r3
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f3bf 8f4f 	dsb	sy
 8008c16:	60fb      	str	r3, [r7, #12]
}
 8008c18:	bf00      	nop
 8008c1a:	e7fe      	b.n	8008c1a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	2100      	movs	r1, #0
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fe8a 	bl	800893a <xQueueGenericCreate>
 8008c26:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008c34:	697b      	ldr	r3, [r7, #20]
	}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08e      	sub	sp, #56	; 0x38
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <xQueueGenericSend+0x32>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d103      	bne.n	8008c80 <xQueueGenericSend+0x40>
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <xQueueGenericSend+0x44>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <xQueueGenericSend+0x46>
 8008c84:	2300      	movs	r3, #0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <xQueueGenericSend+0x60>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d103      	bne.n	8008cae <xQueueGenericSend+0x6e>
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <xQueueGenericSend+0x72>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e000      	b.n	8008cb4 <xQueueGenericSend+0x74>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <xQueueGenericSend+0x8e>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	623b      	str	r3, [r7, #32]
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cce:	f001 fecb 	bl	800aa68 <xTaskGetSchedulerState>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d102      	bne.n	8008cde <xQueueGenericSend+0x9e>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <xQueueGenericSend+0xa2>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e000      	b.n	8008ce4 <xQueueGenericSend+0xa4>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10a      	bne.n	8008cfe <xQueueGenericSend+0xbe>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	61fb      	str	r3, [r7, #28]
}
 8008cfa:	bf00      	nop
 8008cfc:	e7fe      	b.n	8008cfc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cfe:	f002 fcd5 	bl	800b6ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d302      	bcc.n	8008d14 <xQueueGenericSend+0xd4>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d129      	bne.n	8008d68 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d1a:	f000 fc5b 	bl	80095d4 <prvCopyDataToQueue>
 8008d1e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d010      	beq.n	8008d4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fc65 	bl	800a5fc <xTaskRemoveFromEventList>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d013      	beq.n	8008d60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d38:	4b3f      	ldr	r3, [pc, #252]	; (8008e38 <xQueueGenericSend+0x1f8>)
 8008d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	e00a      	b.n	8008d60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d007      	beq.n	8008d60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d50:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <xQueueGenericSend+0x1f8>)
 8008d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d60:	f002 fcd4 	bl	800b70c <vPortExitCritical>
				return pdPASS;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e063      	b.n	8008e30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d103      	bne.n	8008d76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d6e:	f002 fccd 	bl	800b70c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	e05c      	b.n	8008e30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d7c:	f107 0314 	add.w	r3, r7, #20
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 fd01 	bl	800a788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d86:	2301      	movs	r3, #1
 8008d88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d8a:	f002 fcbf 	bl	800b70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d8e:	f001 f9bb 	bl	800a108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d92:	f002 fc8b 	bl	800b6ac <vPortEnterCritical>
 8008d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d9c:	b25b      	sxtb	r3, r3
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d103      	bne.n	8008dac <xQueueGenericSend+0x16c>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008db2:	b25b      	sxtb	r3, r3
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d103      	bne.n	8008dc2 <xQueueGenericSend+0x182>
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dc2:	f002 fca3 	bl	800b70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dc6:	1d3a      	adds	r2, r7, #4
 8008dc8:	f107 0314 	add.w	r3, r7, #20
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 fcf0 	bl	800a7b4 <xTaskCheckForTimeOut>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d124      	bne.n	8008e24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008dda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ddc:	f000 fcf2 	bl	80097c4 <prvIsQueueFull>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d018      	beq.n	8008e18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	3310      	adds	r3, #16
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4611      	mov	r1, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f001 fb78 	bl	800a4e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008df6:	f000 fc7d 	bl	80096f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dfa:	f001 f993 	bl	800a124 <xTaskResumeAll>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f47f af7c 	bne.w	8008cfe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <xQueueGenericSend+0x1f8>)
 8008e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	e772      	b.n	8008cfe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e1a:	f000 fc6b 	bl	80096f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e1e:	f001 f981 	bl	800a124 <xTaskResumeAll>
 8008e22:	e76c      	b.n	8008cfe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e26:	f000 fc65 	bl	80096f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e2a:	f001 f97b 	bl	800a124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e2e:	2300      	movs	r3, #0
		}
	}
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3738      	adds	r7, #56	; 0x38
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08e      	sub	sp, #56	; 0x38
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d103      	bne.n	8008e78 <xQueueGenericSendFromISR+0x3c>
 8008e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <xQueueGenericSendFromISR+0x40>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e000      	b.n	8008e7e <xQueueGenericSendFromISR+0x42>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	623b      	str	r3, [r7, #32]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2b02      	cmp	r3, #2
 8008e9c:	d103      	bne.n	8008ea6 <xQueueGenericSendFromISR+0x6a>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d101      	bne.n	8008eaa <xQueueGenericSendFromISR+0x6e>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <xQueueGenericSendFromISR+0x70>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	61fb      	str	r3, [r7, #28]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ec6:	f002 fcb3 	bl	800b830 <vPortValidateInterruptPriority>
	__asm volatile
 8008eca:	f3ef 8211 	mrs	r2, BASEPRI
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61ba      	str	r2, [r7, #24]
 8008ee0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d302      	bcc.n	8008ef8 <xQueueGenericSendFromISR+0xbc>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d12c      	bne.n	8008f52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	68b9      	ldr	r1, [r7, #8]
 8008f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f08:	f000 fb64 	bl	80095d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f14:	d112      	bne.n	8008f3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d016      	beq.n	8008f4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	3324      	adds	r3, #36	; 0x24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 fb6a 	bl	800a5fc <xTaskRemoveFromEventList>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00e      	beq.n	8008f4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e007      	b.n	8008f4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f40:	3301      	adds	r3, #1
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	b25a      	sxtb	r2, r3
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008f50:	e001      	b.n	8008f56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f52:	2300      	movs	r3, #0
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f383 8811 	msr	BASEPRI, r3
}
 8008f60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3738      	adds	r7, #56	; 0x38
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	; 0x38
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	623b      	str	r3, [r7, #32]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00a      	beq.n	8008fb4 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	61fb      	str	r3, [r7, #28]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <xQueueGiveFromISR+0x58>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <xQueueGiveFromISR+0x5c>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <xQueueGiveFromISR+0x5e>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	61bb      	str	r3, [r7, #24]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fe4:	f002 fc24 	bl	800b830 <vPortValidateInterruptPriority>
	__asm volatile
 8008fe8:	f3ef 8211 	mrs	r2, BASEPRI
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	617a      	str	r2, [r7, #20]
 8008ffe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009000:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009002:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009010:	429a      	cmp	r2, r3
 8009012:	d22b      	bcs.n	800906c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800901a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009026:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800902a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902e:	d112      	bne.n	8009056 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	d016      	beq.n	8009066 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	3324      	adds	r3, #36	; 0x24
 800903c:	4618      	mov	r0, r3
 800903e:	f001 fadd 	bl	800a5fc <xTaskRemoveFromEventList>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00e      	beq.n	8009066 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2201      	movs	r2, #1
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	e007      	b.n	8009066 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905a:	3301      	adds	r3, #1
 800905c:	b2db      	uxtb	r3, r3
 800905e:	b25a      	sxtb	r2, r3
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009066:	2301      	movs	r3, #1
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
 800906a:	e001      	b.n	8009070 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800906c:	2300      	movs	r3, #0
 800906e:	637b      	str	r3, [r7, #52]	; 0x34
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f383 8811 	msr	BASEPRI, r3
}
 800907a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800907c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800907e:	4618      	mov	r0, r3
 8009080:	3738      	adds	r7, #56	; 0x38
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08c      	sub	sp, #48	; 0x30
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009094:	2300      	movs	r3, #0
 8009096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <xQueueReceive+0x30>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	623b      	str	r3, [r7, #32]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d103      	bne.n	80090c6 <xQueueReceive+0x3e>
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d101      	bne.n	80090ca <xQueueReceive+0x42>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e000      	b.n	80090cc <xQueueReceive+0x44>
 80090ca:	2300      	movs	r3, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <xQueueReceive+0x5e>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	61fb      	str	r3, [r7, #28]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090e6:	f001 fcbf 	bl	800aa68 <xTaskGetSchedulerState>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <xQueueReceive+0x6e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <xQueueReceive+0x72>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e000      	b.n	80090fc <xQueueReceive+0x74>
 80090fa:	2300      	movs	r3, #0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <xQueueReceive+0x8e>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	61bb      	str	r3, [r7, #24]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009116:	f002 fac9 	bl	800b6ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	2b00      	cmp	r3, #0
 8009124:	d01f      	beq.n	8009166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912a:	f000 fabd 	bl	80096a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	1e5a      	subs	r2, r3, #1
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00f      	beq.n	800915e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	3310      	adds	r3, #16
 8009142:	4618      	mov	r0, r3
 8009144:	f001 fa5a 	bl	800a5fc <xTaskRemoveFromEventList>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d007      	beq.n	800915e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800914e:	4b3d      	ldr	r3, [pc, #244]	; (8009244 <xQueueReceive+0x1bc>)
 8009150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800915e:	f002 fad5 	bl	800b70c <vPortExitCritical>
				return pdPASS;
 8009162:	2301      	movs	r3, #1
 8009164:	e069      	b.n	800923a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800916c:	f002 face 	bl	800b70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009170:	2300      	movs	r3, #0
 8009172:	e062      	b.n	800923a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800917a:	f107 0310 	add.w	r3, r7, #16
 800917e:	4618      	mov	r0, r3
 8009180:	f001 fb02 	bl	800a788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009188:	f002 fac0 	bl	800b70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800918c:	f000 ffbc 	bl	800a108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009190:	f002 fa8c 	bl	800b6ac <vPortEnterCritical>
 8009194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800919a:	b25b      	sxtb	r3, r3
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d103      	bne.n	80091aa <xQueueReceive+0x122>
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091b0:	b25b      	sxtb	r3, r3
 80091b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b6:	d103      	bne.n	80091c0 <xQueueReceive+0x138>
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091c0:	f002 faa4 	bl	800b70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091c4:	1d3a      	adds	r2, r7, #4
 80091c6:	f107 0310 	add.w	r3, r7, #16
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f001 faf1 	bl	800a7b4 <xTaskCheckForTimeOut>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d123      	bne.n	8009220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091da:	f000 fadd 	bl	8009798 <prvIsQueueEmpty>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d017      	beq.n	8009214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	3324      	adds	r3, #36	; 0x24
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	4611      	mov	r1, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 f979 	bl	800a4e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091f4:	f000 fa7e 	bl	80096f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091f8:	f000 ff94 	bl	800a124 <xTaskResumeAll>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d189      	bne.n	8009116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009202:	4b10      	ldr	r3, [pc, #64]	; (8009244 <xQueueReceive+0x1bc>)
 8009204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	e780      	b.n	8009116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009216:	f000 fa6d 	bl	80096f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800921a:	f000 ff83 	bl	800a124 <xTaskResumeAll>
 800921e:	e77a      	b.n	8009116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009222:	f000 fa67 	bl	80096f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009226:	f000 ff7d 	bl	800a124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800922a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800922c:	f000 fab4 	bl	8009798 <prvIsQueueEmpty>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	f43f af6f 	beq.w	8009116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800923a:	4618      	mov	r0, r3
 800923c:	3730      	adds	r7, #48	; 0x30
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08e      	sub	sp, #56	; 0x38
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800925a:	2300      	movs	r3, #0
 800925c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	623b      	str	r3, [r7, #32]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	61fb      	str	r3, [r7, #28]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009298:	f001 fbe6 	bl	800aa68 <xTaskGetSchedulerState>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d102      	bne.n	80092a8 <xQueueSemaphoreTake+0x60>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <xQueueSemaphoreTake+0x64>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <xQueueSemaphoreTake+0x66>
 80092ac:	2300      	movs	r3, #0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	61bb      	str	r3, [r7, #24]
}
 80092c4:	bf00      	nop
 80092c6:	e7fe      	b.n	80092c6 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80092c8:	f002 f9f0 	bl	800b6ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d024      	beq.n	8009322 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	1e5a      	subs	r2, r3, #1
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d104      	bne.n	80092f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80092e8:	f001 fd56 	bl	800ad98 <pvTaskIncrementMutexHeldCount>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00f      	beq.n	800931a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	3310      	adds	r3, #16
 80092fe:	4618      	mov	r0, r3
 8009300:	f001 f97c 	bl	800a5fc <xTaskRemoveFromEventList>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d007      	beq.n	800931a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800930a:	4b54      	ldr	r3, [pc, #336]	; (800945c <xQueueSemaphoreTake+0x214>)
 800930c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800931a:	f002 f9f7 	bl	800b70c <vPortExitCritical>
				return pdPASS;
 800931e:	2301      	movs	r3, #1
 8009320:	e097      	b.n	8009452 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d111      	bne.n	800934c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009344:	f002 f9e2 	bl	800b70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009348:	2300      	movs	r3, #0
 800934a:	e082      	b.n	8009452 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800934c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	4618      	mov	r0, r3
 8009358:	f001 fa16 	bl	800a788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800935c:	2301      	movs	r3, #1
 800935e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009360:	f002 f9d4 	bl	800b70c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009364:	f000 fed0 	bl	800a108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009368:	f002 f9a0 	bl	800b6ac <vPortEnterCritical>
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009372:	b25b      	sxtb	r3, r3
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d103      	bne.n	8009382 <xQueueSemaphoreTake+0x13a>
 800937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009388:	b25b      	sxtb	r3, r3
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d103      	bne.n	8009398 <xQueueSemaphoreTake+0x150>
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009398:	f002 f9b8 	bl	800b70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800939c:	463a      	mov	r2, r7
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	4611      	mov	r1, r2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f001 fa05 	bl	800a7b4 <xTaskCheckForTimeOut>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d132      	bne.n	8009416 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093b2:	f000 f9f1 	bl	8009798 <prvIsQueueEmpty>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d026      	beq.n	800940a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d109      	bne.n	80093d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80093c4:	f002 f972 	bl	800b6ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 fb69 	bl	800aaa4 <xTaskPriorityInherit>
 80093d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80093d4:	f002 f99a 	bl	800b70c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093da:	3324      	adds	r3, #36	; 0x24
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 f87f 	bl	800a4e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093e8:	f000 f984 	bl	80096f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093ec:	f000 fe9a 	bl	800a124 <xTaskResumeAll>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f47f af68 	bne.w	80092c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80093f8:	4b18      	ldr	r3, [pc, #96]	; (800945c <xQueueSemaphoreTake+0x214>)
 80093fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	e75e      	b.n	80092c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800940a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800940c:	f000 f972 	bl	80096f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009410:	f000 fe88 	bl	800a124 <xTaskResumeAll>
 8009414:	e758      	b.n	80092c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009418:	f000 f96c 	bl	80096f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800941c:	f000 fe82 	bl	800a124 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009422:	f000 f9b9 	bl	8009798 <prvIsQueueEmpty>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	f43f af4d 	beq.w	80092c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00d      	beq.n	8009450 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009434:	f002 f93a 	bl	800b6ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800943a:	f000 f8b4 	bl	80095a6 <prvGetDisinheritPriorityAfterTimeout>
 800943e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009446:	4618      	mov	r0, r3
 8009448:	f001 fc08 	bl	800ac5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800944c:	f002 f95e 	bl	800b70c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009452:	4618      	mov	r0, r3
 8009454:	3738      	adds	r7, #56	; 0x38
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	e000ed04 	.word	0xe000ed04

08009460 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08e      	sub	sp, #56	; 0x38
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10a      	bne.n	800948c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	623b      	str	r3, [r7, #32]
}
 8009488:	bf00      	nop
 800948a:	e7fe      	b.n	800948a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d103      	bne.n	800949a <xQueueReceiveFromISR+0x3a>
 8009492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <xQueueReceiveFromISR+0x3e>
 800949a:	2301      	movs	r3, #1
 800949c:	e000      	b.n	80094a0 <xQueueReceiveFromISR+0x40>
 800949e:	2300      	movs	r3, #0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10a      	bne.n	80094ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	61fb      	str	r3, [r7, #28]
}
 80094b6:	bf00      	nop
 80094b8:	e7fe      	b.n	80094b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094ba:	f002 f9b9 	bl	800b830 <vPortValidateInterruptPriority>
	__asm volatile
 80094be:	f3ef 8211 	mrs	r2, BASEPRI
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	61ba      	str	r2, [r7, #24]
 80094d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80094d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d02f      	beq.n	8009546 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f4:	f000 f8d8 	bl	80096a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	1e5a      	subs	r2, r3, #1
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009500:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009508:	d112      	bne.n	8009530 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d016      	beq.n	8009540 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	3310      	adds	r3, #16
 8009516:	4618      	mov	r0, r3
 8009518:	f001 f870 	bl	800a5fc <xTaskRemoveFromEventList>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00e      	beq.n	8009540 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00b      	beq.n	8009540 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	e007      	b.n	8009540 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009534:	3301      	adds	r3, #1
 8009536:	b2db      	uxtb	r3, r3
 8009538:	b25a      	sxtb	r2, r3
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009540:	2301      	movs	r3, #1
 8009542:	637b      	str	r3, [r7, #52]	; 0x34
 8009544:	e001      	b.n	800954a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009546:	2300      	movs	r3, #0
 8009548:	637b      	str	r3, [r7, #52]	; 0x34
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f383 8811 	msr	BASEPRI, r3
}
 8009554:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009558:	4618      	mov	r0, r3
 800955a:	3738      	adds	r7, #56	; 0x38
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <vQueueDelete+0x28>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60bb      	str	r3, [r7, #8]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 f95b 	bl	8009844 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009594:	2b00      	cmp	r3, #0
 8009596:	d102      	bne.n	800959e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f002 fa4b 	bl	800ba34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800959e:	bf00      	nop
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80095a6:	b480      	push	{r7}
 80095a8:	b085      	sub	sp, #20
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d006      	beq.n	80095c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	e001      	b.n	80095c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80095c8:	68fb      	ldr	r3, [r7, #12]
	}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bc80      	pop	{r7}
 80095d2:	4770      	bx	lr

080095d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10d      	bne.n	800960e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d14d      	bne.n	8009696 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	4618      	mov	r0, r3
 8009600:	f001 fabe 	bl	800ab80 <xTaskPriorityDisinherit>
 8009604:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	605a      	str	r2, [r3, #4]
 800960c:	e043      	b.n	8009696 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d119      	bne.n	8009648 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6898      	ldr	r0, [r3, #8]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961c:	461a      	mov	r2, r3
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	f004 f962 	bl	800d8e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	441a      	add	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	429a      	cmp	r2, r3
 800963c:	d32b      	bcc.n	8009696 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	609a      	str	r2, [r3, #8]
 8009646:	e026      	b.n	8009696 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	68d8      	ldr	r0, [r3, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	461a      	mov	r2, r3
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	f004 f948 	bl	800d8e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	425b      	negs	r3, r3
 8009662:	441a      	add	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68da      	ldr	r2, [r3, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d207      	bcs.n	8009684 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	425b      	negs	r3, r3
 800967e:	441a      	add	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b02      	cmp	r3, #2
 8009688:	d105      	bne.n	8009696 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	3b01      	subs	r3, #1
 8009694:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800969e:	697b      	ldr	r3, [r7, #20]
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d018      	beq.n	80096ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	441a      	add	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d303      	bcc.n	80096dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68d9      	ldr	r1, [r3, #12]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	461a      	mov	r2, r3
 80096e6:	6838      	ldr	r0, [r7, #0]
 80096e8:	f004 f8fe 	bl	800d8e8 <memcpy>
	}
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096fc:	f001 ffd6 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009706:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009708:	e011      	b.n	800972e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	d012      	beq.n	8009738 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	3324      	adds	r3, #36	; 0x24
 8009716:	4618      	mov	r0, r3
 8009718:	f000 ff70 	bl	800a5fc <xTaskRemoveFromEventList>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009722:	f001 f8a9 	bl	800a878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	3b01      	subs	r3, #1
 800972a:	b2db      	uxtb	r3, r3
 800972c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800972e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009732:	2b00      	cmp	r3, #0
 8009734:	dce9      	bgt.n	800970a <prvUnlockQueue+0x16>
 8009736:	e000      	b.n	800973a <prvUnlockQueue+0x46>
					break;
 8009738:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	22ff      	movs	r2, #255	; 0xff
 800973e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009742:	f001 ffe3 	bl	800b70c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009746:	f001 ffb1 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009750:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009752:	e011      	b.n	8009778 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d012      	beq.n	8009782 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3310      	adds	r3, #16
 8009760:	4618      	mov	r0, r3
 8009762:	f000 ff4b 	bl	800a5fc <xTaskRemoveFromEventList>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800976c:	f001 f884 	bl	800a878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009770:	7bbb      	ldrb	r3, [r7, #14]
 8009772:	3b01      	subs	r3, #1
 8009774:	b2db      	uxtb	r3, r3
 8009776:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dce9      	bgt.n	8009754 <prvUnlockQueue+0x60>
 8009780:	e000      	b.n	8009784 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009782:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	22ff      	movs	r2, #255	; 0xff
 8009788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800978c:	f001 ffbe 	bl	800b70c <vPortExitCritical>
}
 8009790:	bf00      	nop
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097a0:	f001 ff84 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e001      	b.n	80097b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097b6:	f001 ffa9 	bl	800b70c <vPortExitCritical>

	return xReturn;
 80097ba:	68fb      	ldr	r3, [r7, #12]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097cc:	f001 ff6e 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d8:	429a      	cmp	r2, r3
 80097da:	d102      	bne.n	80097e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097dc:	2301      	movs	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	e001      	b.n	80097e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097e6:	f001 ff91 	bl	800b70c <vPortExitCritical>

	return xReturn;
 80097ea:	68fb      	ldr	r3, [r7, #12]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097fe:	2300      	movs	r3, #0
 8009800:	60fb      	str	r3, [r7, #12]
 8009802:	e014      	b.n	800982e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009804:	4a0e      	ldr	r2, [pc, #56]	; (8009840 <vQueueAddToRegistry+0x4c>)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10b      	bne.n	8009828 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009810:	490b      	ldr	r1, [pc, #44]	; (8009840 <vQueueAddToRegistry+0x4c>)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800981a:	4a09      	ldr	r2, [pc, #36]	; (8009840 <vQueueAddToRegistry+0x4c>)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	4413      	add	r3, r2
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009826:	e006      	b.n	8009836 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3301      	adds	r3, #1
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b07      	cmp	r3, #7
 8009832:	d9e7      	bls.n	8009804 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	bc80      	pop	{r7}
 800983e:	4770      	bx	lr
 8009840:	20000b20 	.word	0x20000b20

08009844 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	e016      	b.n	8009880 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009852:	4a10      	ldr	r2, [pc, #64]	; (8009894 <vQueueUnregisterQueue+0x50>)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	4413      	add	r3, r2
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d10b      	bne.n	800987a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009862:	4a0c      	ldr	r2, [pc, #48]	; (8009894 <vQueueUnregisterQueue+0x50>)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2100      	movs	r1, #0
 8009868:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800986c:	4a09      	ldr	r2, [pc, #36]	; (8009894 <vQueueUnregisterQueue+0x50>)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	4413      	add	r3, r2
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]
				break;
 8009878:	e006      	b.n	8009888 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3301      	adds	r3, #1
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b07      	cmp	r3, #7
 8009884:	d9e5      	bls.n	8009852 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009886:	bf00      	nop
 8009888:	bf00      	nop
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	bc80      	pop	{r7}
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20000b20 	.word	0x20000b20

08009898 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098a8:	f001 ff00 	bl	800b6ac <vPortEnterCritical>
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098b2:	b25b      	sxtb	r3, r3
 80098b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b8:	d103      	bne.n	80098c2 <vQueueWaitForMessageRestricted+0x2a>
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098c8:	b25b      	sxtb	r3, r3
 80098ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ce:	d103      	bne.n	80098d8 <vQueueWaitForMessageRestricted+0x40>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098d8:	f001 ff18 	bl	800b70c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d106      	bne.n	80098f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	3324      	adds	r3, #36	; 0x24
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	68b9      	ldr	r1, [r7, #8]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 fe59 	bl	800a5a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80098f2:	6978      	ldr	r0, [r7, #20]
 80098f4:	f7ff fefe 	bl	80096f4 <prvUnlockQueue>
	}
 80098f8:	bf00      	nop
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08e      	sub	sp, #56	; 0x38
 8009904:	af04      	add	r7, sp, #16
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	60b9      	str	r1, [r7, #8]
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800990e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	623b      	str	r3, [r7, #32]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10a      	bne.n	8009946 <xTaskCreateStatic+0x46>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	61fb      	str	r3, [r7, #28]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009946:	23a4      	movs	r3, #164	; 0xa4
 8009948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2ba4      	cmp	r3, #164	; 0xa4
 800994e:	d00a      	beq.n	8009966 <xTaskCreateStatic+0x66>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	61bb      	str	r3, [r7, #24]
}
 8009962:	bf00      	nop
 8009964:	e7fe      	b.n	8009964 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01e      	beq.n	80099aa <xTaskCreateStatic+0xaa>
 800996c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01b      	beq.n	80099aa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800997a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	2202      	movs	r2, #2
 8009980:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009984:	2300      	movs	r3, #0
 8009986:	9303      	str	r3, [sp, #12]
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	9302      	str	r3, [sp, #8]
 800998c:	f107 0314 	add.w	r3, r7, #20
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f851 	bl	8009a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099a4:	f000 f8ec 	bl	8009b80 <prvAddNewTaskToReadyList>
 80099a8:	e001      	b.n	80099ae <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099ae:	697b      	ldr	r3, [r7, #20]
	}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3728      	adds	r7, #40	; 0x28
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af04      	add	r7, sp, #16
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	4613      	mov	r3, r2
 80099c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c8:	88fb      	ldrh	r3, [r7, #6]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 ff6d 	bl	800b8ac <pvPortMalloc>
 80099d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00e      	beq.n	80099f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80099da:	20a4      	movs	r0, #164	; 0xa4
 80099dc:	f001 ff66 	bl	800b8ac <pvPortMalloc>
 80099e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d003      	beq.n	80099f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	631a      	str	r2, [r3, #48]	; 0x30
 80099ee:	e005      	b.n	80099fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099f0:	6978      	ldr	r0, [r7, #20]
 80099f2:	f002 f81f 	bl	800ba34 <vPortFree>
 80099f6:	e001      	b.n	80099fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d017      	beq.n	8009a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a0a:	88fa      	ldrh	r2, [r7, #6]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	9303      	str	r3, [sp, #12]
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	9302      	str	r3, [sp, #8]
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f80f 	bl	8009a44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a26:	69f8      	ldr	r0, [r7, #28]
 8009a28:	f000 f8aa 	bl	8009b80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	61bb      	str	r3, [r7, #24]
 8009a30:	e002      	b.n	8009a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a32:	f04f 33ff 	mov.w	r3, #4294967295
 8009a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a38:	69bb      	ldr	r3, [r7, #24]
	}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	21a5      	movs	r1, #165	; 0xa5
 8009a5e:	f003 fe01 	bl	800d664 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	f023 0307 	bic.w	r3, r3, #7
 8009a7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	617b      	str	r3, [r7, #20]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
 8009aa0:	e012      	b.n	8009ac8 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	7819      	ldrb	r1, [r3, #0]
 8009aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	4413      	add	r3, r2
 8009ab0:	3334      	adds	r3, #52	; 0x34
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	4413      	add	r3, r2
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d006      	beq.n	8009ad0 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	61fb      	str	r3, [r7, #28]
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	2b0b      	cmp	r3, #11
 8009acc:	d9e9      	bls.n	8009aa2 <prvInitialiseNewTask+0x5e>
 8009ace:	e000      	b.n	8009ad2 <prvInitialiseNewTask+0x8e>
		{
			break;
 8009ad0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	2b37      	cmp	r3, #55	; 0x37
 8009ade:	d901      	bls.n	8009ae4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ae0:	2337      	movs	r3, #55	; 0x37
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aee:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	2200      	movs	r2, #0
 8009af4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af8:	3304      	adds	r3, #4
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fdad 	bl	800865a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b02:	3318      	adds	r3, #24
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe fda8 	bl	800865a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	3350      	adds	r3, #80	; 0x50
 8009b34:	224c      	movs	r2, #76	; 0x4c
 8009b36:	2100      	movs	r1, #0
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f003 fd93 	bl	800d664 <memset>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	4a0c      	ldr	r2, [pc, #48]	; (8009b74 <prvInitialiseNewTask+0x130>)
 8009b42:	655a      	str	r2, [r3, #84]	; 0x54
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	4a0c      	ldr	r2, [pc, #48]	; (8009b78 <prvInitialiseNewTask+0x134>)
 8009b48:	659a      	str	r2, [r3, #88]	; 0x58
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	4a0b      	ldr	r2, [pc, #44]	; (8009b7c <prvInitialiseNewTask+0x138>)
 8009b4e:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	68f9      	ldr	r1, [r7, #12]
 8009b54:	69b8      	ldr	r0, [r7, #24]
 8009b56:	f001 fcb9 	bl	800b4cc <pxPortInitialiseStack>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b6c:	bf00      	nop
 8009b6e:	3720      	adds	r7, #32
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	200031b8 	.word	0x200031b8
 8009b78:	20003220 	.word	0x20003220
 8009b7c:	20003288 	.word	0x20003288

08009b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b88:	f001 fd90 	bl	800b6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b8c:	4b2d      	ldr	r3, [pc, #180]	; (8009c44 <prvAddNewTaskToReadyList+0xc4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	4a2c      	ldr	r2, [pc, #176]	; (8009c44 <prvAddNewTaskToReadyList+0xc4>)
 8009b94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b96:	4b2c      	ldr	r3, [pc, #176]	; (8009c48 <prvAddNewTaskToReadyList+0xc8>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d109      	bne.n	8009bb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b9e:	4a2a      	ldr	r2, [pc, #168]	; (8009c48 <prvAddNewTaskToReadyList+0xc8>)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ba4:	4b27      	ldr	r3, [pc, #156]	; (8009c44 <prvAddNewTaskToReadyList+0xc4>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d110      	bne.n	8009bce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009bac:	f000 fe88 	bl	800a8c0 <prvInitialiseTaskLists>
 8009bb0:	e00d      	b.n	8009bce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bb2:	4b26      	ldr	r3, [pc, #152]	; (8009c4c <prvAddNewTaskToReadyList+0xcc>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d109      	bne.n	8009bce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bba:	4b23      	ldr	r3, [pc, #140]	; (8009c48 <prvAddNewTaskToReadyList+0xc8>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d802      	bhi.n	8009bce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009bc8:	4a1f      	ldr	r2, [pc, #124]	; (8009c48 <prvAddNewTaskToReadyList+0xc8>)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009bce:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <prvAddNewTaskToReadyList+0xd0>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a1e      	ldr	r2, [pc, #120]	; (8009c50 <prvAddNewTaskToReadyList+0xd0>)
 8009bd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009bd8:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <prvAddNewTaskToReadyList+0xd0>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be4:	4b1b      	ldr	r3, [pc, #108]	; (8009c54 <prvAddNewTaskToReadyList+0xd4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d903      	bls.n	8009bf4 <prvAddNewTaskToReadyList+0x74>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	4a18      	ldr	r2, [pc, #96]	; (8009c54 <prvAddNewTaskToReadyList+0xd4>)
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4a15      	ldr	r2, [pc, #84]	; (8009c58 <prvAddNewTaskToReadyList+0xd8>)
 8009c02:	441a      	add	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7fe fd31 	bl	8008672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c10:	f001 fd7c 	bl	800b70c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c14:	4b0d      	ldr	r3, [pc, #52]	; (8009c4c <prvAddNewTaskToReadyList+0xcc>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00e      	beq.n	8009c3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <prvAddNewTaskToReadyList+0xc8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d207      	bcs.n	8009c3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <prvAddNewTaskToReadyList+0xdc>)
 8009c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20001034 	.word	0x20001034
 8009c48:	20000b60 	.word	0x20000b60
 8009c4c:	20001040 	.word	0x20001040
 8009c50:	20001050 	.word	0x20001050
 8009c54:	2000103c 	.word	0x2000103c
 8009c58:	20000b64 	.word	0x20000b64
 8009c5c:	e000ed04 	.word	0xe000ed04

08009c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d017      	beq.n	8009ca2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009c72:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <vTaskDelay+0x60>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <vTaskDelay+0x30>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	60bb      	str	r3, [r7, #8]
}
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c90:	f000 fa3a 	bl	800a108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c94:	2100      	movs	r1, #0
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 f892 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c9c:	f000 fa42 	bl	800a124 <xTaskResumeAll>
 8009ca0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d107      	bne.n	8009cb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <vTaskDelay+0x64>)
 8009caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cb8:	bf00      	nop
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	2000105c 	.word	0x2000105c
 8009cc4:	e000ed04 	.word	0xe000ed04

08009cc8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b37      	cmp	r3, #55	; 0x37
 8009cda:	d90a      	bls.n	8009cf2 <vTaskPrioritySet+0x2a>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60fb      	str	r3, [r7, #12]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b37      	cmp	r3, #55	; 0x37
 8009cf6:	d901      	bls.n	8009cfc <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009cf8:	2337      	movs	r3, #55	; 0x37
 8009cfa:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8009cfc:	f001 fcd6 	bl	800b6ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <vTaskPrioritySet+0x44>
 8009d06:	4b3d      	ldr	r3, [pc, #244]	; (8009dfc <vTaskPrioritySet+0x134>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	e000      	b.n	8009d0e <vTaskPrioritySet+0x46>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d14:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d068      	beq.n	8009df0 <vTaskPrioritySet+0x128>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8009d1e:	683a      	ldr	r2, [r7, #0]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d90d      	bls.n	8009d42 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8009d26:	4b35      	ldr	r3, [pc, #212]	; (8009dfc <vTaskPrioritySet+0x134>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d00f      	beq.n	8009d50 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8009d30:	4b32      	ldr	r3, [pc, #200]	; (8009dfc <vTaskPrioritySet+0x134>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d309      	bcc.n	8009d50 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	e006      	b.n	8009d50 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8009d42:	4b2e      	ldr	r3, [pc, #184]	; (8009dfc <vTaskPrioritySet+0x134>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d101      	bne.n	8009d50 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d54:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d102      	bne.n	8009d68 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	db04      	blt.n	8009d80 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	6959      	ldr	r1, [r3, #20]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4a1c      	ldr	r2, [pc, #112]	; (8009e00 <vTaskPrioritySet+0x138>)
 8009d90:	4413      	add	r3, r2
 8009d92:	4299      	cmp	r1, r3
 8009d94:	d101      	bne.n	8009d9a <vTaskPrioritySet+0xd2>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <vTaskPrioritySet+0xd4>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01c      	beq.n	8009dda <vTaskPrioritySet+0x112>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe fcbf 	bl	8008728 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dae:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <vTaskPrioritySet+0x13c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d903      	bls.n	8009dbe <vTaskPrioritySet+0xf6>
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	4a12      	ldr	r2, [pc, #72]	; (8009e04 <vTaskPrioritySet+0x13c>)
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4a0d      	ldr	r2, [pc, #52]	; (8009e00 <vTaskPrioritySet+0x138>)
 8009dcc:	441a      	add	r2, r3
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f7fe fc4c 	bl	8008672 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d007      	beq.n	8009df0 <vTaskPrioritySet+0x128>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8009de0:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <vTaskPrioritySet+0x140>)
 8009de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8009df0:	f001 fc8c 	bl	800b70c <vPortExitCritical>
	}
 8009df4:	bf00      	nop
 8009df6:	3720      	adds	r7, #32
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	20000b60 	.word	0x20000b60
 8009e00:	20000b64 	.word	0x20000b64
 8009e04:	2000103c 	.word	0x2000103c
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009e14:	f001 fc4a 	bl	800b6ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <vTaskSuspend+0x18>
 8009e1e:	4b30      	ldr	r3, [pc, #192]	; (8009ee0 <vTaskSuspend+0xd4>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	e000      	b.n	8009e26 <vTaskSuspend+0x1a>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fe fc7b 	bl	8008728 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d004      	beq.n	8009e44 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3318      	adds	r3, #24
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe fc72 	bl	8008728 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4826      	ldr	r0, [pc, #152]	; (8009ee4 <vTaskSuspend+0xd8>)
 8009e4c:	f7fe fc11 	bl	8008672 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d103      	bne.n	8009e64 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009e64:	f001 fc52 	bl	800b70c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009e68:	4b1f      	ldr	r3, [pc, #124]	; (8009ee8 <vTaskSuspend+0xdc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d005      	beq.n	8009e7c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009e70:	f001 fc1c 	bl	800b6ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009e74:	f000 fdc6 	bl	800aa04 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009e78:	f001 fc48 	bl	800b70c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009e7c:	4b18      	ldr	r3, [pc, #96]	; (8009ee0 <vTaskSuspend+0xd4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d127      	bne.n	8009ed6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009e86:	4b18      	ldr	r3, [pc, #96]	; (8009ee8 <vTaskSuspend+0xdc>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d017      	beq.n	8009ebe <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009e8e:	4b17      	ldr	r3, [pc, #92]	; (8009eec <vTaskSuspend+0xe0>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <vTaskSuspend+0xa0>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	60bb      	str	r3, [r7, #8]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009eac:	4b10      	ldr	r3, [pc, #64]	; (8009ef0 <vTaskSuspend+0xe4>)
 8009eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ebc:	e00b      	b.n	8009ed6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <vTaskSuspend+0xd8>)
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	; (8009ef4 <vTaskSuspend+0xe8>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d103      	bne.n	8009ed2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <vTaskSuspend+0xd4>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]
	}
 8009ed0:	e001      	b.n	8009ed6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8009ed2:	f000 faa3 	bl	800a41c <vTaskSwitchContext>
	}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000b60 	.word	0x20000b60
 8009ee4:	20001020 	.word	0x20001020
 8009ee8:	20001040 	.word	0x20001040
 8009eec:	2000105c 	.word	0x2000105c
 8009ef0:	e000ed04 	.word	0xe000ed04
 8009ef4:	20001034 	.word	0x20001034

08009ef8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009ef8:	b480      	push	{r7}
 8009efa:	b087      	sub	sp, #28
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8009f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f12:	f383 8811 	msr	BASEPRI, r3
 8009f16:	f3bf 8f6f 	isb	sy
 8009f1a:	f3bf 8f4f 	dsb	sy
 8009f1e:	60fb      	str	r3, [r7, #12]
}
 8009f20:	bf00      	nop
 8009f22:	e7fe      	b.n	8009f22 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	4a0e      	ldr	r2, [pc, #56]	; (8009f64 <prvTaskIsTaskSuspended+0x6c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d101      	bne.n	8009f32 <prvTaskIsTaskSuspended+0x3a>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e000      	b.n	8009f34 <prvTaskIsTaskSuspended+0x3c>
 8009f32:	2300      	movs	r3, #0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00f      	beq.n	8009f58 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3c:	4a0a      	ldr	r2, [pc, #40]	; (8009f68 <prvTaskIsTaskSuspended+0x70>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00a      	beq.n	8009f58 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <prvTaskIsTaskSuspended+0x56>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <prvTaskIsTaskSuspended+0x58>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8009f54:	2301      	movs	r3, #1
 8009f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f58:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr
 8009f64:	20001020 	.word	0x20001020
 8009f68:	20000ff4 	.word	0x20000ff4

08009f6c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10a      	bne.n	8009f94 <vTaskResume+0x28>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	60bb      	str	r3, [r7, #8]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d03a      	beq.n	800a010 <vTaskResume+0xa4>
 8009f9a:	4b1f      	ldr	r3, [pc, #124]	; (800a018 <vTaskResume+0xac>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d035      	beq.n	800a010 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8009fa4:	f001 fb82 	bl	800b6ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7ff ffa5 	bl	8009ef8 <prvTaskIsTaskSuspended>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02b      	beq.n	800a00c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fe fbb5 	bl	8008728 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc2:	4b16      	ldr	r3, [pc, #88]	; (800a01c <vTaskResume+0xb0>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d903      	bls.n	8009fd2 <vTaskResume+0x66>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	4a13      	ldr	r2, [pc, #76]	; (800a01c <vTaskResume+0xb0>)
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4a10      	ldr	r2, [pc, #64]	; (800a020 <vTaskResume+0xb4>)
 8009fe0:	441a      	add	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f7fe fb42 	bl	8008672 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	4b09      	ldr	r3, [pc, #36]	; (800a018 <vTaskResume+0xac>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d307      	bcc.n	800a00c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009ffc:	4b09      	ldr	r3, [pc, #36]	; (800a024 <vTaskResume+0xb8>)
 8009ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a00c:	f001 fb7e 	bl	800b70c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a010:	bf00      	nop
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20000b60 	.word	0x20000b60
 800a01c:	2000103c 	.word	0x2000103c
 800a020:	20000b64 	.word	0x20000b64
 800a024:	e000ed04 	.word	0xe000ed04

0800a028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08a      	sub	sp, #40	; 0x28
 800a02c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a036:	463a      	mov	r2, r7
 800a038:	1d39      	adds	r1, r7, #4
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe f852 	bl	80080e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	9202      	str	r2, [sp, #8]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	2300      	movs	r3, #0
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	460a      	mov	r2, r1
 800a056:	4924      	ldr	r1, [pc, #144]	; (800a0e8 <vTaskStartScheduler+0xc0>)
 800a058:	4824      	ldr	r0, [pc, #144]	; (800a0ec <vTaskStartScheduler+0xc4>)
 800a05a:	f7ff fc51 	bl	8009900 <xTaskCreateStatic>
 800a05e:	4603      	mov	r3, r0
 800a060:	4a23      	ldr	r2, [pc, #140]	; (800a0f0 <vTaskStartScheduler+0xc8>)
 800a062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a064:	4b22      	ldr	r3, [pc, #136]	; (800a0f0 <vTaskStartScheduler+0xc8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a06c:	2301      	movs	r3, #1
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	e001      	b.n	800a076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d102      	bne.n	800a082 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a07c:	f000 fef4 	bl	800ae68 <xTimerCreateTimerTask>
 800a080:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d11b      	bne.n	800a0c0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	613b      	str	r3, [r7, #16]
}
 800a09a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a09c:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <vTaskStartScheduler+0xcc>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3350      	adds	r3, #80	; 0x50
 800a0a2:	4a15      	ldr	r2, [pc, #84]	; (800a0f8 <vTaskStartScheduler+0xd0>)
 800a0a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <vTaskStartScheduler+0xd4>)
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0ae:	4b14      	ldr	r3, [pc, #80]	; (800a100 <vTaskStartScheduler+0xd8>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a0b4:	4b13      	ldr	r3, [pc, #76]	; (800a104 <vTaskStartScheduler+0xdc>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0ba:	f001 fa85 	bl	800b5c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0be:	e00e      	b.n	800a0de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c6:	d10a      	bne.n	800a0de <vTaskStartScheduler+0xb6>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	60fb      	str	r3, [r7, #12]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <vTaskStartScheduler+0xb4>
}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0800e780 	.word	0x0800e780
 800a0ec:	0800a891 	.word	0x0800a891
 800a0f0:	20001058 	.word	0x20001058
 800a0f4:	20000b60 	.word	0x20000b60
 800a0f8:	20000088 	.word	0x20000088
 800a0fc:	20001054 	.word	0x20001054
 800a100:	20001040 	.word	0x20001040
 800a104:	20001038 	.word	0x20001038

0800a108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <vTaskSuspendAll+0x18>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3301      	adds	r3, #1
 800a112:	4a03      	ldr	r2, [pc, #12]	; (800a120 <vTaskSuspendAll+0x18>)
 800a114:	6013      	str	r3, [r2, #0]
}
 800a116:	bf00      	nop
 800a118:	46bd      	mov	sp, r7
 800a11a:	bc80      	pop	{r7}
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	2000105c 	.word	0x2000105c

0800a124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a12e:	2300      	movs	r3, #0
 800a130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a132:	4b42      	ldr	r3, [pc, #264]	; (800a23c <xTaskResumeAll+0x118>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10a      	bne.n	800a150 <xTaskResumeAll+0x2c>
	__asm volatile
 800a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	603b      	str	r3, [r7, #0]
}
 800a14c:	bf00      	nop
 800a14e:	e7fe      	b.n	800a14e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a150:	f001 faac 	bl	800b6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a154:	4b39      	ldr	r3, [pc, #228]	; (800a23c <xTaskResumeAll+0x118>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3b01      	subs	r3, #1
 800a15a:	4a38      	ldr	r2, [pc, #224]	; (800a23c <xTaskResumeAll+0x118>)
 800a15c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a15e:	4b37      	ldr	r3, [pc, #220]	; (800a23c <xTaskResumeAll+0x118>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d162      	bne.n	800a22c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a166:	4b36      	ldr	r3, [pc, #216]	; (800a240 <xTaskResumeAll+0x11c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d05e      	beq.n	800a22c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a16e:	e02f      	b.n	800a1d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a170:	4b34      	ldr	r3, [pc, #208]	; (800a244 <xTaskResumeAll+0x120>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	3318      	adds	r3, #24
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fad3 	bl	8008728 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3304      	adds	r3, #4
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe face 	bl	8008728 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a190:	4b2d      	ldr	r3, [pc, #180]	; (800a248 <xTaskResumeAll+0x124>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	429a      	cmp	r2, r3
 800a196:	d903      	bls.n	800a1a0 <xTaskResumeAll+0x7c>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	4a2a      	ldr	r2, [pc, #168]	; (800a248 <xTaskResumeAll+0x124>)
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4a27      	ldr	r2, [pc, #156]	; (800a24c <xTaskResumeAll+0x128>)
 800a1ae:	441a      	add	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f7fe fa5b 	bl	8008672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c0:	4b23      	ldr	r3, [pc, #140]	; (800a250 <xTaskResumeAll+0x12c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d302      	bcc.n	800a1d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a1ca:	4b22      	ldr	r3, [pc, #136]	; (800a254 <xTaskResumeAll+0x130>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1d0:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <xTaskResumeAll+0x120>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1cb      	bne.n	800a170 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1de:	f000 fc11 	bl	800aa04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a1e2:	4b1d      	ldr	r3, [pc, #116]	; (800a258 <xTaskResumeAll+0x134>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d010      	beq.n	800a210 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1ee:	f000 f857 	bl	800a2a0 <xTaskIncrementTick>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a1f8:	4b16      	ldr	r3, [pc, #88]	; (800a254 <xTaskResumeAll+0x130>)
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	3b01      	subs	r3, #1
 800a202:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1f1      	bne.n	800a1ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a20a:	4b13      	ldr	r3, [pc, #76]	; (800a258 <xTaskResumeAll+0x134>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a210:	4b10      	ldr	r3, [pc, #64]	; (800a254 <xTaskResumeAll+0x130>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d009      	beq.n	800a22c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a218:	2301      	movs	r3, #1
 800a21a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a21c:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <xTaskResumeAll+0x138>)
 800a21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a22c:	f001 fa6e 	bl	800b70c <vPortExitCritical>

	return xAlreadyYielded;
 800a230:	68bb      	ldr	r3, [r7, #8]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	2000105c 	.word	0x2000105c
 800a240:	20001034 	.word	0x20001034
 800a244:	20000ff4 	.word	0x20000ff4
 800a248:	2000103c 	.word	0x2000103c
 800a24c:	20000b64 	.word	0x20000b64
 800a250:	20000b60 	.word	0x20000b60
 800a254:	20001048 	.word	0x20001048
 800a258:	20001044 	.word	0x20001044
 800a25c:	e000ed04 	.word	0xe000ed04

0800a260 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a266:	4b04      	ldr	r3, [pc, #16]	; (800a278 <xTaskGetTickCount+0x18>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a26c:	687b      	ldr	r3, [r7, #4]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr
 800a278:	20001038 	.word	0x20001038

0800a27c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a282:	f001 fad5 	bl	800b830 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a286:	2300      	movs	r3, #0
 800a288:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a28a:	4b04      	ldr	r3, [pc, #16]	; (800a29c <xTaskGetTickCountFromISR+0x20>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a290:	683b      	ldr	r3, [r7, #0]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20001038 	.word	0x20001038

0800a2a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2aa:	4b51      	ldr	r3, [pc, #324]	; (800a3f0 <xTaskIncrementTick+0x150>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f040 808e 	bne.w	800a3d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2b4:	4b4f      	ldr	r3, [pc, #316]	; (800a3f4 <xTaskIncrementTick+0x154>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2bc:	4a4d      	ldr	r2, [pc, #308]	; (800a3f4 <xTaskIncrementTick+0x154>)
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d120      	bne.n	800a30a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2c8:	4b4b      	ldr	r3, [pc, #300]	; (800a3f8 <xTaskIncrementTick+0x158>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00a      	beq.n	800a2e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	603b      	str	r3, [r7, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <xTaskIncrementTick+0x46>
 800a2e8:	4b43      	ldr	r3, [pc, #268]	; (800a3f8 <xTaskIncrementTick+0x158>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	4b43      	ldr	r3, [pc, #268]	; (800a3fc <xTaskIncrementTick+0x15c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a41      	ldr	r2, [pc, #260]	; (800a3f8 <xTaskIncrementTick+0x158>)
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	4a41      	ldr	r2, [pc, #260]	; (800a3fc <xTaskIncrementTick+0x15c>)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	4b40      	ldr	r3, [pc, #256]	; (800a400 <xTaskIncrementTick+0x160>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3301      	adds	r3, #1
 800a302:	4a3f      	ldr	r2, [pc, #252]	; (800a400 <xTaskIncrementTick+0x160>)
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	f000 fb7d 	bl	800aa04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a30a:	4b3e      	ldr	r3, [pc, #248]	; (800a404 <xTaskIncrementTick+0x164>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	429a      	cmp	r2, r3
 800a312:	d34e      	bcc.n	800a3b2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a314:	4b38      	ldr	r3, [pc, #224]	; (800a3f8 <xTaskIncrementTick+0x158>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <xTaskIncrementTick+0x82>
 800a31e:	2301      	movs	r3, #1
 800a320:	e000      	b.n	800a324 <xTaskIncrementTick+0x84>
 800a322:	2300      	movs	r3, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a328:	4b36      	ldr	r3, [pc, #216]	; (800a404 <xTaskIncrementTick+0x164>)
 800a32a:	f04f 32ff 	mov.w	r2, #4294967295
 800a32e:	601a      	str	r2, [r3, #0]
					break;
 800a330:	e03f      	b.n	800a3b2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a332:	4b31      	ldr	r3, [pc, #196]	; (800a3f8 <xTaskIncrementTick+0x158>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	429a      	cmp	r2, r3
 800a348:	d203      	bcs.n	800a352 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a34a:	4a2e      	ldr	r2, [pc, #184]	; (800a404 <xTaskIncrementTick+0x164>)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6013      	str	r3, [r2, #0]
						break;
 800a350:	e02f      	b.n	800a3b2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	3304      	adds	r3, #4
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe f9e6 	bl	8008728 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	3318      	adds	r3, #24
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe f9dd 	bl	8008728 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a372:	4b25      	ldr	r3, [pc, #148]	; (800a408 <xTaskIncrementTick+0x168>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d903      	bls.n	800a382 <xTaskIncrementTick+0xe2>
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	4a22      	ldr	r2, [pc, #136]	; (800a408 <xTaskIncrementTick+0x168>)
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a386:	4613      	mov	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4413      	add	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4a1f      	ldr	r2, [pc, #124]	; (800a40c <xTaskIncrementTick+0x16c>)
 800a390:	441a      	add	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	3304      	adds	r3, #4
 800a396:	4619      	mov	r1, r3
 800a398:	4610      	mov	r0, r2
 800a39a:	f7fe f96a 	bl	8008672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <xTaskIncrementTick+0x170>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d3b3      	bcc.n	800a314 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3b0:	e7b0      	b.n	800a314 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3b2:	4b17      	ldr	r3, [pc, #92]	; (800a410 <xTaskIncrementTick+0x170>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b8:	4914      	ldr	r1, [pc, #80]	; (800a40c <xTaskIncrementTick+0x16c>)
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4413      	add	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	440b      	add	r3, r1
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d907      	bls.n	800a3da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	617b      	str	r3, [r7, #20]
 800a3ce:	e004      	b.n	800a3da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a3d0:	4b10      	ldr	r3, [pc, #64]	; (800a414 <xTaskIncrementTick+0x174>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	4a0f      	ldr	r2, [pc, #60]	; (800a414 <xTaskIncrementTick+0x174>)
 800a3d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a3da:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <xTaskIncrementTick+0x178>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a3e6:	697b      	ldr	r3, [r7, #20]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	2000105c 	.word	0x2000105c
 800a3f4:	20001038 	.word	0x20001038
 800a3f8:	20000fec 	.word	0x20000fec
 800a3fc:	20000ff0 	.word	0x20000ff0
 800a400:	2000104c 	.word	0x2000104c
 800a404:	20001054 	.word	0x20001054
 800a408:	2000103c 	.word	0x2000103c
 800a40c:	20000b64 	.word	0x20000b64
 800a410:	20000b60 	.word	0x20000b60
 800a414:	20001044 	.word	0x20001044
 800a418:	20001048 	.word	0x20001048

0800a41c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a422:	4b2a      	ldr	r3, [pc, #168]	; (800a4cc <vTaskSwitchContext+0xb0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a42a:	4b29      	ldr	r3, [pc, #164]	; (800a4d0 <vTaskSwitchContext+0xb4>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a430:	e046      	b.n	800a4c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a432:	4b27      	ldr	r3, [pc, #156]	; (800a4d0 <vTaskSwitchContext+0xb4>)
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a438:	4b26      	ldr	r3, [pc, #152]	; (800a4d4 <vTaskSwitchContext+0xb8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	e010      	b.n	800a462 <vTaskSwitchContext+0x46>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10a      	bne.n	800a45c <vTaskSwitchContext+0x40>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	607b      	str	r3, [r7, #4]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <vTaskSwitchContext+0x3e>
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3b01      	subs	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	491d      	ldr	r1, [pc, #116]	; (800a4d8 <vTaskSwitchContext+0xbc>)
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	4613      	mov	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	440b      	add	r3, r1
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0e4      	beq.n	800a440 <vTaskSwitchContext+0x24>
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4613      	mov	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4a15      	ldr	r2, [pc, #84]	; (800a4d8 <vTaskSwitchContext+0xbc>)
 800a482:	4413      	add	r3, r2
 800a484:	60bb      	str	r3, [r7, #8]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	605a      	str	r2, [r3, #4]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	3308      	adds	r3, #8
 800a498:	429a      	cmp	r2, r3
 800a49a:	d104      	bne.n	800a4a6 <vTaskSwitchContext+0x8a>
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	605a      	str	r2, [r3, #4]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	4a0b      	ldr	r2, [pc, #44]	; (800a4dc <vTaskSwitchContext+0xc0>)
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <vTaskSwitchContext+0xb8>)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4b6:	4b09      	ldr	r3, [pc, #36]	; (800a4dc <vTaskSwitchContext+0xc0>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3350      	adds	r3, #80	; 0x50
 800a4bc:	4a08      	ldr	r2, [pc, #32]	; (800a4e0 <vTaskSwitchContext+0xc4>)
 800a4be:	6013      	str	r3, [r2, #0]
}
 800a4c0:	bf00      	nop
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	2000105c 	.word	0x2000105c
 800a4d0:	20001048 	.word	0x20001048
 800a4d4:	2000103c 	.word	0x2000103c
 800a4d8:	20000b64 	.word	0x20000b64
 800a4dc:	20000b60 	.word	0x20000b60
 800a4e0:	20000088 	.word	0x20000088

0800a4e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10a      	bne.n	800a50a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	60fb      	str	r3, [r7, #12]
}
 800a506:	bf00      	nop
 800a508:	e7fe      	b.n	800a508 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a50a:	4b07      	ldr	r3, [pc, #28]	; (800a528 <vTaskPlaceOnEventList+0x44>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3318      	adds	r3, #24
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7fe f8d0 	bl	80086b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a518:	2101      	movs	r1, #1
 800a51a:	6838      	ldr	r0, [r7, #0]
 800a51c:	f000 fc50 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
}
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20000b60 	.word	0x20000b60

0800a52c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	617b      	str	r3, [r7, #20]
}
 800a550:	bf00      	nop
 800a552:	e7fe      	b.n	800a552 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a554:	4b11      	ldr	r3, [pc, #68]	; (800a59c <vTaskPlaceOnUnorderedEventList+0x70>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10a      	bne.n	800a572 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	613b      	str	r3, [r7, #16]
}
 800a56e:	bf00      	nop
 800a570:	e7fe      	b.n	800a570 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a572:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a57c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a57e:	4b08      	ldr	r3, [pc, #32]	; (800a5a0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3318      	adds	r3, #24
 800a584:	4619      	mov	r1, r3
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7fe f873 	bl	8008672 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a58c:	2101      	movs	r1, #1
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fc16 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
}
 800a594:	bf00      	nop
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	2000105c 	.word	0x2000105c
 800a5a0:	20000b60 	.word	0x20000b60

0800a5a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10a      	bne.n	800a5cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	617b      	str	r3, [r7, #20]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3318      	adds	r3, #24
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7fe f84c 	bl	8008672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	68b8      	ldr	r0, [r7, #8]
 800a5ea:	f000 fbe9 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
	}
 800a5ee:	bf00      	nop
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20000b60 	.word	0x20000b60

0800a5fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10a      	bne.n	800a628 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	f383 8811 	msr	BASEPRI, r3
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	f3bf 8f4f 	dsb	sy
 800a622:	60fb      	str	r3, [r7, #12]
}
 800a624:	bf00      	nop
 800a626:	e7fe      	b.n	800a626 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	3318      	adds	r3, #24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe f87b 	bl	8008728 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a632:	4b1e      	ldr	r3, [pc, #120]	; (800a6ac <xTaskRemoveFromEventList+0xb0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d11d      	bne.n	800a676 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	3304      	adds	r3, #4
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fe f872 	bl	8008728 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a648:	4b19      	ldr	r3, [pc, #100]	; (800a6b0 <xTaskRemoveFromEventList+0xb4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d903      	bls.n	800a658 <xTaskRemoveFromEventList+0x5c>
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	4a16      	ldr	r2, [pc, #88]	; (800a6b0 <xTaskRemoveFromEventList+0xb4>)
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65c:	4613      	mov	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	4413      	add	r3, r2
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	4a13      	ldr	r2, [pc, #76]	; (800a6b4 <xTaskRemoveFromEventList+0xb8>)
 800a666:	441a      	add	r2, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4619      	mov	r1, r3
 800a66e:	4610      	mov	r0, r2
 800a670:	f7fd ffff 	bl	8008672 <vListInsertEnd>
 800a674:	e005      	b.n	800a682 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	3318      	adds	r3, #24
 800a67a:	4619      	mov	r1, r3
 800a67c:	480e      	ldr	r0, [pc, #56]	; (800a6b8 <xTaskRemoveFromEventList+0xbc>)
 800a67e:	f7fd fff8 	bl	8008672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <xTaskRemoveFromEventList+0xc0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d905      	bls.n	800a69c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a690:	2301      	movs	r3, #1
 800a692:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a694:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <xTaskRemoveFromEventList+0xc4>)
 800a696:	2201      	movs	r2, #1
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	e001      	b.n	800a6a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a6a0:	697b      	ldr	r3, [r7, #20]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	2000105c 	.word	0x2000105c
 800a6b0:	2000103c 	.word	0x2000103c
 800a6b4:	20000b64 	.word	0x20000b64
 800a6b8:	20000ff4 	.word	0x20000ff4
 800a6bc:	20000b60 	.word	0x20000b60
 800a6c0:	20001048 	.word	0x20001048

0800a6c4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a6ce:	4b29      	ldr	r3, [pc, #164]	; (800a774 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	613b      	str	r3, [r7, #16]
}
 800a6e8:	bf00      	nop
 800a6ea:	e7fe      	b.n	800a6ea <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	60fb      	str	r3, [r7, #12]
}
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7fe f805 	bl	8008728 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	3304      	adds	r3, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe f800 	bl	8008728 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a72c:	4b12      	ldr	r3, [pc, #72]	; (800a778 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d903      	bls.n	800a73c <vTaskRemoveFromUnorderedEventList+0x78>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a738:	4a0f      	ldr	r2, [pc, #60]	; (800a778 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	4a0c      	ldr	r2, [pc, #48]	; (800a77c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a74a:	441a      	add	r2, r3
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	3304      	adds	r3, #4
 800a750:	4619      	mov	r1, r3
 800a752:	4610      	mov	r0, r2
 800a754:	f7fd ff8d 	bl	8008672 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75c:	4b08      	ldr	r3, [pc, #32]	; (800a780 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a762:	429a      	cmp	r2, r3
 800a764:	d902      	bls.n	800a76c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a766:	4b07      	ldr	r3, [pc, #28]	; (800a784 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a768:	2201      	movs	r2, #1
 800a76a:	601a      	str	r2, [r3, #0]
	}
}
 800a76c:	bf00      	nop
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	2000105c 	.word	0x2000105c
 800a778:	2000103c 	.word	0x2000103c
 800a77c:	20000b64 	.word	0x20000b64
 800a780:	20000b60 	.word	0x20000b60
 800a784:	20001048 	.word	0x20001048

0800a788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a790:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <vTaskInternalSetTimeOutState+0x24>)
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <vTaskInternalSetTimeOutState+0x28>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	605a      	str	r2, [r3, #4]
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bc80      	pop	{r7}
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	2000104c 	.word	0x2000104c
 800a7b0:	20001038 	.word	0x20001038

0800a7b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	613b      	str	r3, [r7, #16]
}
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a7f6:	f000 ff59 	bl	800b6ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7fa:	4b1d      	ldr	r3, [pc, #116]	; (800a870 <xTaskCheckForTimeOut+0xbc>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a812:	d102      	bne.n	800a81a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a814:	2300      	movs	r3, #0
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	e023      	b.n	800a862 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	4b15      	ldr	r3, [pc, #84]	; (800a874 <xTaskCheckForTimeOut+0xc0>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d007      	beq.n	800a836 <xTaskCheckForTimeOut+0x82>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d302      	bcc.n	800a836 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a830:	2301      	movs	r3, #1
 800a832:	61fb      	str	r3, [r7, #28]
 800a834:	e015      	b.n	800a862 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d20b      	bcs.n	800a858 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff ff9b 	bl	800a788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a852:	2300      	movs	r3, #0
 800a854:	61fb      	str	r3, [r7, #28]
 800a856:	e004      	b.n	800a862 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2200      	movs	r2, #0
 800a85c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a85e:	2301      	movs	r3, #1
 800a860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a862:	f000 ff53 	bl	800b70c <vPortExitCritical>

	return xReturn;
 800a866:	69fb      	ldr	r3, [r7, #28]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3720      	adds	r7, #32
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	20001038 	.word	0x20001038
 800a874:	2000104c 	.word	0x2000104c

0800a878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a87c:	4b03      	ldr	r3, [pc, #12]	; (800a88c <vTaskMissedYield+0x14>)
 800a87e:	2201      	movs	r2, #1
 800a880:	601a      	str	r2, [r3, #0]
}
 800a882:	bf00      	nop
 800a884:	46bd      	mov	sp, r7
 800a886:	bc80      	pop	{r7}
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	20001048 	.word	0x20001048

0800a890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a898:	f000 f852 	bl	800a940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <prvIdleTask+0x28>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d9f9      	bls.n	800a898 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <prvIdleTask+0x2c>)
 800a8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8b4:	e7f0      	b.n	800a898 <prvIdleTask+0x8>
 800a8b6:	bf00      	nop
 800a8b8:	20000b64 	.word	0x20000b64
 800a8bc:	e000ed04 	.word	0xe000ed04

0800a8c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	607b      	str	r3, [r7, #4]
 800a8ca:	e00c      	b.n	800a8e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4a12      	ldr	r2, [pc, #72]	; (800a920 <prvInitialiseTaskLists+0x60>)
 800a8d8:	4413      	add	r3, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fd fe9e 	bl	800861c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	607b      	str	r3, [r7, #4]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b37      	cmp	r3, #55	; 0x37
 800a8ea:	d9ef      	bls.n	800a8cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8ec:	480d      	ldr	r0, [pc, #52]	; (800a924 <prvInitialiseTaskLists+0x64>)
 800a8ee:	f7fd fe95 	bl	800861c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8f2:	480d      	ldr	r0, [pc, #52]	; (800a928 <prvInitialiseTaskLists+0x68>)
 800a8f4:	f7fd fe92 	bl	800861c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8f8:	480c      	ldr	r0, [pc, #48]	; (800a92c <prvInitialiseTaskLists+0x6c>)
 800a8fa:	f7fd fe8f 	bl	800861c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8fe:	480c      	ldr	r0, [pc, #48]	; (800a930 <prvInitialiseTaskLists+0x70>)
 800a900:	f7fd fe8c 	bl	800861c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a904:	480b      	ldr	r0, [pc, #44]	; (800a934 <prvInitialiseTaskLists+0x74>)
 800a906:	f7fd fe89 	bl	800861c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a90a:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <prvInitialiseTaskLists+0x78>)
 800a90c:	4a05      	ldr	r2, [pc, #20]	; (800a924 <prvInitialiseTaskLists+0x64>)
 800a90e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a910:	4b0a      	ldr	r3, [pc, #40]	; (800a93c <prvInitialiseTaskLists+0x7c>)
 800a912:	4a05      	ldr	r2, [pc, #20]	; (800a928 <prvInitialiseTaskLists+0x68>)
 800a914:	601a      	str	r2, [r3, #0]
}
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000b64 	.word	0x20000b64
 800a924:	20000fc4 	.word	0x20000fc4
 800a928:	20000fd8 	.word	0x20000fd8
 800a92c:	20000ff4 	.word	0x20000ff4
 800a930:	20001008 	.word	0x20001008
 800a934:	20001020 	.word	0x20001020
 800a938:	20000fec 	.word	0x20000fec
 800a93c:	20000ff0 	.word	0x20000ff0

0800a940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a946:	e019      	b.n	800a97c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a948:	f000 feb0 	bl	800b6ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a94c:	4b10      	ldr	r3, [pc, #64]	; (800a990 <prvCheckTasksWaitingTermination+0x50>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3304      	adds	r3, #4
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fd fee5 	bl	8008728 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a95e:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <prvCheckTasksWaitingTermination+0x54>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3b01      	subs	r3, #1
 800a964:	4a0b      	ldr	r2, [pc, #44]	; (800a994 <prvCheckTasksWaitingTermination+0x54>)
 800a966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a968:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <prvCheckTasksWaitingTermination+0x58>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	4a0a      	ldr	r2, [pc, #40]	; (800a998 <prvCheckTasksWaitingTermination+0x58>)
 800a970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a972:	f000 fecb 	bl	800b70c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f810 	bl	800a99c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a97c:	4b06      	ldr	r3, [pc, #24]	; (800a998 <prvCheckTasksWaitingTermination+0x58>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e1      	bne.n	800a948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a984:	bf00      	nop
 800a986:	bf00      	nop
 800a988:	3708      	adds	r7, #8
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20001008 	.word	0x20001008
 800a994:	20001034 	.word	0x20001034
 800a998:	2000101c 	.word	0x2000101c

0800a99c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3350      	adds	r3, #80	; 0x50
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f002 fecf 	bl	800d74c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d108      	bne.n	800a9ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 f839 	bl	800ba34 <vPortFree>
				vPortFree( pxTCB );
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f001 f836 	bl	800ba34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9c8:	e018      	b.n	800a9fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d103      	bne.n	800a9dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 f82d 	bl	800ba34 <vPortFree>
	}
 800a9da:	e00f      	b.n	800a9fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d00a      	beq.n	800a9fc <prvDeleteTCB+0x60>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60fb      	str	r3, [r7, #12]
}
 800a9f8:	bf00      	nop
 800a9fa:	e7fe      	b.n	800a9fa <prvDeleteTCB+0x5e>
	}
 800a9fc:	bf00      	nop
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa0a:	4b0e      	ldr	r3, [pc, #56]	; (800aa44 <prvResetNextTaskUnblockTime+0x40>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d101      	bne.n	800aa18 <prvResetNextTaskUnblockTime+0x14>
 800aa14:	2301      	movs	r3, #1
 800aa16:	e000      	b.n	800aa1a <prvResetNextTaskUnblockTime+0x16>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d004      	beq.n	800aa28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa1e:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <prvResetNextTaskUnblockTime+0x44>)
 800aa20:	f04f 32ff 	mov.w	r2, #4294967295
 800aa24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa26:	e008      	b.n	800aa3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa28:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <prvResetNextTaskUnblockTime+0x40>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	4a04      	ldr	r2, [pc, #16]	; (800aa48 <prvResetNextTaskUnblockTime+0x44>)
 800aa38:	6013      	str	r3, [r2, #0]
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bc80      	pop	{r7}
 800aa42:	4770      	bx	lr
 800aa44:	20000fec 	.word	0x20000fec
 800aa48:	20001054 	.word	0x20001054

0800aa4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aa52:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <xTaskGetCurrentTaskHandle+0x18>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aa58:	687b      	ldr	r3, [r7, #4]
	}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bc80      	pop	{r7}
 800aa62:	4770      	bx	lr
 800aa64:	20000b60 	.word	0x20000b60

0800aa68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <xTaskGetSchedulerState+0x34>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d102      	bne.n	800aa7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa76:	2301      	movs	r3, #1
 800aa78:	607b      	str	r3, [r7, #4]
 800aa7a:	e008      	b.n	800aa8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa7c:	4b08      	ldr	r3, [pc, #32]	; (800aaa0 <xTaskGetSchedulerState+0x38>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d102      	bne.n	800aa8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa84:	2302      	movs	r3, #2
 800aa86:	607b      	str	r3, [r7, #4]
 800aa88:	e001      	b.n	800aa8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa8e:	687b      	ldr	r3, [r7, #4]
	}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bc80      	pop	{r7}
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	20001040 	.word	0x20001040
 800aaa0:	2000105c 	.word	0x2000105c

0800aaa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d056      	beq.n	800ab68 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aabe:	4b2d      	ldr	r3, [pc, #180]	; (800ab74 <xTaskPriorityInherit+0xd0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d246      	bcs.n	800ab56 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	699b      	ldr	r3, [r3, #24]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	db06      	blt.n	800aade <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad0:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <xTaskPriorityInherit+0xd0>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	6959      	ldr	r1, [r3, #20]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4a22      	ldr	r2, [pc, #136]	; (800ab78 <xTaskPriorityInherit+0xd4>)
 800aaf0:	4413      	add	r3, r2
 800aaf2:	4299      	cmp	r1, r3
 800aaf4:	d101      	bne.n	800aafa <xTaskPriorityInherit+0x56>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xTaskPriorityInherit+0x58>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d022      	beq.n	800ab46 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fd fe0f 	bl	8008728 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab0a:	4b1a      	ldr	r3, [pc, #104]	; (800ab74 <xTaskPriorityInherit+0xd0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab18:	4b18      	ldr	r3, [pc, #96]	; (800ab7c <xTaskPriorityInherit+0xd8>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d903      	bls.n	800ab28 <xTaskPriorityInherit+0x84>
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab24:	4a15      	ldr	r2, [pc, #84]	; (800ab7c <xTaskPriorityInherit+0xd8>)
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4a10      	ldr	r2, [pc, #64]	; (800ab78 <xTaskPriorityInherit+0xd4>)
 800ab36:	441a      	add	r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f7fd fd97 	bl	8008672 <vListInsertEnd>
 800ab44:	e004      	b.n	800ab50 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab46:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <xTaskPriorityInherit+0xd0>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab50:	2301      	movs	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	e008      	b.n	800ab68 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <xTaskPriorityInherit+0xd0>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d201      	bcs.n	800ab68 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab64:	2301      	movs	r3, #1
 800ab66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab68:	68fb      	ldr	r3, [r7, #12]
	}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20000b60 	.word	0x20000b60
 800ab78:	20000b64 	.word	0x20000b64
 800ab7c:	2000103c 	.word	0x2000103c

0800ab80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d056      	beq.n	800ac44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab96:	4b2e      	ldr	r3, [pc, #184]	; (800ac50 <xTaskPriorityDisinherit+0xd0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d00a      	beq.n	800abb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	60fb      	str	r3, [r7, #12]
}
 800abb2:	bf00      	nop
 800abb4:	e7fe      	b.n	800abb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10a      	bne.n	800abd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	60bb      	str	r3, [r7, #8]
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd8:	1e5a      	subs	r2, r3, #1
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d02c      	beq.n	800ac44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d128      	bne.n	800ac44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	3304      	adds	r3, #4
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fd fd96 	bl	8008728 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac14:	4b0f      	ldr	r3, [pc, #60]	; (800ac54 <xTaskPriorityDisinherit+0xd4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d903      	bls.n	800ac24 <xTaskPriorityDisinherit+0xa4>
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac20:	4a0c      	ldr	r2, [pc, #48]	; (800ac54 <xTaskPriorityDisinherit+0xd4>)
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac28:	4613      	mov	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4413      	add	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4a09      	ldr	r2, [pc, #36]	; (800ac58 <xTaskPriorityDisinherit+0xd8>)
 800ac32:	441a      	add	r2, r3
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	3304      	adds	r3, #4
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7fd fd19 	bl	8008672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac40:	2301      	movs	r3, #1
 800ac42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac44:	697b      	ldr	r3, [r7, #20]
	}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	20000b60 	.word	0x20000b60
 800ac54:	2000103c 	.word	0x2000103c
 800ac58:	20000b64 	.word	0x20000b64

0800ac5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d06f      	beq.n	800ad54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	60fb      	str	r3, [r7, #12]
}
 800ac8e:	bf00      	nop
 800ac90:	e7fe      	b.n	800ac90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d902      	bls.n	800aca2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	61fb      	str	r3, [r7, #28]
 800aca0:	e002      	b.n	800aca8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d050      	beq.n	800ad54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d14b      	bne.n	800ad54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acbc:	4b27      	ldr	r3, [pc, #156]	; (800ad5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d10a      	bne.n	800acdc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60bb      	str	r3, [r7, #8]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	69fa      	ldr	r2, [r7, #28]
 800ace6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	db04      	blt.n	800acfa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	6959      	ldr	r1, [r3, #20]
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4a15      	ldr	r2, [pc, #84]	; (800ad60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ad0a:	4413      	add	r3, r2
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	d101      	bne.n	800ad14 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e000      	b.n	800ad16 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800ad14:	2300      	movs	r3, #0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d01c      	beq.n	800ad54 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fd fd02 	bl	8008728 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad28:	4b0e      	ldr	r3, [pc, #56]	; (800ad64 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d903      	bls.n	800ad38 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	4a0b      	ldr	r2, [pc, #44]	; (800ad64 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4a06      	ldr	r2, [pc, #24]	; (800ad60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ad46:	441a      	add	r2, r3
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f7fd fc8f 	bl	8008672 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad54:	bf00      	nop
 800ad56:	3720      	adds	r7, #32
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20000b60 	.word	0x20000b60
 800ad60:	20000b64 	.word	0x20000b64
 800ad64:	2000103c 	.word	0x2000103c

0800ad68 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ad6e:	4b09      	ldr	r3, [pc, #36]	; (800ad94 <uxTaskResetEventItemValue+0x2c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad76:	4b07      	ldr	r3, [pc, #28]	; (800ad94 <uxTaskResetEventItemValue+0x2c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <uxTaskResetEventItemValue+0x2c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ad84:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ad86:	687b      	ldr	r3, [r7, #4]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bc80      	pop	{r7}
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20000b60 	.word	0x20000b60

0800ad98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad9c:	4b07      	ldr	r3, [pc, #28]	; (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adaa:	3201      	adds	r2, #1
 800adac:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800adae:	4b03      	ldr	r3, [pc, #12]	; (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800adb0:	681b      	ldr	r3, [r3, #0]
	}
 800adb2:	4618      	mov	r0, r3
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bc80      	pop	{r7}
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20000b60 	.word	0x20000b60

0800adc0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adca:	4b21      	ldr	r3, [pc, #132]	; (800ae50 <prvAddCurrentTaskToDelayedList+0x90>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800add0:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3304      	adds	r3, #4
 800add6:	4618      	mov	r0, r3
 800add8:	f7fd fca6 	bl	8008728 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade2:	d10a      	bne.n	800adfa <prvAddCurrentTaskToDelayedList+0x3a>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d007      	beq.n	800adfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adea:	4b1a      	ldr	r3, [pc, #104]	; (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3304      	adds	r3, #4
 800adf0:	4619      	mov	r1, r3
 800adf2:	4819      	ldr	r0, [pc, #100]	; (800ae58 <prvAddCurrentTaskToDelayedList+0x98>)
 800adf4:	f7fd fc3d 	bl	8008672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800adf8:	e026      	b.n	800ae48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4413      	add	r3, r2
 800ae00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae02:	4b14      	ldr	r3, [pc, #80]	; (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d209      	bcs.n	800ae26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae12:	4b12      	ldr	r3, [pc, #72]	; (800ae5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	4610      	mov	r0, r2
 800ae20:	f7fd fc4a 	bl	80086b8 <vListInsert>
}
 800ae24:	e010      	b.n	800ae48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae26:	4b0e      	ldr	r3, [pc, #56]	; (800ae60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f7fd fc40 	bl	80086b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae38:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d202      	bcs.n	800ae48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae42:	4a08      	ldr	r2, [pc, #32]	; (800ae64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	6013      	str	r3, [r2, #0]
}
 800ae48:	bf00      	nop
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20001038 	.word	0x20001038
 800ae54:	20000b60 	.word	0x20000b60
 800ae58:	20001020 	.word	0x20001020
 800ae5c:	20000ff0 	.word	0x20000ff0
 800ae60:	20000fec 	.word	0x20000fec
 800ae64:	20001054 	.word	0x20001054

0800ae68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08a      	sub	sp, #40	; 0x28
 800ae6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae72:	f000 facb 	bl	800b40c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae76:	4b1c      	ldr	r3, [pc, #112]	; (800aee8 <xTimerCreateTimerTask+0x80>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d021      	beq.n	800aec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae86:	1d3a      	adds	r2, r7, #4
 800ae88:	f107 0108 	add.w	r1, r7, #8
 800ae8c:	f107 030c 	add.w	r3, r7, #12
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fd f941 	bl	8008118 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	9202      	str	r2, [sp, #8]
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	2302      	movs	r3, #2
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	2300      	movs	r3, #0
 800aea6:	460a      	mov	r2, r1
 800aea8:	4910      	ldr	r1, [pc, #64]	; (800aeec <xTimerCreateTimerTask+0x84>)
 800aeaa:	4811      	ldr	r0, [pc, #68]	; (800aef0 <xTimerCreateTimerTask+0x88>)
 800aeac:	f7fe fd28 	bl	8009900 <xTaskCreateStatic>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	4a10      	ldr	r2, [pc, #64]	; (800aef4 <xTimerCreateTimerTask+0x8c>)
 800aeb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	; (800aef4 <xTimerCreateTimerTask+0x8c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aebe:	2301      	movs	r3, #1
 800aec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	613b      	str	r3, [r7, #16]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aede:	697b      	ldr	r3, [r7, #20]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20001090 	.word	0x20001090
 800aeec:	0800e788 	.word	0x0800e788
 800aef0:	0800b015 	.word	0x0800b015
 800aef4:	20001094 	.word	0x20001094

0800aef8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b08a      	sub	sp, #40	; 0x28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800af06:	2300      	movs	r3, #0
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	623b      	str	r3, [r7, #32]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800af26:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <xTimerGenericCommand+0x98>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d02a      	beq.n	800af84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b05      	cmp	r3, #5
 800af3e:	dc18      	bgt.n	800af72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af40:	f7ff fd92 	bl	800aa68 <xTaskGetSchedulerState>
 800af44:	4603      	mov	r3, r0
 800af46:	2b02      	cmp	r3, #2
 800af48:	d109      	bne.n	800af5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af4a:	4b11      	ldr	r3, [pc, #68]	; (800af90 <xTimerGenericCommand+0x98>)
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	f107 0110 	add.w	r1, r7, #16
 800af52:	2300      	movs	r3, #0
 800af54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af56:	f7fd fe73 	bl	8008c40 <xQueueGenericSend>
 800af5a:	6278      	str	r0, [r7, #36]	; 0x24
 800af5c:	e012      	b.n	800af84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af5e:	4b0c      	ldr	r3, [pc, #48]	; (800af90 <xTimerGenericCommand+0x98>)
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	f107 0110 	add.w	r1, r7, #16
 800af66:	2300      	movs	r3, #0
 800af68:	2200      	movs	r2, #0
 800af6a:	f7fd fe69 	bl	8008c40 <xQueueGenericSend>
 800af6e:	6278      	str	r0, [r7, #36]	; 0x24
 800af70:	e008      	b.n	800af84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af72:	4b07      	ldr	r3, [pc, #28]	; (800af90 <xTimerGenericCommand+0x98>)
 800af74:	6818      	ldr	r0, [r3, #0]
 800af76:	f107 0110 	add.w	r1, r7, #16
 800af7a:	2300      	movs	r3, #0
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	f7fd ff5d 	bl	8008e3c <xQueueGenericSendFromISR>
 800af82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	; 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	20001090 	.word	0x20001090

0800af94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af02      	add	r7, sp, #8
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af9e:	4b1c      	ldr	r3, [pc, #112]	; (800b010 <prvProcessExpiredTimer+0x7c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	3304      	adds	r3, #4
 800afac:	4618      	mov	r0, r3
 800afae:	f7fd fbbb 	bl	8008728 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d122      	bne.n	800b000 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	699a      	ldr	r2, [r3, #24]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	18d1      	adds	r1, r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	6978      	ldr	r0, [r7, #20]
 800afc8:	f000 f8c8 	bl	800b15c <prvInsertTimerInActiveList>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d016      	beq.n	800b000 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afd2:	2300      	movs	r3, #0
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2300      	movs	r3, #0
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	2100      	movs	r1, #0
 800afdc:	6978      	ldr	r0, [r7, #20]
 800afde:	f7ff ff8b 	bl	800aef8 <xTimerGenericCommand>
 800afe2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10a      	bne.n	800b000 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	60fb      	str	r3, [r7, #12]
}
 800affc:	bf00      	nop
 800affe:	e7fe      	b.n	800affe <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	6978      	ldr	r0, [r7, #20]
 800b006:	4798      	blx	r3
}
 800b008:	bf00      	nop
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	20001088 	.word	0x20001088

0800b014 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b01c:	f107 0308 	add.w	r3, r7, #8
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f857 	bl	800b0d4 <prvGetNextExpireTime>
 800b026:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	4619      	mov	r1, r3
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f803 	bl	800b038 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b032:	f000 f8d5 	bl	800b1e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b036:	e7f1      	b.n	800b01c <prvTimerTask+0x8>

0800b038 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b042:	f7ff f861 	bl	800a108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b046:	f107 0308 	add.w	r3, r7, #8
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 f866 	bl	800b11c <prvSampleTimeNow>
 800b050:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d130      	bne.n	800b0ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <prvProcessTimerOrBlockTask+0x3c>
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	429a      	cmp	r2, r3
 800b064:	d806      	bhi.n	800b074 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b066:	f7ff f85d 	bl	800a124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff ff91 	bl	800af94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b072:	e024      	b.n	800b0be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b07a:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <prvProcessTimerOrBlockTask+0x90>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	bf0c      	ite	eq
 800b084:	2301      	moveq	r3, #1
 800b086:	2300      	movne	r3, #0
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b08c:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <prvProcessTimerOrBlockTask+0x94>)
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	4619      	mov	r1, r3
 800b09a:	f7fe fbfd 	bl	8009898 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b09e:	f7ff f841 	bl	800a124 <xTaskResumeAll>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b0a8:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <prvProcessTimerOrBlockTask+0x98>)
 800b0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	f3bf 8f6f 	isb	sy
}
 800b0b8:	e001      	b.n	800b0be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0ba:	f7ff f833 	bl	800a124 <xTaskResumeAll>
}
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	2000108c 	.word	0x2000108c
 800b0cc:	20001090 	.word	0x20001090
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0dc:	4b0e      	ldr	r3, [pc, #56]	; (800b118 <prvGetNextExpireTime+0x44>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bf0c      	ite	eq
 800b0e6:	2301      	moveq	r3, #1
 800b0e8:	2300      	movne	r3, #0
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0fa:	4b07      	ldr	r3, [pc, #28]	; (800b118 <prvGetNextExpireTime+0x44>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e001      	b.n	800b10a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b10a:	68fb      	ldr	r3, [r7, #12]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	bc80      	pop	{r7}
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	20001088 	.word	0x20001088

0800b11c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b124:	f7ff f89c 	bl	800a260 <xTaskGetTickCount>
 800b128:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b12a:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <prvSampleTimeNow+0x3c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	429a      	cmp	r2, r3
 800b132:	d205      	bcs.n	800b140 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b134:	f000 f908 	bl	800b348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	e002      	b.n	800b146 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b146:	4a04      	ldr	r2, [pc, #16]	; (800b158 <prvSampleTimeNow+0x3c>)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b14c:	68fb      	ldr	r3, [r7, #12]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20001098 	.word	0x20001098

0800b15c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d812      	bhi.n	800b1a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	1ad2      	subs	r2, r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d302      	bcc.n	800b196 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e01b      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <prvInsertTimerInActiveList+0x7c>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f7fd fa89 	bl	80086b8 <vListInsert>
 800b1a6:	e012      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d206      	bcs.n	800b1be <prvInsertTimerInActiveList+0x62>
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d302      	bcc.n	800b1be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	e007      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1be:	4b07      	ldr	r3, [pc, #28]	; (800b1dc <prvInsertTimerInActiveList+0x80>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	f7fd fa75 	bl	80086b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1ce:	697b      	ldr	r3, [r7, #20]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	2000108c 	.word	0x2000108c
 800b1dc:	20001088 	.word	0x20001088

0800b1e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b08e      	sub	sp, #56	; 0x38
 800b1e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1e6:	e09d      	b.n	800b324 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da18      	bge.n	800b220 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1ee:	1d3b      	adds	r3, r7, #4
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	61fb      	str	r3, [r7, #28]
}
 800b20c:	bf00      	nop
 800b20e:	e7fe      	b.n	800b20e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b216:	6850      	ldr	r0, [r2, #4]
 800b218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b21a:	6892      	ldr	r2, [r2, #8]
 800b21c:	4611      	mov	r1, r2
 800b21e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	db7e      	blt.n	800b324 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	3304      	adds	r3, #4
 800b236:	4618      	mov	r0, r3
 800b238:	f7fd fa76 	bl	8008728 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b23c:	463b      	mov	r3, r7
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff ff6c 	bl	800b11c <prvSampleTimeNow>
 800b244:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b09      	cmp	r3, #9
 800b24a:	d86a      	bhi.n	800b322 <prvProcessReceivedCommands+0x142>
 800b24c:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <prvProcessReceivedCommands+0x74>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b27d 	.word	0x0800b27d
 800b258:	0800b27d 	.word	0x0800b27d
 800b25c:	0800b27d 	.word	0x0800b27d
 800b260:	0800b325 	.word	0x0800b325
 800b264:	0800b2d9 	.word	0x0800b2d9
 800b268:	0800b311 	.word	0x0800b311
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b27d 	.word	0x0800b27d
 800b274:	0800b325 	.word	0x0800b325
 800b278:	0800b2d9 	.word	0x0800b2d9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	18d1      	adds	r1, r2, r3
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28a:	f7ff ff67 	bl	800b15c <prvInsertTimerInActiveList>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d047      	beq.n	800b324 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d13f      	bne.n	800b324 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	441a      	add	r2, r3
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b6:	f7ff fe1f 	bl	800aef8 <xTimerGenericCommand>
 800b2ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d130      	bne.n	800b324 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	61bb      	str	r3, [r7, #24]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10a      	bne.n	800b2fc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	617b      	str	r3, [r7, #20]
}
 800b2f8:	bf00      	nop
 800b2fa:	e7fe      	b.n	800b2fa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	699a      	ldr	r2, [r3, #24]
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	18d1      	adds	r1, r2, r3
 800b304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b30a:	f7ff ff27 	bl	800b15c <prvInsertTimerInActiveList>
					break;
 800b30e:	e009      	b.n	800b324 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d104      	bne.n	800b324 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800b31a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b31c:	f000 fb8a 	bl	800ba34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b320:	e000      	b.n	800b324 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800b322:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b324:	4b07      	ldr	r3, [pc, #28]	; (800b344 <prvProcessReceivedCommands+0x164>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	1d39      	adds	r1, r7, #4
 800b32a:	2200      	movs	r2, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fd feab 	bl	8009088 <xQueueReceive>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	f47f af57 	bne.w	800b1e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b33a:	bf00      	nop
 800b33c:	bf00      	nop
 800b33e:	3730      	adds	r7, #48	; 0x30
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20001090 	.word	0x20001090

0800b348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b34e:	e045      	b.n	800b3dc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b350:	4b2c      	ldr	r3, [pc, #176]	; (800b404 <prvSwitchTimerLists+0xbc>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b35a:	4b2a      	ldr	r3, [pc, #168]	; (800b404 <prvSwitchTimerLists+0xbc>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fd f9dd 	bl	8008728 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d12e      	bne.n	800b3dc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	4413      	add	r3, r2
 800b386:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d90e      	bls.n	800b3ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b39c:	4b19      	ldr	r3, [pc, #100]	; (800b404 <prvSwitchTimerLists+0xbc>)
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4610      	mov	r0, r2
 800b3a8:	f7fd f986 	bl	80086b8 <vListInsert>
 800b3ac:	e016      	b.n	800b3dc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f7ff fd9d 	bl	800aef8 <xTimerGenericCommand>
 800b3be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10a      	bne.n	800b3dc <prvSwitchTimerLists+0x94>
	__asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	603b      	str	r3, [r7, #0]
}
 800b3d8:	bf00      	nop
 800b3da:	e7fe      	b.n	800b3da <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3dc:	4b09      	ldr	r3, [pc, #36]	; (800b404 <prvSwitchTimerLists+0xbc>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1b4      	bne.n	800b350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3e6:	4b07      	ldr	r3, [pc, #28]	; (800b404 <prvSwitchTimerLists+0xbc>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a04      	ldr	r2, [pc, #16]	; (800b404 <prvSwitchTimerLists+0xbc>)
 800b3f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3f4:	4a04      	ldr	r2, [pc, #16]	; (800b408 <prvSwitchTimerLists+0xc0>)
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	6013      	str	r3, [r2, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20001088 	.word	0x20001088
 800b408:	2000108c 	.word	0x2000108c

0800b40c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b412:	f000 f94b 	bl	800b6ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b416:	4b15      	ldr	r3, [pc, #84]	; (800b46c <prvCheckForValidListAndQueue+0x60>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d120      	bne.n	800b460 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b41e:	4814      	ldr	r0, [pc, #80]	; (800b470 <prvCheckForValidListAndQueue+0x64>)
 800b420:	f7fd f8fc 	bl	800861c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b424:	4813      	ldr	r0, [pc, #76]	; (800b474 <prvCheckForValidListAndQueue+0x68>)
 800b426:	f7fd f8f9 	bl	800861c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b42a:	4b13      	ldr	r3, [pc, #76]	; (800b478 <prvCheckForValidListAndQueue+0x6c>)
 800b42c:	4a10      	ldr	r2, [pc, #64]	; (800b470 <prvCheckForValidListAndQueue+0x64>)
 800b42e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b430:	4b12      	ldr	r3, [pc, #72]	; (800b47c <prvCheckForValidListAndQueue+0x70>)
 800b432:	4a10      	ldr	r2, [pc, #64]	; (800b474 <prvCheckForValidListAndQueue+0x68>)
 800b434:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b436:	2300      	movs	r3, #0
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	4b11      	ldr	r3, [pc, #68]	; (800b480 <prvCheckForValidListAndQueue+0x74>)
 800b43c:	4a11      	ldr	r2, [pc, #68]	; (800b484 <prvCheckForValidListAndQueue+0x78>)
 800b43e:	2110      	movs	r1, #16
 800b440:	200a      	movs	r0, #10
 800b442:	f7fd fa03 	bl	800884c <xQueueGenericCreateStatic>
 800b446:	4603      	mov	r3, r0
 800b448:	4a08      	ldr	r2, [pc, #32]	; (800b46c <prvCheckForValidListAndQueue+0x60>)
 800b44a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b44c:	4b07      	ldr	r3, [pc, #28]	; (800b46c <prvCheckForValidListAndQueue+0x60>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d005      	beq.n	800b460 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <prvCheckForValidListAndQueue+0x60>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	490b      	ldr	r1, [pc, #44]	; (800b488 <prvCheckForValidListAndQueue+0x7c>)
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fe f9ca 	bl	80097f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b460:	f000 f954 	bl	800b70c <vPortExitCritical>
}
 800b464:	bf00      	nop
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	20001090 	.word	0x20001090
 800b470:	20001060 	.word	0x20001060
 800b474:	20001074 	.word	0x20001074
 800b478:	20001088 	.word	0x20001088
 800b47c:	2000108c 	.word	0x2000108c
 800b480:	2000113c 	.word	0x2000113c
 800b484:	2000109c 	.word	0x2000109c
 800b488:	0800e790 	.word	0x0800e790

0800b48c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b08a      	sub	sp, #40	; 0x28
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b49a:	f06f 0301 	mvn.w	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <xTimerPendFunctionCallFromISR+0x3c>)
 800b4ae:	6818      	ldr	r0, [r3, #0]
 800b4b0:	f107 0114 	add.w	r1, r7, #20
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	f7fd fcc0 	bl	8008e3c <xQueueGenericSendFromISR>
 800b4bc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3728      	adds	r7, #40	; 0x28
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20001090 	.word	0x20001090

0800b4cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3b04      	subs	r3, #4
 800b4dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3b04      	subs	r3, #4
 800b4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f023 0201 	bic.w	r2, r3, #1
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	3b04      	subs	r3, #4
 800b4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4fc:	4a08      	ldr	r2, [pc, #32]	; (800b520 <pxPortInitialiseStack+0x54>)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3b14      	subs	r3, #20
 800b506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3b20      	subs	r3, #32
 800b512:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b514:	68fb      	ldr	r3, [r7, #12]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bc80      	pop	{r7}
 800b51e:	4770      	bx	lr
 800b520:	0800b525 	.word	0x0800b525

0800b524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b52e:	4b12      	ldr	r3, [pc, #72]	; (800b578 <prvTaskExitError+0x54>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b536:	d00a      	beq.n	800b54e <prvTaskExitError+0x2a>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	f383 8811 	msr	BASEPRI, r3
 800b540:	f3bf 8f6f 	isb	sy
 800b544:	f3bf 8f4f 	dsb	sy
 800b548:	60fb      	str	r3, [r7, #12]
}
 800b54a:	bf00      	nop
 800b54c:	e7fe      	b.n	800b54c <prvTaskExitError+0x28>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	60bb      	str	r3, [r7, #8]
}
 800b560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b562:	bf00      	nop
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0fc      	beq.n	800b564 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b56a:	bf00      	nop
 800b56c:	bf00      	nop
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	2000002c 	.word	0x2000002c
 800b57c:	00000000 	.word	0x00000000

0800b580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b580:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <pxCurrentTCBConst2>)
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	6808      	ldr	r0, [r1, #0]
 800b586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b58a:	f380 8809 	msr	PSP, r0
 800b58e:	f3bf 8f6f 	isb	sy
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8811 	msr	BASEPRI, r0
 800b59a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b59e:	4770      	bx	lr

0800b5a0 <pxCurrentTCBConst2>:
 800b5a0:	20000b60 	.word	0x20000b60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop

0800b5a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b5a8:	4806      	ldr	r0, [pc, #24]	; (800b5c4 <prvPortStartFirstTask+0x1c>)
 800b5aa:	6800      	ldr	r0, [r0, #0]
 800b5ac:	6800      	ldr	r0, [r0, #0]
 800b5ae:	f380 8808 	msr	MSP, r0
 800b5b2:	b662      	cpsie	i
 800b5b4:	b661      	cpsie	f
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	df00      	svc	0
 800b5c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5c2:	bf00      	nop
 800b5c4:	e000ed08 	.word	0xe000ed08

0800b5c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5ce:	4b32      	ldr	r3, [pc, #200]	; (800b698 <xPortStartScheduler+0xd0>)
 800b5d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	22ff      	movs	r2, #255	; 0xff
 800b5de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5e8:	78fb      	ldrb	r3, [r7, #3]
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	4b2a      	ldr	r3, [pc, #168]	; (800b69c <xPortStartScheduler+0xd4>)
 800b5f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5f6:	4b2a      	ldr	r3, [pc, #168]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b5f8:	2207      	movs	r2, #7
 800b5fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5fc:	e009      	b.n	800b612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b5fe:	4b28      	ldr	r3, [pc, #160]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3b01      	subs	r3, #1
 800b604:	4a26      	ldr	r2, [pc, #152]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	b2db      	uxtb	r3, r3
 800b616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b61a:	2b80      	cmp	r3, #128	; 0x80
 800b61c:	d0ef      	beq.n	800b5fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b61e:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f1c3 0307 	rsb	r3, r3, #7
 800b626:	2b04      	cmp	r3, #4
 800b628:	d00a      	beq.n	800b640 <xPortStartScheduler+0x78>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	60bb      	str	r3, [r7, #8]
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b640:	4b17      	ldr	r3, [pc, #92]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	4a16      	ldr	r2, [pc, #88]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b64a:	4b15      	ldr	r3, [pc, #84]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b652:	4a13      	ldr	r2, [pc, #76]	; (800b6a0 <xPortStartScheduler+0xd8>)
 800b654:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b65e:	4b11      	ldr	r3, [pc, #68]	; (800b6a4 <xPortStartScheduler+0xdc>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a10      	ldr	r2, [pc, #64]	; (800b6a4 <xPortStartScheduler+0xdc>)
 800b664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b66a:	4b0e      	ldr	r3, [pc, #56]	; (800b6a4 <xPortStartScheduler+0xdc>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a0d      	ldr	r2, [pc, #52]	; (800b6a4 <xPortStartScheduler+0xdc>)
 800b670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b674:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b676:	f000 f8b9 	bl	800b7ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b67a:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <xPortStartScheduler+0xe0>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b680:	f7ff ff92 	bl	800b5a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b684:	f7fe feca 	bl	800a41c <vTaskSwitchContext>
	prvTaskExitError();
 800b688:	f7ff ff4c 	bl	800b524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	e000e400 	.word	0xe000e400
 800b69c:	2000118c 	.word	0x2000118c
 800b6a0:	20001190 	.word	0x20001190
 800b6a4:	e000ed20 	.word	0xe000ed20
 800b6a8:	2000002c 	.word	0x2000002c

0800b6ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	607b      	str	r3, [r7, #4]
}
 800b6c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6c6:	4b0f      	ldr	r3, [pc, #60]	; (800b704 <vPortEnterCritical+0x58>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	4a0d      	ldr	r2, [pc, #52]	; (800b704 <vPortEnterCritical+0x58>)
 800b6ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <vPortEnterCritical+0x58>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d10f      	bne.n	800b6f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6d8:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <vPortEnterCritical+0x5c>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00a      	beq.n	800b6f8 <vPortEnterCritical+0x4c>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	603b      	str	r3, [r7, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	e7fe      	b.n	800b6f6 <vPortEnterCritical+0x4a>
	}
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bc80      	pop	{r7}
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	2000002c 	.word	0x2000002c
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b712:	4b11      	ldr	r3, [pc, #68]	; (800b758 <vPortExitCritical+0x4c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10a      	bne.n	800b730 <vPortExitCritical+0x24>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	607b      	str	r3, [r7, #4]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b730:	4b09      	ldr	r3, [pc, #36]	; (800b758 <vPortExitCritical+0x4c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3b01      	subs	r3, #1
 800b736:	4a08      	ldr	r2, [pc, #32]	; (800b758 <vPortExitCritical+0x4c>)
 800b738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b73a:	4b07      	ldr	r3, [pc, #28]	; (800b758 <vPortExitCritical+0x4c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d105      	bne.n	800b74e <vPortExitCritical+0x42>
 800b742:	2300      	movs	r3, #0
 800b744:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	f383 8811 	msr	BASEPRI, r3
}
 800b74c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b74e:	bf00      	nop
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	bc80      	pop	{r7}
 800b756:	4770      	bx	lr
 800b758:	2000002c 	.word	0x2000002c
 800b75c:	00000000 	.word	0x00000000

0800b760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b760:	f3ef 8009 	mrs	r0, PSP
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4b0d      	ldr	r3, [pc, #52]	; (800b7a0 <pxCurrentTCBConst>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b770:	6010      	str	r0, [r2, #0]
 800b772:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b776:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b77a:	f380 8811 	msr	BASEPRI, r0
 800b77e:	f7fe fe4d 	bl	800a41c <vTaskSwitchContext>
 800b782:	f04f 0000 	mov.w	r0, #0
 800b786:	f380 8811 	msr	BASEPRI, r0
 800b78a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b78e:	6819      	ldr	r1, [r3, #0]
 800b790:	6808      	ldr	r0, [r1, #0]
 800b792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b796:	f380 8809 	msr	PSP, r0
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	4770      	bx	lr

0800b7a0 <pxCurrentTCBConst>:
 800b7a0:	20000b60 	.word	0x20000b60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop

0800b7a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	607b      	str	r3, [r7, #4]
}
 800b7c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7c2:	f7fe fd6d 	bl	800a2a0 <xTaskIncrementTick>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7cc:	4b06      	ldr	r3, [pc, #24]	; (800b7e8 <SysTick_Handler+0x40>)
 800b7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	f383 8811 	msr	BASEPRI, r3
}
 800b7de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7e0:	bf00      	nop
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	; (800b81c <vPortSetupTimerInterrupt+0x30>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7f6:	4b0a      	ldr	r3, [pc, #40]	; (800b820 <vPortSetupTimerInterrupt+0x34>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7fc:	4b09      	ldr	r3, [pc, #36]	; (800b824 <vPortSetupTimerInterrupt+0x38>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a09      	ldr	r2, [pc, #36]	; (800b828 <vPortSetupTimerInterrupt+0x3c>)
 800b802:	fba2 2303 	umull	r2, r3, r2, r3
 800b806:	099b      	lsrs	r3, r3, #6
 800b808:	4a08      	ldr	r2, [pc, #32]	; (800b82c <vPortSetupTimerInterrupt+0x40>)
 800b80a:	3b01      	subs	r3, #1
 800b80c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b80e:	4b03      	ldr	r3, [pc, #12]	; (800b81c <vPortSetupTimerInterrupt+0x30>)
 800b810:	2207      	movs	r2, #7
 800b812:	601a      	str	r2, [r3, #0]
}
 800b814:	bf00      	nop
 800b816:	46bd      	mov	sp, r7
 800b818:	bc80      	pop	{r7}
 800b81a:	4770      	bx	lr
 800b81c:	e000e010 	.word	0xe000e010
 800b820:	e000e018 	.word	0xe000e018
 800b824:	20000020 	.word	0x20000020
 800b828:	10624dd3 	.word	0x10624dd3
 800b82c:	e000e014 	.word	0xe000e014

0800b830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b836:	f3ef 8305 	mrs	r3, IPSR
 800b83a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b0f      	cmp	r3, #15
 800b840:	d914      	bls.n	800b86c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b842:	4a16      	ldr	r2, [pc, #88]	; (800b89c <vPortValidateInterruptPriority+0x6c>)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	4413      	add	r3, r2
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b84c:	4b14      	ldr	r3, [pc, #80]	; (800b8a0 <vPortValidateInterruptPriority+0x70>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	7afa      	ldrb	r2, [r7, #11]
 800b852:	429a      	cmp	r2, r3
 800b854:	d20a      	bcs.n	800b86c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	607b      	str	r3, [r7, #4]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b86c:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <vPortValidateInterruptPriority+0x74>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b874:	4b0c      	ldr	r3, [pc, #48]	; (800b8a8 <vPortValidateInterruptPriority+0x78>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d90a      	bls.n	800b892 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	603b      	str	r3, [r7, #0]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <vPortValidateInterruptPriority+0x60>
	}
 800b892:	bf00      	nop
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	bc80      	pop	{r7}
 800b89a:	4770      	bx	lr
 800b89c:	e000e3f0 	.word	0xe000e3f0
 800b8a0:	2000118c 	.word	0x2000118c
 800b8a4:	e000ed0c 	.word	0xe000ed0c
 800b8a8:	20001190 	.word	0x20001190

0800b8ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b08a      	sub	sp, #40	; 0x28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8b8:	f7fe fc26 	bl	800a108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8bc:	4b58      	ldr	r3, [pc, #352]	; (800ba20 <pvPortMalloc+0x174>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8c4:	f000 f910 	bl	800bae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8c8:	4b56      	ldr	r3, [pc, #344]	; (800ba24 <pvPortMalloc+0x178>)
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f040 808e 	bne.w	800b9f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01d      	beq.n	800b918 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8dc:	2208      	movs	r2, #8
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d014      	beq.n	800b918 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f023 0307 	bic.w	r3, r3, #7
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f003 0307 	and.w	r3, r3, #7
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <pvPortMalloc+0x6c>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	617b      	str	r3, [r7, #20]
}
 800b914:	bf00      	nop
 800b916:	e7fe      	b.n	800b916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d069      	beq.n	800b9f2 <pvPortMalloc+0x146>
 800b91e:	4b42      	ldr	r3, [pc, #264]	; (800ba28 <pvPortMalloc+0x17c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d864      	bhi.n	800b9f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b928:	4b40      	ldr	r3, [pc, #256]	; (800ba2c <pvPortMalloc+0x180>)
 800b92a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b92c:	4b3f      	ldr	r3, [pc, #252]	; (800ba2c <pvPortMalloc+0x180>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b932:	e004      	b.n	800b93e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d903      	bls.n	800b950 <pvPortMalloc+0xa4>
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1f1      	bne.n	800b934 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b950:	4b33      	ldr	r3, [pc, #204]	; (800ba20 <pvPortMalloc+0x174>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b956:	429a      	cmp	r2, r3
 800b958:	d04b      	beq.n	800b9f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2208      	movs	r2, #8
 800b960:	4413      	add	r3, r2
 800b962:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	6a3b      	ldr	r3, [r7, #32]
 800b96a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	1ad2      	subs	r2, r2, r3
 800b974:	2308      	movs	r3, #8
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	429a      	cmp	r2, r3
 800b97a:	d91f      	bls.n	800b9bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4413      	add	r3, r2
 800b982:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	f003 0307 	and.w	r3, r3, #7
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00a      	beq.n	800b9a4 <pvPortMalloc+0xf8>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	613b      	str	r3, [r7, #16]
}
 800b9a0:	bf00      	nop
 800b9a2:	e7fe      	b.n	800b9a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	1ad2      	subs	r2, r2, r3
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9b6:	69b8      	ldr	r0, [r7, #24]
 800b9b8:	f000 f8f8 	bl	800bbac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ba28 <pvPortMalloc+0x17c>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	4a18      	ldr	r2, [pc, #96]	; (800ba28 <pvPortMalloc+0x17c>)
 800b9c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9ca:	4b17      	ldr	r3, [pc, #92]	; (800ba28 <pvPortMalloc+0x17c>)
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	4b18      	ldr	r3, [pc, #96]	; (800ba30 <pvPortMalloc+0x184>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d203      	bcs.n	800b9de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9d6:	4b14      	ldr	r3, [pc, #80]	; (800ba28 <pvPortMalloc+0x17c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a15      	ldr	r2, [pc, #84]	; (800ba30 <pvPortMalloc+0x184>)
 800b9dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	4b10      	ldr	r3, [pc, #64]	; (800ba24 <pvPortMalloc+0x178>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9f2:	f7fe fb97 	bl	800a124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	f003 0307 	and.w	r3, r3, #7
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <pvPortMalloc+0x16a>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60fb      	str	r3, [r7, #12]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <pvPortMalloc+0x168>
	return pvReturn;
 800ba16:	69fb      	ldr	r3, [r7, #28]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3728      	adds	r7, #40	; 0x28
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	2000319c 	.word	0x2000319c
 800ba24:	200031a8 	.word	0x200031a8
 800ba28:	200031a0 	.word	0x200031a0
 800ba2c:	20003194 	.word	0x20003194
 800ba30:	200031a4 	.word	0x200031a4

0800ba34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d048      	beq.n	800bad8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba46:	2308      	movs	r3, #8
 800ba48:	425b      	negs	r3, r3
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	4b21      	ldr	r3, [pc, #132]	; (800bae0 <vPortFree+0xac>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10a      	bne.n	800ba78 <vPortFree+0x44>
	__asm volatile
 800ba62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	60fb      	str	r3, [r7, #12]
}
 800ba74:	bf00      	nop
 800ba76:	e7fe      	b.n	800ba76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00a      	beq.n	800ba96 <vPortFree+0x62>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	60bb      	str	r3, [r7, #8]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <vPortFree+0xac>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d019      	beq.n	800bad8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d115      	bne.n	800bad8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	4b0b      	ldr	r3, [pc, #44]	; (800bae0 <vPortFree+0xac>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	43db      	mvns	r3, r3
 800bab6:	401a      	ands	r2, r3
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800babc:	f7fe fb24 	bl	800a108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	4b07      	ldr	r3, [pc, #28]	; (800bae4 <vPortFree+0xb0>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4413      	add	r3, r2
 800baca:	4a06      	ldr	r2, [pc, #24]	; (800bae4 <vPortFree+0xb0>)
 800bacc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bace:	6938      	ldr	r0, [r7, #16]
 800bad0:	f000 f86c 	bl	800bbac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bad4:	f7fe fb26 	bl	800a124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bad8:	bf00      	nop
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	200031a8 	.word	0x200031a8
 800bae4:	200031a0 	.word	0x200031a0

0800bae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800baf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800baf4:	4b27      	ldr	r3, [pc, #156]	; (800bb94 <prvHeapInit+0xac>)
 800baf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00c      	beq.n	800bb1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3307      	adds	r3, #7
 800bb06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 0307 	bic.w	r3, r3, #7
 800bb0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	4a1f      	ldr	r2, [pc, #124]	; (800bb94 <prvHeapInit+0xac>)
 800bb18:	4413      	add	r3, r2
 800bb1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb20:	4a1d      	ldr	r2, [pc, #116]	; (800bb98 <prvHeapInit+0xb0>)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb26:	4b1c      	ldr	r3, [pc, #112]	; (800bb98 <prvHeapInit+0xb0>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	4413      	add	r3, r2
 800bb32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb34:	2208      	movs	r2, #8
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	1a9b      	subs	r3, r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 0307 	bic.w	r3, r3, #7
 800bb42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4a15      	ldr	r2, [pc, #84]	; (800bb9c <prvHeapInit+0xb4>)
 800bb48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb4a:	4b14      	ldr	r3, [pc, #80]	; (800bb9c <prvHeapInit+0xb4>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb52:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <prvHeapInit+0xb4>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2200      	movs	r2, #0
 800bb58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	1ad2      	subs	r2, r2, r3
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb68:	4b0c      	ldr	r3, [pc, #48]	; (800bb9c <prvHeapInit+0xb4>)
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	4a0a      	ldr	r2, [pc, #40]	; (800bba0 <prvHeapInit+0xb8>)
 800bb76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	4a09      	ldr	r2, [pc, #36]	; (800bba4 <prvHeapInit+0xbc>)
 800bb7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb80:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <prvHeapInit+0xc0>)
 800bb82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb86:	601a      	str	r2, [r3, #0]
}
 800bb88:	bf00      	nop
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bc80      	pop	{r7}
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	20001194 	.word	0x20001194
 800bb98:	20003194 	.word	0x20003194
 800bb9c:	2000319c 	.word	0x2000319c
 800bba0:	200031a4 	.word	0x200031a4
 800bba4:	200031a0 	.word	0x200031a0
 800bba8:	200031a8 	.word	0x200031a8

0800bbac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbb4:	4b27      	ldr	r3, [pc, #156]	; (800bc54 <prvInsertBlockIntoFreeList+0xa8>)
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	e002      	b.n	800bbc0 <prvInsertBlockIntoFreeList+0x14>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d8f7      	bhi.n	800bbba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d108      	bne.n	800bbee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	441a      	add	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	441a      	add	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d118      	bne.n	800bc34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	4b14      	ldr	r3, [pc, #80]	; (800bc58 <prvInsertBlockIntoFreeList+0xac>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d00d      	beq.n	800bc2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	441a      	add	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e008      	b.n	800bc3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc2a:	4b0b      	ldr	r3, [pc, #44]	; (800bc58 <prvInsertBlockIntoFreeList+0xac>)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	e003      	b.n	800bc3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d002      	beq.n	800bc4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc4a:	bf00      	nop
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bc80      	pop	{r7}
 800bc52:	4770      	bx	lr
 800bc54:	20003194 	.word	0x20003194
 800bc58:	2000319c 	.word	0x2000319c

0800bc5c <Encoder_Thread>:
  .stack_size = 64 * 4,
  .priority = (osPriority_t) osPriorityHigh4,
};

void Encoder_Thread(void* arg)
{
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	Encoder_HandlerStruct* Encoder = (Encoder_HandlerStruct*) arg;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	617b      	str	r3, [r7, #20]
	uint32_t startTime;
	int delayTime;
	while(1)
	{
		if(!Encoder->isEnable)
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10a      	bne.n	800bc88 <Encoder_Thread+0x2c>
		{
			HAL_TIM_Encoder_Stop(Encoder->EncoderTIM, TIM_CHANNEL_ALL);
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	213c      	movs	r1, #60	; 0x3c
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fa fd51 	bl	8006720 <HAL_TIM_Encoder_Stop>
			osThreadSuspend(Encoder->readTh);
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fb fd94 	bl	80077b0 <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 800bc88:	f7fb fc84 	bl	8007594 <osKernelGetTickCount>
 800bc8c:	6138      	str	r0, [r7, #16]
		Encoder_Run(Encoder);
 800bc8e:	6978      	ldr	r0, [r7, #20]
 800bc90:	f000 f86d 	bl	800bd6e <Encoder_Run>
		delayTime = Encoder->interval - (osKernelGetTickCount() - startTime);
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	685c      	ldr	r4, [r3, #4]
 800bc98:	f7fb fc7c 	bl	8007594 <osKernelGetTickCount>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	4423      	add	r3, r4
 800bca4:	60fb      	str	r3, [r7, #12]
		osDelay(delayTime);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7fb fde9 	bl	8007880 <osDelay>
		if(!Encoder->isEnable)
 800bcae:	e7db      	b.n	800bc68 <Encoder_Thread+0xc>

0800bcb0 <Encoder_Init>:
	}
}
void Encoder_Init(Encoder_HandlerStruct* Encoder, TIM_HandleTypeDef* EncTIM, float LPF_Beta, uint32_t interval)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
	memset(Encoder,0, sizeof(Encoder_HandlerStruct));
 800bcbe:	222c      	movs	r2, #44	; 0x2c
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f001 fcce 	bl	800d664 <memset>
	Encoder->readTh = osThreadNew(Encoder_Thread, Encoder, &EncoderTask_attributes);
 800bcc8:	4a0d      	ldr	r2, [pc, #52]	; (800bd00 <Encoder_Init+0x50>)
 800bcca:	68f9      	ldr	r1, [r7, #12]
 800bccc:	480d      	ldr	r0, [pc, #52]	; (800bd04 <Encoder_Init+0x54>)
 800bcce:	f7fb fc89 	bl	80075e4 <osThreadNew>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	621a      	str	r2, [r3, #32]
	Encoder->EncLock = osMutexNew(NULL);
 800bcd8:	2000      	movs	r0, #0
 800bcda:	f7fb ff63 	bl	8007ba4 <osMutexNew>
 800bcde:	4602      	mov	r2, r0
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder->LPF_Beta = LPF_Beta;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	61da      	str	r2, [r3, #28]
	Encoder->interval = interval;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	605a      	str	r2, [r3, #4]
	Encoder->EncoderTIM = EncTIM;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	601a      	str	r2, [r3, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	0800e888 	.word	0x0800e888
 800bd04:	0800bc5d 	.word	0x0800bc5d

0800bd08 <Encoder_Start>:



void Encoder_Start(Encoder_HandlerStruct* Encoder, uint8_t State)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
	Encoder->isEnable = State;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	78fa      	ldrb	r2, [r7, #3]
 800bd18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	if(State)
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00a      	beq.n	800bd38 <Encoder_Start+0x30>
	{
		HAL_TIM_Encoder_Start(Encoder->EncoderTIM, TIM_CHANNEL_ALL);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	213c      	movs	r1, #60	; 0x3c
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fa fc6b 	bl	8006604 <HAL_TIM_Encoder_Start>
		osThreadResume(Encoder->readTh);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fb fd70 	bl	8007818 <osThreadResume>
	}
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <Encoder_GetCount>:


float Encoder_GetCount(Encoder_HandlerStruct* Encoder)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	osMutexAcquire(Encoder->EncLock, 2);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4c:	2102      	movs	r1, #2
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fb ffc2 	bl	8007cd8 <osMutexAcquire>
	float cnt = Encoder->CurrentCnt;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	60fb      	str	r3, [r7, #12]
	osMutexRelease(Encoder->EncLock);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fc f818 	bl	8007d94 <osMutexRelease>

	return cnt;
 800bd64:	68fb      	ldr	r3, [r7, #12]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <Encoder_Run>:



void Encoder_Run(Encoder_HandlerStruct* Encoder)
{
 800bd6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd70:	b085      	sub	sp, #20
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
	int16_t Cnt = Encoder->EncoderTIM->Instance->CNT;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7e:	81fb      	strh	r3, [r7, #14]
	osMutexAcquire(Encoder->EncLock, 0);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd84:	2100      	movs	r1, #0
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fb ffa6 	bl	8007cd8 <osMutexAcquire>
	Encoder->CurrentCnt = Cnt;
 800bd8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7f4 febd 	bl	8000b10 <__aeabi_i2f>
 800bd96:	4602      	mov	r2, r0
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	609a      	str	r2, [r3, #8]
	Encoder->CurrentSpd -= Encoder->LPF_Beta*(Encoder->CurrentSpd - Cnt);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68dc      	ldr	r4, [r3, #12]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	69dd      	ldr	r5, [r3, #28]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68de      	ldr	r6, [r3, #12]
 800bda8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7f4 feaf 	bl	8000b10 <__aeabi_i2f>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	f7f4 fdf4 	bl	80009a4 <__aeabi_fsub>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f7f4 fef9 	bl	8000bb8 <__aeabi_fmul>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f7f4 fdea 	bl	80009a4 <__aeabi_fsub>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	60da      	str	r2, [r3, #12]
	Encoder->EncoderTIM->Instance->CNT = 0;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2200      	movs	r2, #0
 800bde0:	625a      	str	r2, [r3, #36]	; 0x24
	if(Encoder->EnCntTraveled)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	7d1b      	ldrb	r3, [r3, #20]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d012      	beq.n	800be10 <Encoder_Run+0xa2>
	{
		Encoder->Travelled += Encoder->CurrentCnt;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7f4 fe8e 	bl	8000b10 <__aeabi_i2f>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	f7f4 fdd3 	bl	80009a8 <__addsf3>
 800be02:	4603      	mov	r3, r0
 800be04:	4618      	mov	r0, r3
 800be06:	f7f5 f89d 	bl	8000f44 <__aeabi_f2iz>
 800be0a:	4602      	mov	r2, r0
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	619a      	str	r2, [r3, #24]
	}
	osMutexRelease(Encoder->EncLock);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be14:	4618      	mov	r0, r3
 800be16:	f7fb ffbd 	bl	8007d94 <osMutexRelease>
}
 800be1a:	bf00      	nop
 800be1c:	3714      	adds	r7, #20
 800be1e:	46bd      	mov	sp, r7
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800be24 <Encoder_GetSpeed_PPS>:


float Encoder_GetSpeed_PPS(Encoder_HandlerStruct* Encoder)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	return (Encoder_GetCount(Encoder)/Encoder->interval) * 1000; // Pulse Per Sec
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7ff ff87 	bl	800bd40 <Encoder_GetCount>
 800be32:	4604      	mov	r4, r0
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f4 fe65 	bl	8000b08 <__aeabi_ui2f>
 800be3e:	4603      	mov	r3, r0
 800be40:	4619      	mov	r1, r3
 800be42:	4620      	mov	r0, r4
 800be44:	f7f4 ff6c 	bl	8000d20 <__aeabi_fdiv>
 800be48:	4603      	mov	r3, r0
 800be4a:	4904      	ldr	r1, [pc, #16]	; (800be5c <Encoder_GetSpeed_PPS+0x38>)
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7f4 feb3 	bl	8000bb8 <__aeabi_fmul>
 800be52:	4603      	mov	r3, r0
}
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd90      	pop	{r4, r7, pc}
 800be5c:	447a0000 	.word	0x447a0000

0800be60 <Encoder_GetSpeed_MPS>:

float Encoder_GetSpeed_MPS(Encoder_HandlerStruct* Encoder)
{
 800be60:	b590      	push	{r4, r7, lr}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	return Encoder_GetSpeed_PPS(Encoder)/ Encoder->PulsePerMeter;
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff ffdb 	bl	800be24 <Encoder_GetSpeed_PPS>
 800be6e:	4604      	mov	r4, r0
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	4618      	mov	r0, r3
 800be76:	f7f4 fe47 	bl	8000b08 <__aeabi_ui2f>
 800be7a:	4603      	mov	r3, r0
 800be7c:	4619      	mov	r1, r3
 800be7e:	4620      	mov	r0, r4
 800be80:	f7f4 ff4e 	bl	8000d20 <__aeabi_fdiv>
 800be84:	4603      	mov	r3, r0
}
 800be86:	4618      	mov	r0, r3
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd90      	pop	{r4, r7, pc}
	...

0800be90 <Engine_ConfigTimer>:

//uint16_t	Engine_SpeedMax = Speed_Max_Default;
//uint8_t		Engine_MoveStatus = 0;

int Engine_ConfigTimer(Engine_HandlerStruct* Engine, TIM_HandleTypeDef* htim, uint32_t TIM_Channel)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
	Engine->PWM_TIM_Channel = TIM_Channel;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	605a      	str	r2, [r3, #4]
	Engine->PWM_TIM = htim;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	601a      	str	r2, [r3, #0]
	Engine->PWM_TIM->Instance->PSC = 0;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2200      	movs	r2, #0
 800beb0:	629a      	str	r2, [r3, #40]	; 0x28
	Engine->PWM_TIM->Instance->ARR = HAL_RCC_GetHCLKFreq()/Engine_TIM_MaxPulse - 1;
 800beb2:	f7fa f8e9 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 800beb6:	4603      	mov	r3, r0
 800beb8:	4a0a      	ldr	r2, [pc, #40]	; (800bee4 <Engine_ConfigTimer+0x54>)
 800beba:	fba2 2303 	umull	r2, r3, r2, r3
 800bebe:	0b5a      	lsrs	r2, r3, #13
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3a01      	subs	r2, #1
 800bec8:	62da      	str	r2, [r3, #44]	; 0x2c

	return HAL_TIM_PWM_Start(Engine->PWM_TIM, Engine->PWM_TIM_Channel);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	4619      	mov	r1, r3
 800bed4:	4610      	mov	r0, r2
 800bed6:	f7fa fa51 	bl	800637c <HAL_TIM_PWM_Start>
 800beda:	4603      	mov	r3, r0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	d1b71759 	.word	0xd1b71759

0800bee8 <Engine_ConfigControlPin>:

int Engine_ConfigControlPin(Engine_HandlerStruct* Engine, GPIO_HandlerStruct BrakePin, GPIO_HandlerStruct DirectionPin, GPIO_HandlerStruct GasEnPin)
{
 800bee8:	b082      	sub	sp, #8
 800beea:	b480      	push	{r7}
 800beec:	b085      	sub	sp, #20
 800beee:	af00      	add	r7, sp, #0
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	1d38      	adds	r0, r7, #4
 800bef4:	e880 0006 	stmia.w	r0, {r1, r2}
 800bef8:	61fb      	str	r3, [r7, #28]
	Engine->BrakePin = BrakePin;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3310      	adds	r3, #16
 800befe:	1d3a      	adds	r2, r7, #4
 800bf00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf04:	e883 0003 	stmia.w	r3, {r0, r1}
	Engine->DirectionPin = DirectionPin;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	f107 021c 	add.w	r2, r7, #28
 800bf10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf14:	e883 0003 	stmia.w	r3, {r0, r1}
	Engine->GasEnablePin = GasEnPin;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	3318      	adds	r3, #24
 800bf1c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800bf20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf24:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	b002      	add	sp, #8
 800bf34:	4770      	bx	lr

0800bf36 <Engine_Init>:

int Engine_Init(Engine_HandlerStruct* Engine, int16_t NegLimit, int16_t PosLimit)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b082      	sub	sp, #8
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	807b      	strh	r3, [r7, #2]
 800bf42:	4613      	mov	r3, r2
 800bf44:	803b      	strh	r3, [r7, #0]
	memset(Engine,0,sizeof(Engine_HandlerStruct));
 800bf46:	2228      	movs	r2, #40	; 0x28
 800bf48:	2100      	movs	r1, #0
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f001 fb8a 	bl	800d664 <memset>
	Engine->NegLimit = NegLimit;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	887a      	ldrh	r2, [r7, #2]
 800bf54:	841a      	strh	r2, [r3, #32]
	Engine->PosLimit = PosLimit;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	883a      	ldrh	r2, [r7, #0]
 800bf5a:	845a      	strh	r2, [r3, #34]	; 0x22

	return 0;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <Engine_SetSpeed>:

int Engine_SetSpeed(Engine_HandlerStruct* Engine, int16_t PulseVal)
{
 800bf66:	b580      	push	{r7, lr}
 800bf68:	b082      	sub	sp, #8
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	807b      	strh	r3, [r7, #2]
	if(PulseVal > Engine->PosLimit)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800bf78:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	dd03      	ble.n	800bf88 <Engine_SetSpeed+0x22>
	{
		PulseVal = Engine->PosLimit;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bf84:	807b      	strh	r3, [r7, #2]
 800bf86:	e009      	b.n	800bf9c <Engine_SetSpeed+0x36>
	}else if(PulseVal < Engine->NegLimit)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800bf8e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	da02      	bge.n	800bf9c <Engine_SetSpeed+0x36>
	{
		PulseVal = Engine->NegLimit;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	8c1b      	ldrh	r3, [r3, #32]
 800bf9a:	807b      	strh	r3, [r7, #2]
	}
	if (PulseVal == 0)
 800bf9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d104      	bne.n	800bfae <Engine_SetSpeed+0x48>
	{
		Engine_Brake(Engine, ENGINE_BRAKE_SET);
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f89a 	bl	800c0e0 <Engine_Brake>
 800bfac:	e093      	b.n	800c0d6 <Engine_SetSpeed+0x170>

	}

	else if (PulseVal > 0)
 800bfae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	dd42      	ble.n	800c03c <Engine_SetSpeed+0xd6>
	{
		if((Engine->ForbidStatus & Engine_Forbid_Forward) == 0)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d136      	bne.n	800c032 <Engine_SetSpeed+0xcc>
		{
			GPIO_WritePin(Engine->DirectionPin, Engine_Forward_GPIOLevel);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	3308      	adds	r3, #8
 800bfca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bfce:	f000 fede 	bl	800cd8e <GPIO_WritePin>
			Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f883 	bl	800c0e0 <Engine_Brake>
			__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, PulseVal);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <Engine_SetSpeed+0x8a>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bfec:	635a      	str	r2, [r3, #52]	; 0x34
 800bfee:	e01b      	b.n	800c028 <Engine_SetSpeed+0xc2>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	d106      	bne.n	800c006 <Engine_SetSpeed+0xa0>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c002:	6393      	str	r3, [r2, #56]	; 0x38
 800c004:	e010      	b.n	800c028 <Engine_SetSpeed+0xc2>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	2b08      	cmp	r3, #8
 800c00c:	d106      	bne.n	800c01c <Engine_SetSpeed+0xb6>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c018:	63d3      	str	r3, [r2, #60]	; 0x3c
 800c01a:	e005      	b.n	800c028 <Engine_SetSpeed+0xc2>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c026:	6413      	str	r3, [r2, #64]	; 0x40
			Engine->MoveState = Engine_MoveState_Forward;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800c030:	e051      	b.n	800c0d6 <Engine_SetSpeed+0x170>
		}
		else
		{
			Engine_Brake(Engine, ENGINE_BRAKE_SET);
 800c032:	2100      	movs	r1, #0
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 f853 	bl	800c0e0 <Engine_Brake>
 800c03a:	e04c      	b.n	800c0d6 <Engine_SetSpeed+0x170>
		}

	}
	else if(PulseVal < 0)
 800c03c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c040:	2b00      	cmp	r3, #0
 800c042:	da48      	bge.n	800c0d6 <Engine_SetSpeed+0x170>
	{
		if((Engine->ForbidStatus & Engine_Forbid_Backward) == 0)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c04a:	f003 0302 	and.w	r3, r3, #2
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d13d      	bne.n	800c0ce <Engine_SetSpeed+0x168>
		{
			GPIO_WritePin(Engine->DirectionPin, !Engine_Forward_GPIOLevel);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	3308      	adds	r3, #8
 800c058:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c05c:	f000 fe97 	bl	800cd8e <GPIO_WritePin>
			Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 800c060:	2101      	movs	r1, #1
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f83c 	bl	800c0e0 <Engine_Brake>
			__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, -PulseVal);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d107      	bne.n	800c080 <Engine_SetSpeed+0x11a>
 800c070:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c074:	425a      	negs	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	635a      	str	r2, [r3, #52]	; 0x34
 800c07e:	e021      	b.n	800c0c4 <Engine_SetSpeed+0x15e>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	2b04      	cmp	r3, #4
 800c086:	d108      	bne.n	800c09a <Engine_SetSpeed+0x134>
 800c088:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c08c:	4259      	negs	r1, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	460b      	mov	r3, r1
 800c096:	6393      	str	r3, [r2, #56]	; 0x38
 800c098:	e014      	b.n	800c0c4 <Engine_SetSpeed+0x15e>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	2b08      	cmp	r3, #8
 800c0a0:	d108      	bne.n	800c0b4 <Engine_SetSpeed+0x14e>
 800c0a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0a6:	4259      	negs	r1, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 800c0b2:	e007      	b.n	800c0c4 <Engine_SetSpeed+0x15e>
 800c0b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0b8:	4259      	negs	r1, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	6413      	str	r3, [r2, #64]	; 0x40
			Engine->MoveState = Engine_MoveState_Backward;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2203      	movs	r2, #3
 800c0c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800c0cc:	e003      	b.n	800c0d6 <Engine_SetSpeed+0x170>
		}
		else
		{
			Engine_Brake(Engine, ENGINE_BRAKE_SET);
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f805 	bl	800c0e0 <Engine_Brake>
		}

	}
	return 0;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <Engine_Brake>:

int Engine_Brake(Engine_HandlerStruct* Engine, Engine_Brake_State State)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	70fb      	strb	r3, [r7, #3]
	if (State == ENGINE_BRAKE_SET)
 800c0ec:	78fb      	ldrb	r3, [r7, #3]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d135      	bne.n	800c15e <Engine_Brake+0x7e>
	{
		__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, 0);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <Engine_Brake+0x26>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2200      	movs	r2, #0
 800c102:	635a      	str	r2, [r3, #52]	; 0x34
 800c104:	e018      	b.n	800c138 <Engine_Brake+0x58>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	d105      	bne.n	800c11a <Engine_Brake+0x3a>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	2300      	movs	r3, #0
 800c116:	6393      	str	r3, [r2, #56]	; 0x38
 800c118:	e00e      	b.n	800c138 <Engine_Brake+0x58>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	2b08      	cmp	r3, #8
 800c120:	d105      	bne.n	800c12e <Engine_Brake+0x4e>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	2300      	movs	r3, #0
 800c12a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800c12c:	e004      	b.n	800c138 <Engine_Brake+0x58>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	2300      	movs	r3, #0
 800c136:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_WritePin(Engine->BrakePin, Engine_Brake_GPIOLevel);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	3310      	adds	r3, #16
 800c13e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c142:	f000 fe24 	bl	800cd8e <GPIO_WritePin>
		GPIO_WritePin(Engine->GasEnablePin, !Engine_GasEn_GPIOLevel);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	3318      	adds	r3, #24
 800c14c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c150:	f000 fe1d 	bl	800cd8e <GPIO_WritePin>
		Engine->MoveState = Engine_MoveState_Stop;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800c15c:	e00d      	b.n	800c17a <Engine_Brake+0x9a>
	}
	else
	{
		GPIO_WritePin(Engine->BrakePin, !Engine_Brake_GPIOLevel);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	3310      	adds	r3, #16
 800c164:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c168:	f000 fe11 	bl	800cd8e <GPIO_WritePin>
		GPIO_WritePin(Engine->GasEnablePin, Engine_GasEn_GPIOLevel);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	3318      	adds	r3, #24
 800c172:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c176:	f000 fe0a 	bl	800cd8e <GPIO_WritePin>
	}

	return 0;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <Engine_inRange>:
//	printf("ForbidRun \r\n");
	return 0;
}

int Engine_inRange(Engine_HandlerStruct* Engine, int Val)
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
	return (Val > Engine->NegLimit) && (Val < Engine->PosLimit);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800c194:	461a      	mov	r2, r3
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	4293      	cmp	r3, r2
 800c19a:	dd08      	ble.n	800c1ae <Engine_inRange+0x2a>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	da01      	bge.n	800c1ae <Engine_inRange+0x2a>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e000      	b.n	800c1b0 <Engine_inRange+0x2c>
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bc80      	pop	{r7}
 800c1b8:	4770      	bx	lr

0800c1ba <Write16>:
	return ((Value[0] << 8) | Value[1]);
}


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b088      	sub	sp, #32
 800c1be:	af04      	add	r7, sp, #16
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	70fb      	strb	r3, [r7, #3]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 800c1ca:	883b      	ldrh	r3, [r7, #0]
 800c1cc:	0a1b      	lsrs	r3, r3, #8
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800c1d4:	883b      	ldrh	r3, [r7, #0]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	737b      	strb	r3, [r7, #13]
	INA219_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, (uint8_t*)addr, 2, 100);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6818      	ldr	r0, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	791b      	ldrb	r3, [r3, #4]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	b299      	uxth	r1, r3
 800c1e8:	78fb      	ldrb	r3, [r7, #3]
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	2364      	movs	r3, #100	; 0x64
 800c1ee:	9302      	str	r3, [sp, #8]
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	f107 030c 	add.w	r3, r7, #12
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	f000 fdf5 	bl	800cdea <I2C_OS_MEM_Write_IT>
}
 800c200:	bf00      	nop
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <INA219_Reset>:
	int16_t result = Read16(ina219, INA219_REG_POWER);

	return (result * ina219->powerMultiplier_mW );
}
void INA219_Reset(INA219_t *ina219)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 800c210:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c214:	2100      	movs	r1, #0
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff ffcf 	bl	800c1ba <Write16>
	osDelay(1);
 800c21c:	2001      	movs	r0, #1
 800c21e:	f7fb fb2f 	bl	8007880 <osDelay>
}
 800c222:	bf00      	nop
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	460b      	mov	r3, r1
 800c234:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800c236:	887b      	ldrh	r3, [r7, #2]
 800c238:	461a      	mov	r2, r3
 800c23a:	2105      	movs	r1, #5
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff ffbc 	bl	800c1ba <Write16>
}
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b082      	sub	sp, #8
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	460b      	mov	r3, r1
 800c254:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800c256:	887b      	ldrh	r3, [r7, #2]
 800c258:	461a      	mov	r2, r3
 800c25a:	2100      	movs	r1, #0
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f7ff ffac 	bl	800c1ba <Write16>
}
 800c262:	bf00      	nop
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <INA219_setCalibration_32V_2A>:
/**
 *	Calib for 0.1 Ohm Shunt Resistor
 */
void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800c274:	f643 139f 	movw	r3, #14751	; 0x399f
 800c278:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219->calibrationValue = 4096;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c280:	80da      	strh	r2, [r3, #6]
//	ina219->calibrationValue = 6710<<1;

	ina219->currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a0a      	ldr	r2, [pc, #40]	; (800c2b0 <INA219_setCalibration_32V_2A+0x44>)
 800c286:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c28e:	60da      	str	r2, [r3, #12]


	INA219_setCalibration(ina219, ina219->calibrationValue);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	88db      	ldrh	r3, [r3, #6]
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7ff ffc7 	bl	800c22a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800c29c:	89fb      	ldrh	r3, [r7, #14]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff ffd2 	bl	800c24a <INA219_setConfig>
}
 800c2a6:	bf00      	nop
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	41200000 	.word	0x41200000

0800c2b4 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, INA219_I2C_Handle *i2c, uint8_t Address)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	79fa      	ldrb	r2, [r7, #7]
 800c2cc:	711a      	strb	r2, [r3, #4]

	ina219->currentDivider_mA = 0;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	609a      	str	r2, [r3, #8]
	ina219->powerMultiplier_mW = 0;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f04f 0200 	mov.w	r2, #0
 800c2dc:	60da      	str	r2, [r3, #12]

	uint8_t ina219_isReady = INA219_DeviceReady(i2c, (Address << 1), 3, 2);
 800c2de:	79fb      	ldrb	r3, [r7, #7]
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	b299      	uxth	r1, r3
 800c2e6:	2302      	movs	r3, #2
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	68b8      	ldr	r0, [r7, #8]
 800c2ec:	f000 fdce 	bl	800ce8c <I2C_OS_IsDeviceReady>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d107      	bne.n	800c30a <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f7ff ff84 	bl	800c208 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	f7ff ffb3 	bl	800c26c <INA219_setCalibration_32V_2A>

		return HAL_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	e000      	b.n	800c30c <INA219_Init+0x58>
	}

	else
	{
		return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
	}
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <SpeedController_RunTh>:
#include "SpeedController.h"

const osThreadAttr_t SpeedControlTask_attributes = { .name = "SpdCtrl",
		.stack_size = 128 * 4, .priority = (osPriority_t) osPriorityHigh3, };

void SpeedController_RunTh(void *arg) {
 800c314:	b590      	push	{r4, r7, lr}
 800c316:	b087      	sub	sp, #28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
	SpeedControler_HandlerStruct *Controller =
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	617b      	str	r3, [r7, #20]
			(SpeedControler_HandlerStruct*) arg;
	uint32_t startTime;
	int delayTime;
	while (1) {
		if (!Controller->isEnable) {
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d104      	bne.n	800c334 <SpeedController_RunTh+0x20>
			osThreadSuspend(Controller->RunTh);
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fb fa3e 	bl	80077b0 <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 800c334:	f7fb f92e 	bl	8007594 <osKernelGetTickCount>
 800c338:	6138      	str	r0, [r7, #16]
		SpeedController_Run(Controller);
 800c33a:	6978      	ldr	r0, [r7, #20]
 800c33c:	f000 f85b 	bl	800c3f6 <SpeedController_Run>
		delayTime = Controller->dt - (osKernelGetTickCount() - startTime);
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	695c      	ldr	r4, [r3, #20]
 800c344:	f7fb f926 	bl	8007594 <osKernelGetTickCount>
 800c348:	4602      	mov	r2, r0
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	1a9b      	subs	r3, r3, r2
 800c34e:	4423      	add	r3, r4
 800c350:	60fb      	str	r3, [r7, #12]
		osDelay((delayTime > 0) ? delayTime : 0);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fb fa91 	bl	8007880 <osDelay>
		if (!Controller->isEnable) {
 800c35e:	e7df      	b.n	800c320 <SpeedController_RunTh+0xc>

0800c360 <SpeedController_Init>:
	}
}

void SpeedController_Init(SpeedControler_HandlerStruct *Controller,
		Encoder_HandlerStruct *Encoder, Engine_HandlerStruct *Engine,
		uint32_t interval) {
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	603b      	str	r3, [r7, #0]
	memset(Controller, 0, sizeof(SpeedControler_HandlerStruct));
 800c36e:	2230      	movs	r2, #48	; 0x30
 800c370:	2100      	movs	r1, #0
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f001 f976 	bl	800d664 <memset>
	Controller->Engine = Engine;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	605a      	str	r2, [r3, #4]
	Controller->Encoder = Encoder;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	601a      	str	r2, [r3, #0]

	Controller->RunTh = osThreadNew(SpeedController_RunTh, Controller,
 800c384:	4a08      	ldr	r2, [pc, #32]	; (800c3a8 <SpeedController_Init+0x48>)
 800c386:	68f9      	ldr	r1, [r7, #12]
 800c388:	4808      	ldr	r0, [pc, #32]	; (800c3ac <SpeedController_Init+0x4c>)
 800c38a:	f7fb f92b 	bl	80075e4 <osThreadNew>
 800c38e:	4602      	mov	r2, r0
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	629a      	str	r2, [r3, #40]	; 0x28
			&SpeedControlTask_attributes);
	Controller->dt = interval;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	615a      	str	r2, [r3, #20]
	Controller->PulsePerMeter = 2927;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4a04      	ldr	r2, [pc, #16]	; (800c3b0 <SpeedController_Init+0x50>)
 800c39e:	625a      	str	r2, [r3, #36]	; 0x24

}
 800c3a0:	bf00      	nop
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	0800e8ac 	.word	0x0800e8ac
 800c3ac:	0800c315 	.word	0x0800c315
 800c3b0:	4536f000 	.word	0x4536f000

0800c3b4 <SpeedController_Start>:

void SpeedController_Start(SpeedControler_HandlerStruct *Controller,
		uint8_t State) {
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	70fb      	strb	r3, [r7, #3]
	if (State != Controller->isEnable) {
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c3c6:	78fa      	ldrb	r2, [r7, #3]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d006      	beq.n	800c3da <SpeedController_Start+0x26>
		SpeedController_ClearErr(Controller);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f8d4 	bl	800c57a <SpeedController_ClearErr>
		Controller->isEnable = State;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	78fa      	ldrb	r2, [r7, #3]
 800c3d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if (Controller->isEnable) {
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d004      	beq.n	800c3ee <SpeedController_Start+0x3a>
		osThreadResume(Controller->RunTh);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fb fa15 	bl	8007818 <osThreadResume>
	}
}
 800c3ee:	bf00      	nop
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <SpeedController_Run>:

__weak void SpeedController_Run(SpeedControler_HandlerStruct *Controller) {
 800c3f6:	b5b0      	push	{r4, r5, r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
//	if (Controller->SetPoint == 0) {
//		Engine_SetSpeed(Controller->Engine, 0);
//	}
	float Cur_Error = (Controller->SetPoint
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	699c      	ldr	r4, [r3, #24]
			- SpeedController_GetSpeed(Controller)) * Controller->dt;
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f8e3 	bl	800c5ce <SpeedController_GetSpeed>
 800c408:	4603      	mov	r3, r0
 800c40a:	4619      	mov	r1, r3
 800c40c:	4620      	mov	r0, r4
 800c40e:	f7f4 fac9 	bl	80009a4 <__aeabi_fsub>
 800c412:	4603      	mov	r3, r0
 800c414:	461c      	mov	r4, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f4 fb74 	bl	8000b08 <__aeabi_ui2f>
 800c420:	4603      	mov	r3, r0
	float Cur_Error = (Controller->SetPoint
 800c422:	4619      	mov	r1, r3
 800c424:	4620      	mov	r0, r4
 800c426:	f7f4 fbc7 	bl	8000bb8 <__aeabi_fmul>
 800c42a:	4603      	mov	r3, r0
 800c42c:	60bb      	str	r3, [r7, #8]
	Controller->Integration_Error += Cur_Error;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	68b9      	ldr	r1, [r7, #8]
 800c434:	4618      	mov	r0, r3
 800c436:	f7f4 fab7 	bl	80009a8 <__addsf3>
 800c43a:	4603      	mov	r3, r0
 800c43c:	461a      	mov	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	621a      	str	r2, [r3, #32]
	float duty = Controller->Kp * Cur_Error
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	68b9      	ldr	r1, [r7, #8]
 800c448:	4618      	mov	r0, r3
 800c44a:	f7f4 fbb5 	bl	8000bb8 <__aeabi_fmul>
 800c44e:	4603      	mov	r3, r0
 800c450:	461c      	mov	r4, r3
			+ Controller->Ki * Controller->Integration_Error
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68da      	ldr	r2, [r3, #12]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	4619      	mov	r1, r3
 800c45c:	4610      	mov	r0, r2
 800c45e:	f7f4 fbab 	bl	8000bb8 <__aeabi_fmul>
 800c462:	4603      	mov	r3, r0
 800c464:	4619      	mov	r1, r3
 800c466:	4620      	mov	r0, r4
 800c468:	f7f4 fa9e 	bl	80009a8 <__addsf3>
 800c46c:	4603      	mov	r3, r0
 800c46e:	461d      	mov	r5, r3
			+ Controller->Kd * (Cur_Error - Controller->Prev_Error)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	691c      	ldr	r4, [r3, #16]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	69db      	ldr	r3, [r3, #28]
 800c478:	4619      	mov	r1, r3
 800c47a:	68b8      	ldr	r0, [r7, #8]
 800c47c:	f7f4 fa92 	bl	80009a4 <__aeabi_fsub>
 800c480:	4603      	mov	r3, r0
 800c482:	4619      	mov	r1, r3
 800c484:	4620      	mov	r0, r4
 800c486:	f7f4 fb97 	bl	8000bb8 <__aeabi_fmul>
 800c48a:	4603      	mov	r3, r0
 800c48c:	461c      	mov	r4, r3
					/ Controller->dt;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	4618      	mov	r0, r3
 800c494:	f7f4 fb38 	bl	8000b08 <__aeabi_ui2f>
 800c498:	4603      	mov	r3, r0
 800c49a:	4619      	mov	r1, r3
 800c49c:	4620      	mov	r0, r4
 800c49e:	f7f4 fc3f 	bl	8000d20 <__aeabi_fdiv>
 800c4a2:	4603      	mov	r3, r0
	float duty = Controller->Kp * Cur_Error
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	f7f4 fa7e 	bl	80009a8 <__addsf3>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	60fb      	str	r3, [r7, #12]

	Controller->Prev_Error = Cur_Error;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	61da      	str	r2, [r3, #28]
	if (duty < 0)
 800c4b6:	f04f 0100 	mov.w	r1, #0
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7f4 fd1a 	bl	8000ef4 <__aeabi_fcmplt>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <SpeedController_Run+0xd6>
		duty = 0;
 800c4c6:	f04f 0300 	mov.w	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]
//		Encoder_Start(Controller->Encoder, 0);
//		osDelay(2000);
//		Encoder_Start(Controller->Encoder, 1);
////		Engine_Brake(Controller->Engine, ENGINE_BRAKE_CLEAR);
//	}
	if (!Engine_inRange(Controller->Engine, duty)) {
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685c      	ldr	r4, [r3, #4]
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f7f4 fd37 	bl	8000f44 <__aeabi_f2iz>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f7ff fe52 	bl	800c184 <Engine_inRange>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d109      	bne.n	800c4fa <SpeedController_Run+0x104>
		Controller->Integration_Error -= Cur_Error;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	68b9      	ldr	r1, [r7, #8]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7f4 fa59 	bl	80009a4 <__aeabi_fsub>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	621a      	str	r2, [r3, #32]
	}
	if (duty > Controller->Engine->PosLimit) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800c502:	4618      	mov	r0, r3
 800c504:	f7f4 fb04 	bl	8000b10 <__aeabi_i2f>
 800c508:	4603      	mov	r3, r0
 800c50a:	4619      	mov	r1, r3
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7f4 fd0f 	bl	8000f30 <__aeabi_fcmpgt>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d009      	beq.n	800c52c <SpeedController_Run+0x136>
		duty = Controller->Engine->PosLimit;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800c520:	4618      	mov	r0, r3
 800c522:	f7f4 faf5 	bl	8000b10 <__aeabi_i2f>
 800c526:	4603      	mov	r3, r0
 800c528:	60fb      	str	r3, [r7, #12]
 800c52a:	e017      	b.n	800c55c <SpeedController_Run+0x166>
	} else if (duty < Controller->Engine->NegLimit) {
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800c534:	4618      	mov	r0, r3
 800c536:	f7f4 faeb 	bl	8000b10 <__aeabi_i2f>
 800c53a:	4603      	mov	r3, r0
 800c53c:	4619      	mov	r1, r3
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f7f4 fcd8 	bl	8000ef4 <__aeabi_fcmplt>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d008      	beq.n	800c55c <SpeedController_Run+0x166>
		duty = Controller->Engine->NegLimit;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800c552:	4618      	mov	r0, r3
 800c554:	f7f4 fadc 	bl	8000b10 <__aeabi_i2f>
 800c558:	4603      	mov	r3, r0
 800c55a:	60fb      	str	r3, [r7, #12]
	}
	Engine_SetSpeed(Controller->Engine, (int16_t) duty);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685c      	ldr	r4, [r3, #4]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f7f4 fcef 	bl	8000f44 <__aeabi_f2iz>
 800c566:	4603      	mov	r3, r0
 800c568:	b21b      	sxth	r3, r3
 800c56a:	4619      	mov	r1, r3
 800c56c:	4620      	mov	r0, r4
 800c56e:	f7ff fcfa 	bl	800bf66 <Engine_SetSpeed>
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bdb0      	pop	{r4, r5, r7, pc}

0800c57a <SpeedController_ClearErr>:

void SpeedController_ClearErr(SpeedControler_HandlerStruct *Controller) {
 800c57a:	b480      	push	{r7}
 800c57c:	b083      	sub	sp, #12
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
	Controller->Integration_Error = 0;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f04f 0200 	mov.w	r2, #0
 800c588:	621a      	str	r2, [r3, #32]
	Controller->Prev_Error = 0;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f04f 0200 	mov.w	r2, #0
 800c590:	61da      	str	r2, [r3, #28]
}
 800c592:	bf00      	nop
 800c594:	370c      	adds	r7, #12
 800c596:	46bd      	mov	sp, r7
 800c598:	bc80      	pop	{r7}
 800c59a:	4770      	bx	lr

0800c59c <SpeedController_SetSpeed>:

void SpeedController_SetSpeed(SpeedControler_HandlerStruct *Controller,
		float newSpeed) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
	if (newSpeed == Controller->SetPoint)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6838      	ldr	r0, [r7, #0]
 800c5ae:	f7f4 fc97 	bl	8000ee0 <__aeabi_fcmpeq>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <SpeedController_SetSpeed+0x2a>
		return;
	Controller->SetPoint = newSpeed;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	619a      	str	r2, [r3, #24]
//	SyncPrintf("Setpoint %f \r\n", newSpeed);
	SpeedController_ClearErr(Controller);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff ffdb 	bl	800c57a <SpeedController_ClearErr>
 800c5c4:	e000      	b.n	800c5c8 <SpeedController_SetSpeed+0x2c>
		return;
 800c5c6:	bf00      	nop
}
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <SpeedController_GetSpeed>:

float SpeedController_GetSpeed(SpeedControler_HandlerStruct *Controller) {
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
	return Encoder_GetSpeed_PPS(Controller->Encoder) / Controller->PulsePerMeter;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff fc22 	bl	800be24 <Encoder_GetSpeed_PPS>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	f7f4 fb99 	bl	8000d20 <__aeabi_fdiv>
 800c5ee:	4603      	mov	r3, r0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3708      	adds	r7, #8
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <SpeedController_SetTunings>:

void SpeedController_SetTunings(SpeedControler_HandlerStruct *Controller,
		float Kp, float Ki, float Kd) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	603b      	str	r3, [r7, #0]
	Controller->Kp = Kp;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	609a      	str	r2, [r3, #8]
	Controller->Ki = Ki;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	60da      	str	r2, [r3, #12]
	Controller->Kd = Kd;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	611a      	str	r2, [r3, #16]
	SpeedController_ClearErr(Controller);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f7ff ffae 	bl	800c57a <SpeedController_ClearErr>

}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}

0800c626 <CANFrame_ClearRcvInfo>:
  .stack_size = 200 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};

static inline void CANFrame_ClearRcvInfo(CANFrame_RcvInfoTypedef* rcvinfo)
{
 800c626:	b580      	push	{r7, lr}
 800c628:	b082      	sub	sp, #8
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
	memset(rcvinfo, 0,sizeof( CANFrame_RcvInfoTypedef));
 800c62e:	223b      	movs	r2, #59	; 0x3b
 800c630:	2100      	movs	r1, #0
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 f816 	bl	800d664 <memset>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <CANFrame_ProcessData>:

static CANFrame_RcvInfoTypedef* CANFrame_ProcessData(CANFrame_HandlerStruct* CANHandler, CAN_RxHeaderTypeDef* RxHeader, uint8_t* RxData)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
	uint8_t senderID = RxData[0];
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	77fb      	strb	r3, [r7, #31]
	CANFrame_RcvInfoTypedef* RcvInfo = &CANHandler->_RxRcvInfo[senderID];
 800c652:	7ffa      	ldrb	r2, [r7, #31]
 800c654:	4613      	mov	r3, r2
 800c656:	011b      	lsls	r3, r3, #4
 800c658:	1a9b      	subs	r3, r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	1a9b      	subs	r3, r3, r2
 800c65e:	3318      	adds	r3, #24
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	4413      	add	r3, r2
 800c664:	61bb      	str	r3, [r7, #24]
	uint8_t CpyLen;
	uint8_t RcvFrameType = CANFRAME_GETFRAMETYPE_FROMID(RxHeader->StdId);
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	f003 0307 	and.w	r3, r3, #7
 800c670:	75fb      	strb	r3, [r7, #23]
	uint8_t MsgType =	CANFRAME_GETMSGTYPE_FROMID(RxHeader->StdId);
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	09db      	lsrs	r3, r3, #7
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	f003 030f 	and.w	r3, r3, #15
 800c67e:	75bb      	strb	r3, [r7, #22]
	uint8_t CurrentFrameType = RcvInfo->CurrentFrameType;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c686:	757b      	strb	r3, [r7, #21]
//	SyncPrintf("Rcv Frame Type %d CurrentFrameType %d \r\n", RcvFrameType, CurrentFrameType);
	uint8_t Receive_CRC;
	uint8_t Calc_CRC;
	if(CurrentFrameType == 0)
 800c688:	7d7b      	ldrb	r3, [r7, #21]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f040 8086 	bne.w	800c79c <CANFrame_ProcessData+0x15c>
	{
		// Empty buffer not receive any frame
		if(RxData[1] > CANFRAME_MAX_BUFFER_SIZE)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3301      	adds	r3, #1
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	2b37      	cmp	r3, #55	; 0x37
 800c698:	d901      	bls.n	800c69e <CANFrame_ProcessData+0x5e>
		{
			return NULL;
 800c69a:	2300      	movs	r3, #0
 800c69c:	e11e      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
		}
		CANFrame_ClearRcvInfo(RcvInfo);
 800c69e:	69b8      	ldr	r0, [r7, #24]
 800c6a0:	f7ff ffc1 	bl	800c626 <CANFrame_ClearRcvInfo>
		RcvInfo->ExpectedLen = RxData[1];
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	785a      	ldrb	r2, [r3, #1]
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	701a      	strb	r2, [r3, #0]
		RcvInfo->MsgType = MsgType;
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	7dba      	ldrb	r2, [r7, #22]
 800c6b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		RcvInfo->CurrentFrameType = RcvFrameType;
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	7dfa      	ldrb	r2, [r7, #23]
 800c6b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		switch (RcvFrameType) {
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d01a      	beq.n	800c6f8 <CANFrame_ProcessData+0xb8>
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d167      	bne.n	800c796 <CANFrame_ProcessData+0x156>
			case CANFRAME_FRAMETYPE_FIRST:
				CpyLen = 6;
 800c6c6:	2306      	movs	r3, #6
 800c6c8:	753b      	strb	r3, [r7, #20]
				memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 2, CpyLen);
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	69ba      	ldr	r2, [r7, #24]
 800c6d0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c6d4:	1898      	adds	r0, r3, r2
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3302      	adds	r3, #2
 800c6da:	7d3a      	ldrb	r2, [r7, #20]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f001 f903 	bl	800d8e8 <memcpy>
				RcvInfo->ReceivedLen += CpyLen;
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c6e8:	7d3b      	ldrb	r3, [r7, #20]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				return NULL;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	e0f1      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
			case CANFRAME_FRAMETYPE_END:
				CpyLen = RcvInfo->ExpectedLen;
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	753b      	strb	r3, [r7, #20]
				memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 2, CpyLen);
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	3301      	adds	r3, #1
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c708:	1898      	adds	r0, r3, r2
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	3302      	adds	r3, #2
 800c70e:	7d3a      	ldrb	r2, [r7, #20]
 800c710:	4619      	mov	r1, r3
 800c712:	f001 f8e9 	bl	800d8e8 <memcpy>
				RcvInfo->ReceivedLen += CpyLen;
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c71c:	7d3b      	ldrb	r3, [r7, #20]
 800c71e:	4413      	add	r3, r2
 800c720:	b2da      	uxtb	r2, r3
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
#ifdef CANFRAME_ENABLE_COUNTER
//				Receive_CRC = RxData[CpyLen + 2];
				RcvInfo->ExpectedLen-=1;
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	701a      	strb	r2, [r3, #0]
				Receive_CRC = RcvInfo->Data[RcvInfo->ExpectedLen];
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	461a      	mov	r2, r3
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	4413      	add	r3, r2
 800c73e:	785b      	ldrb	r3, [r3, #1]
 800c740:	74bb      	strb	r3, [r7, #18]
				RcvInfo->Data[RcvInfo->ExpectedLen] = 0;
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	461a      	mov	r2, r3
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	4413      	add	r3, r2
 800c74c:	2200      	movs	r2, #0
 800c74e:	705a      	strb	r2, [r3, #1]
				Calc_CRC = crc_8(RcvInfo->Data, RcvInfo->ExpectedLen);
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	4619      	mov	r1, r3
 800c75a:	4610      	mov	r0, r2
 800c75c:	f7f4 fc18 	bl	8000f90 <crc_8>
 800c760:	4603      	mov	r3, r0
 800c762:	747b      	strb	r3, [r7, #17]
				if(Receive_CRC == Calc_CRC)
 800c764:	7cba      	ldrb	r2, [r7, #18]
 800c766:	7c7b      	ldrb	r3, [r7, #17]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d108      	bne.n	800c77e <CANFrame_ProcessData+0x13e>
				{
					CANHandler->RcvSucessCounter++;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 800c772:	1c5a      	adds	r2, r3, #1
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
					SyncPrintf("Invalid CRC\r\n");
					CANHandler->RcvFailedCounter++;
					return NULL;
				}
#endif
				return RcvInfo;
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	e0ae      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
					SyncPrintf("Invalid CRC\r\n");
 800c77e:	4859      	ldr	r0, [pc, #356]	; (800c8e4 <CANFrame_ProcessData+0x2a4>)
 800c780:	f000 fbe0 	bl	800cf44 <SyncPrintf>
					CANHandler->RcvFailedCounter++;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c78a:	1c5a      	adds	r2, r3, #1
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
					return NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	e0a2      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
			default:
				break;
 800c796:	bf00      	nop
		}
		return NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	e09f      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
	} else
	{
		if(RcvInfo->MsgType != MsgType)
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c7a2:	7dba      	ldrb	r2, [r7, #22]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d00c      	beq.n	800c7c2 <CANFrame_ProcessData+0x182>
		{
			CANFrame_ClearRcvInfo(RcvInfo);
 800c7a8:	69b8      	ldr	r0, [r7, #24]
 800c7aa:	f7ff ff3c 	bl	800c626 <CANFrame_ClearRcvInfo>
#ifdef CANFRAME_ENABLE_COUNTER
				SyncPrintf("Not same MsgType\r\n");
 800c7ae:	484e      	ldr	r0, [pc, #312]	; (800c8e8 <CANFrame_ProcessData+0x2a8>)
 800c7b0:	f000 fbc8 	bl	800cf44 <SyncPrintf>
				CANHandler->RcvFailedCounter++;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
#endif
		}
		if(RcvFrameType == CANFRAME_FRAMETYPE_END)
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d159      	bne.n	800c87c <CANFrame_ProcessData+0x23c>
		{
//			SyncPrintf("Frame Type END\r\n");
			RcvInfo->CurrentFrameType = CANFRAME_FRAMETYPE_END;
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			uint8_t remainLen = RcvInfo->ExpectedLen - RcvInfo->ReceivedLen;
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	781a      	ldrb	r2, [r3, #0]
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7da:	1ad3      	subs	r3, r2, r3
 800c7dc:	74fb      	strb	r3, [r7, #19]
//			if(remainLen > 7)
//			{
//				CANFrame_ClearRcvInfo(RcvInfo);
//				return NULL;
//			}
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 1, remainLen);
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	69ba      	ldr	r2, [r7, #24]
 800c7e4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c7e8:	1898      	adds	r0, r3, r2
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	7cfa      	ldrb	r2, [r7, #19]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f001 f879 	bl	800d8e8 <memcpy>
			RcvInfo->ReceivedLen += remainLen;
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c7fc:	7cfb      	ldrb	r3, [r7, #19]
 800c7fe:	4413      	add	r3, r2
 800c800:	b2da      	uxtb	r2, r3
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#ifdef CANFRAME_ENABLE_COUNTER
				RcvInfo->ExpectedLen-=1;
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	701a      	strb	r2, [r3, #0]
				Receive_CRC = RcvInfo->Data[RcvInfo->ExpectedLen];
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	461a      	mov	r2, r3
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	4413      	add	r3, r2
 800c81e:	785b      	ldrb	r3, [r3, #1]
 800c820:	74bb      	strb	r3, [r7, #18]
				RcvInfo->Data[RcvInfo->ExpectedLen] = 0;
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	4413      	add	r3, r2
 800c82c:	2200      	movs	r2, #0
 800c82e:	705a      	strb	r2, [r3, #1]

				Calc_CRC = crc_8(RcvInfo->Data, RcvInfo->ExpectedLen);
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	4619      	mov	r1, r3
 800c83a:	4610      	mov	r0, r2
 800c83c:	f7f4 fba8 	bl	8000f90 <crc_8>
 800c840:	4603      	mov	r3, r0
 800c842:	747b      	strb	r3, [r7, #17]
				if(Receive_CRC == Calc_CRC)
 800c844:	7cba      	ldrb	r2, [r7, #18]
 800c846:	7c7b      	ldrb	r3, [r7, #17]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d108      	bne.n	800c85e <CANFrame_ProcessData+0x21e>
				{
					CANHandler->RcvSucessCounter++;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
					return NULL;

				}
#endif
//			SyncPrintf("CpyLen %d ReceivedLen %d ExpectedLen %d\r\n", CpyLen, RcvInfo->ReceivedLen, RcvInfo->ExpectedLen);
			return RcvInfo;
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	e03e      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
					SyncPrintf("Invalid CRC Calc 0x%.2x Rcv 0x%2x\r\n", Calc_CRC, Receive_CRC);
 800c85e:	7c7b      	ldrb	r3, [r7, #17]
 800c860:	7cba      	ldrb	r2, [r7, #18]
 800c862:	4619      	mov	r1, r3
 800c864:	4821      	ldr	r0, [pc, #132]	; (800c8ec <CANFrame_ProcessData+0x2ac>)
 800c866:	f000 fb6d 	bl	800cf44 <SyncPrintf>
					CANHandler->RcvFailedCounter++;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c870:	1c5a      	adds	r2, r3, #1
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
					return NULL;
 800c878:	2300      	movs	r3, #0
 800c87a:	e02f      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
		}
		else if (RcvFrameType != CurrentFrameType + 1 )
 800c87c:	7dfa      	ldrb	r2, [r7, #23]
 800c87e:	7d7b      	ldrb	r3, [r7, #21]
 800c880:	3301      	adds	r3, #1
 800c882:	429a      	cmp	r2, r3
 800c884:	d00e      	beq.n	800c8a4 <CANFrame_ProcessData+0x264>
		{
#ifdef CANFRAME_ENABLE_COUNTER
			SyncPrintf("FrameType not contiguos\r\n");
 800c886:	481a      	ldr	r0, [pc, #104]	; (800c8f0 <CANFrame_ProcessData+0x2b0>)
 800c888:	f000 fb5c 	bl	800cf44 <SyncPrintf>
				CANHandler->RcvFailedCounter++;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
#endif
			CANFrame_ClearRcvInfo(RcvInfo);
 800c89a:	69b8      	ldr	r0, [r7, #24]
 800c89c:	f7ff fec3 	bl	800c626 <CANFrame_ClearRcvInfo>
			return NULL;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	e01b      	b.n	800c8dc <CANFrame_ProcessData+0x29c>
		}
		else
		{
//			SyncPrintf("Frame Type %d\r\n", RcvFrameType);
			RcvInfo->CurrentFrameType = RcvFrameType;
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	7dfa      	ldrb	r2, [r7, #23]
 800c8a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			CpyLen = 7;
 800c8ac:	2307      	movs	r3, #7
 800c8ae:	753b      	strb	r3, [r7, #20]
			memcpy(RcvInfo->Data + RcvInfo->ReceivedLen, RxData + 1, CpyLen);
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	69ba      	ldr	r2, [r7, #24]
 800c8b6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800c8ba:	1898      	adds	r0, r3, r2
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	7d3a      	ldrb	r2, [r7, #20]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	f001 f810 	bl	800d8e8 <memcpy>
			RcvInfo->ReceivedLen += CpyLen;
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800c8ce:	7d3b      	ldrb	r3, [r7, #20]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
//			SyncPrintf("CpyLen %d ReceivedLen %d ExpectedLen %d\r\n", CpyLen, RcvInfo->ReceivedLen, RcvInfo->ExpectedLen);
			return NULL;
 800c8da:	2300      	movs	r3, #0
		}
	}
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	0800e7bc 	.word	0x0800e7bc
 800c8e8:	0800e7cc 	.word	0x0800e7cc
 800c8ec:	0800e7e0 	.word	0x0800e7e0
 800c8f0:	0800e804 	.word	0x0800e804

0800c8f4 <CANFrame_RcvTask>:

void CANFrame_RcvTask(void* arg)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b092      	sub	sp, #72	; 0x48
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
	int Status = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	647b      	str	r3, [r7, #68]	; 0x44
	CANFrame_HandlerStruct* CANHandler = (CANFrame_HandlerStruct*) arg;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	643b      	str	r3, [r7, #64]	; 0x40
	CAN_RxHeaderTypeDef CAN_RxHeader;
	CANFrame_RxHeaderTypedef CANFrame_RxHeader;
	uint8_t RxData[8];
	uint8_t senderID;
	uint8_t TargetNode;
	uint8_t FifoFillLevel = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	72fb      	strb	r3, [r7, #11]
	while(1)
	{
		CAN_OS_GetRxFifoFillLevel(CANHandler->CAN, CANHandler->RxFifo, &FifoFillLevel);
 800c908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f107 020b 	add.w	r2, r7, #11
 800c914:	4619      	mov	r1, r3
 800c916:	f000 f981 	bl	800cc1c <CAN_OS_GetRxFifoFillLevel>
		if(FifoFillLevel == 0)
 800c91a:	7afb      	ldrb	r3, [r7, #11]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10c      	bne.n	800c93a <CANFrame_RcvTask+0x46>
		{
			Status = CAN_OS_ListenMsg(CANHandler->CAN, CANHandler->RxFifo, osWaitForever);
 800c920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c922:	6818      	ldr	r0, [r3, #0]
 800c924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c926:	689b      	ldr	r3, [r3, #8]
 800c928:	f04f 32ff 	mov.w	r2, #4294967295
 800c92c:	4619      	mov	r1, r3
 800c92e:	f000 f933 	bl	800cb98 <CAN_OS_ListenMsg>
 800c932:	6478      	str	r0, [r7, #68]	; 0x44
			if(Status != osOK)
 800c934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c936:	2b00      	cmp	r3, #0
 800c938:	d150      	bne.n	800c9dc <CANFrame_RcvTask+0xe8>
			{
				continue;
			}
		}
		Status = CAN_OS_GetRxMessage(CANHandler->CAN, CANHandler->RxFifo, &CAN_RxHeader, RxData);
 800c93a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c93c:	6818      	ldr	r0, [r3, #0]
 800c93e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c940:	6899      	ldr	r1, [r3, #8]
 800c942:	f107 030c 	add.w	r3, r7, #12
 800c946:	f107 021c 	add.w	r2, r7, #28
 800c94a:	f000 f97c 	bl	800cc46 <CAN_OS_GetRxMessage>
 800c94e:	6478      	str	r0, [r7, #68]	; 0x44
		if(Status != osOK)
 800c950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c952:	2b00      	cmp	r3, #0
 800c954:	d144      	bne.n	800c9e0 <CANFrame_RcvTask+0xec>
//		for(uint8_t i = 0; i<8; i++)
//		{
//			SyncPrintf("0x%.2x ", RxData[i]);
//		}
//		SyncPrintf("\r\n");
		TargetNode = CANFRAME_GETTARGETNODE_FROMID(CAN_RxHeader.StdId);
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	08db      	lsrs	r3, r3, #3
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	f003 030f 	and.w	r3, r3, #15
 800c960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if( !((TargetNode != CANHandler->nodeID) || (TargetNode != CANFRAME_ALL_NODE)))
 800c964:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c968:	b29a      	uxth	r2, r3
 800c96a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c96c:	889b      	ldrh	r3, [r3, #4]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d103      	bne.n	800c97a <CANFrame_RcvTask+0x86>
 800c972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c976:	2b00      	cmp	r3, #0
 800c978:	d034      	beq.n	800c9e4 <CANFrame_RcvTask+0xf0>
		{
			continue;
		}
		senderID = RxData[0];
 800c97a:	7b3b      	ldrb	r3, [r7, #12]
 800c97c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		CANFrame_RcvInfoTypedef* rcvInfo = CANFrame_ProcessData(CANHandler, &CAN_RxHeader, RxData);
 800c980:	f107 020c 	add.w	r2, r7, #12
 800c984:	f107 031c 	add.w	r3, r7, #28
 800c988:	4619      	mov	r1, r3
 800c98a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c98c:	f7ff fe58 	bl	800c640 <CANFrame_ProcessData>
 800c990:	63b8      	str	r0, [r7, #56]	; 0x38
		if(rcvInfo != NULL)
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0b7      	beq.n	800c908 <CANFrame_RcvTask+0x14>
		{
			CANFrame_RxHeader.DataLen = rcvInfo->ExpectedLen;
 800c998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	763b      	strb	r3, [r7, #24]
			CANFrame_RxHeader.MessageType = rcvInfo->MsgType;
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	82bb      	strh	r3, [r7, #20]
			CANFrame_RxHeader.senderID = senderID;
 800c9a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	82fb      	strh	r3, [r7, #22]
//			{
//				SyncPrintf("%d ", rcvInfo->Data[i]);
//			}
//			SyncPrintf("\r\n");
//			SyncPrintf("%s \r\n", rcvInfo->Data);
			rcvInfo->Data[CANFrame_RxHeader.DataLen] = 0;
 800c9b0:	7e3b      	ldrb	r3, [r7, #24]
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	4413      	add	r3, r2
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	705a      	strb	r2, [r3, #1]

			if(CANHandler->ReceiveDataCB != NULL)
 800c9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d007      	beq.n	800c9d4 <CANFrame_RcvTask+0xe0>
			{
				CANHandler->ReceiveDataCB(&CANFrame_RxHeader, rcvInfo->Data);
 800c9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c6:	695b      	ldr	r3, [r3, #20]
 800c9c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ca:	1c51      	adds	r1, r2, #1
 800c9cc:	f107 0214 	add.w	r2, r7, #20
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	4798      	blx	r3
			}
			CANFrame_ClearRcvInfo(rcvInfo);
 800c9d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9d6:	f7ff fe26 	bl	800c626 <CANFrame_ClearRcvInfo>
 800c9da:	e795      	b.n	800c908 <CANFrame_RcvTask+0x14>
				continue;
 800c9dc:	bf00      	nop
 800c9de:	e793      	b.n	800c908 <CANFrame_RcvTask+0x14>
			continue;
 800c9e0:	bf00      	nop
 800c9e2:	e791      	b.n	800c908 <CANFrame_RcvTask+0x14>
			continue;
 800c9e4:	bf00      	nop
	{
 800c9e6:	e78f      	b.n	800c908 <CANFrame_RcvTask+0x14>

0800c9e8 <CANFrame_Init>:
		}
	}
}

int CANFrame_Init(CANFrame_HandlerStruct* canhandler, CAN_OS_HandlerStruct* CAN, uint16_t nodeID, uint32_t CAN_RxFifo)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	603b      	str	r3, [r7, #0]
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	80fb      	strh	r3, [r7, #6]
	memset(canhandler, 0, sizeof(CANFrame_HandlerStruct));
 800c9f8:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 fe30 	bl	800d664 <memset>
	canhandler->CAN = CAN;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	601a      	str	r2, [r3, #0]
	canhandler->nodeID = nodeID;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	88fa      	ldrh	r2, [r7, #6]
 800ca0e:	809a      	strh	r2, [r3, #4]
	canhandler->usedFilterBank = 0;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	80da      	strh	r2, [r3, #6]
	canhandler->RxFifo = CAN_RxFifo;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	683a      	ldr	r2, [r7, #0]
 800ca1a:	609a      	str	r2, [r3, #8]

	canhandler->TxSem = osSemaphoreNew(1, 1, NULL);
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	2101      	movs	r1, #1
 800ca20:	2001      	movs	r0, #1
 800ca22:	f7fb fa07 	bl	8007e34 <osSemaphoreNew>
 800ca26:	4602      	mov	r2, r0
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	60da      	str	r2, [r3, #12]
	canhandler->rcvHandler_Th = osThreadNew(CANFrame_RcvTask, canhandler, &CANRcvTask_attributes);
 800ca2c:	4a0b      	ldr	r2, [pc, #44]	; (800ca5c <CANFrame_Init+0x74>)
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	480b      	ldr	r0, [pc, #44]	; (800ca60 <CANFrame_Init+0x78>)
 800ca32:	f7fa fdd7 	bl	80075e4 <osThreadNew>
 800ca36:	4602      	mov	r2, r0
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	611a      	str	r2, [r3, #16]
	CANFrame_FilterConfig(canhandler, CANFRAME_ALL_NODE, CAN_RxFifo);
 800ca3c:	683a      	ldr	r2, [r7, #0]
 800ca3e:	2100      	movs	r1, #0
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f000 f825 	bl	800ca90 <CANFrame_FilterConfig>
	return CANFrame_FilterConfig(canhandler, nodeID, CAN_RxFifo);
 800ca46:	88fb      	ldrh	r3, [r7, #6]
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f000 f81f 	bl	800ca90 <CANFrame_FilterConfig>
 800ca52:	4603      	mov	r3, r0

}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	0800e8d0 	.word	0x0800e8d0
 800ca60:	0800c8f5 	.word	0x0800c8f5

0800ca64 <CANFrame_RegCB>:
	return osOK;
}

int CANFrame_RegCB(CANFrame_HandlerStruct* CANHandler, uint8_t CallbackID,
					void (*Func)(CANFrame_RxHeaderTypedef*, uint8_t*))
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	607a      	str	r2, [r7, #4]
 800ca70:	72fb      	strb	r3, [r7, #11]
	switch (CallbackID) {
 800ca72:	7afb      	ldrb	r3, [r7, #11]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d104      	bne.n	800ca82 <CANFrame_RegCB+0x1e>
		case CANFRAME_RCVCPLT_CB_ID:
			CANHandler->ReceiveDataCB = Func;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	615a      	str	r2, [r3, #20]
			return osOK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	e001      	b.n	800ca86 <CANFrame_RegCB+0x22>
		default:
			return osErrorParameter;
 800ca82:	f06f 0303 	mvn.w	r3, #3

	}

}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bc80      	pop	{r7}
 800ca8e:	4770      	bx	lr

0800ca90 <CANFrame_FilterConfig>:

int CANFrame_FilterConfig(CANFrame_HandlerStruct *Can, uint16_t NodeID, uint32_t RxFifo)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b08e      	sub	sp, #56	; 0x38
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	817b      	strh	r3, [r7, #10]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation=ENABLE;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	633b      	str	r3, [r7, #48]	; 0x30
	Can_filter_init.FilterBank= Can->usedFilterBank++;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	88db      	ldrh	r3, [r3, #6]
 800caa6:	1c5a      	adds	r2, r3, #1
 800caa8:	b291      	uxth	r1, r2
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	80d1      	strh	r1, [r2, #6]
 800caae:	627b      	str	r3, [r7, #36]	; 0x24
	if(Can->usedFilterBank > 14){
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	88db      	ldrh	r3, [r3, #6]
 800cab4:	2b0e      	cmp	r3, #14
 800cab6:	d901      	bls.n	800cabc <CANFrame_FilterConfig+0x2c>
		Error_Handler();
 800cab8:	f7f4 ff1a 	bl	80018f0 <Error_Handler>
	}
	Can_filter_init.FilterFIFOAssignment=RxFifo;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterIdHigh=NodeID<<8;
 800cac0:	897b      	ldrh	r3, [r7, #10]
 800cac2:	021b      	lsls	r3, r3, #8
 800cac4:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterIdLow= 0x0000;
 800cac6:	2300      	movs	r3, #0
 800cac8:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMaskIdHigh= 0x0F00;
 800caca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800cace:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterMaskIdLow= 0x0000;
 800cad0:	2300      	movs	r3, #0
 800cad2:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterMode=CAN_FILTERMODE_IDMASK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterScale=CAN_FILTERSCALE_32BIT;
 800cad8:	2301      	movs	r3, #1
 800cada:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(CAN_OS_ConfigFilter(Can->CAN,&Can_filter_init)!=HAL_OK)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f107 0210 	add.w	r2, r7, #16
 800cae4:	4611      	mov	r1, r2
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 f830 	bl	800cb4c <CAN_OS_ConfigFilter>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <CANFrame_FilterConfig+0x66>
	{
		Error_Handler();
 800caf2:	f7f4 fefd 	bl	80018f0 <Error_Handler>
	}
	return osOK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3738      	adds	r7, #56	; 0x38
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <CAN_OS_Init>:

#include "CANHandler.h"

int CAN_OS_Init(CAN_OS_HandlerStruct* CANHandler, CAN_HandleTypeDef* hcan)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
	HAL_CAN_Stop(hcan);
 800cb0a:	6838      	ldr	r0, [r7, #0]
 800cb0c:	f7f5 ff51 	bl	80029b2 <HAL_CAN_Stop>
	CANHandler->hcan = hcan;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	601a      	str	r2, [r3, #0]
	CANHandler->EventFlag = osEventFlagsNew(NULL);
 800cb16:	2000      	movs	r0, #0
 800cb18:	f7fa fee0 	bl	80078dc <osEventFlagsNew>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	60da      	str	r2, [r3, #12]
	CANHandler->TxSemaphore = osSemaphoreNew(CAN_OS_TxMailBox_Max, CAN_OS_TxMailBox_Max, NULL);
 800cb22:	2200      	movs	r2, #0
 800cb24:	2103      	movs	r1, #3
 800cb26:	2003      	movs	r0, #3
 800cb28:	f7fb f984 	bl	8007e34 <osSemaphoreNew>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	605a      	str	r2, [r3, #4]
	CANHandler->RxSemaphore = osSemaphoreNew(1, 1, NULL);
 800cb32:	2200      	movs	r2, #0
 800cb34:	2101      	movs	r1, #1
 800cb36:	2001      	movs	r0, #1
 800cb38:	f7fb f97c 	bl	8007e34 <osSemaphoreNew>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	609a      	str	r2, [r3, #8]
	return HAL_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <CAN_OS_ConfigFilter>:

int CAN_OS_ConfigFilter(CAN_OS_HandlerStruct* CANHandler,const CAN_FilterTypeDef* Filter)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef Status =  HAL_CAN_ConfigFilter(CANHandler->hcan, Filter);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7f5 fe1b 	bl	8002798 <HAL_CAN_ConfigFilter>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73fb      	strb	r3, [r7, #15]
	return Status == HAL_OK? osOK: osError;
 800cb66:	7bfb      	ldrb	r3, [r7, #15]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <CAN_OS_ConfigFilter+0x24>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	e001      	b.n	800cb74 <CAN_OS_ConfigFilter+0x28>
 800cb70:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <CAN_OS_Start>:
{
	 return HAL_CAN_ActivateNotification(CANHandler->hcan,ActiveITs);
}

int CAN_OS_Start(CAN_OS_HandlerStruct* CANHandler)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
//	CAN_OS_ActivateNotification(CANHandler, CAN_IT_TX_MAILBOX_EMPTY);

	return HAL_CAN_Start(CANHandler->hcan);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7f5 fece 	bl	800292a <HAL_CAN_Start>
 800cb8e:	4603      	mov	r3, r0
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <CAN_OS_ListenMsg>:
//	int Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
//	return Status > 0 ? osOK : Status;
//}

int CAN_OS_ListenMsg(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint32_t timeout)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b088      	sub	sp, #32
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
	int Status;
	uint32_t activateITS;
	uint8_t waitEvent;
	if (rxFifo == CAN_FILTER_FIFO0){
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d104      	bne.n	800cbb4 <CAN_OS_ListenMsg+0x1c>
		activateITS = CAN_IT_RX_FIFO0_MSG_PENDING;
 800cbaa:	2302      	movs	r3, #2
 800cbac:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo0Cplt_Event;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	76fb      	strb	r3, [r7, #27]
 800cbb2:	e00a      	b.n	800cbca <CAN_OS_ListenMsg+0x32>
	}
	else if (rxFifo == CAN_FILTER_FIFO1 ) {
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d104      	bne.n	800cbc4 <CAN_OS_ListenMsg+0x2c>
		activateITS = CAN_IT_RX_FIFO1_MSG_PENDING;
 800cbba:	2310      	movs	r3, #16
 800cbbc:	61fb      	str	r3, [r7, #28]
		waitEvent = CAN_OS_RxFifo1Cplt_Event;
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	76fb      	strb	r3, [r7, #27]
 800cbc2:	e002      	b.n	800cbca <CAN_OS_ListenMsg+0x32>
	}
	else return osErrorParameter;
 800cbc4:	f06f 0303 	mvn.w	r3, #3
 800cbc8:	e024      	b.n	800cc14 <CAN_OS_ListenMsg+0x7c>

	Status = HAL_CAN_ActivateNotification(CANHandler->hcan, activateITS);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	69f9      	ldr	r1, [r7, #28]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7f6 f87f 	bl	8002cd4 <HAL_CAN_ActivateNotification>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	617b      	str	r3, [r7, #20]

	Status = osSemaphoreAcquire(CANHandler->RxSemaphore, timeout);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	689b      	ldr	r3, [r3, #8]
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7fb f9c3 	bl	8007f6c <osSemaphoreAcquire>
 800cbe6:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <CAN_OS_ListenMsg+0x5a>
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	e010      	b.n	800cc14 <CAN_OS_ListenMsg+0x7c>
	Status = osEventFlagsWait(CANHandler->EventFlag, waitEvent, osFlagsWaitAll, timeout);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	68d8      	ldr	r0, [r3, #12]
 800cbf6:	7ef9      	ldrb	r1, [r7, #27]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f7fa ff5c 	bl	8007ab8 <osEventFlagsWait>
 800cc00:	4603      	mov	r3, r0
 800cc02:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(CANHandler->RxSemaphore);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fb fa15 	bl	8008038 <osSemaphoreRelease>
	return Status > 0 ? osOK : Status;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3720      	adds	r7, #32
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <CAN_OS_GetRxFifoFillLevel>:

int CAN_OS_GetRxFifoFillLevel(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, uint8_t* FillLevel)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	607a      	str	r2, [r7, #4]
	*FillLevel = HAL_CAN_GetRxFifoFillLevel(CANHandler->hcan, rxFifo);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	68b9      	ldr	r1, [r7, #8]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7f6 f829 	bl	8002c86 <HAL_CAN_GetRxFifoFillLevel>
 800cc34:	4603      	mov	r3, r0
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	701a      	strb	r2, [r3, #0]
	return osOK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <CAN_OS_GetRxMessage>:

int CAN_OS_GetRxMessage(CAN_OS_HandlerStruct* CANHandler, uint32_t rxFifo, CAN_RxHeaderTypeDef* rxHeader, uint8_t* rxData)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b086      	sub	sp, #24
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	60f8      	str	r0, [r7, #12]
 800cc4e:	60b9      	str	r1, [r7, #8]
 800cc50:	607a      	str	r2, [r7, #4]
 800cc52:	603b      	str	r3, [r7, #0]
	uint8_t Status = HAL_CAN_GetRxMessage(CANHandler->hcan, rxFifo, rxHeader, rxData);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6818      	ldr	r0, [r3, #0]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	68b9      	ldr	r1, [r7, #8]
 800cc5e:	f7f5 fef1 	bl	8002a44 <HAL_CAN_GetRxMessage>
 800cc62:	4603      	mov	r3, r0
 800cc64:	75fb      	strb	r3, [r7, #23]
	return Status == HAL_OK? osOK: osError;
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <CAN_OS_GetRxMessage+0x2a>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	e001      	b.n	800cc74 <CAN_OS_GetRxMessage+0x2e>
 800cc70:	f04f 33ff 	mov.w	r3, #4294967295

}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3718      	adds	r7, #24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <CAN_OS_RxFifo0Cplt_CB>:

void CAN_OS_RxFifo0Cplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	695a      	ldr	r2, [r3, #20]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f022 0202 	bic.w	r2, r2, #2
 800cc96:	615a      	str	r2, [r3, #20]
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo0Cplt_Event);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fa fe6e 	bl	8007980 <osEventFlagsSet>
}
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <CAN_OS_TxCplt_CB>:
{
	__HAL_CAN_DISABLE_IT(CANHandler->hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	osEventFlagsSet(CANHandler->EventFlag, CAN_OS_RxFifo1Cplt_Event);
}
void CAN_OS_TxCplt_CB(CAN_OS_HandlerStruct* CANHandler)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CANHandler->TxSemaphore);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fb f9bd 	bl	8008038 <osSemaphoreRelease>

}
 800ccbe:	bf00      	nop
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <CAN_OS_RegisterCB>:

int CAN_OS_RegisterCB(CAN_OS_HandlerStruct *hcan, uint8_t callbackID, void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	607a      	str	r2, [r7, #4]
 800ccd2:	72fb      	strb	r3, [r7, #11]
	switch (callbackID)
 800ccd4:	7afb      	ldrb	r3, [r7, #11]
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d039      	beq.n	800cd4e <CAN_OS_RegisterCB+0x88>
 800ccda:	2b02      	cmp	r3, #2
 800ccdc:	dc3f      	bgt.n	800cd5e <CAN_OS_RegisterCB+0x98>
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <CAN_OS_RegisterCB+0x22>
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d02b      	beq.n	800cd3e <CAN_OS_RegisterCB+0x78>
 800cce6:	e03a      	b.n	800cd5e <CAN_OS_RegisterCB+0x98>
	{
		case CAN_OS_ActivateTxCB_ID:
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID,pCallback);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	2100      	movs	r1, #0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7f5 fca3 	bl	800263c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID,pCallback);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f5 fc9c 	bl	800263c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID,pCallback);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	2102      	movs	r1, #2
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7f5 fc95 	bl	800263c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX0_ABORT_CB_ID,pCallback);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	2103      	movs	r1, #3
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7f5 fc8e 	bl	800263c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX1_ABORT_CB_ID,pCallback);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	2104      	movs	r1, #4
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f5 fc87 	bl	800263c <HAL_CAN_RegisterCallback>
			HAL_CAN_RegisterCallback(hcan->hcan, HAL_CAN_TX_MAILBOX2_ABORT_CB_ID,pCallback);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	2105      	movs	r1, #5
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7f5 fc80 	bl	800263c <HAL_CAN_RegisterCallback>
			break;
 800cd3c:	e012      	b.n	800cd64 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo0_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID,pCallback);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	2106      	movs	r1, #6
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f5 fc78 	bl	800263c <HAL_CAN_RegisterCallback>

			break;
 800cd4c:	e00a      	b.n	800cd64 <CAN_OS_RegisterCB+0x9e>
		case CAN_OS_ActivateRxFifo1_ID:
			HAL_CAN_RegisterCallback(hcan->hcan,HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID,pCallback);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	2108      	movs	r1, #8
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7f5 fc70 	bl	800263c <HAL_CAN_RegisterCallback>

			break;
 800cd5c:	e002      	b.n	800cd64 <CAN_OS_RegisterCB+0x9e>
		default:
			return osErrorParameter;
 800cd5e:	f06f 0303 	mvn.w	r3, #3
 800cd62:	e000      	b.n	800cd66 <CAN_OS_RegisterCB+0xa0>
			break;
	}
	return osOK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <GPIO_TogglePin>:

GPIO_HandlerStruct PB5 = { .Port = GPIOB, .Pin = GPIO_PIN_5 };
GPIO_HandlerStruct PC6 = { .Port = GPIOC, .Pin = GPIO_PIN_6 };
GPIO_HandlerStruct PC13 = { .Port = GPIOC, .Pin = GPIO_PIN_13 };

void GPIO_TogglePin(GPIO_HandlerStruct GPIO) {
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	463b      	mov	r3, r7
 800cd76:	e883 0003 	stmia.w	r3, {r0, r1}
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	b292      	uxth	r2, r2
 800cd80:	4611      	mov	r1, r2
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7f6 fe68 	bl	8003a58 <HAL_GPIO_TogglePin>
}
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <GPIO_WritePin>:

void GPIO_WritePin(GPIO_HandlerStruct GPIO, uint32_t PinState) {
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b084      	sub	sp, #16
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	f107 0308 	add.w	r3, r7, #8
 800cd98:	e883 0003 	stmia.w	r3, {r0, r1}
 800cd9c:	607a      	str	r2, [r7, #4]
//	if (GPIO.Pin == Engine_Brake_Pin) {
//		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
//	} else if (GPIO.Pin == Engine_Dir_Pin) {
//		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
//	}
	return HAL_GPIO_WritePin(GPIO.Port, GPIO.Pin, PinState);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	b291      	uxth	r1, r2
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7f6 fe3d 	bl	8003a28 <HAL_GPIO_WritePin>
}
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <I2C_OS_Init>:
 */


#include "I2C_Handler.h"
int I2C_OS_Init(I2C_OS_HandlerStruct* i2c, I2C_HandleTypeDef* hi2c)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	6039      	str	r1, [r7, #0]
	i2c->hi2c = hi2c;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	601a      	str	r2, [r3, #0]
//	osSemaphoreNew(1, 0, NULL);
	i2c->Semaphore = osSemaphoreNew(1, 1, NULL);
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	2001      	movs	r0, #1
 800cdca:	f7fb f833 	bl	8007e34 <osSemaphoreNew>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	605a      	str	r2, [r3, #4]
	i2c->EventFlag = osEventFlagsNew(NULL);
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f7fa fd81 	bl	80078dc <osEventFlagsNew>
 800cdda:	4602      	mov	r2, r0
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	609a      	str	r2, [r3, #8]
	return 0;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <I2C_OS_MEM_Write_IT>:
	return Status;
}

int I2C_OS_MEM_Write_IT(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress,uint16_t MemAddress,
		uint16_t MemAddSize, uint8_t * pData, uint16_t Size, uint32_t timeout)
{
 800cdea:	b590      	push	{r4, r7, lr}
 800cdec:	b089      	sub	sp, #36	; 0x24
 800cdee:	af02      	add	r7, sp, #8
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	4608      	mov	r0, r1
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	817b      	strh	r3, [r7, #10]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	813b      	strh	r3, [r7, #8]
 800ce00:	4613      	mov	r3, r2
 800ce02:	80fb      	strh	r3, [r7, #6]
	int Status = osOK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, timeout);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fb f8ac 	bl	8007f6c <osSemaphoreAcquire>
 800ce14:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <I2C_OS_MEM_Write_IT+0x36>
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	e031      	b.n	800ce84 <I2C_OS_MEM_Write_IT+0x9a>
	osEventFlagsClear(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2101      	movs	r1, #1
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fa fe02 	bl	8007a30 <osEventFlagsClear>
	Status = HAL_I2C_Mem_Write_IT(i2c->hi2c, DevAddress, MemAddress, MemAddSize, pData, Size);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6818      	ldr	r0, [r3, #0]
 800ce30:	88fc      	ldrh	r4, [r7, #6]
 800ce32:	893a      	ldrh	r2, [r7, #8]
 800ce34:	8979      	ldrh	r1, [r7, #10]
 800ce36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce38:	9301      	str	r3, [sp, #4]
 800ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	4623      	mov	r3, r4
 800ce40:	f7f6 ff7c 	bl	8003d3c <HAL_I2C_Mem_Write_IT>
 800ce44:	4603      	mov	r3, r0
 800ce46:	617b      	str	r3, [r7, #20]
	if (Status != 0)
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <I2C_OS_MEM_Write_IT+0x78>
	{
		Status = osError;
 800ce4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce52:	617b      	str	r3, [r7, #20]
		osSemaphoreRelease(i2c->Semaphore);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fb f8ed 	bl	8008038 <osSemaphoreRelease>
		return Status;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	e010      	b.n	800ce84 <I2C_OS_MEM_Write_IT+0x9a>
	}
	Status = osEventFlagsWait(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG, osFlagsWaitAll, timeout);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6898      	ldr	r0, [r3, #8]
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	2201      	movs	r2, #1
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	f7fa fe24 	bl	8007ab8 <osEventFlagsWait>
 800ce70:	4603      	mov	r3, r0
 800ce72:	617b      	str	r3, [r7, #20]
	osSemaphoreRelease(i2c->Semaphore);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fb f8dd 	bl	8008038 <osSemaphoreRelease>
	return Status > 0 ? osOK: Status ;
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	371c      	adds	r7, #28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd90      	pop	{r4, r7, pc}

0800ce8c <I2C_OS_IsDeviceReady>:
	return Status > 0 ? osOK: Status;
}

int I2C_OS_IsDeviceReady(I2C_OS_HandlerStruct* i2c, uint16_t DevAddress, uint32_t
		Trials, uint32_t Timeout)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	607a      	str	r2, [r7, #4]
 800ce96:	603b      	str	r3, [r7, #0]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	817b      	strh	r3, [r7, #10]
	int Status = osOK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	617b      	str	r3, [r7, #20]
	Status = osSemaphoreAcquire(i2c->Semaphore, Timeout);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fb f860 	bl	8007f6c <osSemaphoreAcquire>
 800ceac:	6178      	str	r0, [r7, #20]
	if (Status != osOK) return Status;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <I2C_OS_IsDeviceReady+0x2c>
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	e017      	b.n	800cee8 <I2C_OS_IsDeviceReady+0x5c>
	Status = HAL_I2C_IsDeviceReady(i2c->hi2c, DevAddress, Trials, Timeout);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6818      	ldr	r0, [r3, #0]
 800cebc:	8979      	ldrh	r1, [r7, #10]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	f7f6 ffe7 	bl	8003e94 <HAL_I2C_IsDeviceReady>
 800cec6:	4603      	mov	r3, r0
 800cec8:	617b      	str	r3, [r7, #20]

	if (Status != 0)
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d003      	beq.n	800ced8 <I2C_OS_IsDeviceReady+0x4c>
	{
		Status = osError;
 800ced0:	f04f 33ff 	mov.w	r3, #4294967295
 800ced4:	617b      	str	r3, [r7, #20]
 800ced6:	e001      	b.n	800cedc <I2C_OS_IsDeviceReady+0x50>
	} else
	{
		Status = osOK;
 800ced8:	2300      	movs	r3, #0
 800ceda:	617b      	str	r3, [r7, #20]
	}
	osSemaphoreRelease(i2c->Semaphore);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fb f8a9 	bl	8008038 <osSemaphoreRelease>
	return Status;
 800cee6:	697b      	ldr	r3, [r7, #20]

}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3718      	adds	r7, #24
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <I2C_OS_MEM_RxCpltCB>:
	osSemaphoreRelease(i2c->Semaphore);
	return Status > 0 ? osOK: Status;
}

void I2C_OS_MEM_RxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_RX_CPLT_FLAG);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	2102      	movs	r1, #2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fa fd3e 	bl	8007980 <osEventFlagsSet>
}
 800cf04:	bf00      	nop
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <I2C_OS_MEM_TxCpltCB>:
void I2C_OS_MEM_TxCpltCB(I2C_OS_HandlerStruct* i2c)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(i2c->EventFlag, I2C_OS_MEM_TX_CPLT_FLAG);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	2101      	movs	r1, #1
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fa fd30 	bl	8007980 <osEventFlagsSet>
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <SyncPrintf_Init>:
  NULL,                // memory for control block
  0U                   // size for control block
};

void 	SyncPrintf_Init()
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	af00      	add	r7, sp, #0
	PrintfMutex = osMutexNew(&PrintfMutex_attr);
 800cf2c:	4803      	ldr	r0, [pc, #12]	; (800cf3c <SyncPrintf_Init+0x14>)
 800cf2e:	f7fa fe39 	bl	8007ba4 <osMutexNew>
 800cf32:	4603      	mov	r3, r0
 800cf34:	4a02      	ldr	r2, [pc, #8]	; (800cf40 <SyncPrintf_Init+0x18>)
 800cf36:	6013      	str	r3, [r2, #0]
}
 800cf38:	bf00      	nop
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	0800e8f4 	.word	0x0800e8f4
 800cf40:	200031ac 	.word	0x200031ac

0800cf44 <SyncPrintf>:

int	SyncPrintf (const char *__restrict format, ...)
{
 800cf44:	b40f      	push	{r0, r1, r2, r3}
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b096      	sub	sp, #88	; 0x58
 800cf4a:	af00      	add	r7, sp, #0
#if USE_SyncPrintf == 1
	osMutexAcquire(PrintfMutex, osWaitForever);
 800cf4c:	4b1d      	ldr	r3, [pc, #116]	; (800cfc4 <SyncPrintf+0x80>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f04f 31ff 	mov.w	r1, #4294967295
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fa febf 	bl	8007cd8 <osMutexAcquire>

	va_list arg;
	char Buffer[PrintBufferSize]={0};
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60bb      	str	r3, [r7, #8]
 800cf5e:	f107 030c 	add.w	r3, r7, #12
 800cf62:	2242      	movs	r2, #66	; 0x42
 800cf64:	2100      	movs	r1, #0
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fb7c 	bl	800d664 <memset>
	size_t size = PrintBufferSize;
 800cf6c:	2346      	movs	r3, #70	; 0x46
 800cf6e:	607b      	str	r3, [r7, #4]
	va_start(arg,format);
 800cf70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cf74:	653b      	str	r3, [r7, #80]	; 0x50
	char* Output  = vasnprintf(Buffer,&size,format,arg);
 800cf76:	1d39      	adds	r1, r7, #4
 800cf78:	f107 0008 	add.w	r0, r7, #8
 800cf7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf80:	f000 fb62 	bl	800d648 <vasniprintf>
 800cf84:	6578      	str	r0, [r7, #84]	; 0x54
	va_end(arg);
	if(Output != NULL)
 800cf86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00e      	beq.n	800cfaa <SyncPrintf+0x66>
	{
		HAL_UART_Transmit(&DebugUART,(uint8_t*) Output, size, 10);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	230a      	movs	r3, #10
 800cf92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf94:	480c      	ldr	r0, [pc, #48]	; (800cfc8 <SyncPrintf+0x84>)
 800cf96:	f7fa f917 	bl	80071c8 <HAL_UART_Transmit>

		if(Output != Buffer)
 800cf9a:	f107 0308 	add.w	r3, r7, #8
 800cf9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d002      	beq.n	800cfaa <SyncPrintf+0x66>
		{

			vPortFree(Output);
 800cfa4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cfa6:	f7fe fd45 	bl	800ba34 <vPortFree>
		}
	}
	osMutexRelease(PrintfMutex);
 800cfaa:	4b06      	ldr	r3, [pc, #24]	; (800cfc4 <SyncPrintf+0x80>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fa fef0 	bl	8007d94 <osMutexRelease>

	return size;
 800cfb4:	687b      	ldr	r3, [r7, #4]
#else
	return 0;
#endif
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3758      	adds	r7, #88	; 0x58
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cfc0:	b004      	add	sp, #16
 800cfc2:	4770      	bx	lr
 800cfc4:	200031ac 	.word	0x200031ac
 800cfc8:	20000278 	.word	0x20000278

0800cfcc <DataPack_Split>:
#include "string.h"
#include "stdlib.h"
#include "DataProcess.h"

int DataPack_Split(char* str, uint8_t* ID, char *pValue)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]

	if (str[0] != '#') return 1;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b23      	cmp	r3, #35	; 0x23
 800cfde:	d001      	beq.n	800cfe4 <DataPack_Split+0x18>
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e026      	b.n	800d032 <DataPack_Split+0x66>
	*ID = atoi(str+1);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 f8b9 	bl	800d160 <atoi>
 800cfee:	4603      	mov	r3, r0
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	701a      	strb	r2, [r3, #0]
	char* tok = strtok(str, "=");
 800cff6:	4911      	ldr	r1, [pc, #68]	; (800d03c <DataPack_Split+0x70>)
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 fb3b 	bl	800d674 <strtok>
 800cffe:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d101      	bne.n	800d00a <DataPack_Split+0x3e>
 800d006:	2301      	movs	r3, #1
 800d008:	e013      	b.n	800d032 <DataPack_Split+0x66>
	tok = strtok(NULL,"=");
 800d00a:	490c      	ldr	r1, [pc, #48]	; (800d03c <DataPack_Split+0x70>)
 800d00c:	2000      	movs	r0, #0
 800d00e:	f000 fb31 	bl	800d674 <strtok>
 800d012:	6178      	str	r0, [r7, #20]
	if(tok == NULL) return 1;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <DataPack_Split+0x52>
 800d01a:	2301      	movs	r3, #1
 800d01c:	e009      	b.n	800d032 <DataPack_Split+0x66>
	strcpy(pValue, tok);
 800d01e:	6979      	ldr	r1, [r7, #20]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fc59 	bl	800d8d8 <strcpy>
	tok = strtok(pValue,"\r");
 800d026:	4906      	ldr	r1, [pc, #24]	; (800d040 <DataPack_Split+0x74>)
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fb23 	bl	800d674 <strtok>
 800d02e:	6178      	str	r0, [r7, #20]
	return 0;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3718      	adds	r7, #24
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	0800e82c 	.word	0x0800e82c
 800d040:	0800e830 	.word	0x0800e830

0800d044 <DataPack_GetSpeed>:
	*Angle = StrToFloat(str);
	return 0;
}

int DataPack_GetSpeed(char* str, float* Speed)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]

	*Speed = StrToFloat(str);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f808 	bl	800d064 <StrToFloat>
 800d054:	4602      	mov	r2, r0
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	601a      	str	r2, [r3, #0]
	return 0;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <StrToFloat>:
    }
    return 0;
}

float StrToFloat(char *string)
{
 800d064:	b5b0      	push	{r4, r5, r7, lr}
 800d066:	b088      	sub	sp, #32
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
    float result= 0.0;
 800d06c:	f04f 0300 	mov.w	r3, #0
 800d070:	61fb      	str	r3, [r7, #28]
    int len = strlen(string);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f7f3 f86c 	bl	8000150 <strlen>
 800d078:	4603      	mov	r3, r0
 800d07a:	60fb      	str	r3, [r7, #12]
    int dotPosition = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61bb      	str	r3, [r7, #24]
    uint8_t isNegNumber = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++)
 800d084:	2300      	movs	r3, #0
 800d086:	613b      	str	r3, [r7, #16]
 800d088:	e04a      	b.n	800d120 <StrToFloat+0xbc>
	{
    	if(i == 0 && string[i] == '-')
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d108      	bne.n	800d0a2 <StrToFloat+0x3e>
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	4413      	add	r3, r2
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	2b2d      	cmp	r3, #45	; 0x2d
 800d09a:	d102      	bne.n	800d0a2 <StrToFloat+0x3e>
    	{
    		isNegNumber = 1;
 800d09c:	2301      	movs	r3, #1
 800d09e:	75fb      	strb	r3, [r7, #23]
 800d0a0:	e03b      	b.n	800d11a <StrToFloat+0xb6>
    	}
    	else if (string[i] == '.')
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ac:	d105      	bne.n	800d0ba <StrToFloat+0x56>
		{
    		dotPosition = len - i  - 1;
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	61bb      	str	r3, [r7, #24]
 800d0b8:	e02f      	b.n	800d11a <StrToFloat+0xb6>
		}
		else
		{
			if(string[i] < '0' || string[i] > '9')
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	4413      	add	r3, r2
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b2f      	cmp	r3, #47	; 0x2f
 800d0c4:	d905      	bls.n	800d0d2 <StrToFloat+0x6e>
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	2b39      	cmp	r3, #57	; 0x39
 800d0d0:	d901      	bls.n	800d0d6 <StrToFloat+0x72>
			{
				return result;
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	e03c      	b.n	800d150 <StrToFloat+0xec>
			}
			result = result * 10.0 + (string[i]-'0');
 800d0d6:	69f8      	ldr	r0, [r7, #28]
 800d0d8:	f7f3 f9a6 	bl	8000428 <__aeabi_f2d>
 800d0dc:	f04f 0200 	mov.w	r2, #0
 800d0e0:	4b1d      	ldr	r3, [pc, #116]	; (800d158 <StrToFloat+0xf4>)
 800d0e2:	f7f3 f9f9 	bl	80004d8 <__aeabi_dmul>
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	4614      	mov	r4, r2
 800d0ec:	461d      	mov	r5, r3
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	3b30      	subs	r3, #48	; 0x30
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f3 f983 	bl	8000404 <__aeabi_i2d>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	4620      	mov	r0, r4
 800d104:	4629      	mov	r1, r5
 800d106:	f7f3 f831 	bl	800016c <__adddf3>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	4610      	mov	r0, r2
 800d110:	4619      	mov	r1, r3
 800d112:	f7f3 fbf3 	bl	80008fc <__aeabi_d2f>
 800d116:	4603      	mov	r3, r0
 800d118:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < len; i++)
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	3301      	adds	r3, #1
 800d11e:	613b      	str	r3, [r7, #16]
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	429a      	cmp	r2, r3
 800d126:	dbb0      	blt.n	800d08a <StrToFloat+0x26>
		}
	}

      while (dotPosition--)
 800d128:	e005      	b.n	800d136 <StrToFloat+0xd2>
      {
        result /= 10.0;
 800d12a:	490c      	ldr	r1, [pc, #48]	; (800d15c <StrToFloat+0xf8>)
 800d12c:	69f8      	ldr	r0, [r7, #28]
 800d12e:	f7f3 fdf7 	bl	8000d20 <__aeabi_fdiv>
 800d132:	4603      	mov	r3, r0
 800d134:	61fb      	str	r3, [r7, #28]
      while (dotPosition--)
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	1e5a      	subs	r2, r3, #1
 800d13a:	61ba      	str	r2, [r7, #24]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d1f4      	bne.n	800d12a <StrToFloat+0xc6>
      }

    return isNegNumber ? - result: result;
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <StrToFloat+0xea>
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d14c:	e000      	b.n	800d150 <StrToFloat+0xec>
 800d14e:	69fb      	ldr	r3, [r7, #28]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3720      	adds	r7, #32
 800d154:	46bd      	mov	sp, r7
 800d156:	bdb0      	pop	{r4, r5, r7, pc}
 800d158:	40240000 	.word	0x40240000
 800d15c:	41200000 	.word	0x41200000

0800d160 <atoi>:
 800d160:	220a      	movs	r2, #10
 800d162:	2100      	movs	r1, #0
 800d164:	f000 b932 	b.w	800d3cc <strtol>

0800d168 <malloc>:
 800d168:	4b02      	ldr	r3, [pc, #8]	; (800d174 <malloc+0xc>)
 800d16a:	4601      	mov	r1, r0
 800d16c:	6818      	ldr	r0, [r3, #0]
 800d16e:	f000 b823 	b.w	800d1b8 <_malloc_r>
 800d172:	bf00      	nop
 800d174:	20000088 	.word	0x20000088

0800d178 <sbrk_aligned>:
 800d178:	b570      	push	{r4, r5, r6, lr}
 800d17a:	4e0e      	ldr	r6, [pc, #56]	; (800d1b4 <sbrk_aligned+0x3c>)
 800d17c:	460c      	mov	r4, r1
 800d17e:	6831      	ldr	r1, [r6, #0]
 800d180:	4605      	mov	r5, r0
 800d182:	b911      	cbnz	r1, 800d18a <sbrk_aligned+0x12>
 800d184:	f000 fb5c 	bl	800d840 <_sbrk_r>
 800d188:	6030      	str	r0, [r6, #0]
 800d18a:	4621      	mov	r1, r4
 800d18c:	4628      	mov	r0, r5
 800d18e:	f000 fb57 	bl	800d840 <_sbrk_r>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	d00a      	beq.n	800d1ac <sbrk_aligned+0x34>
 800d196:	1cc4      	adds	r4, r0, #3
 800d198:	f024 0403 	bic.w	r4, r4, #3
 800d19c:	42a0      	cmp	r0, r4
 800d19e:	d007      	beq.n	800d1b0 <sbrk_aligned+0x38>
 800d1a0:	1a21      	subs	r1, r4, r0
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f000 fb4c 	bl	800d840 <_sbrk_r>
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	d101      	bne.n	800d1b0 <sbrk_aligned+0x38>
 800d1ac:	f04f 34ff 	mov.w	r4, #4294967295
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
 800d1b4:	200031b4 	.word	0x200031b4

0800d1b8 <_malloc_r>:
 800d1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1bc:	1ccd      	adds	r5, r1, #3
 800d1be:	f025 0503 	bic.w	r5, r5, #3
 800d1c2:	3508      	adds	r5, #8
 800d1c4:	2d0c      	cmp	r5, #12
 800d1c6:	bf38      	it	cc
 800d1c8:	250c      	movcc	r5, #12
 800d1ca:	2d00      	cmp	r5, #0
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	db01      	blt.n	800d1d4 <_malloc_r+0x1c>
 800d1d0:	42a9      	cmp	r1, r5
 800d1d2:	d905      	bls.n	800d1e0 <_malloc_r+0x28>
 800d1d4:	230c      	movs	r3, #12
 800d1d6:	2600      	movs	r6, #0
 800d1d8:	603b      	str	r3, [r7, #0]
 800d1da:	4630      	mov	r0, r6
 800d1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d2b4 <_malloc_r+0xfc>
 800d1e4:	f000 f868 	bl	800d2b8 <__malloc_lock>
 800d1e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ec:	461c      	mov	r4, r3
 800d1ee:	bb5c      	cbnz	r4, 800d248 <_malloc_r+0x90>
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	f7ff ffc0 	bl	800d178 <sbrk_aligned>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	d155      	bne.n	800d2aa <_malloc_r+0xf2>
 800d1fe:	f8d8 4000 	ldr.w	r4, [r8]
 800d202:	4626      	mov	r6, r4
 800d204:	2e00      	cmp	r6, #0
 800d206:	d145      	bne.n	800d294 <_malloc_r+0xdc>
 800d208:	2c00      	cmp	r4, #0
 800d20a:	d048      	beq.n	800d29e <_malloc_r+0xe6>
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	4631      	mov	r1, r6
 800d210:	4638      	mov	r0, r7
 800d212:	eb04 0903 	add.w	r9, r4, r3
 800d216:	f000 fb13 	bl	800d840 <_sbrk_r>
 800d21a:	4581      	cmp	r9, r0
 800d21c:	d13f      	bne.n	800d29e <_malloc_r+0xe6>
 800d21e:	6821      	ldr	r1, [r4, #0]
 800d220:	4638      	mov	r0, r7
 800d222:	1a6d      	subs	r5, r5, r1
 800d224:	4629      	mov	r1, r5
 800d226:	f7ff ffa7 	bl	800d178 <sbrk_aligned>
 800d22a:	3001      	adds	r0, #1
 800d22c:	d037      	beq.n	800d29e <_malloc_r+0xe6>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	442b      	add	r3, r5
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	f8d8 3000 	ldr.w	r3, [r8]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d038      	beq.n	800d2ae <_malloc_r+0xf6>
 800d23c:	685a      	ldr	r2, [r3, #4]
 800d23e:	42a2      	cmp	r2, r4
 800d240:	d12b      	bne.n	800d29a <_malloc_r+0xe2>
 800d242:	2200      	movs	r2, #0
 800d244:	605a      	str	r2, [r3, #4]
 800d246:	e00f      	b.n	800d268 <_malloc_r+0xb0>
 800d248:	6822      	ldr	r2, [r4, #0]
 800d24a:	1b52      	subs	r2, r2, r5
 800d24c:	d41f      	bmi.n	800d28e <_malloc_r+0xd6>
 800d24e:	2a0b      	cmp	r2, #11
 800d250:	d917      	bls.n	800d282 <_malloc_r+0xca>
 800d252:	1961      	adds	r1, r4, r5
 800d254:	42a3      	cmp	r3, r4
 800d256:	6025      	str	r5, [r4, #0]
 800d258:	bf18      	it	ne
 800d25a:	6059      	strne	r1, [r3, #4]
 800d25c:	6863      	ldr	r3, [r4, #4]
 800d25e:	bf08      	it	eq
 800d260:	f8c8 1000 	streq.w	r1, [r8]
 800d264:	5162      	str	r2, [r4, r5]
 800d266:	604b      	str	r3, [r1, #4]
 800d268:	4638      	mov	r0, r7
 800d26a:	f104 060b 	add.w	r6, r4, #11
 800d26e:	f000 f829 	bl	800d2c4 <__malloc_unlock>
 800d272:	f026 0607 	bic.w	r6, r6, #7
 800d276:	1d23      	adds	r3, r4, #4
 800d278:	1af2      	subs	r2, r6, r3
 800d27a:	d0ae      	beq.n	800d1da <_malloc_r+0x22>
 800d27c:	1b9b      	subs	r3, r3, r6
 800d27e:	50a3      	str	r3, [r4, r2]
 800d280:	e7ab      	b.n	800d1da <_malloc_r+0x22>
 800d282:	42a3      	cmp	r3, r4
 800d284:	6862      	ldr	r2, [r4, #4]
 800d286:	d1dd      	bne.n	800d244 <_malloc_r+0x8c>
 800d288:	f8c8 2000 	str.w	r2, [r8]
 800d28c:	e7ec      	b.n	800d268 <_malloc_r+0xb0>
 800d28e:	4623      	mov	r3, r4
 800d290:	6864      	ldr	r4, [r4, #4]
 800d292:	e7ac      	b.n	800d1ee <_malloc_r+0x36>
 800d294:	4634      	mov	r4, r6
 800d296:	6876      	ldr	r6, [r6, #4]
 800d298:	e7b4      	b.n	800d204 <_malloc_r+0x4c>
 800d29a:	4613      	mov	r3, r2
 800d29c:	e7cc      	b.n	800d238 <_malloc_r+0x80>
 800d29e:	230c      	movs	r3, #12
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	f000 f80e 	bl	800d2c4 <__malloc_unlock>
 800d2a8:	e797      	b.n	800d1da <_malloc_r+0x22>
 800d2aa:	6025      	str	r5, [r4, #0]
 800d2ac:	e7dc      	b.n	800d268 <_malloc_r+0xb0>
 800d2ae:	605b      	str	r3, [r3, #4]
 800d2b0:	deff      	udf	#255	; 0xff
 800d2b2:	bf00      	nop
 800d2b4:	200031b0 	.word	0x200031b0

0800d2b8 <__malloc_lock>:
 800d2b8:	4801      	ldr	r0, [pc, #4]	; (800d2c0 <__malloc_lock+0x8>)
 800d2ba:	f7f5 b81f 	b.w	80022fc <__retarget_lock_acquire_recursive>
 800d2be:	bf00      	nop
 800d2c0:	200007c4 	.word	0x200007c4

0800d2c4 <__malloc_unlock>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	; (800d2cc <__malloc_unlock+0x8>)
 800d2c6:	f7f5 b82d 	b.w	8002324 <__retarget_lock_release_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	200007c4 	.word	0x200007c4

0800d2d0 <_strtol_l.constprop.0>:
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d6:	4686      	mov	lr, r0
 800d2d8:	4690      	mov	r8, r2
 800d2da:	d001      	beq.n	800d2e0 <_strtol_l.constprop.0+0x10>
 800d2dc:	2b24      	cmp	r3, #36	; 0x24
 800d2de:	d906      	bls.n	800d2ee <_strtol_l.constprop.0+0x1e>
 800d2e0:	f000 fad0 	bl	800d884 <__errno>
 800d2e4:	2316      	movs	r3, #22
 800d2e6:	6003      	str	r3, [r0, #0]
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ee:	460d      	mov	r5, r1
 800d2f0:	4835      	ldr	r0, [pc, #212]	; (800d3c8 <_strtol_l.constprop.0+0xf8>)
 800d2f2:	462a      	mov	r2, r5
 800d2f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2f8:	5d06      	ldrb	r6, [r0, r4]
 800d2fa:	f016 0608 	ands.w	r6, r6, #8
 800d2fe:	d1f8      	bne.n	800d2f2 <_strtol_l.constprop.0+0x22>
 800d300:	2c2d      	cmp	r4, #45	; 0x2d
 800d302:	d12e      	bne.n	800d362 <_strtol_l.constprop.0+0x92>
 800d304:	2601      	movs	r6, #1
 800d306:	782c      	ldrb	r4, [r5, #0]
 800d308:	1c95      	adds	r5, r2, #2
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d057      	beq.n	800d3be <_strtol_l.constprop.0+0xee>
 800d30e:	2b10      	cmp	r3, #16
 800d310:	d109      	bne.n	800d326 <_strtol_l.constprop.0+0x56>
 800d312:	2c30      	cmp	r4, #48	; 0x30
 800d314:	d107      	bne.n	800d326 <_strtol_l.constprop.0+0x56>
 800d316:	782a      	ldrb	r2, [r5, #0]
 800d318:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d31c:	2a58      	cmp	r2, #88	; 0x58
 800d31e:	d149      	bne.n	800d3b4 <_strtol_l.constprop.0+0xe4>
 800d320:	2310      	movs	r3, #16
 800d322:	786c      	ldrb	r4, [r5, #1]
 800d324:	3502      	adds	r5, #2
 800d326:	2200      	movs	r2, #0
 800d328:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800d32c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d330:	fbbc f9f3 	udiv	r9, ip, r3
 800d334:	4610      	mov	r0, r2
 800d336:	fb03 ca19 	mls	sl, r3, r9, ip
 800d33a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d33e:	2f09      	cmp	r7, #9
 800d340:	d814      	bhi.n	800d36c <_strtol_l.constprop.0+0x9c>
 800d342:	463c      	mov	r4, r7
 800d344:	42a3      	cmp	r3, r4
 800d346:	dd20      	ble.n	800d38a <_strtol_l.constprop.0+0xba>
 800d348:	1c57      	adds	r7, r2, #1
 800d34a:	d007      	beq.n	800d35c <_strtol_l.constprop.0+0x8c>
 800d34c:	4581      	cmp	r9, r0
 800d34e:	d319      	bcc.n	800d384 <_strtol_l.constprop.0+0xb4>
 800d350:	d101      	bne.n	800d356 <_strtol_l.constprop.0+0x86>
 800d352:	45a2      	cmp	sl, r4
 800d354:	db16      	blt.n	800d384 <_strtol_l.constprop.0+0xb4>
 800d356:	2201      	movs	r2, #1
 800d358:	fb00 4003 	mla	r0, r0, r3, r4
 800d35c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d360:	e7eb      	b.n	800d33a <_strtol_l.constprop.0+0x6a>
 800d362:	2c2b      	cmp	r4, #43	; 0x2b
 800d364:	bf04      	itt	eq
 800d366:	782c      	ldrbeq	r4, [r5, #0]
 800d368:	1c95      	addeq	r5, r2, #2
 800d36a:	e7ce      	b.n	800d30a <_strtol_l.constprop.0+0x3a>
 800d36c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d370:	2f19      	cmp	r7, #25
 800d372:	d801      	bhi.n	800d378 <_strtol_l.constprop.0+0xa8>
 800d374:	3c37      	subs	r4, #55	; 0x37
 800d376:	e7e5      	b.n	800d344 <_strtol_l.constprop.0+0x74>
 800d378:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d37c:	2f19      	cmp	r7, #25
 800d37e:	d804      	bhi.n	800d38a <_strtol_l.constprop.0+0xba>
 800d380:	3c57      	subs	r4, #87	; 0x57
 800d382:	e7df      	b.n	800d344 <_strtol_l.constprop.0+0x74>
 800d384:	f04f 32ff 	mov.w	r2, #4294967295
 800d388:	e7e8      	b.n	800d35c <_strtol_l.constprop.0+0x8c>
 800d38a:	1c53      	adds	r3, r2, #1
 800d38c:	d108      	bne.n	800d3a0 <_strtol_l.constprop.0+0xd0>
 800d38e:	2322      	movs	r3, #34	; 0x22
 800d390:	4660      	mov	r0, ip
 800d392:	f8ce 3000 	str.w	r3, [lr]
 800d396:	f1b8 0f00 	cmp.w	r8, #0
 800d39a:	d0a6      	beq.n	800d2ea <_strtol_l.constprop.0+0x1a>
 800d39c:	1e69      	subs	r1, r5, #1
 800d39e:	e006      	b.n	800d3ae <_strtol_l.constprop.0+0xde>
 800d3a0:	b106      	cbz	r6, 800d3a4 <_strtol_l.constprop.0+0xd4>
 800d3a2:	4240      	negs	r0, r0
 800d3a4:	f1b8 0f00 	cmp.w	r8, #0
 800d3a8:	d09f      	beq.n	800d2ea <_strtol_l.constprop.0+0x1a>
 800d3aa:	2a00      	cmp	r2, #0
 800d3ac:	d1f6      	bne.n	800d39c <_strtol_l.constprop.0+0xcc>
 800d3ae:	f8c8 1000 	str.w	r1, [r8]
 800d3b2:	e79a      	b.n	800d2ea <_strtol_l.constprop.0+0x1a>
 800d3b4:	2430      	movs	r4, #48	; 0x30
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1b5      	bne.n	800d326 <_strtol_l.constprop.0+0x56>
 800d3ba:	2308      	movs	r3, #8
 800d3bc:	e7b3      	b.n	800d326 <_strtol_l.constprop.0+0x56>
 800d3be:	2c30      	cmp	r4, #48	; 0x30
 800d3c0:	d0a9      	beq.n	800d316 <_strtol_l.constprop.0+0x46>
 800d3c2:	230a      	movs	r3, #10
 800d3c4:	e7af      	b.n	800d326 <_strtol_l.constprop.0+0x56>
 800d3c6:	bf00      	nop
 800d3c8:	0800e905 	.word	0x0800e905

0800d3cc <strtol>:
 800d3cc:	4613      	mov	r3, r2
 800d3ce:	460a      	mov	r2, r1
 800d3d0:	4601      	mov	r1, r0
 800d3d2:	4802      	ldr	r0, [pc, #8]	; (800d3dc <strtol+0x10>)
 800d3d4:	6800      	ldr	r0, [r0, #0]
 800d3d6:	f7ff bf7b 	b.w	800d2d0 <_strtol_l.constprop.0>
 800d3da:	bf00      	nop
 800d3dc:	20000088 	.word	0x20000088

0800d3e0 <std>:
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	b510      	push	{r4, lr}
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d3ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3ee:	6083      	str	r3, [r0, #8]
 800d3f0:	8181      	strh	r1, [r0, #12]
 800d3f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d3f4:	81c2      	strh	r2, [r0, #14]
 800d3f6:	6183      	str	r3, [r0, #24]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	2208      	movs	r2, #8
 800d3fc:	305c      	adds	r0, #92	; 0x5c
 800d3fe:	f000 f931 	bl	800d664 <memset>
 800d402:	4b0d      	ldr	r3, [pc, #52]	; (800d438 <std+0x58>)
 800d404:	6224      	str	r4, [r4, #32]
 800d406:	6263      	str	r3, [r4, #36]	; 0x24
 800d408:	4b0c      	ldr	r3, [pc, #48]	; (800d43c <std+0x5c>)
 800d40a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d40c:	4b0c      	ldr	r3, [pc, #48]	; (800d440 <std+0x60>)
 800d40e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d410:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <std+0x64>)
 800d412:	6323      	str	r3, [r4, #48]	; 0x30
 800d414:	4b0c      	ldr	r3, [pc, #48]	; (800d448 <std+0x68>)
 800d416:	429c      	cmp	r4, r3
 800d418:	d006      	beq.n	800d428 <std+0x48>
 800d41a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d41e:	4294      	cmp	r4, r2
 800d420:	d002      	beq.n	800d428 <std+0x48>
 800d422:	33d0      	adds	r3, #208	; 0xd0
 800d424:	429c      	cmp	r4, r3
 800d426:	d105      	bne.n	800d434 <std+0x54>
 800d428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d430:	f7f4 bf3e 	b.w	80022b0 <__retarget_lock_init_recursive>
 800d434:	bd10      	pop	{r4, pc}
 800d436:	bf00      	nop
 800d438:	0800d565 	.word	0x0800d565
 800d43c:	0800d587 	.word	0x0800d587
 800d440:	0800d5bf 	.word	0x0800d5bf
 800d444:	0800d5e3 	.word	0x0800d5e3
 800d448:	200031b8 	.word	0x200031b8

0800d44c <stdio_exit_handler>:
 800d44c:	4a02      	ldr	r2, [pc, #8]	; (800d458 <stdio_exit_handler+0xc>)
 800d44e:	4903      	ldr	r1, [pc, #12]	; (800d45c <stdio_exit_handler+0x10>)
 800d450:	4803      	ldr	r0, [pc, #12]	; (800d460 <stdio_exit_handler+0x14>)
 800d452:	f000 b869 	b.w	800d528 <_fwalk_sglue>
 800d456:	bf00      	nop
 800d458:	20000030 	.word	0x20000030
 800d45c:	0800e0ad 	.word	0x0800e0ad
 800d460:	2000003c 	.word	0x2000003c

0800d464 <cleanup_stdio>:
 800d464:	6841      	ldr	r1, [r0, #4]
 800d466:	4b0c      	ldr	r3, [pc, #48]	; (800d498 <cleanup_stdio+0x34>)
 800d468:	b510      	push	{r4, lr}
 800d46a:	4299      	cmp	r1, r3
 800d46c:	4604      	mov	r4, r0
 800d46e:	d001      	beq.n	800d474 <cleanup_stdio+0x10>
 800d470:	f000 fe1c 	bl	800e0ac <_fflush_r>
 800d474:	68a1      	ldr	r1, [r4, #8]
 800d476:	4b09      	ldr	r3, [pc, #36]	; (800d49c <cleanup_stdio+0x38>)
 800d478:	4299      	cmp	r1, r3
 800d47a:	d002      	beq.n	800d482 <cleanup_stdio+0x1e>
 800d47c:	4620      	mov	r0, r4
 800d47e:	f000 fe15 	bl	800e0ac <_fflush_r>
 800d482:	68e1      	ldr	r1, [r4, #12]
 800d484:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <cleanup_stdio+0x3c>)
 800d486:	4299      	cmp	r1, r3
 800d488:	d004      	beq.n	800d494 <cleanup_stdio+0x30>
 800d48a:	4620      	mov	r0, r4
 800d48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d490:	f000 be0c 	b.w	800e0ac <_fflush_r>
 800d494:	bd10      	pop	{r4, pc}
 800d496:	bf00      	nop
 800d498:	200031b8 	.word	0x200031b8
 800d49c:	20003220 	.word	0x20003220
 800d4a0:	20003288 	.word	0x20003288

0800d4a4 <global_stdio_init.part.0>:
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	4b0b      	ldr	r3, [pc, #44]	; (800d4d4 <global_stdio_init.part.0+0x30>)
 800d4a8:	4c0b      	ldr	r4, [pc, #44]	; (800d4d8 <global_stdio_init.part.0+0x34>)
 800d4aa:	4a0c      	ldr	r2, [pc, #48]	; (800d4dc <global_stdio_init.part.0+0x38>)
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	2104      	movs	r1, #4
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f7ff ff94 	bl	800d3e0 <std>
 800d4b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d4bc:	2201      	movs	r2, #1
 800d4be:	2109      	movs	r1, #9
 800d4c0:	f7ff ff8e 	bl	800d3e0 <std>
 800d4c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4ce:	2112      	movs	r1, #18
 800d4d0:	f7ff bf86 	b.w	800d3e0 <std>
 800d4d4:	200032f0 	.word	0x200032f0
 800d4d8:	200031b8 	.word	0x200031b8
 800d4dc:	0800d44d 	.word	0x0800d44d

0800d4e0 <__sfp_lock_acquire>:
 800d4e0:	4801      	ldr	r0, [pc, #4]	; (800d4e8 <__sfp_lock_acquire+0x8>)
 800d4e2:	f7f4 bf0b 	b.w	80022fc <__retarget_lock_acquire_recursive>
 800d4e6:	bf00      	nop
 800d4e8:	200007b8 	.word	0x200007b8

0800d4ec <__sfp_lock_release>:
 800d4ec:	4801      	ldr	r0, [pc, #4]	; (800d4f4 <__sfp_lock_release+0x8>)
 800d4ee:	f7f4 bf19 	b.w	8002324 <__retarget_lock_release_recursive>
 800d4f2:	bf00      	nop
 800d4f4:	200007b8 	.word	0x200007b8

0800d4f8 <__sinit>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	f7ff fff0 	bl	800d4e0 <__sfp_lock_acquire>
 800d500:	6a23      	ldr	r3, [r4, #32]
 800d502:	b11b      	cbz	r3, 800d50c <__sinit+0x14>
 800d504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d508:	f7ff bff0 	b.w	800d4ec <__sfp_lock_release>
 800d50c:	4b04      	ldr	r3, [pc, #16]	; (800d520 <__sinit+0x28>)
 800d50e:	6223      	str	r3, [r4, #32]
 800d510:	4b04      	ldr	r3, [pc, #16]	; (800d524 <__sinit+0x2c>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1f5      	bne.n	800d504 <__sinit+0xc>
 800d518:	f7ff ffc4 	bl	800d4a4 <global_stdio_init.part.0>
 800d51c:	e7f2      	b.n	800d504 <__sinit+0xc>
 800d51e:	bf00      	nop
 800d520:	0800d465 	.word	0x0800d465
 800d524:	200032f0 	.word	0x200032f0

0800d528 <_fwalk_sglue>:
 800d528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d52c:	4607      	mov	r7, r0
 800d52e:	4688      	mov	r8, r1
 800d530:	4614      	mov	r4, r2
 800d532:	2600      	movs	r6, #0
 800d534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d538:	f1b9 0901 	subs.w	r9, r9, #1
 800d53c:	d505      	bpl.n	800d54a <_fwalk_sglue+0x22>
 800d53e:	6824      	ldr	r4, [r4, #0]
 800d540:	2c00      	cmp	r4, #0
 800d542:	d1f7      	bne.n	800d534 <_fwalk_sglue+0xc>
 800d544:	4630      	mov	r0, r6
 800d546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d54a:	89ab      	ldrh	r3, [r5, #12]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d907      	bls.n	800d560 <_fwalk_sglue+0x38>
 800d550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d554:	3301      	adds	r3, #1
 800d556:	d003      	beq.n	800d560 <_fwalk_sglue+0x38>
 800d558:	4629      	mov	r1, r5
 800d55a:	4638      	mov	r0, r7
 800d55c:	47c0      	blx	r8
 800d55e:	4306      	orrs	r6, r0
 800d560:	3568      	adds	r5, #104	; 0x68
 800d562:	e7e9      	b.n	800d538 <_fwalk_sglue+0x10>

0800d564 <__sread>:
 800d564:	b510      	push	{r4, lr}
 800d566:	460c      	mov	r4, r1
 800d568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56c:	f000 f956 	bl	800d81c <_read_r>
 800d570:	2800      	cmp	r0, #0
 800d572:	bfab      	itete	ge
 800d574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d576:	89a3      	ldrhlt	r3, [r4, #12]
 800d578:	181b      	addge	r3, r3, r0
 800d57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d57e:	bfac      	ite	ge
 800d580:	6563      	strge	r3, [r4, #84]	; 0x54
 800d582:	81a3      	strhlt	r3, [r4, #12]
 800d584:	bd10      	pop	{r4, pc}

0800d586 <__swrite>:
 800d586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d58a:	461f      	mov	r7, r3
 800d58c:	898b      	ldrh	r3, [r1, #12]
 800d58e:	4605      	mov	r5, r0
 800d590:	05db      	lsls	r3, r3, #23
 800d592:	460c      	mov	r4, r1
 800d594:	4616      	mov	r6, r2
 800d596:	d505      	bpl.n	800d5a4 <__swrite+0x1e>
 800d598:	2302      	movs	r3, #2
 800d59a:	2200      	movs	r2, #0
 800d59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a0:	f000 f92a 	bl	800d7f8 <_lseek_r>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	4632      	mov	r2, r6
 800d5a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	463b      	mov	r3, r7
 800d5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ba:	f000 b951 	b.w	800d860 <_write_r>

0800d5be <__sseek>:
 800d5be:	b510      	push	{r4, lr}
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c6:	f000 f917 	bl	800d7f8 <_lseek_r>
 800d5ca:	1c43      	adds	r3, r0, #1
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	bf15      	itete	ne
 800d5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5da:	81a3      	strheq	r3, [r4, #12]
 800d5dc:	bf18      	it	ne
 800d5de:	81a3      	strhne	r3, [r4, #12]
 800d5e0:	bd10      	pop	{r4, pc}

0800d5e2 <__sclose>:
 800d5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e6:	f000 b8a1 	b.w	800d72c <_close_r>

0800d5ea <_vasniprintf_r>:
 800d5ea:	b530      	push	{r4, r5, lr}
 800d5ec:	4615      	mov	r5, r2
 800d5ee:	b09b      	sub	sp, #108	; 0x6c
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	682c      	ldr	r4, [r5, #0]
 800d5f4:	b189      	cbz	r1, 800d61a <_vasniprintf_r+0x30>
 800d5f6:	2c00      	cmp	r4, #0
 800d5f8:	bf12      	itee	ne
 800d5fa:	f44f 63c1 	movne.w	r3, #1544	; 0x608
 800d5fe:	f44f 7322 	moveq.w	r3, #648	; 0x288
 800d602:	2100      	moveq	r1, #0
 800d604:	2c00      	cmp	r4, #0
 800d606:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d60a:	9100      	str	r1, [sp, #0]
 800d60c:	9104      	str	r1, [sp, #16]
 800d60e:	da08      	bge.n	800d622 <_vasniprintf_r+0x38>
 800d610:	238b      	movs	r3, #139	; 0x8b
 800d612:	6003      	str	r3, [r0, #0]
 800d614:	2000      	movs	r0, #0
 800d616:	b01b      	add	sp, #108	; 0x6c
 800d618:	bd30      	pop	{r4, r5, pc}
 800d61a:	f44f 7322 	mov.w	r3, #648	; 0x288
 800d61e:	460c      	mov	r4, r1
 800d620:	e7f0      	b.n	800d604 <_vasniprintf_r+0x1a>
 800d622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d626:	4669      	mov	r1, sp
 800d628:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d62c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d62e:	9402      	str	r4, [sp, #8]
 800d630:	9405      	str	r4, [sp, #20]
 800d632:	f000 fa27 	bl	800da84 <_svfiprintf_r>
 800d636:	1e03      	subs	r3, r0, #0
 800d638:	f04f 0000 	mov.w	r0, #0
 800d63c:	bfa1      	itttt	ge
 800d63e:	602b      	strge	r3, [r5, #0]
 800d640:	9b00      	ldrge	r3, [sp, #0]
 800d642:	7018      	strbge	r0, [r3, #0]
 800d644:	9804      	ldrge	r0, [sp, #16]
 800d646:	e7e6      	b.n	800d616 <_vasniprintf_r+0x2c>

0800d648 <vasniprintf>:
 800d648:	b507      	push	{r0, r1, r2, lr}
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	4613      	mov	r3, r2
 800d64e:	460a      	mov	r2, r1
 800d650:	4601      	mov	r1, r0
 800d652:	4803      	ldr	r0, [pc, #12]	; (800d660 <vasniprintf+0x18>)
 800d654:	6800      	ldr	r0, [r0, #0]
 800d656:	f7ff ffc8 	bl	800d5ea <_vasniprintf_r>
 800d65a:	b003      	add	sp, #12
 800d65c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d660:	20000088 	.word	0x20000088

0800d664 <memset>:
 800d664:	4603      	mov	r3, r0
 800d666:	4402      	add	r2, r0
 800d668:	4293      	cmp	r3, r2
 800d66a:	d100      	bne.n	800d66e <memset+0xa>
 800d66c:	4770      	bx	lr
 800d66e:	f803 1b01 	strb.w	r1, [r3], #1
 800d672:	e7f9      	b.n	800d668 <memset+0x4>

0800d674 <strtok>:
 800d674:	4b16      	ldr	r3, [pc, #88]	; (800d6d0 <strtok+0x5c>)
 800d676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67a:	681f      	ldr	r7, [r3, #0]
 800d67c:	4605      	mov	r5, r0
 800d67e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800d680:	460e      	mov	r6, r1
 800d682:	b9ec      	cbnz	r4, 800d6c0 <strtok+0x4c>
 800d684:	2050      	movs	r0, #80	; 0x50
 800d686:	f7ff fd6f 	bl	800d168 <malloc>
 800d68a:	4602      	mov	r2, r0
 800d68c:	6478      	str	r0, [r7, #68]	; 0x44
 800d68e:	b920      	cbnz	r0, 800d69a <strtok+0x26>
 800d690:	215b      	movs	r1, #91	; 0x5b
 800d692:	4b10      	ldr	r3, [pc, #64]	; (800d6d4 <strtok+0x60>)
 800d694:	4810      	ldr	r0, [pc, #64]	; (800d6d8 <strtok+0x64>)
 800d696:	f000 f935 	bl	800d904 <__assert_func>
 800d69a:	e9c0 4400 	strd	r4, r4, [r0]
 800d69e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d6a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d6a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d6aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d6ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d6b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d6b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d6ba:	6184      	str	r4, [r0, #24]
 800d6bc:	7704      	strb	r4, [r0, #28]
 800d6be:	6244      	str	r4, [r0, #36]	; 0x24
 800d6c0:	4631      	mov	r1, r6
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6cc:	f000 b806 	b.w	800d6dc <__strtok_r>
 800d6d0:	20000088 	.word	0x20000088
 800d6d4:	0800ea05 	.word	0x0800ea05
 800d6d8:	0800ea1c 	.word	0x0800ea1c

0800d6dc <__strtok_r>:
 800d6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6de:	b908      	cbnz	r0, 800d6e4 <__strtok_r+0x8>
 800d6e0:	6810      	ldr	r0, [r2, #0]
 800d6e2:	b188      	cbz	r0, 800d708 <__strtok_r+0x2c>
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	460f      	mov	r7, r1
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d6ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d6f2:	b91e      	cbnz	r6, 800d6fc <__strtok_r+0x20>
 800d6f4:	b965      	cbnz	r5, 800d710 <__strtok_r+0x34>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	6015      	str	r5, [r2, #0]
 800d6fa:	e005      	b.n	800d708 <__strtok_r+0x2c>
 800d6fc:	42b5      	cmp	r5, r6
 800d6fe:	d1f6      	bne.n	800d6ee <__strtok_r+0x12>
 800d700:	2b00      	cmp	r3, #0
 800d702:	d1f0      	bne.n	800d6e6 <__strtok_r+0xa>
 800d704:	6014      	str	r4, [r2, #0]
 800d706:	7003      	strb	r3, [r0, #0]
 800d708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d70a:	461c      	mov	r4, r3
 800d70c:	e00c      	b.n	800d728 <__strtok_r+0x4c>
 800d70e:	b915      	cbnz	r5, 800d716 <__strtok_r+0x3a>
 800d710:	460e      	mov	r6, r1
 800d712:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d716:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d71a:	42ab      	cmp	r3, r5
 800d71c:	d1f7      	bne.n	800d70e <__strtok_r+0x32>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d0f3      	beq.n	800d70a <__strtok_r+0x2e>
 800d722:	2300      	movs	r3, #0
 800d724:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d728:	6014      	str	r4, [r2, #0]
 800d72a:	e7ed      	b.n	800d708 <__strtok_r+0x2c>

0800d72c <_close_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	2300      	movs	r3, #0
 800d730:	4d05      	ldr	r5, [pc, #20]	; (800d748 <_close_r+0x1c>)
 800d732:	4604      	mov	r4, r0
 800d734:	4608      	mov	r0, r1
 800d736:	602b      	str	r3, [r5, #0]
 800d738:	f7f4 fcae 	bl	8002098 <_close>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <_close_r+0x1a>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	b103      	cbz	r3, 800d746 <_close_r+0x1a>
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	200032f4 	.word	0x200032f4

0800d74c <_reclaim_reent>:
 800d74c:	4b29      	ldr	r3, [pc, #164]	; (800d7f4 <_reclaim_reent+0xa8>)
 800d74e:	b570      	push	{r4, r5, r6, lr}
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4604      	mov	r4, r0
 800d754:	4283      	cmp	r3, r0
 800d756:	d04b      	beq.n	800d7f0 <_reclaim_reent+0xa4>
 800d758:	69c3      	ldr	r3, [r0, #28]
 800d75a:	b143      	cbz	r3, 800d76e <_reclaim_reent+0x22>
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d144      	bne.n	800d7ec <_reclaim_reent+0xa0>
 800d762:	69e3      	ldr	r3, [r4, #28]
 800d764:	6819      	ldr	r1, [r3, #0]
 800d766:	b111      	cbz	r1, 800d76e <_reclaim_reent+0x22>
 800d768:	4620      	mov	r0, r4
 800d76a:	f000 f8e9 	bl	800d940 <_free_r>
 800d76e:	6961      	ldr	r1, [r4, #20]
 800d770:	b111      	cbz	r1, 800d778 <_reclaim_reent+0x2c>
 800d772:	4620      	mov	r0, r4
 800d774:	f000 f8e4 	bl	800d940 <_free_r>
 800d778:	69e1      	ldr	r1, [r4, #28]
 800d77a:	b111      	cbz	r1, 800d782 <_reclaim_reent+0x36>
 800d77c:	4620      	mov	r0, r4
 800d77e:	f000 f8df 	bl	800d940 <_free_r>
 800d782:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d784:	b111      	cbz	r1, 800d78c <_reclaim_reent+0x40>
 800d786:	4620      	mov	r0, r4
 800d788:	f000 f8da 	bl	800d940 <_free_r>
 800d78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d78e:	b111      	cbz	r1, 800d796 <_reclaim_reent+0x4a>
 800d790:	4620      	mov	r0, r4
 800d792:	f000 f8d5 	bl	800d940 <_free_r>
 800d796:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d798:	b111      	cbz	r1, 800d7a0 <_reclaim_reent+0x54>
 800d79a:	4620      	mov	r0, r4
 800d79c:	f000 f8d0 	bl	800d940 <_free_r>
 800d7a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d7a2:	b111      	cbz	r1, 800d7aa <_reclaim_reent+0x5e>
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f000 f8cb 	bl	800d940 <_free_r>
 800d7aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d7ac:	b111      	cbz	r1, 800d7b4 <_reclaim_reent+0x68>
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f000 f8c6 	bl	800d940 <_free_r>
 800d7b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d7b6:	b111      	cbz	r1, 800d7be <_reclaim_reent+0x72>
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f000 f8c1 	bl	800d940 <_free_r>
 800d7be:	6a23      	ldr	r3, [r4, #32]
 800d7c0:	b1b3      	cbz	r3, 800d7f0 <_reclaim_reent+0xa4>
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7c8:	4718      	bx	r3
 800d7ca:	5949      	ldr	r1, [r1, r5]
 800d7cc:	b941      	cbnz	r1, 800d7e0 <_reclaim_reent+0x94>
 800d7ce:	3504      	adds	r5, #4
 800d7d0:	69e3      	ldr	r3, [r4, #28]
 800d7d2:	2d80      	cmp	r5, #128	; 0x80
 800d7d4:	68d9      	ldr	r1, [r3, #12]
 800d7d6:	d1f8      	bne.n	800d7ca <_reclaim_reent+0x7e>
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f000 f8b1 	bl	800d940 <_free_r>
 800d7de:	e7c0      	b.n	800d762 <_reclaim_reent+0x16>
 800d7e0:	680e      	ldr	r6, [r1, #0]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f000 f8ac 	bl	800d940 <_free_r>
 800d7e8:	4631      	mov	r1, r6
 800d7ea:	e7ef      	b.n	800d7cc <_reclaim_reent+0x80>
 800d7ec:	2500      	movs	r5, #0
 800d7ee:	e7ef      	b.n	800d7d0 <_reclaim_reent+0x84>
 800d7f0:	bd70      	pop	{r4, r5, r6, pc}
 800d7f2:	bf00      	nop
 800d7f4:	20000088 	.word	0x20000088

0800d7f8 <_lseek_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	4611      	mov	r1, r2
 800d800:	2200      	movs	r2, #0
 800d802:	4d05      	ldr	r5, [pc, #20]	; (800d818 <_lseek_r+0x20>)
 800d804:	602a      	str	r2, [r5, #0]
 800d806:	461a      	mov	r2, r3
 800d808:	f7f4 fc6a 	bl	80020e0 <_lseek>
 800d80c:	1c43      	adds	r3, r0, #1
 800d80e:	d102      	bne.n	800d816 <_lseek_r+0x1e>
 800d810:	682b      	ldr	r3, [r5, #0]
 800d812:	b103      	cbz	r3, 800d816 <_lseek_r+0x1e>
 800d814:	6023      	str	r3, [r4, #0]
 800d816:	bd38      	pop	{r3, r4, r5, pc}
 800d818:	200032f4 	.word	0x200032f4

0800d81c <_read_r>:
 800d81c:	b538      	push	{r3, r4, r5, lr}
 800d81e:	4604      	mov	r4, r0
 800d820:	4608      	mov	r0, r1
 800d822:	4611      	mov	r1, r2
 800d824:	2200      	movs	r2, #0
 800d826:	4d05      	ldr	r5, [pc, #20]	; (800d83c <_read_r+0x20>)
 800d828:	602a      	str	r2, [r5, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	f7f4 fbfb 	bl	8002026 <_read>
 800d830:	1c43      	adds	r3, r0, #1
 800d832:	d102      	bne.n	800d83a <_read_r+0x1e>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	b103      	cbz	r3, 800d83a <_read_r+0x1e>
 800d838:	6023      	str	r3, [r4, #0]
 800d83a:	bd38      	pop	{r3, r4, r5, pc}
 800d83c:	200032f4 	.word	0x200032f4

0800d840 <_sbrk_r>:
 800d840:	b538      	push	{r3, r4, r5, lr}
 800d842:	2300      	movs	r3, #0
 800d844:	4d05      	ldr	r5, [pc, #20]	; (800d85c <_sbrk_r+0x1c>)
 800d846:	4604      	mov	r4, r0
 800d848:	4608      	mov	r0, r1
 800d84a:	602b      	str	r3, [r5, #0]
 800d84c:	f7f4 fc54 	bl	80020f8 <_sbrk>
 800d850:	1c43      	adds	r3, r0, #1
 800d852:	d102      	bne.n	800d85a <_sbrk_r+0x1a>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	b103      	cbz	r3, 800d85a <_sbrk_r+0x1a>
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	bd38      	pop	{r3, r4, r5, pc}
 800d85c:	200032f4 	.word	0x200032f4

0800d860 <_write_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4604      	mov	r4, r0
 800d864:	4608      	mov	r0, r1
 800d866:	4611      	mov	r1, r2
 800d868:	2200      	movs	r2, #0
 800d86a:	4d05      	ldr	r5, [pc, #20]	; (800d880 <_write_r+0x20>)
 800d86c:	602a      	str	r2, [r5, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	f7f4 fbf6 	bl	8002060 <_write>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_write_r+0x1e>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_write_r+0x1e>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	200032f4 	.word	0x200032f4

0800d884 <__errno>:
 800d884:	4b01      	ldr	r3, [pc, #4]	; (800d88c <__errno+0x8>)
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	20000088 	.word	0x20000088

0800d890 <__libc_init_array>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	2600      	movs	r6, #0
 800d894:	4d0c      	ldr	r5, [pc, #48]	; (800d8c8 <__libc_init_array+0x38>)
 800d896:	4c0d      	ldr	r4, [pc, #52]	; (800d8cc <__libc_init_array+0x3c>)
 800d898:	1b64      	subs	r4, r4, r5
 800d89a:	10a4      	asrs	r4, r4, #2
 800d89c:	42a6      	cmp	r6, r4
 800d89e:	d109      	bne.n	800d8b4 <__libc_init_array+0x24>
 800d8a0:	f000 ff44 	bl	800e72c <_init>
 800d8a4:	2600      	movs	r6, #0
 800d8a6:	4d0a      	ldr	r5, [pc, #40]	; (800d8d0 <__libc_init_array+0x40>)
 800d8a8:	4c0a      	ldr	r4, [pc, #40]	; (800d8d4 <__libc_init_array+0x44>)
 800d8aa:	1b64      	subs	r4, r4, r5
 800d8ac:	10a4      	asrs	r4, r4, #2
 800d8ae:	42a6      	cmp	r6, r4
 800d8b0:	d105      	bne.n	800d8be <__libc_init_array+0x2e>
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8b8:	4798      	blx	r3
 800d8ba:	3601      	adds	r6, #1
 800d8bc:	e7ee      	b.n	800d89c <__libc_init_array+0xc>
 800d8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8c2:	4798      	blx	r3
 800d8c4:	3601      	adds	r6, #1
 800d8c6:	e7f2      	b.n	800d8ae <__libc_init_array+0x1e>
 800d8c8:	0800eae8 	.word	0x0800eae8
 800d8cc:	0800eae8 	.word	0x0800eae8
 800d8d0:	0800eae8 	.word	0x0800eae8
 800d8d4:	0800eaec 	.word	0x0800eaec

0800d8d8 <strcpy>:
 800d8d8:	4603      	mov	r3, r0
 800d8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8de:	f803 2b01 	strb.w	r2, [r3], #1
 800d8e2:	2a00      	cmp	r2, #0
 800d8e4:	d1f9      	bne.n	800d8da <strcpy+0x2>
 800d8e6:	4770      	bx	lr

0800d8e8 <memcpy>:
 800d8e8:	440a      	add	r2, r1
 800d8ea:	4291      	cmp	r1, r2
 800d8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8f0:	d100      	bne.n	800d8f4 <memcpy+0xc>
 800d8f2:	4770      	bx	lr
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8fa:	4291      	cmp	r1, r2
 800d8fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d900:	d1f9      	bne.n	800d8f6 <memcpy+0xe>
 800d902:	bd10      	pop	{r4, pc}

0800d904 <__assert_func>:
 800d904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d906:	4614      	mov	r4, r2
 800d908:	461a      	mov	r2, r3
 800d90a:	4b09      	ldr	r3, [pc, #36]	; (800d930 <__assert_func+0x2c>)
 800d90c:	4605      	mov	r5, r0
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	68d8      	ldr	r0, [r3, #12]
 800d912:	b14c      	cbz	r4, 800d928 <__assert_func+0x24>
 800d914:	4b07      	ldr	r3, [pc, #28]	; (800d934 <__assert_func+0x30>)
 800d916:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d91a:	9100      	str	r1, [sp, #0]
 800d91c:	462b      	mov	r3, r5
 800d91e:	4906      	ldr	r1, [pc, #24]	; (800d938 <__assert_func+0x34>)
 800d920:	f000 fbec 	bl	800e0fc <fiprintf>
 800d924:	f000 fc24 	bl	800e170 <abort>
 800d928:	4b04      	ldr	r3, [pc, #16]	; (800d93c <__assert_func+0x38>)
 800d92a:	461c      	mov	r4, r3
 800d92c:	e7f3      	b.n	800d916 <__assert_func+0x12>
 800d92e:	bf00      	nop
 800d930:	20000088 	.word	0x20000088
 800d934:	0800ea76 	.word	0x0800ea76
 800d938:	0800ea83 	.word	0x0800ea83
 800d93c:	0800eab1 	.word	0x0800eab1

0800d940 <_free_r>:
 800d940:	b538      	push	{r3, r4, r5, lr}
 800d942:	4605      	mov	r5, r0
 800d944:	2900      	cmp	r1, #0
 800d946:	d040      	beq.n	800d9ca <_free_r+0x8a>
 800d948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d94c:	1f0c      	subs	r4, r1, #4
 800d94e:	2b00      	cmp	r3, #0
 800d950:	bfb8      	it	lt
 800d952:	18e4      	addlt	r4, r4, r3
 800d954:	f7ff fcb0 	bl	800d2b8 <__malloc_lock>
 800d958:	4a1c      	ldr	r2, [pc, #112]	; (800d9cc <_free_r+0x8c>)
 800d95a:	6813      	ldr	r3, [r2, #0]
 800d95c:	b933      	cbnz	r3, 800d96c <_free_r+0x2c>
 800d95e:	6063      	str	r3, [r4, #4]
 800d960:	6014      	str	r4, [r2, #0]
 800d962:	4628      	mov	r0, r5
 800d964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d968:	f7ff bcac 	b.w	800d2c4 <__malloc_unlock>
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	d908      	bls.n	800d982 <_free_r+0x42>
 800d970:	6820      	ldr	r0, [r4, #0]
 800d972:	1821      	adds	r1, r4, r0
 800d974:	428b      	cmp	r3, r1
 800d976:	bf01      	itttt	eq
 800d978:	6819      	ldreq	r1, [r3, #0]
 800d97a:	685b      	ldreq	r3, [r3, #4]
 800d97c:	1809      	addeq	r1, r1, r0
 800d97e:	6021      	streq	r1, [r4, #0]
 800d980:	e7ed      	b.n	800d95e <_free_r+0x1e>
 800d982:	461a      	mov	r2, r3
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	b10b      	cbz	r3, 800d98c <_free_r+0x4c>
 800d988:	42a3      	cmp	r3, r4
 800d98a:	d9fa      	bls.n	800d982 <_free_r+0x42>
 800d98c:	6811      	ldr	r1, [r2, #0]
 800d98e:	1850      	adds	r0, r2, r1
 800d990:	42a0      	cmp	r0, r4
 800d992:	d10b      	bne.n	800d9ac <_free_r+0x6c>
 800d994:	6820      	ldr	r0, [r4, #0]
 800d996:	4401      	add	r1, r0
 800d998:	1850      	adds	r0, r2, r1
 800d99a:	4283      	cmp	r3, r0
 800d99c:	6011      	str	r1, [r2, #0]
 800d99e:	d1e0      	bne.n	800d962 <_free_r+0x22>
 800d9a0:	6818      	ldr	r0, [r3, #0]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	4408      	add	r0, r1
 800d9a6:	6010      	str	r0, [r2, #0]
 800d9a8:	6053      	str	r3, [r2, #4]
 800d9aa:	e7da      	b.n	800d962 <_free_r+0x22>
 800d9ac:	d902      	bls.n	800d9b4 <_free_r+0x74>
 800d9ae:	230c      	movs	r3, #12
 800d9b0:	602b      	str	r3, [r5, #0]
 800d9b2:	e7d6      	b.n	800d962 <_free_r+0x22>
 800d9b4:	6820      	ldr	r0, [r4, #0]
 800d9b6:	1821      	adds	r1, r4, r0
 800d9b8:	428b      	cmp	r3, r1
 800d9ba:	bf01      	itttt	eq
 800d9bc:	6819      	ldreq	r1, [r3, #0]
 800d9be:	685b      	ldreq	r3, [r3, #4]
 800d9c0:	1809      	addeq	r1, r1, r0
 800d9c2:	6021      	streq	r1, [r4, #0]
 800d9c4:	6063      	str	r3, [r4, #4]
 800d9c6:	6054      	str	r4, [r2, #4]
 800d9c8:	e7cb      	b.n	800d962 <_free_r+0x22>
 800d9ca:	bd38      	pop	{r3, r4, r5, pc}
 800d9cc:	200031b0 	.word	0x200031b0

0800d9d0 <__ssputs_r>:
 800d9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d4:	461f      	mov	r7, r3
 800d9d6:	688e      	ldr	r6, [r1, #8]
 800d9d8:	4682      	mov	sl, r0
 800d9da:	42be      	cmp	r6, r7
 800d9dc:	460c      	mov	r4, r1
 800d9de:	4690      	mov	r8, r2
 800d9e0:	680b      	ldr	r3, [r1, #0]
 800d9e2:	d82c      	bhi.n	800da3e <__ssputs_r+0x6e>
 800d9e4:	898a      	ldrh	r2, [r1, #12]
 800d9e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9ea:	d026      	beq.n	800da3a <__ssputs_r+0x6a>
 800d9ec:	6965      	ldr	r5, [r4, #20]
 800d9ee:	6909      	ldr	r1, [r1, #16]
 800d9f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9f4:	eba3 0901 	sub.w	r9, r3, r1
 800d9f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9fc:	1c7b      	adds	r3, r7, #1
 800d9fe:	444b      	add	r3, r9
 800da00:	106d      	asrs	r5, r5, #1
 800da02:	429d      	cmp	r5, r3
 800da04:	bf38      	it	cc
 800da06:	461d      	movcc	r5, r3
 800da08:	0553      	lsls	r3, r2, #21
 800da0a:	d527      	bpl.n	800da5c <__ssputs_r+0x8c>
 800da0c:	4629      	mov	r1, r5
 800da0e:	f7ff fbd3 	bl	800d1b8 <_malloc_r>
 800da12:	4606      	mov	r6, r0
 800da14:	b360      	cbz	r0, 800da70 <__ssputs_r+0xa0>
 800da16:	464a      	mov	r2, r9
 800da18:	6921      	ldr	r1, [r4, #16]
 800da1a:	f7ff ff65 	bl	800d8e8 <memcpy>
 800da1e:	89a3      	ldrh	r3, [r4, #12]
 800da20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da28:	81a3      	strh	r3, [r4, #12]
 800da2a:	6126      	str	r6, [r4, #16]
 800da2c:	444e      	add	r6, r9
 800da2e:	6026      	str	r6, [r4, #0]
 800da30:	463e      	mov	r6, r7
 800da32:	6165      	str	r5, [r4, #20]
 800da34:	eba5 0509 	sub.w	r5, r5, r9
 800da38:	60a5      	str	r5, [r4, #8]
 800da3a:	42be      	cmp	r6, r7
 800da3c:	d900      	bls.n	800da40 <__ssputs_r+0x70>
 800da3e:	463e      	mov	r6, r7
 800da40:	4632      	mov	r2, r6
 800da42:	4641      	mov	r1, r8
 800da44:	6820      	ldr	r0, [r4, #0]
 800da46:	f000 fb6b 	bl	800e120 <memmove>
 800da4a:	2000      	movs	r0, #0
 800da4c:	68a3      	ldr	r3, [r4, #8]
 800da4e:	1b9b      	subs	r3, r3, r6
 800da50:	60a3      	str	r3, [r4, #8]
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	4433      	add	r3, r6
 800da56:	6023      	str	r3, [r4, #0]
 800da58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da5c:	462a      	mov	r2, r5
 800da5e:	f000 fb8e 	bl	800e17e <_realloc_r>
 800da62:	4606      	mov	r6, r0
 800da64:	2800      	cmp	r0, #0
 800da66:	d1e0      	bne.n	800da2a <__ssputs_r+0x5a>
 800da68:	4650      	mov	r0, sl
 800da6a:	6921      	ldr	r1, [r4, #16]
 800da6c:	f7ff ff68 	bl	800d940 <_free_r>
 800da70:	230c      	movs	r3, #12
 800da72:	f8ca 3000 	str.w	r3, [sl]
 800da76:	89a3      	ldrh	r3, [r4, #12]
 800da78:	f04f 30ff 	mov.w	r0, #4294967295
 800da7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da80:	81a3      	strh	r3, [r4, #12]
 800da82:	e7e9      	b.n	800da58 <__ssputs_r+0x88>

0800da84 <_svfiprintf_r>:
 800da84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da88:	4698      	mov	r8, r3
 800da8a:	898b      	ldrh	r3, [r1, #12]
 800da8c:	4607      	mov	r7, r0
 800da8e:	061b      	lsls	r3, r3, #24
 800da90:	460d      	mov	r5, r1
 800da92:	4614      	mov	r4, r2
 800da94:	b09d      	sub	sp, #116	; 0x74
 800da96:	d50e      	bpl.n	800dab6 <_svfiprintf_r+0x32>
 800da98:	690b      	ldr	r3, [r1, #16]
 800da9a:	b963      	cbnz	r3, 800dab6 <_svfiprintf_r+0x32>
 800da9c:	2140      	movs	r1, #64	; 0x40
 800da9e:	f7ff fb8b 	bl	800d1b8 <_malloc_r>
 800daa2:	6028      	str	r0, [r5, #0]
 800daa4:	6128      	str	r0, [r5, #16]
 800daa6:	b920      	cbnz	r0, 800dab2 <_svfiprintf_r+0x2e>
 800daa8:	230c      	movs	r3, #12
 800daaa:	603b      	str	r3, [r7, #0]
 800daac:	f04f 30ff 	mov.w	r0, #4294967295
 800dab0:	e0d0      	b.n	800dc54 <_svfiprintf_r+0x1d0>
 800dab2:	2340      	movs	r3, #64	; 0x40
 800dab4:	616b      	str	r3, [r5, #20]
 800dab6:	2300      	movs	r3, #0
 800dab8:	9309      	str	r3, [sp, #36]	; 0x24
 800daba:	2320      	movs	r3, #32
 800dabc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dac0:	2330      	movs	r3, #48	; 0x30
 800dac2:	f04f 0901 	mov.w	r9, #1
 800dac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800daca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800dc6c <_svfiprintf_r+0x1e8>
 800dace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dad2:	4623      	mov	r3, r4
 800dad4:	469a      	mov	sl, r3
 800dad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dada:	b10a      	cbz	r2, 800dae0 <_svfiprintf_r+0x5c>
 800dadc:	2a25      	cmp	r2, #37	; 0x25
 800dade:	d1f9      	bne.n	800dad4 <_svfiprintf_r+0x50>
 800dae0:	ebba 0b04 	subs.w	fp, sl, r4
 800dae4:	d00b      	beq.n	800dafe <_svfiprintf_r+0x7a>
 800dae6:	465b      	mov	r3, fp
 800dae8:	4622      	mov	r2, r4
 800daea:	4629      	mov	r1, r5
 800daec:	4638      	mov	r0, r7
 800daee:	f7ff ff6f 	bl	800d9d0 <__ssputs_r>
 800daf2:	3001      	adds	r0, #1
 800daf4:	f000 80a9 	beq.w	800dc4a <_svfiprintf_r+0x1c6>
 800daf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dafa:	445a      	add	r2, fp
 800dafc:	9209      	str	r2, [sp, #36]	; 0x24
 800dafe:	f89a 3000 	ldrb.w	r3, [sl]
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 80a1 	beq.w	800dc4a <_svfiprintf_r+0x1c6>
 800db08:	2300      	movs	r3, #0
 800db0a:	f04f 32ff 	mov.w	r2, #4294967295
 800db0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db12:	f10a 0a01 	add.w	sl, sl, #1
 800db16:	9304      	str	r3, [sp, #16]
 800db18:	9307      	str	r3, [sp, #28]
 800db1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db1e:	931a      	str	r3, [sp, #104]	; 0x68
 800db20:	4654      	mov	r4, sl
 800db22:	2205      	movs	r2, #5
 800db24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db28:	4850      	ldr	r0, [pc, #320]	; (800dc6c <_svfiprintf_r+0x1e8>)
 800db2a:	f000 fb13 	bl	800e154 <memchr>
 800db2e:	9a04      	ldr	r2, [sp, #16]
 800db30:	b9d8      	cbnz	r0, 800db6a <_svfiprintf_r+0xe6>
 800db32:	06d0      	lsls	r0, r2, #27
 800db34:	bf44      	itt	mi
 800db36:	2320      	movmi	r3, #32
 800db38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db3c:	0711      	lsls	r1, r2, #28
 800db3e:	bf44      	itt	mi
 800db40:	232b      	movmi	r3, #43	; 0x2b
 800db42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db46:	f89a 3000 	ldrb.w	r3, [sl]
 800db4a:	2b2a      	cmp	r3, #42	; 0x2a
 800db4c:	d015      	beq.n	800db7a <_svfiprintf_r+0xf6>
 800db4e:	4654      	mov	r4, sl
 800db50:	2000      	movs	r0, #0
 800db52:	f04f 0c0a 	mov.w	ip, #10
 800db56:	9a07      	ldr	r2, [sp, #28]
 800db58:	4621      	mov	r1, r4
 800db5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db5e:	3b30      	subs	r3, #48	; 0x30
 800db60:	2b09      	cmp	r3, #9
 800db62:	d94d      	bls.n	800dc00 <_svfiprintf_r+0x17c>
 800db64:	b1b0      	cbz	r0, 800db94 <_svfiprintf_r+0x110>
 800db66:	9207      	str	r2, [sp, #28]
 800db68:	e014      	b.n	800db94 <_svfiprintf_r+0x110>
 800db6a:	eba0 0308 	sub.w	r3, r0, r8
 800db6e:	fa09 f303 	lsl.w	r3, r9, r3
 800db72:	4313      	orrs	r3, r2
 800db74:	46a2      	mov	sl, r4
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	e7d2      	b.n	800db20 <_svfiprintf_r+0x9c>
 800db7a:	9b03      	ldr	r3, [sp, #12]
 800db7c:	1d19      	adds	r1, r3, #4
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	9103      	str	r1, [sp, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	bfbb      	ittet	lt
 800db86:	425b      	neglt	r3, r3
 800db88:	f042 0202 	orrlt.w	r2, r2, #2
 800db8c:	9307      	strge	r3, [sp, #28]
 800db8e:	9307      	strlt	r3, [sp, #28]
 800db90:	bfb8      	it	lt
 800db92:	9204      	strlt	r2, [sp, #16]
 800db94:	7823      	ldrb	r3, [r4, #0]
 800db96:	2b2e      	cmp	r3, #46	; 0x2e
 800db98:	d10c      	bne.n	800dbb4 <_svfiprintf_r+0x130>
 800db9a:	7863      	ldrb	r3, [r4, #1]
 800db9c:	2b2a      	cmp	r3, #42	; 0x2a
 800db9e:	d134      	bne.n	800dc0a <_svfiprintf_r+0x186>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	3402      	adds	r4, #2
 800dba4:	1d1a      	adds	r2, r3, #4
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	9203      	str	r2, [sp, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	bfb8      	it	lt
 800dbae:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbb2:	9305      	str	r3, [sp, #20]
 800dbb4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800dc70 <_svfiprintf_r+0x1ec>
 800dbb8:	2203      	movs	r2, #3
 800dbba:	4650      	mov	r0, sl
 800dbbc:	7821      	ldrb	r1, [r4, #0]
 800dbbe:	f000 fac9 	bl	800e154 <memchr>
 800dbc2:	b138      	cbz	r0, 800dbd4 <_svfiprintf_r+0x150>
 800dbc4:	2240      	movs	r2, #64	; 0x40
 800dbc6:	9b04      	ldr	r3, [sp, #16]
 800dbc8:	eba0 000a 	sub.w	r0, r0, sl
 800dbcc:	4082      	lsls	r2, r0
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	3401      	adds	r4, #1
 800dbd2:	9304      	str	r3, [sp, #16]
 800dbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd8:	2206      	movs	r2, #6
 800dbda:	4826      	ldr	r0, [pc, #152]	; (800dc74 <_svfiprintf_r+0x1f0>)
 800dbdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbe0:	f000 fab8 	bl	800e154 <memchr>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d038      	beq.n	800dc5a <_svfiprintf_r+0x1d6>
 800dbe8:	4b23      	ldr	r3, [pc, #140]	; (800dc78 <_svfiprintf_r+0x1f4>)
 800dbea:	bb1b      	cbnz	r3, 800dc34 <_svfiprintf_r+0x1b0>
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	3307      	adds	r3, #7
 800dbf0:	f023 0307 	bic.w	r3, r3, #7
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	9303      	str	r3, [sp, #12]
 800dbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbfa:	4433      	add	r3, r6
 800dbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbfe:	e768      	b.n	800dad2 <_svfiprintf_r+0x4e>
 800dc00:	460c      	mov	r4, r1
 800dc02:	2001      	movs	r0, #1
 800dc04:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc08:	e7a6      	b.n	800db58 <_svfiprintf_r+0xd4>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f04f 0c0a 	mov.w	ip, #10
 800dc10:	4619      	mov	r1, r3
 800dc12:	3401      	adds	r4, #1
 800dc14:	9305      	str	r3, [sp, #20]
 800dc16:	4620      	mov	r0, r4
 800dc18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc1c:	3a30      	subs	r2, #48	; 0x30
 800dc1e:	2a09      	cmp	r2, #9
 800dc20:	d903      	bls.n	800dc2a <_svfiprintf_r+0x1a6>
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d0c6      	beq.n	800dbb4 <_svfiprintf_r+0x130>
 800dc26:	9105      	str	r1, [sp, #20]
 800dc28:	e7c4      	b.n	800dbb4 <_svfiprintf_r+0x130>
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc32:	e7f0      	b.n	800dc16 <_svfiprintf_r+0x192>
 800dc34:	ab03      	add	r3, sp, #12
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	462a      	mov	r2, r5
 800dc3a:	4638      	mov	r0, r7
 800dc3c:	4b0f      	ldr	r3, [pc, #60]	; (800dc7c <_svfiprintf_r+0x1f8>)
 800dc3e:	a904      	add	r1, sp, #16
 800dc40:	f3af 8000 	nop.w
 800dc44:	1c42      	adds	r2, r0, #1
 800dc46:	4606      	mov	r6, r0
 800dc48:	d1d6      	bne.n	800dbf8 <_svfiprintf_r+0x174>
 800dc4a:	89ab      	ldrh	r3, [r5, #12]
 800dc4c:	065b      	lsls	r3, r3, #25
 800dc4e:	f53f af2d 	bmi.w	800daac <_svfiprintf_r+0x28>
 800dc52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc54:	b01d      	add	sp, #116	; 0x74
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	ab03      	add	r3, sp, #12
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	462a      	mov	r2, r5
 800dc60:	4638      	mov	r0, r7
 800dc62:	4b06      	ldr	r3, [pc, #24]	; (800dc7c <_svfiprintf_r+0x1f8>)
 800dc64:	a904      	add	r1, sp, #16
 800dc66:	f000 f87d 	bl	800dd64 <_printf_i>
 800dc6a:	e7eb      	b.n	800dc44 <_svfiprintf_r+0x1c0>
 800dc6c:	0800eab2 	.word	0x0800eab2
 800dc70:	0800eab8 	.word	0x0800eab8
 800dc74:	0800eabc 	.word	0x0800eabc
 800dc78:	00000000 	.word	0x00000000
 800dc7c:	0800d9d1 	.word	0x0800d9d1

0800dc80 <_printf_common>:
 800dc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc84:	4616      	mov	r6, r2
 800dc86:	4699      	mov	r9, r3
 800dc88:	688a      	ldr	r2, [r1, #8]
 800dc8a:	690b      	ldr	r3, [r1, #16]
 800dc8c:	4607      	mov	r7, r0
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	bfb8      	it	lt
 800dc92:	4613      	movlt	r3, r2
 800dc94:	6033      	str	r3, [r6, #0]
 800dc96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dca0:	b10a      	cbz	r2, 800dca6 <_printf_common+0x26>
 800dca2:	3301      	adds	r3, #1
 800dca4:	6033      	str	r3, [r6, #0]
 800dca6:	6823      	ldr	r3, [r4, #0]
 800dca8:	0699      	lsls	r1, r3, #26
 800dcaa:	bf42      	ittt	mi
 800dcac:	6833      	ldrmi	r3, [r6, #0]
 800dcae:	3302      	addmi	r3, #2
 800dcb0:	6033      	strmi	r3, [r6, #0]
 800dcb2:	6825      	ldr	r5, [r4, #0]
 800dcb4:	f015 0506 	ands.w	r5, r5, #6
 800dcb8:	d106      	bne.n	800dcc8 <_printf_common+0x48>
 800dcba:	f104 0a19 	add.w	sl, r4, #25
 800dcbe:	68e3      	ldr	r3, [r4, #12]
 800dcc0:	6832      	ldr	r2, [r6, #0]
 800dcc2:	1a9b      	subs	r3, r3, r2
 800dcc4:	42ab      	cmp	r3, r5
 800dcc6:	dc2b      	bgt.n	800dd20 <_printf_common+0xa0>
 800dcc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dccc:	1e13      	subs	r3, r2, #0
 800dcce:	6822      	ldr	r2, [r4, #0]
 800dcd0:	bf18      	it	ne
 800dcd2:	2301      	movne	r3, #1
 800dcd4:	0692      	lsls	r2, r2, #26
 800dcd6:	d430      	bmi.n	800dd3a <_printf_common+0xba>
 800dcd8:	4649      	mov	r1, r9
 800dcda:	4638      	mov	r0, r7
 800dcdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dce0:	47c0      	blx	r8
 800dce2:	3001      	adds	r0, #1
 800dce4:	d023      	beq.n	800dd2e <_printf_common+0xae>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	6922      	ldr	r2, [r4, #16]
 800dcea:	f003 0306 	and.w	r3, r3, #6
 800dcee:	2b04      	cmp	r3, #4
 800dcf0:	bf14      	ite	ne
 800dcf2:	2500      	movne	r5, #0
 800dcf4:	6833      	ldreq	r3, [r6, #0]
 800dcf6:	f04f 0600 	mov.w	r6, #0
 800dcfa:	bf08      	it	eq
 800dcfc:	68e5      	ldreq	r5, [r4, #12]
 800dcfe:	f104 041a 	add.w	r4, r4, #26
 800dd02:	bf08      	it	eq
 800dd04:	1aed      	subeq	r5, r5, r3
 800dd06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dd0a:	bf08      	it	eq
 800dd0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd10:	4293      	cmp	r3, r2
 800dd12:	bfc4      	itt	gt
 800dd14:	1a9b      	subgt	r3, r3, r2
 800dd16:	18ed      	addgt	r5, r5, r3
 800dd18:	42b5      	cmp	r5, r6
 800dd1a:	d11a      	bne.n	800dd52 <_printf_common+0xd2>
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	e008      	b.n	800dd32 <_printf_common+0xb2>
 800dd20:	2301      	movs	r3, #1
 800dd22:	4652      	mov	r2, sl
 800dd24:	4649      	mov	r1, r9
 800dd26:	4638      	mov	r0, r7
 800dd28:	47c0      	blx	r8
 800dd2a:	3001      	adds	r0, #1
 800dd2c:	d103      	bne.n	800dd36 <_printf_common+0xb6>
 800dd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd36:	3501      	adds	r5, #1
 800dd38:	e7c1      	b.n	800dcbe <_printf_common+0x3e>
 800dd3a:	2030      	movs	r0, #48	; 0x30
 800dd3c:	18e1      	adds	r1, r4, r3
 800dd3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd48:	4422      	add	r2, r4
 800dd4a:	3302      	adds	r3, #2
 800dd4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd50:	e7c2      	b.n	800dcd8 <_printf_common+0x58>
 800dd52:	2301      	movs	r3, #1
 800dd54:	4622      	mov	r2, r4
 800dd56:	4649      	mov	r1, r9
 800dd58:	4638      	mov	r0, r7
 800dd5a:	47c0      	blx	r8
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	d0e6      	beq.n	800dd2e <_printf_common+0xae>
 800dd60:	3601      	adds	r6, #1
 800dd62:	e7d9      	b.n	800dd18 <_printf_common+0x98>

0800dd64 <_printf_i>:
 800dd64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd68:	7e0f      	ldrb	r7, [r1, #24]
 800dd6a:	4691      	mov	r9, r2
 800dd6c:	2f78      	cmp	r7, #120	; 0x78
 800dd6e:	4680      	mov	r8, r0
 800dd70:	460c      	mov	r4, r1
 800dd72:	469a      	mov	sl, r3
 800dd74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd7a:	d807      	bhi.n	800dd8c <_printf_i+0x28>
 800dd7c:	2f62      	cmp	r7, #98	; 0x62
 800dd7e:	d80a      	bhi.n	800dd96 <_printf_i+0x32>
 800dd80:	2f00      	cmp	r7, #0
 800dd82:	f000 80d5 	beq.w	800df30 <_printf_i+0x1cc>
 800dd86:	2f58      	cmp	r7, #88	; 0x58
 800dd88:	f000 80c1 	beq.w	800df0e <_printf_i+0x1aa>
 800dd8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd94:	e03a      	b.n	800de0c <_printf_i+0xa8>
 800dd96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd9a:	2b15      	cmp	r3, #21
 800dd9c:	d8f6      	bhi.n	800dd8c <_printf_i+0x28>
 800dd9e:	a101      	add	r1, pc, #4	; (adr r1, 800dda4 <_printf_i+0x40>)
 800dda0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dda4:	0800ddfd 	.word	0x0800ddfd
 800dda8:	0800de11 	.word	0x0800de11
 800ddac:	0800dd8d 	.word	0x0800dd8d
 800ddb0:	0800dd8d 	.word	0x0800dd8d
 800ddb4:	0800dd8d 	.word	0x0800dd8d
 800ddb8:	0800dd8d 	.word	0x0800dd8d
 800ddbc:	0800de11 	.word	0x0800de11
 800ddc0:	0800dd8d 	.word	0x0800dd8d
 800ddc4:	0800dd8d 	.word	0x0800dd8d
 800ddc8:	0800dd8d 	.word	0x0800dd8d
 800ddcc:	0800dd8d 	.word	0x0800dd8d
 800ddd0:	0800df17 	.word	0x0800df17
 800ddd4:	0800de3d 	.word	0x0800de3d
 800ddd8:	0800ded1 	.word	0x0800ded1
 800dddc:	0800dd8d 	.word	0x0800dd8d
 800dde0:	0800dd8d 	.word	0x0800dd8d
 800dde4:	0800df39 	.word	0x0800df39
 800dde8:	0800dd8d 	.word	0x0800dd8d
 800ddec:	0800de3d 	.word	0x0800de3d
 800ddf0:	0800dd8d 	.word	0x0800dd8d
 800ddf4:	0800dd8d 	.word	0x0800dd8d
 800ddf8:	0800ded9 	.word	0x0800ded9
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	1d1a      	adds	r2, r3, #4
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	602a      	str	r2, [r5, #0]
 800de04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de0c:	2301      	movs	r3, #1
 800de0e:	e0a0      	b.n	800df52 <_printf_i+0x1ee>
 800de10:	6820      	ldr	r0, [r4, #0]
 800de12:	682b      	ldr	r3, [r5, #0]
 800de14:	0607      	lsls	r7, r0, #24
 800de16:	f103 0104 	add.w	r1, r3, #4
 800de1a:	6029      	str	r1, [r5, #0]
 800de1c:	d501      	bpl.n	800de22 <_printf_i+0xbe>
 800de1e:	681e      	ldr	r6, [r3, #0]
 800de20:	e003      	b.n	800de2a <_printf_i+0xc6>
 800de22:	0646      	lsls	r6, r0, #25
 800de24:	d5fb      	bpl.n	800de1e <_printf_i+0xba>
 800de26:	f9b3 6000 	ldrsh.w	r6, [r3]
 800de2a:	2e00      	cmp	r6, #0
 800de2c:	da03      	bge.n	800de36 <_printf_i+0xd2>
 800de2e:	232d      	movs	r3, #45	; 0x2d
 800de30:	4276      	negs	r6, r6
 800de32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de36:	230a      	movs	r3, #10
 800de38:	4859      	ldr	r0, [pc, #356]	; (800dfa0 <_printf_i+0x23c>)
 800de3a:	e012      	b.n	800de62 <_printf_i+0xfe>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	6820      	ldr	r0, [r4, #0]
 800de40:	1d19      	adds	r1, r3, #4
 800de42:	6029      	str	r1, [r5, #0]
 800de44:	0605      	lsls	r5, r0, #24
 800de46:	d501      	bpl.n	800de4c <_printf_i+0xe8>
 800de48:	681e      	ldr	r6, [r3, #0]
 800de4a:	e002      	b.n	800de52 <_printf_i+0xee>
 800de4c:	0641      	lsls	r1, r0, #25
 800de4e:	d5fb      	bpl.n	800de48 <_printf_i+0xe4>
 800de50:	881e      	ldrh	r6, [r3, #0]
 800de52:	2f6f      	cmp	r7, #111	; 0x6f
 800de54:	bf0c      	ite	eq
 800de56:	2308      	moveq	r3, #8
 800de58:	230a      	movne	r3, #10
 800de5a:	4851      	ldr	r0, [pc, #324]	; (800dfa0 <_printf_i+0x23c>)
 800de5c:	2100      	movs	r1, #0
 800de5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de62:	6865      	ldr	r5, [r4, #4]
 800de64:	2d00      	cmp	r5, #0
 800de66:	bfa8      	it	ge
 800de68:	6821      	ldrge	r1, [r4, #0]
 800de6a:	60a5      	str	r5, [r4, #8]
 800de6c:	bfa4      	itt	ge
 800de6e:	f021 0104 	bicge.w	r1, r1, #4
 800de72:	6021      	strge	r1, [r4, #0]
 800de74:	b90e      	cbnz	r6, 800de7a <_printf_i+0x116>
 800de76:	2d00      	cmp	r5, #0
 800de78:	d04b      	beq.n	800df12 <_printf_i+0x1ae>
 800de7a:	4615      	mov	r5, r2
 800de7c:	fbb6 f1f3 	udiv	r1, r6, r3
 800de80:	fb03 6711 	mls	r7, r3, r1, r6
 800de84:	5dc7      	ldrb	r7, [r0, r7]
 800de86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de8a:	4637      	mov	r7, r6
 800de8c:	42bb      	cmp	r3, r7
 800de8e:	460e      	mov	r6, r1
 800de90:	d9f4      	bls.n	800de7c <_printf_i+0x118>
 800de92:	2b08      	cmp	r3, #8
 800de94:	d10b      	bne.n	800deae <_printf_i+0x14a>
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	07de      	lsls	r6, r3, #31
 800de9a:	d508      	bpl.n	800deae <_printf_i+0x14a>
 800de9c:	6923      	ldr	r3, [r4, #16]
 800de9e:	6861      	ldr	r1, [r4, #4]
 800dea0:	4299      	cmp	r1, r3
 800dea2:	bfde      	ittt	le
 800dea4:	2330      	movle	r3, #48	; 0x30
 800dea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800deaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800deae:	1b52      	subs	r2, r2, r5
 800deb0:	6122      	str	r2, [r4, #16]
 800deb2:	464b      	mov	r3, r9
 800deb4:	4621      	mov	r1, r4
 800deb6:	4640      	mov	r0, r8
 800deb8:	f8cd a000 	str.w	sl, [sp]
 800debc:	aa03      	add	r2, sp, #12
 800debe:	f7ff fedf 	bl	800dc80 <_printf_common>
 800dec2:	3001      	adds	r0, #1
 800dec4:	d14a      	bne.n	800df5c <_printf_i+0x1f8>
 800dec6:	f04f 30ff 	mov.w	r0, #4294967295
 800deca:	b004      	add	sp, #16
 800decc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded0:	6823      	ldr	r3, [r4, #0]
 800ded2:	f043 0320 	orr.w	r3, r3, #32
 800ded6:	6023      	str	r3, [r4, #0]
 800ded8:	2778      	movs	r7, #120	; 0x78
 800deda:	4832      	ldr	r0, [pc, #200]	; (800dfa4 <_printf_i+0x240>)
 800dedc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	6829      	ldr	r1, [r5, #0]
 800dee4:	061f      	lsls	r7, r3, #24
 800dee6:	f851 6b04 	ldr.w	r6, [r1], #4
 800deea:	d402      	bmi.n	800def2 <_printf_i+0x18e>
 800deec:	065f      	lsls	r7, r3, #25
 800deee:	bf48      	it	mi
 800def0:	b2b6      	uxthmi	r6, r6
 800def2:	07df      	lsls	r7, r3, #31
 800def4:	bf48      	it	mi
 800def6:	f043 0320 	orrmi.w	r3, r3, #32
 800defa:	6029      	str	r1, [r5, #0]
 800defc:	bf48      	it	mi
 800defe:	6023      	strmi	r3, [r4, #0]
 800df00:	b91e      	cbnz	r6, 800df0a <_printf_i+0x1a6>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	f023 0320 	bic.w	r3, r3, #32
 800df08:	6023      	str	r3, [r4, #0]
 800df0a:	2310      	movs	r3, #16
 800df0c:	e7a6      	b.n	800de5c <_printf_i+0xf8>
 800df0e:	4824      	ldr	r0, [pc, #144]	; (800dfa0 <_printf_i+0x23c>)
 800df10:	e7e4      	b.n	800dedc <_printf_i+0x178>
 800df12:	4615      	mov	r5, r2
 800df14:	e7bd      	b.n	800de92 <_printf_i+0x12e>
 800df16:	682b      	ldr	r3, [r5, #0]
 800df18:	6826      	ldr	r6, [r4, #0]
 800df1a:	1d18      	adds	r0, r3, #4
 800df1c:	6961      	ldr	r1, [r4, #20]
 800df1e:	6028      	str	r0, [r5, #0]
 800df20:	0635      	lsls	r5, r6, #24
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	d501      	bpl.n	800df2a <_printf_i+0x1c6>
 800df26:	6019      	str	r1, [r3, #0]
 800df28:	e002      	b.n	800df30 <_printf_i+0x1cc>
 800df2a:	0670      	lsls	r0, r6, #25
 800df2c:	d5fb      	bpl.n	800df26 <_printf_i+0x1c2>
 800df2e:	8019      	strh	r1, [r3, #0]
 800df30:	2300      	movs	r3, #0
 800df32:	4615      	mov	r5, r2
 800df34:	6123      	str	r3, [r4, #16]
 800df36:	e7bc      	b.n	800deb2 <_printf_i+0x14e>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	2100      	movs	r1, #0
 800df3c:	1d1a      	adds	r2, r3, #4
 800df3e:	602a      	str	r2, [r5, #0]
 800df40:	681d      	ldr	r5, [r3, #0]
 800df42:	6862      	ldr	r2, [r4, #4]
 800df44:	4628      	mov	r0, r5
 800df46:	f000 f905 	bl	800e154 <memchr>
 800df4a:	b108      	cbz	r0, 800df50 <_printf_i+0x1ec>
 800df4c:	1b40      	subs	r0, r0, r5
 800df4e:	6060      	str	r0, [r4, #4]
 800df50:	6863      	ldr	r3, [r4, #4]
 800df52:	6123      	str	r3, [r4, #16]
 800df54:	2300      	movs	r3, #0
 800df56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df5a:	e7aa      	b.n	800deb2 <_printf_i+0x14e>
 800df5c:	462a      	mov	r2, r5
 800df5e:	4649      	mov	r1, r9
 800df60:	4640      	mov	r0, r8
 800df62:	6923      	ldr	r3, [r4, #16]
 800df64:	47d0      	blx	sl
 800df66:	3001      	adds	r0, #1
 800df68:	d0ad      	beq.n	800dec6 <_printf_i+0x162>
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	079b      	lsls	r3, r3, #30
 800df6e:	d413      	bmi.n	800df98 <_printf_i+0x234>
 800df70:	68e0      	ldr	r0, [r4, #12]
 800df72:	9b03      	ldr	r3, [sp, #12]
 800df74:	4298      	cmp	r0, r3
 800df76:	bfb8      	it	lt
 800df78:	4618      	movlt	r0, r3
 800df7a:	e7a6      	b.n	800deca <_printf_i+0x166>
 800df7c:	2301      	movs	r3, #1
 800df7e:	4632      	mov	r2, r6
 800df80:	4649      	mov	r1, r9
 800df82:	4640      	mov	r0, r8
 800df84:	47d0      	blx	sl
 800df86:	3001      	adds	r0, #1
 800df88:	d09d      	beq.n	800dec6 <_printf_i+0x162>
 800df8a:	3501      	adds	r5, #1
 800df8c:	68e3      	ldr	r3, [r4, #12]
 800df8e:	9903      	ldr	r1, [sp, #12]
 800df90:	1a5b      	subs	r3, r3, r1
 800df92:	42ab      	cmp	r3, r5
 800df94:	dcf2      	bgt.n	800df7c <_printf_i+0x218>
 800df96:	e7eb      	b.n	800df70 <_printf_i+0x20c>
 800df98:	2500      	movs	r5, #0
 800df9a:	f104 0619 	add.w	r6, r4, #25
 800df9e:	e7f5      	b.n	800df8c <_printf_i+0x228>
 800dfa0:	0800eac3 	.word	0x0800eac3
 800dfa4:	0800ead4 	.word	0x0800ead4

0800dfa8 <__sflush_r>:
 800dfa8:	898a      	ldrh	r2, [r1, #12]
 800dfaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfac:	4605      	mov	r5, r0
 800dfae:	0710      	lsls	r0, r2, #28
 800dfb0:	460c      	mov	r4, r1
 800dfb2:	d457      	bmi.n	800e064 <__sflush_r+0xbc>
 800dfb4:	684b      	ldr	r3, [r1, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	dc04      	bgt.n	800dfc4 <__sflush_r+0x1c>
 800dfba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	dc01      	bgt.n	800dfc4 <__sflush_r+0x1c>
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dfc6:	2e00      	cmp	r6, #0
 800dfc8:	d0fa      	beq.n	800dfc0 <__sflush_r+0x18>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dfd0:	682f      	ldr	r7, [r5, #0]
 800dfd2:	6a21      	ldr	r1, [r4, #32]
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	d032      	beq.n	800e03e <__sflush_r+0x96>
 800dfd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dfda:	89a3      	ldrh	r3, [r4, #12]
 800dfdc:	075a      	lsls	r2, r3, #29
 800dfde:	d505      	bpl.n	800dfec <__sflush_r+0x44>
 800dfe0:	6863      	ldr	r3, [r4, #4]
 800dfe2:	1ac0      	subs	r0, r0, r3
 800dfe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfe6:	b10b      	cbz	r3, 800dfec <__sflush_r+0x44>
 800dfe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dfea:	1ac0      	subs	r0, r0, r3
 800dfec:	2300      	movs	r3, #0
 800dfee:	4602      	mov	r2, r0
 800dff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dff2:	4628      	mov	r0, r5
 800dff4:	6a21      	ldr	r1, [r4, #32]
 800dff6:	47b0      	blx	r6
 800dff8:	1c43      	adds	r3, r0, #1
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	d106      	bne.n	800e00c <__sflush_r+0x64>
 800dffe:	6829      	ldr	r1, [r5, #0]
 800e000:	291d      	cmp	r1, #29
 800e002:	d82b      	bhi.n	800e05c <__sflush_r+0xb4>
 800e004:	4a28      	ldr	r2, [pc, #160]	; (800e0a8 <__sflush_r+0x100>)
 800e006:	410a      	asrs	r2, r1
 800e008:	07d6      	lsls	r6, r2, #31
 800e00a:	d427      	bmi.n	800e05c <__sflush_r+0xb4>
 800e00c:	2200      	movs	r2, #0
 800e00e:	6062      	str	r2, [r4, #4]
 800e010:	6922      	ldr	r2, [r4, #16]
 800e012:	04d9      	lsls	r1, r3, #19
 800e014:	6022      	str	r2, [r4, #0]
 800e016:	d504      	bpl.n	800e022 <__sflush_r+0x7a>
 800e018:	1c42      	adds	r2, r0, #1
 800e01a:	d101      	bne.n	800e020 <__sflush_r+0x78>
 800e01c:	682b      	ldr	r3, [r5, #0]
 800e01e:	b903      	cbnz	r3, 800e022 <__sflush_r+0x7a>
 800e020:	6560      	str	r0, [r4, #84]	; 0x54
 800e022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e024:	602f      	str	r7, [r5, #0]
 800e026:	2900      	cmp	r1, #0
 800e028:	d0ca      	beq.n	800dfc0 <__sflush_r+0x18>
 800e02a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e02e:	4299      	cmp	r1, r3
 800e030:	d002      	beq.n	800e038 <__sflush_r+0x90>
 800e032:	4628      	mov	r0, r5
 800e034:	f7ff fc84 	bl	800d940 <_free_r>
 800e038:	2000      	movs	r0, #0
 800e03a:	6360      	str	r0, [r4, #52]	; 0x34
 800e03c:	e7c1      	b.n	800dfc2 <__sflush_r+0x1a>
 800e03e:	2301      	movs	r3, #1
 800e040:	4628      	mov	r0, r5
 800e042:	47b0      	blx	r6
 800e044:	1c41      	adds	r1, r0, #1
 800e046:	d1c8      	bne.n	800dfda <__sflush_r+0x32>
 800e048:	682b      	ldr	r3, [r5, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d0c5      	beq.n	800dfda <__sflush_r+0x32>
 800e04e:	2b1d      	cmp	r3, #29
 800e050:	d001      	beq.n	800e056 <__sflush_r+0xae>
 800e052:	2b16      	cmp	r3, #22
 800e054:	d101      	bne.n	800e05a <__sflush_r+0xb2>
 800e056:	602f      	str	r7, [r5, #0]
 800e058:	e7b2      	b.n	800dfc0 <__sflush_r+0x18>
 800e05a:	89a3      	ldrh	r3, [r4, #12]
 800e05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e060:	81a3      	strh	r3, [r4, #12]
 800e062:	e7ae      	b.n	800dfc2 <__sflush_r+0x1a>
 800e064:	690f      	ldr	r7, [r1, #16]
 800e066:	2f00      	cmp	r7, #0
 800e068:	d0aa      	beq.n	800dfc0 <__sflush_r+0x18>
 800e06a:	0793      	lsls	r3, r2, #30
 800e06c:	bf18      	it	ne
 800e06e:	2300      	movne	r3, #0
 800e070:	680e      	ldr	r6, [r1, #0]
 800e072:	bf08      	it	eq
 800e074:	694b      	ldreq	r3, [r1, #20]
 800e076:	1bf6      	subs	r6, r6, r7
 800e078:	600f      	str	r7, [r1, #0]
 800e07a:	608b      	str	r3, [r1, #8]
 800e07c:	2e00      	cmp	r6, #0
 800e07e:	dd9f      	ble.n	800dfc0 <__sflush_r+0x18>
 800e080:	4633      	mov	r3, r6
 800e082:	463a      	mov	r2, r7
 800e084:	4628      	mov	r0, r5
 800e086:	6a21      	ldr	r1, [r4, #32]
 800e088:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e08c:	47e0      	blx	ip
 800e08e:	2800      	cmp	r0, #0
 800e090:	dc06      	bgt.n	800e0a0 <__sflush_r+0xf8>
 800e092:	89a3      	ldrh	r3, [r4, #12]
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	e790      	b.n	800dfc2 <__sflush_r+0x1a>
 800e0a0:	4407      	add	r7, r0
 800e0a2:	1a36      	subs	r6, r6, r0
 800e0a4:	e7ea      	b.n	800e07c <__sflush_r+0xd4>
 800e0a6:	bf00      	nop
 800e0a8:	dfbffffe 	.word	0xdfbffffe

0800e0ac <_fflush_r>:
 800e0ac:	b538      	push	{r3, r4, r5, lr}
 800e0ae:	690b      	ldr	r3, [r1, #16]
 800e0b0:	4605      	mov	r5, r0
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	b913      	cbnz	r3, 800e0bc <_fflush_r+0x10>
 800e0b6:	2500      	movs	r5, #0
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	bd38      	pop	{r3, r4, r5, pc}
 800e0bc:	b118      	cbz	r0, 800e0c6 <_fflush_r+0x1a>
 800e0be:	6a03      	ldr	r3, [r0, #32]
 800e0c0:	b90b      	cbnz	r3, 800e0c6 <_fflush_r+0x1a>
 800e0c2:	f7ff fa19 	bl	800d4f8 <__sinit>
 800e0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d0f3      	beq.n	800e0b6 <_fflush_r+0xa>
 800e0ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e0d0:	07d0      	lsls	r0, r2, #31
 800e0d2:	d404      	bmi.n	800e0de <_fflush_r+0x32>
 800e0d4:	0599      	lsls	r1, r3, #22
 800e0d6:	d402      	bmi.n	800e0de <_fflush_r+0x32>
 800e0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0da:	f7f4 f90f 	bl	80022fc <__retarget_lock_acquire_recursive>
 800e0de:	4628      	mov	r0, r5
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	f7ff ff61 	bl	800dfa8 <__sflush_r>
 800e0e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	07da      	lsls	r2, r3, #31
 800e0ec:	d4e4      	bmi.n	800e0b8 <_fflush_r+0xc>
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	059b      	lsls	r3, r3, #22
 800e0f2:	d4e1      	bmi.n	800e0b8 <_fflush_r+0xc>
 800e0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0f6:	f7f4 f915 	bl	8002324 <__retarget_lock_release_recursive>
 800e0fa:	e7dd      	b.n	800e0b8 <_fflush_r+0xc>

0800e0fc <fiprintf>:
 800e0fc:	b40e      	push	{r1, r2, r3}
 800e0fe:	b503      	push	{r0, r1, lr}
 800e100:	4601      	mov	r1, r0
 800e102:	ab03      	add	r3, sp, #12
 800e104:	4805      	ldr	r0, [pc, #20]	; (800e11c <fiprintf+0x20>)
 800e106:	f853 2b04 	ldr.w	r2, [r3], #4
 800e10a:	6800      	ldr	r0, [r0, #0]
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	f000 f88d 	bl	800e22c <_vfiprintf_r>
 800e112:	b002      	add	sp, #8
 800e114:	f85d eb04 	ldr.w	lr, [sp], #4
 800e118:	b003      	add	sp, #12
 800e11a:	4770      	bx	lr
 800e11c:	20000088 	.word	0x20000088

0800e120 <memmove>:
 800e120:	4288      	cmp	r0, r1
 800e122:	b510      	push	{r4, lr}
 800e124:	eb01 0402 	add.w	r4, r1, r2
 800e128:	d902      	bls.n	800e130 <memmove+0x10>
 800e12a:	4284      	cmp	r4, r0
 800e12c:	4623      	mov	r3, r4
 800e12e:	d807      	bhi.n	800e140 <memmove+0x20>
 800e130:	1e43      	subs	r3, r0, #1
 800e132:	42a1      	cmp	r1, r4
 800e134:	d008      	beq.n	800e148 <memmove+0x28>
 800e136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e13a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e13e:	e7f8      	b.n	800e132 <memmove+0x12>
 800e140:	4601      	mov	r1, r0
 800e142:	4402      	add	r2, r0
 800e144:	428a      	cmp	r2, r1
 800e146:	d100      	bne.n	800e14a <memmove+0x2a>
 800e148:	bd10      	pop	{r4, pc}
 800e14a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e14e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e152:	e7f7      	b.n	800e144 <memmove+0x24>

0800e154 <memchr>:
 800e154:	4603      	mov	r3, r0
 800e156:	b510      	push	{r4, lr}
 800e158:	b2c9      	uxtb	r1, r1
 800e15a:	4402      	add	r2, r0
 800e15c:	4293      	cmp	r3, r2
 800e15e:	4618      	mov	r0, r3
 800e160:	d101      	bne.n	800e166 <memchr+0x12>
 800e162:	2000      	movs	r0, #0
 800e164:	e003      	b.n	800e16e <memchr+0x1a>
 800e166:	7804      	ldrb	r4, [r0, #0]
 800e168:	3301      	adds	r3, #1
 800e16a:	428c      	cmp	r4, r1
 800e16c:	d1f6      	bne.n	800e15c <memchr+0x8>
 800e16e:	bd10      	pop	{r4, pc}

0800e170 <abort>:
 800e170:	2006      	movs	r0, #6
 800e172:	b508      	push	{r3, lr}
 800e174:	f000 fa32 	bl	800e5dc <raise>
 800e178:	2001      	movs	r0, #1
 800e17a:	f7f3 ff4a 	bl	8002012 <_exit>

0800e17e <_realloc_r>:
 800e17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e182:	4680      	mov	r8, r0
 800e184:	4614      	mov	r4, r2
 800e186:	460e      	mov	r6, r1
 800e188:	b921      	cbnz	r1, 800e194 <_realloc_r+0x16>
 800e18a:	4611      	mov	r1, r2
 800e18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e190:	f7ff b812 	b.w	800d1b8 <_malloc_r>
 800e194:	b92a      	cbnz	r2, 800e1a2 <_realloc_r+0x24>
 800e196:	f7ff fbd3 	bl	800d940 <_free_r>
 800e19a:	4625      	mov	r5, r4
 800e19c:	4628      	mov	r0, r5
 800e19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a2:	f000 fa37 	bl	800e614 <_malloc_usable_size_r>
 800e1a6:	4284      	cmp	r4, r0
 800e1a8:	4607      	mov	r7, r0
 800e1aa:	d802      	bhi.n	800e1b2 <_realloc_r+0x34>
 800e1ac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1b0:	d812      	bhi.n	800e1d8 <_realloc_r+0x5a>
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	4640      	mov	r0, r8
 800e1b6:	f7fe ffff 	bl	800d1b8 <_malloc_r>
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d0ed      	beq.n	800e19c <_realloc_r+0x1e>
 800e1c0:	42bc      	cmp	r4, r7
 800e1c2:	4622      	mov	r2, r4
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	bf28      	it	cs
 800e1c8:	463a      	movcs	r2, r7
 800e1ca:	f7ff fb8d 	bl	800d8e8 <memcpy>
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4640      	mov	r0, r8
 800e1d2:	f7ff fbb5 	bl	800d940 <_free_r>
 800e1d6:	e7e1      	b.n	800e19c <_realloc_r+0x1e>
 800e1d8:	4635      	mov	r5, r6
 800e1da:	e7df      	b.n	800e19c <_realloc_r+0x1e>

0800e1dc <__sfputc_r>:
 800e1dc:	6893      	ldr	r3, [r2, #8]
 800e1de:	b410      	push	{r4}
 800e1e0:	3b01      	subs	r3, #1
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	6093      	str	r3, [r2, #8]
 800e1e6:	da07      	bge.n	800e1f8 <__sfputc_r+0x1c>
 800e1e8:	6994      	ldr	r4, [r2, #24]
 800e1ea:	42a3      	cmp	r3, r4
 800e1ec:	db01      	blt.n	800e1f2 <__sfputc_r+0x16>
 800e1ee:	290a      	cmp	r1, #10
 800e1f0:	d102      	bne.n	800e1f8 <__sfputc_r+0x1c>
 800e1f2:	bc10      	pop	{r4}
 800e1f4:	f000 b934 	b.w	800e460 <__swbuf_r>
 800e1f8:	6813      	ldr	r3, [r2, #0]
 800e1fa:	1c58      	adds	r0, r3, #1
 800e1fc:	6010      	str	r0, [r2, #0]
 800e1fe:	7019      	strb	r1, [r3, #0]
 800e200:	4608      	mov	r0, r1
 800e202:	bc10      	pop	{r4}
 800e204:	4770      	bx	lr

0800e206 <__sfputs_r>:
 800e206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e208:	4606      	mov	r6, r0
 800e20a:	460f      	mov	r7, r1
 800e20c:	4614      	mov	r4, r2
 800e20e:	18d5      	adds	r5, r2, r3
 800e210:	42ac      	cmp	r4, r5
 800e212:	d101      	bne.n	800e218 <__sfputs_r+0x12>
 800e214:	2000      	movs	r0, #0
 800e216:	e007      	b.n	800e228 <__sfputs_r+0x22>
 800e218:	463a      	mov	r2, r7
 800e21a:	4630      	mov	r0, r6
 800e21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e220:	f7ff ffdc 	bl	800e1dc <__sfputc_r>
 800e224:	1c43      	adds	r3, r0, #1
 800e226:	d1f3      	bne.n	800e210 <__sfputs_r+0xa>
 800e228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e22c <_vfiprintf_r>:
 800e22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e230:	460d      	mov	r5, r1
 800e232:	4614      	mov	r4, r2
 800e234:	4698      	mov	r8, r3
 800e236:	4606      	mov	r6, r0
 800e238:	b09d      	sub	sp, #116	; 0x74
 800e23a:	b118      	cbz	r0, 800e244 <_vfiprintf_r+0x18>
 800e23c:	6a03      	ldr	r3, [r0, #32]
 800e23e:	b90b      	cbnz	r3, 800e244 <_vfiprintf_r+0x18>
 800e240:	f7ff f95a 	bl	800d4f8 <__sinit>
 800e244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e246:	07d9      	lsls	r1, r3, #31
 800e248:	d405      	bmi.n	800e256 <_vfiprintf_r+0x2a>
 800e24a:	89ab      	ldrh	r3, [r5, #12]
 800e24c:	059a      	lsls	r2, r3, #22
 800e24e:	d402      	bmi.n	800e256 <_vfiprintf_r+0x2a>
 800e250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e252:	f7f4 f853 	bl	80022fc <__retarget_lock_acquire_recursive>
 800e256:	89ab      	ldrh	r3, [r5, #12]
 800e258:	071b      	lsls	r3, r3, #28
 800e25a:	d501      	bpl.n	800e260 <_vfiprintf_r+0x34>
 800e25c:	692b      	ldr	r3, [r5, #16]
 800e25e:	b99b      	cbnz	r3, 800e288 <_vfiprintf_r+0x5c>
 800e260:	4629      	mov	r1, r5
 800e262:	4630      	mov	r0, r6
 800e264:	f000 f93a 	bl	800e4dc <__swsetup_r>
 800e268:	b170      	cbz	r0, 800e288 <_vfiprintf_r+0x5c>
 800e26a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e26c:	07dc      	lsls	r4, r3, #31
 800e26e:	d504      	bpl.n	800e27a <_vfiprintf_r+0x4e>
 800e270:	f04f 30ff 	mov.w	r0, #4294967295
 800e274:	b01d      	add	sp, #116	; 0x74
 800e276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27a:	89ab      	ldrh	r3, [r5, #12]
 800e27c:	0598      	lsls	r0, r3, #22
 800e27e:	d4f7      	bmi.n	800e270 <_vfiprintf_r+0x44>
 800e280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e282:	f7f4 f84f 	bl	8002324 <__retarget_lock_release_recursive>
 800e286:	e7f3      	b.n	800e270 <_vfiprintf_r+0x44>
 800e288:	2300      	movs	r3, #0
 800e28a:	9309      	str	r3, [sp, #36]	; 0x24
 800e28c:	2320      	movs	r3, #32
 800e28e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e292:	2330      	movs	r3, #48	; 0x30
 800e294:	f04f 0901 	mov.w	r9, #1
 800e298:	f8cd 800c 	str.w	r8, [sp, #12]
 800e29c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e44c <_vfiprintf_r+0x220>
 800e2a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2a4:	4623      	mov	r3, r4
 800e2a6:	469a      	mov	sl, r3
 800e2a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2ac:	b10a      	cbz	r2, 800e2b2 <_vfiprintf_r+0x86>
 800e2ae:	2a25      	cmp	r2, #37	; 0x25
 800e2b0:	d1f9      	bne.n	800e2a6 <_vfiprintf_r+0x7a>
 800e2b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e2b6:	d00b      	beq.n	800e2d0 <_vfiprintf_r+0xa4>
 800e2b8:	465b      	mov	r3, fp
 800e2ba:	4622      	mov	r2, r4
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f7ff ffa1 	bl	800e206 <__sfputs_r>
 800e2c4:	3001      	adds	r0, #1
 800e2c6:	f000 80a9 	beq.w	800e41c <_vfiprintf_r+0x1f0>
 800e2ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2cc:	445a      	add	r2, fp
 800e2ce:	9209      	str	r2, [sp, #36]	; 0x24
 800e2d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80a1 	beq.w	800e41c <_vfiprintf_r+0x1f0>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2e4:	f10a 0a01 	add.w	sl, sl, #1
 800e2e8:	9304      	str	r3, [sp, #16]
 800e2ea:	9307      	str	r3, [sp, #28]
 800e2ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2f0:	931a      	str	r3, [sp, #104]	; 0x68
 800e2f2:	4654      	mov	r4, sl
 800e2f4:	2205      	movs	r2, #5
 800e2f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2fa:	4854      	ldr	r0, [pc, #336]	; (800e44c <_vfiprintf_r+0x220>)
 800e2fc:	f7ff ff2a 	bl	800e154 <memchr>
 800e300:	9a04      	ldr	r2, [sp, #16]
 800e302:	b9d8      	cbnz	r0, 800e33c <_vfiprintf_r+0x110>
 800e304:	06d1      	lsls	r1, r2, #27
 800e306:	bf44      	itt	mi
 800e308:	2320      	movmi	r3, #32
 800e30a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e30e:	0713      	lsls	r3, r2, #28
 800e310:	bf44      	itt	mi
 800e312:	232b      	movmi	r3, #43	; 0x2b
 800e314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e318:	f89a 3000 	ldrb.w	r3, [sl]
 800e31c:	2b2a      	cmp	r3, #42	; 0x2a
 800e31e:	d015      	beq.n	800e34c <_vfiprintf_r+0x120>
 800e320:	4654      	mov	r4, sl
 800e322:	2000      	movs	r0, #0
 800e324:	f04f 0c0a 	mov.w	ip, #10
 800e328:	9a07      	ldr	r2, [sp, #28]
 800e32a:	4621      	mov	r1, r4
 800e32c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e330:	3b30      	subs	r3, #48	; 0x30
 800e332:	2b09      	cmp	r3, #9
 800e334:	d94d      	bls.n	800e3d2 <_vfiprintf_r+0x1a6>
 800e336:	b1b0      	cbz	r0, 800e366 <_vfiprintf_r+0x13a>
 800e338:	9207      	str	r2, [sp, #28]
 800e33a:	e014      	b.n	800e366 <_vfiprintf_r+0x13a>
 800e33c:	eba0 0308 	sub.w	r3, r0, r8
 800e340:	fa09 f303 	lsl.w	r3, r9, r3
 800e344:	4313      	orrs	r3, r2
 800e346:	46a2      	mov	sl, r4
 800e348:	9304      	str	r3, [sp, #16]
 800e34a:	e7d2      	b.n	800e2f2 <_vfiprintf_r+0xc6>
 800e34c:	9b03      	ldr	r3, [sp, #12]
 800e34e:	1d19      	adds	r1, r3, #4
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	9103      	str	r1, [sp, #12]
 800e354:	2b00      	cmp	r3, #0
 800e356:	bfbb      	ittet	lt
 800e358:	425b      	neglt	r3, r3
 800e35a:	f042 0202 	orrlt.w	r2, r2, #2
 800e35e:	9307      	strge	r3, [sp, #28]
 800e360:	9307      	strlt	r3, [sp, #28]
 800e362:	bfb8      	it	lt
 800e364:	9204      	strlt	r2, [sp, #16]
 800e366:	7823      	ldrb	r3, [r4, #0]
 800e368:	2b2e      	cmp	r3, #46	; 0x2e
 800e36a:	d10c      	bne.n	800e386 <_vfiprintf_r+0x15a>
 800e36c:	7863      	ldrb	r3, [r4, #1]
 800e36e:	2b2a      	cmp	r3, #42	; 0x2a
 800e370:	d134      	bne.n	800e3dc <_vfiprintf_r+0x1b0>
 800e372:	9b03      	ldr	r3, [sp, #12]
 800e374:	3402      	adds	r4, #2
 800e376:	1d1a      	adds	r2, r3, #4
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	9203      	str	r2, [sp, #12]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfb8      	it	lt
 800e380:	f04f 33ff 	movlt.w	r3, #4294967295
 800e384:	9305      	str	r3, [sp, #20]
 800e386:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e450 <_vfiprintf_r+0x224>
 800e38a:	2203      	movs	r2, #3
 800e38c:	4650      	mov	r0, sl
 800e38e:	7821      	ldrb	r1, [r4, #0]
 800e390:	f7ff fee0 	bl	800e154 <memchr>
 800e394:	b138      	cbz	r0, 800e3a6 <_vfiprintf_r+0x17a>
 800e396:	2240      	movs	r2, #64	; 0x40
 800e398:	9b04      	ldr	r3, [sp, #16]
 800e39a:	eba0 000a 	sub.w	r0, r0, sl
 800e39e:	4082      	lsls	r2, r0
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	3401      	adds	r4, #1
 800e3a4:	9304      	str	r3, [sp, #16]
 800e3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3aa:	2206      	movs	r2, #6
 800e3ac:	4829      	ldr	r0, [pc, #164]	; (800e454 <_vfiprintf_r+0x228>)
 800e3ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3b2:	f7ff fecf 	bl	800e154 <memchr>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	d03f      	beq.n	800e43a <_vfiprintf_r+0x20e>
 800e3ba:	4b27      	ldr	r3, [pc, #156]	; (800e458 <_vfiprintf_r+0x22c>)
 800e3bc:	bb1b      	cbnz	r3, 800e406 <_vfiprintf_r+0x1da>
 800e3be:	9b03      	ldr	r3, [sp, #12]
 800e3c0:	3307      	adds	r3, #7
 800e3c2:	f023 0307 	bic.w	r3, r3, #7
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	9303      	str	r3, [sp, #12]
 800e3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3cc:	443b      	add	r3, r7
 800e3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d0:	e768      	b.n	800e2a4 <_vfiprintf_r+0x78>
 800e3d2:	460c      	mov	r4, r1
 800e3d4:	2001      	movs	r0, #1
 800e3d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3da:	e7a6      	b.n	800e32a <_vfiprintf_r+0xfe>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f04f 0c0a 	mov.w	ip, #10
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	3401      	adds	r4, #1
 800e3e6:	9305      	str	r3, [sp, #20]
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3ee:	3a30      	subs	r2, #48	; 0x30
 800e3f0:	2a09      	cmp	r2, #9
 800e3f2:	d903      	bls.n	800e3fc <_vfiprintf_r+0x1d0>
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d0c6      	beq.n	800e386 <_vfiprintf_r+0x15a>
 800e3f8:	9105      	str	r1, [sp, #20]
 800e3fa:	e7c4      	b.n	800e386 <_vfiprintf_r+0x15a>
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	2301      	movs	r3, #1
 800e400:	fb0c 2101 	mla	r1, ip, r1, r2
 800e404:	e7f0      	b.n	800e3e8 <_vfiprintf_r+0x1bc>
 800e406:	ab03      	add	r3, sp, #12
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	462a      	mov	r2, r5
 800e40c:	4630      	mov	r0, r6
 800e40e:	4b13      	ldr	r3, [pc, #76]	; (800e45c <_vfiprintf_r+0x230>)
 800e410:	a904      	add	r1, sp, #16
 800e412:	f3af 8000 	nop.w
 800e416:	4607      	mov	r7, r0
 800e418:	1c78      	adds	r0, r7, #1
 800e41a:	d1d6      	bne.n	800e3ca <_vfiprintf_r+0x19e>
 800e41c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e41e:	07d9      	lsls	r1, r3, #31
 800e420:	d405      	bmi.n	800e42e <_vfiprintf_r+0x202>
 800e422:	89ab      	ldrh	r3, [r5, #12]
 800e424:	059a      	lsls	r2, r3, #22
 800e426:	d402      	bmi.n	800e42e <_vfiprintf_r+0x202>
 800e428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e42a:	f7f3 ff7b 	bl	8002324 <__retarget_lock_release_recursive>
 800e42e:	89ab      	ldrh	r3, [r5, #12]
 800e430:	065b      	lsls	r3, r3, #25
 800e432:	f53f af1d 	bmi.w	800e270 <_vfiprintf_r+0x44>
 800e436:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e438:	e71c      	b.n	800e274 <_vfiprintf_r+0x48>
 800e43a:	ab03      	add	r3, sp, #12
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	462a      	mov	r2, r5
 800e440:	4630      	mov	r0, r6
 800e442:	4b06      	ldr	r3, [pc, #24]	; (800e45c <_vfiprintf_r+0x230>)
 800e444:	a904      	add	r1, sp, #16
 800e446:	f7ff fc8d 	bl	800dd64 <_printf_i>
 800e44a:	e7e4      	b.n	800e416 <_vfiprintf_r+0x1ea>
 800e44c:	0800eab2 	.word	0x0800eab2
 800e450:	0800eab8 	.word	0x0800eab8
 800e454:	0800eabc 	.word	0x0800eabc
 800e458:	00000000 	.word	0x00000000
 800e45c:	0800e207 	.word	0x0800e207

0800e460 <__swbuf_r>:
 800e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e462:	460e      	mov	r6, r1
 800e464:	4614      	mov	r4, r2
 800e466:	4605      	mov	r5, r0
 800e468:	b118      	cbz	r0, 800e472 <__swbuf_r+0x12>
 800e46a:	6a03      	ldr	r3, [r0, #32]
 800e46c:	b90b      	cbnz	r3, 800e472 <__swbuf_r+0x12>
 800e46e:	f7ff f843 	bl	800d4f8 <__sinit>
 800e472:	69a3      	ldr	r3, [r4, #24]
 800e474:	60a3      	str	r3, [r4, #8]
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	071a      	lsls	r2, r3, #28
 800e47a:	d525      	bpl.n	800e4c8 <__swbuf_r+0x68>
 800e47c:	6923      	ldr	r3, [r4, #16]
 800e47e:	b31b      	cbz	r3, 800e4c8 <__swbuf_r+0x68>
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	6922      	ldr	r2, [r4, #16]
 800e484:	b2f6      	uxtb	r6, r6
 800e486:	1a98      	subs	r0, r3, r2
 800e488:	6963      	ldr	r3, [r4, #20]
 800e48a:	4637      	mov	r7, r6
 800e48c:	4283      	cmp	r3, r0
 800e48e:	dc04      	bgt.n	800e49a <__swbuf_r+0x3a>
 800e490:	4621      	mov	r1, r4
 800e492:	4628      	mov	r0, r5
 800e494:	f7ff fe0a 	bl	800e0ac <_fflush_r>
 800e498:	b9e0      	cbnz	r0, 800e4d4 <__swbuf_r+0x74>
 800e49a:	68a3      	ldr	r3, [r4, #8]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	60a3      	str	r3, [r4, #8]
 800e4a0:	6823      	ldr	r3, [r4, #0]
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	6022      	str	r2, [r4, #0]
 800e4a6:	701e      	strb	r6, [r3, #0]
 800e4a8:	6962      	ldr	r2, [r4, #20]
 800e4aa:	1c43      	adds	r3, r0, #1
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d004      	beq.n	800e4ba <__swbuf_r+0x5a>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	07db      	lsls	r3, r3, #31
 800e4b4:	d506      	bpl.n	800e4c4 <__swbuf_r+0x64>
 800e4b6:	2e0a      	cmp	r6, #10
 800e4b8:	d104      	bne.n	800e4c4 <__swbuf_r+0x64>
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f7ff fdf5 	bl	800e0ac <_fflush_r>
 800e4c2:	b938      	cbnz	r0, 800e4d4 <__swbuf_r+0x74>
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4c8:	4621      	mov	r1, r4
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	f000 f806 	bl	800e4dc <__swsetup_r>
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d0d5      	beq.n	800e480 <__swbuf_r+0x20>
 800e4d4:	f04f 37ff 	mov.w	r7, #4294967295
 800e4d8:	e7f4      	b.n	800e4c4 <__swbuf_r+0x64>
	...

0800e4dc <__swsetup_r>:
 800e4dc:	b538      	push	{r3, r4, r5, lr}
 800e4de:	4b2a      	ldr	r3, [pc, #168]	; (800e588 <__swsetup_r+0xac>)
 800e4e0:	4605      	mov	r5, r0
 800e4e2:	6818      	ldr	r0, [r3, #0]
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	b118      	cbz	r0, 800e4f0 <__swsetup_r+0x14>
 800e4e8:	6a03      	ldr	r3, [r0, #32]
 800e4ea:	b90b      	cbnz	r3, 800e4f0 <__swsetup_r+0x14>
 800e4ec:	f7ff f804 	bl	800d4f8 <__sinit>
 800e4f0:	89a3      	ldrh	r3, [r4, #12]
 800e4f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4f6:	0718      	lsls	r0, r3, #28
 800e4f8:	d422      	bmi.n	800e540 <__swsetup_r+0x64>
 800e4fa:	06d9      	lsls	r1, r3, #27
 800e4fc:	d407      	bmi.n	800e50e <__swsetup_r+0x32>
 800e4fe:	2309      	movs	r3, #9
 800e500:	602b      	str	r3, [r5, #0]
 800e502:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e506:	f04f 30ff 	mov.w	r0, #4294967295
 800e50a:	81a3      	strh	r3, [r4, #12]
 800e50c:	e034      	b.n	800e578 <__swsetup_r+0x9c>
 800e50e:	0758      	lsls	r0, r3, #29
 800e510:	d512      	bpl.n	800e538 <__swsetup_r+0x5c>
 800e512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e514:	b141      	cbz	r1, 800e528 <__swsetup_r+0x4c>
 800e516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e51a:	4299      	cmp	r1, r3
 800e51c:	d002      	beq.n	800e524 <__swsetup_r+0x48>
 800e51e:	4628      	mov	r0, r5
 800e520:	f7ff fa0e 	bl	800d940 <_free_r>
 800e524:	2300      	movs	r3, #0
 800e526:	6363      	str	r3, [r4, #52]	; 0x34
 800e528:	89a3      	ldrh	r3, [r4, #12]
 800e52a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e52e:	81a3      	strh	r3, [r4, #12]
 800e530:	2300      	movs	r3, #0
 800e532:	6063      	str	r3, [r4, #4]
 800e534:	6923      	ldr	r3, [r4, #16]
 800e536:	6023      	str	r3, [r4, #0]
 800e538:	89a3      	ldrh	r3, [r4, #12]
 800e53a:	f043 0308 	orr.w	r3, r3, #8
 800e53e:	81a3      	strh	r3, [r4, #12]
 800e540:	6923      	ldr	r3, [r4, #16]
 800e542:	b94b      	cbnz	r3, 800e558 <__swsetup_r+0x7c>
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e54a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e54e:	d003      	beq.n	800e558 <__swsetup_r+0x7c>
 800e550:	4621      	mov	r1, r4
 800e552:	4628      	mov	r0, r5
 800e554:	f000 f88b 	bl	800e66e <__smakebuf_r>
 800e558:	89a0      	ldrh	r0, [r4, #12]
 800e55a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e55e:	f010 0301 	ands.w	r3, r0, #1
 800e562:	d00a      	beq.n	800e57a <__swsetup_r+0x9e>
 800e564:	2300      	movs	r3, #0
 800e566:	60a3      	str	r3, [r4, #8]
 800e568:	6963      	ldr	r3, [r4, #20]
 800e56a:	425b      	negs	r3, r3
 800e56c:	61a3      	str	r3, [r4, #24]
 800e56e:	6923      	ldr	r3, [r4, #16]
 800e570:	b943      	cbnz	r3, 800e584 <__swsetup_r+0xa8>
 800e572:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e576:	d1c4      	bne.n	800e502 <__swsetup_r+0x26>
 800e578:	bd38      	pop	{r3, r4, r5, pc}
 800e57a:	0781      	lsls	r1, r0, #30
 800e57c:	bf58      	it	pl
 800e57e:	6963      	ldrpl	r3, [r4, #20]
 800e580:	60a3      	str	r3, [r4, #8]
 800e582:	e7f4      	b.n	800e56e <__swsetup_r+0x92>
 800e584:	2000      	movs	r0, #0
 800e586:	e7f7      	b.n	800e578 <__swsetup_r+0x9c>
 800e588:	20000088 	.word	0x20000088

0800e58c <_raise_r>:
 800e58c:	291f      	cmp	r1, #31
 800e58e:	b538      	push	{r3, r4, r5, lr}
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	d904      	bls.n	800e5a0 <_raise_r+0x14>
 800e596:	2316      	movs	r3, #22
 800e598:	6003      	str	r3, [r0, #0]
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e5a2:	b112      	cbz	r2, 800e5aa <_raise_r+0x1e>
 800e5a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5a8:	b94b      	cbnz	r3, 800e5be <_raise_r+0x32>
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 f830 	bl	800e610 <_getpid_r>
 800e5b0:	462a      	mov	r2, r5
 800e5b2:	4601      	mov	r1, r0
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ba:	f000 b817 	b.w	800e5ec <_kill_r>
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d00a      	beq.n	800e5d8 <_raise_r+0x4c>
 800e5c2:	1c59      	adds	r1, r3, #1
 800e5c4:	d103      	bne.n	800e5ce <_raise_r+0x42>
 800e5c6:	2316      	movs	r3, #22
 800e5c8:	6003      	str	r3, [r0, #0]
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	e7e7      	b.n	800e59e <_raise_r+0x12>
 800e5ce:	2400      	movs	r4, #0
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e5d6:	4798      	blx	r3
 800e5d8:	2000      	movs	r0, #0
 800e5da:	e7e0      	b.n	800e59e <_raise_r+0x12>

0800e5dc <raise>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	; (800e5e8 <raise+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f7ff bfd3 	b.w	800e58c <_raise_r>
 800e5e6:	bf00      	nop
 800e5e8:	20000088 	.word	0x20000088

0800e5ec <_kill_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	4d06      	ldr	r5, [pc, #24]	; (800e60c <_kill_r+0x20>)
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f7f3 fcfa 	bl	8001ff2 <_kill>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d102      	bne.n	800e608 <_kill_r+0x1c>
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	b103      	cbz	r3, 800e608 <_kill_r+0x1c>
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	200032f4 	.word	0x200032f4

0800e610 <_getpid_r>:
 800e610:	f7f3 bce8 	b.w	8001fe4 <_getpid>

0800e614 <_malloc_usable_size_r>:
 800e614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e618:	1f18      	subs	r0, r3, #4
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	bfbc      	itt	lt
 800e61e:	580b      	ldrlt	r3, [r1, r0]
 800e620:	18c0      	addlt	r0, r0, r3
 800e622:	4770      	bx	lr

0800e624 <__swhatbuf_r>:
 800e624:	b570      	push	{r4, r5, r6, lr}
 800e626:	460c      	mov	r4, r1
 800e628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e62c:	4615      	mov	r5, r2
 800e62e:	2900      	cmp	r1, #0
 800e630:	461e      	mov	r6, r3
 800e632:	b096      	sub	sp, #88	; 0x58
 800e634:	da0c      	bge.n	800e650 <__swhatbuf_r+0x2c>
 800e636:	89a3      	ldrh	r3, [r4, #12]
 800e638:	2100      	movs	r1, #0
 800e63a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e63e:	bf0c      	ite	eq
 800e640:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e644:	2340      	movne	r3, #64	; 0x40
 800e646:	2000      	movs	r0, #0
 800e648:	6031      	str	r1, [r6, #0]
 800e64a:	602b      	str	r3, [r5, #0]
 800e64c:	b016      	add	sp, #88	; 0x58
 800e64e:	bd70      	pop	{r4, r5, r6, pc}
 800e650:	466a      	mov	r2, sp
 800e652:	f000 f849 	bl	800e6e8 <_fstat_r>
 800e656:	2800      	cmp	r0, #0
 800e658:	dbed      	blt.n	800e636 <__swhatbuf_r+0x12>
 800e65a:	9901      	ldr	r1, [sp, #4]
 800e65c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e660:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e664:	4259      	negs	r1, r3
 800e666:	4159      	adcs	r1, r3
 800e668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e66c:	e7eb      	b.n	800e646 <__swhatbuf_r+0x22>

0800e66e <__smakebuf_r>:
 800e66e:	898b      	ldrh	r3, [r1, #12]
 800e670:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e672:	079d      	lsls	r5, r3, #30
 800e674:	4606      	mov	r6, r0
 800e676:	460c      	mov	r4, r1
 800e678:	d507      	bpl.n	800e68a <__smakebuf_r+0x1c>
 800e67a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e67e:	6023      	str	r3, [r4, #0]
 800e680:	6123      	str	r3, [r4, #16]
 800e682:	2301      	movs	r3, #1
 800e684:	6163      	str	r3, [r4, #20]
 800e686:	b002      	add	sp, #8
 800e688:	bd70      	pop	{r4, r5, r6, pc}
 800e68a:	466a      	mov	r2, sp
 800e68c:	ab01      	add	r3, sp, #4
 800e68e:	f7ff ffc9 	bl	800e624 <__swhatbuf_r>
 800e692:	9900      	ldr	r1, [sp, #0]
 800e694:	4605      	mov	r5, r0
 800e696:	4630      	mov	r0, r6
 800e698:	f7fe fd8e 	bl	800d1b8 <_malloc_r>
 800e69c:	b948      	cbnz	r0, 800e6b2 <__smakebuf_r+0x44>
 800e69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6a2:	059a      	lsls	r2, r3, #22
 800e6a4:	d4ef      	bmi.n	800e686 <__smakebuf_r+0x18>
 800e6a6:	f023 0303 	bic.w	r3, r3, #3
 800e6aa:	f043 0302 	orr.w	r3, r3, #2
 800e6ae:	81a3      	strh	r3, [r4, #12]
 800e6b0:	e7e3      	b.n	800e67a <__smakebuf_r+0xc>
 800e6b2:	89a3      	ldrh	r3, [r4, #12]
 800e6b4:	6020      	str	r0, [r4, #0]
 800e6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ba:	81a3      	strh	r3, [r4, #12]
 800e6bc:	9b00      	ldr	r3, [sp, #0]
 800e6be:	6120      	str	r0, [r4, #16]
 800e6c0:	6163      	str	r3, [r4, #20]
 800e6c2:	9b01      	ldr	r3, [sp, #4]
 800e6c4:	b15b      	cbz	r3, 800e6de <__smakebuf_r+0x70>
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6cc:	f000 f81e 	bl	800e70c <_isatty_r>
 800e6d0:	b128      	cbz	r0, 800e6de <__smakebuf_r+0x70>
 800e6d2:	89a3      	ldrh	r3, [r4, #12]
 800e6d4:	f023 0303 	bic.w	r3, r3, #3
 800e6d8:	f043 0301 	orr.w	r3, r3, #1
 800e6dc:	81a3      	strh	r3, [r4, #12]
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	431d      	orrs	r5, r3
 800e6e2:	81a5      	strh	r5, [r4, #12]
 800e6e4:	e7cf      	b.n	800e686 <__smakebuf_r+0x18>
	...

0800e6e8 <_fstat_r>:
 800e6e8:	b538      	push	{r3, r4, r5, lr}
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	4d06      	ldr	r5, [pc, #24]	; (800e708 <_fstat_r+0x20>)
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	4608      	mov	r0, r1
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	602b      	str	r3, [r5, #0]
 800e6f6:	f7f3 fcda 	bl	80020ae <_fstat>
 800e6fa:	1c43      	adds	r3, r0, #1
 800e6fc:	d102      	bne.n	800e704 <_fstat_r+0x1c>
 800e6fe:	682b      	ldr	r3, [r5, #0]
 800e700:	b103      	cbz	r3, 800e704 <_fstat_r+0x1c>
 800e702:	6023      	str	r3, [r4, #0]
 800e704:	bd38      	pop	{r3, r4, r5, pc}
 800e706:	bf00      	nop
 800e708:	200032f4 	.word	0x200032f4

0800e70c <_isatty_r>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	2300      	movs	r3, #0
 800e710:	4d05      	ldr	r5, [pc, #20]	; (800e728 <_isatty_r+0x1c>)
 800e712:	4604      	mov	r4, r0
 800e714:	4608      	mov	r0, r1
 800e716:	602b      	str	r3, [r5, #0]
 800e718:	f7f3 fcd8 	bl	80020cc <_isatty>
 800e71c:	1c43      	adds	r3, r0, #1
 800e71e:	d102      	bne.n	800e726 <_isatty_r+0x1a>
 800e720:	682b      	ldr	r3, [r5, #0]
 800e722:	b103      	cbz	r3, 800e726 <_isatty_r+0x1a>
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	200032f4 	.word	0x200032f4

0800e72c <_init>:
 800e72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72e:	bf00      	nop
 800e730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e732:	bc08      	pop	{r3}
 800e734:	469e      	mov	lr, r3
 800e736:	4770      	bx	lr

0800e738 <_fini>:
 800e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73a:	bf00      	nop
 800e73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e73e:	bc08      	pop	{r3}
 800e740:	469e      	mov	lr, r3
 800e742:	4770      	bx	lr
